data Id : (a : Type) -> (x : a) -> (y : a) -> Type where
  Refl : (a : Type) -> (x : a) -> Id a x x.

subst : (a : Type) -> (p : a -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (p x) -> p y.
  (a : Type) (p : a -> Type) (x : a)
    subst a p x [x] [Refl a x] = \z:p x. z.
