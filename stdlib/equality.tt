data Id : forall a -> (x : a) -> (y : a) -> Type where
  Refl : (a : Type) -> (x : a) -> Id a x x

subst :
  forall a (P : a -> Type) (x : a) (y : a)
  -> (eq : Id a x y) -> P x -> P y
forall a P x.
  subst a P x [_] ({Refl} [_] [_]) = \z. z
