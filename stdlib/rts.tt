-- vim: ft=idris

postulate Int : Type.
foreign intS : (x :R: Int) -> Int = "(lambda (x) (+ x 1))".
foreign intZ : Int = "0".

postulate Unspec : Type.

printSchemeRepr \ (a : Type) (x : a) : IO Unspec =
    let
        -- we assert usage on the foreign function
        foreign nativePrint : (a :E: Type) -> (x :R: a) -> Unspec = "print"
    in
        ioWrapImpure Unspec (\w:RealWorld. nativePrint a x).

natToInt : Nat -> Int.
  natToInt Z = intZ,
  (n : Nat)
    natToInt (S n) = intS (natToInt n).

foreign intToNat : (x :R: Int) -> Nat = "(lambda (x) (number->peano 'Z 'S x))".

printNat \(x : Nat) : IO Unspec
    = printSchemeRepr Int (natToInt x).
