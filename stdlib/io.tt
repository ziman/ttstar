-- vim: ft=ttstar

postulate RealWorld : Type.

IO \: Type -> Type = State RealWorld.

ioReturn \(a : Type) (x : a) : IO a
    = stReturn RealWorld a x.

ioBind \(a : Type) (b : Type) (x : IO a) (y : a -> IO b) : IO b
    = stBind RealWorld a b x y.

-- The purpose of `RealWorld` is to delay the execution of `impureF` until needed.
-- It's marked as relevant so that erasure does not remove it.
ioWrapImpure \(a : Type) (impureF : (w :R: RealWorld) -> a) : IO a
    = MkSt RealWorld a (\w:RealWorld. MkPair RealWorld a w (impureF w)).

unsafePerformIO \(a : Type) (x : IO a) : a
    = let
        postulate TheWorld : RealWorld
      in
        execState RealWorld a x TheWorld.
