data Nat : Type where
  Z : Nat
  S : (x :R: Nat) -> Nat

plus : Nat -> Nat -> Nat
forall n.
  plus Z n = n
forall m n.
  plus (S m) n = S (plus m n)

times : Nat -> Nat -> Nat
forall n.
  times Z n = Z
forall m n.
  times (S m) n = plus n (times m n)

data Bool : Type where
  True : Bool
  False : Bool

not : Bool -> Bool
not True = False
not False = True

data Unit : Type where
  MkUnit : Unit

data Pair : Type -> Type -> Type where
  MkPair : (a : Type) -> (b : Type) -> a -> b -> Pair a b

fst : (a : Type) -> (b : Type) -> (Pair a b) -> a
forall a b x y.
  fst a b ({MkPair} [_] [_] x y) = x

snd : (a : Type) -> (b : Type) -> (Pair a b) -> b
forall a b x y.
  snd a b ({MkPair} [_] [_] x y) = y

data Either : Type -> Type -> Type where
  Left : (a : Type) -> (b : Type) -> a -> Either a b
  Right : (a : Type) -> (b : Type) -> b -> Either a b

id \(a : Type) (x : a) : a = x

data Fin : Nat -> Type where
  FZ : (n : Nat) -> Fin (S n)
  FS : (n : Nat) -> (Fin n) -> Fin (S n)

data Vect : Nat -> Type -> Type where
  VN : (a : Type) -> Vect Z a
  VC : (n : Nat) -> (a : Type) -> (x : a) -> (xs : Vect n a) -> Vect (S n) a

data List : Type -> Type where
  Nil : (a : Type) -> List a
  Cons : (a : Type) -> (x : a) -> (xs : List a) -> List a
