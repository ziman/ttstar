-- vim: ft=agda

### Desugared ###

postulate Bool : Type

postulate T : Bool

postulate F : Bool

postulate TwoBools : Type

postulate TB : (x :R: Bool) -> (y :R: Bool) -> TwoBools

id : (x : Bool) -> Bool = (\x : Bool. x)

constT : (_ : Bool) -> Bool = (\_ : Bool. T)

fty : (x : Bool) -> Type = \(x : Bool).
  case x of
    T
      => (_ : Bool) -> Bool
    F
      => (_ : Bool) -> Bool

f : (x : Bool) -> fty x = \(x : Bool).
  case x of
    T
      => id
    F
      => constT

main :R: TwoBools = TB (f T F) (f F F)

### Metaified ###

postulate Bool :1: Type

postulate T :2: Bool

postulate F :3: Bool

postulate TwoBools :4: Type

postulate TB :5: (x :R: Bool) -> (y :R: Bool) -> TwoBools

id :6: (x :7: Bool) -> Bool = (\x :8: Bool. x)

constT :9: (_ :10: Bool) -> Bool = (\_ :11: Bool. T)

fty :12: (x :13: Bool) -> Type = \(x :14: Bool).
  case -15- x of
    T
      => (_ :16: Bool) -> Bool
    F
      => (_ :17: Bool) -> Bool

f :18: (x :19: Bool) -> fty -20- x = \(x :21: Bool).
  case -22- x of
    T
      => id
    F
      => constT

main :R: TwoBools = TB -24- (f -26- T -25- F) -23- (f -28- F -27- F)

### Inferred definitions ###

postulate Bool :1: Type {- constraints apply -}
  [1] -> [1]

postulate F :3: Bool {- constraints apply -}
  [1,3] -> [1]
  [3] -> [3]

postulate T :2: Bool {- constraints apply -}
  [1,2] -> [1]
  [2] -> [2]

postulate TB :5: (x :R: Bool) -> (y :R: Bool) -> TwoBools {- constraints apply -}
  [4,5] -> [4]
  [5] -> [5]

postulate TwoBools :4: Type {- constraints apply -}
  [4] -> [4]

postulate Type :R: Type

constT :9: (_ :10: Bool) -> Bool = (\_ :11: Bool. T) {- constraints apply -}
  [1,2,9] -> [1]
  [1,9] -> [1]
  [2,9] -> [2]
  [9] -> [9]
  [9,10] -> [11]
  [9,11] -> [10]

f :18: (x :19: Bool) -> fty -20- x = \(x :21: Bool).
  case -22- x of
    T
      => id
    F
      => constT {- constraints apply -}
  [1,2,9,18] -> [1]
  [1,6,8,18] -> [1]
  [1,6,18] -> [1]
  [1,9,18] -> [1]
  [1,12,18] -> [1,2,3,13]
  [1,13,18,19] -> [1]
  [1,18] -> [1,2,3,19]
  [2,9,18] -> [2]
  [2,12,18] -> [2,13]
  [2,18] -> [2,19]
  [3,12,18] -> [3,13]
  [3,18] -> [3,19]
  [6,7,18] -> [8]
  [6,8,18] -> [7,8]
  [6,18] -> [6]
  [7,18] -> [16]
  [9,10,18] -> [11]
  [9,11,18] -> [10]
  [9,18] -> [9]
  [10,18] -> [17]
  [12,13,18] -> [14]
  [12,14,18] -> [13]
  [12,15,18] -> [14]
  [12,18] -> [12,15]
  [13,18] -> [20]
  [13,18,19] -> [19]
  [16,18] -> [7]
  [17,18] -> [10]
  [18] -> [18,22]
  [18,19] -> [21]
  [18,20] -> [13]
  [18,21] -> [19]
  [18,22] -> [21]

fty :12: (x :13: Bool) -> Type = \(x :14: Bool).
  case -15- x of
    T
      => (_ :16: Bool) -> Bool
    F
      => (_ :17: Bool) -> Bool {- constraints apply -}
  [1,12] -> [1,2,3,13]
  [2,12] -> [2,13]
  [3,12] -> [3,13]
  [12] -> [12,15]
  [12,13] -> [14]
  [12,14] -> [13]
  [12,15] -> [14]

id :6: (x :7: Bool) -> Bool = (\x :8: Bool. x) {- constraints apply -}
  [1,6] -> [1]
  [1,6,8] -> [1]
  [6] -> [6]
  [6,7] -> [8]
  [6,8] -> [7,8]

main :R: TwoBools = TB -24- (f -26- T -25- F) -23- (f -28- F -27- F) {- constraints apply -}
  [] -> [23,24,R]
  [1,2,9,18] -> [1]
  [1,2,19] -> [1]
  [1,3,16] -> [1]
  [1,3,17] -> [1]
  [1,3,19] -> [1]
  [1,6,8,18] -> [1]
  [1,6,18] -> [1]
  [1,9,18] -> [1]
  [1,12,18] -> [1,2,3,13]
  [1,13,18,19] -> [1]
  [1,18] -> [1,2,3,19]
  [2,9,18] -> [2]
  [2,12,18] -> [2,13]
  [2,18] -> [2,19]
  [2,19] -> [2]
  [3,12,18] -> [3,13]
  [3,16] -> [3]
  [3,17] -> [3]
  [3,18] -> [3,19]
  [3,19] -> [3]
  [4] -> [4]
  [4,5] -> [4]
  [5] -> [5]
  [6,7,18] -> [8]
  [6,8,18] -> [7,8]
  [6,18] -> [6]
  [7,18] -> [16]
  [9,10,18] -> [11]
  [9,11,18] -> [10]
  [9,18] -> [9]
  [10,18] -> [17]
  [12,13,18] -> [14]
  [12,14,18] -> [13]
  [12,15,18] -> [14]
  [12,18] -> [12,15]
  [13,18] -> [20]
  [13,18,19] -> [19]
  [16] -> [25]
  [16,18] -> [7]
  [17] -> [27]
  [17,18] -> [10]
  [18] -> [18,22]
  [18,19] -> [21]
  [18,20] -> [13]
  [18,21] -> [19]
  [18,22] -> [21]
  [19] -> [26,28]
  [25] -> [16]
  [26] -> [19]
  [27] -> [17]
  [28] -> [19]


### Constraints ###

[] -> [23,24,R]
[1,2,9,18] -> [1]
[1,2,19] -> [1]
[1,3,16] -> [1]
[1,3,17] -> [1]
[1,3,19] -> [1]
[1,6,8,18] -> [1]
[1,6,18] -> [1]
[1,9,18] -> [1]
[1,12,18] -> [1,2,3,13]
[1,13,18,19] -> [1]
[1,18] -> [1,2,3,19]
[2,9,18] -> [2]
[2,12,18] -> [2,13]
[2,18] -> [2,19]
[2,19] -> [2]
[3,12,18] -> [3,13]
[3,16] -> [3]
[3,17] -> [3]
[3,18] -> [3,19]
[3,19] -> [3]
[4] -> [4]
[4,5] -> [4]
[5] -> [5]
[6,7,18] -> [8]
[6,8,18] -> [7,8]
[6,18] -> [6]
[7,18] -> [16]
[9,10,18] -> [11]
[9,11,18] -> [10]
[9,18] -> [9]
[10,18] -> [17]
[12,13,18] -> [14]
[12,14,18] -> [13]
[12,15,18] -> [14]
[12,18] -> [12,15]
[13,18] -> [20]
[13,18,19] -> [19]
[16] -> [25]
[16,18] -> [7]
[17] -> [27]
[17,18] -> [10]
[18] -> [18,22]
[18,19] -> [21]
[18,20] -> [13]
[18,21] -> [19]
[18,22] -> [21]
[19] -> [26,28]
[25] -> [16]
[26] -> [19]
[27] -> [17]
[28] -> [19]

### Solution ###

[23,24,R]

### Annotated ###

postulate Bool :E: Type

postulate T :E: Bool

postulate F :E: Bool

postulate TwoBools :E: Type

postulate TB :E: (x :R: Bool) -> (y :R: Bool) -> TwoBools

id :E: (x :E: Bool) -> Bool = (\x :E: Bool. x)

constT :E: (_ :E: Bool) -> Bool = (\_ :E: Bool. T)

fty :E: (x :E: Bool) -> Type = \(x :E: Bool).
  case -E- x of
    T
      => (_ :E: Bool) -> Bool
    F
      => (_ :E: Bool) -> Bool

f :E: (x :E: Bool) -> fty -E- x = \(x :E: Bool).
  case -E- x of
    T
      => id
    F
      => constT

main :R: TwoBools = TB -R- (f -E- T -E- F) -R- (f -E- F -E- F)

### Specialised ###

postulate Bool :E: Type

postulate T :E: Bool

postulate F :E: Bool

postulate TwoBools :E: Type

postulate TB :E: (x :R: Bool) -> (y :R: Bool) -> TwoBools

id :E: (x :E: Bool) -> Bool = (\x :E: Bool. x)

constT :E: (_ :E: Bool) -> Bool = (\_ :E: Bool. T)

fty :E: (x :E: Bool) -> Type = \(x :E: Bool).
  case -E- x of
    T
      => (_ :E: Bool) -> Bool
    F
      => (_ :E: Bool) -> Bool

f :E: (x :E: Bool) -> fty -E- x = \(x :E: Bool).
  case -E- x of
    T
      => id
    F
      => constT

main :R: TwoBools = TB -R- (f -E- T -E- F) -R- (f -E- F -E- F)

### Final annotation ###

postulate Bool :E: Type

postulate T :E: Bool

postulate F :E: Bool

postulate TwoBools :E: Type

postulate TB :E: (x :R: Bool) -> (y :R: Bool) -> TwoBools

id :E: (x :E: Bool) -> Bool = (\x :E: Bool. x)

constT :E: (_ :E: Bool) -> Bool = (\_ :E: Bool. T)

fty :E: (x :E: Bool) -> Type = \(x :E: Bool).
  case -E- x of
    T
      => (_ :E: Bool) -> Bool
    F
      => (_ :E: Bool) -> Bool

f :E: (x :E: Bool) -> fty -E- x = \(x :E: Bool).
  case -E- x of
    T
      => id
    F
      => constT

main :R: TwoBools = TB -R- (f -E- T -E- F) -R- (f -E- F -E- F)

### Verification ###

Verification successful.

### Pruned ###

main = TB f f

### Normal forms ###

unerased:
  TB F T
erased:
