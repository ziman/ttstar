-- vim: ft=idris

### Desugared ###

  let
    postulate Bool : Type
    postulate T : Bool
    postulate F : Bool
    postulate TwoBools : Type
    postulate TB : (x :R: Bool) -> (y :R: Bool) -> TwoBools
    id : (x : Bool) -> Bool = (\x : Bool. x)
    constT : (x : Bool) -> Bool = (\x : Bool. T)
    fty : (x : Bool) -> Type = \(x : Bool).
      case x of
        T =>
          (_x0 : Bool) -> Bool
        F =>
          (_x1 : Bool) -> Bool
    f : (x : Bool) -> fty x = \(x : Bool).
      case x of
        T =>
          id
        F =>
          constT
    main : TwoBools = TB (f T F) (f F F)
  in main

### Metaified ###

  let
    postulate Bool :1: Type
    postulate T :2: Bool
    postulate F :3: Bool
    postulate TwoBools :4: Type
    postulate TB :5: (x :R: Bool) -> (y :R: Bool) -> TwoBools
    id :6: (x :7: Bool) -> Bool = (\x :8: Bool. x)
    constT :9: (x :10: Bool) -> Bool = (\x :11: Bool. T)
    fty :12: (x :13: Bool) -> Type = \(x :14: Bool).
      case -15- x of
        T/16 =>
          (_x0 :17: Bool) -> Bool
        F/18 =>
          (_x1 :19: Bool) -> Bool
    f :20: (x :21: Bool) -> fty -22- x = \(x :23: Bool).
      case -24- x of
        T/25 =>
          id
        F/26 =>
          constT
    main :27: TwoBools = TB -29- (f -31- T -30- F) -28- (f -33- F -32- F)
  in main

### Constraints ###

[] -> [2,3,5,6,7,8,9,17,20,21,23,24,25,26,28,29,30,31,33,R]
[10] -> [11,19]
[11] -> [10]
[19] -> [10,32]
[32] -> [19]
[R] -> [27]

### Solution ###

[2,3,5,6,7,8,9,17,20,21,23,24,25,26,27,28,29,30,31,33,R]

### Annotated ###

  let
    postulate Bool :E: Type
    postulate T :R: Bool
    postulate F :R: Bool
    postulate TwoBools :E: Type
    postulate TB :R: (x :R: Bool) -> (y :R: Bool) -> TwoBools
    id :R: (x :R: Bool) -> Bool = (\x :R: Bool. x)
    constT :R: (x :E: Bool) -> Bool = (\x :E: Bool. T)
    fty :E: (x :E: Bool) -> Type = \(x :E: Bool).
      case -E- x of
        T/E =>
          (_x0 :R: Bool) -> Bool
        F/E =>
          (_x1 :E: Bool) -> Bool
    f :R: (x :R: Bool) -> fty -E- x = \(x :R: Bool).
      case -R- x of
        T/R =>
          id
        F/R =>
          constT
    main :R: TwoBools = TB -R- (f -R- T -R- F) -R- (f -R- F -E- F)
  in main

### Specialised ###

  let
    postulate Bool :E: Type
    postulate T :R: Bool
    postulate F :R: Bool
    postulate TwoBools :E: Type
    postulate TB :R: (x :R: Bool) -> (y :R: Bool) -> TwoBools
    id :R: (x :R: Bool) -> Bool = (\x :R: Bool. x)
    constT :R: (x :E: Bool) -> Bool = (\x :E: Bool. T)
    fty :E: (x :E: Bool) -> Type = \(x :E: Bool).
      case -E- x of
        T/E =>
          (_x0 :R: Bool) -> Bool
        F/E =>
          (_x1 :E: Bool) -> Bool
    f :R: (x :R: Bool) -> fty -E- x = \(x :R: Bool).
      case -R- x of
        T/R =>
          id
        F/R =>
          constT
    main :R: TwoBools = TB -R- (f -R- T -R- F) -R- (f -R- F -E- F)
  in main

### Final annotation ###

  let
    postulate Bool :E: Type
    postulate T :R: Bool
    postulate F :R: Bool
    postulate TwoBools :E: Type
    postulate TB :R: (x :R: Bool) -> (y :R: Bool) -> TwoBools
    id :R: (x :R: Bool) -> Bool = (\x :R: Bool. x)
    constT :R: (x :E: Bool) -> Bool = (\x :E: Bool. T)
    fty :E: (x :E: Bool) -> Type = \(x :E: Bool).
      case -E- x of
        T/E =>
          (_x0 :R: Bool) -> Bool
        F/E =>
          (_x1 :E: Bool) -> Bool
    f :R: (x :R: Bool) -> fty -E- x = \(x :R: Bool).
      case -R- x of
        T/R =>
          id
        F/R =>
          constT
    main :R: TwoBools = TB -R- (f -R- T -R- F) -R- (f -R- F -E- F)
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    postulate T : Bool
    postulate F : Bool
    postulate TB : (x) -> (y) -> TwoBools
    id = (\x. x)
    constT = T
    f = \x.
      case x of
        T =>
          id
        F =>
          constT
    main = TB (f T F) (f F)
  in main

### Normal forms ###

unerased:
  
  let
    postulate T : Bool
    postulate F : Bool
    postulate TB : (x :R: Bool) -> (y :R: Bool) -> TwoBools
  in TB F T

erased:
  
  let
    postulate T : Bool
    postulate F : Bool
    postulate TB : (x) -> (y) -> TwoBools
  in TB F T

