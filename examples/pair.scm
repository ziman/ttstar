(require-extension matchable)
(define Type '(Type))
(print
  (letrec* (
    (T `(T))
    (F `(F))
    (P (lambda (x)
      (lambda (y)
        `(P ,x ,y))))
    (fst (lambda (_e0)
      (match (list _e0)
        [(('P l _))
          l])))
    (snd (lambda (_e0)
      (match (list _e0)
        [(('P _ r))
          r])))
    (and (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          [(('T) y)
            y]
          [(('F) _)
            F]))))
    (main ((and (fst ((P T) F))) (snd ((P F) T))))
  )
    main))
