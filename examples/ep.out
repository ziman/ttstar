-- vim: ft=agda

### Desugared ###

postulate T : Type

postulate A : T

postulate B : T

postulate Op : (x :ᴿ T) -> (y :ᴿ T) -> T

id : (y : T) -> T = (\y : T. y)

constA : (_ : T) -> T = (\_ : T. A)

apply : (f : (_ : T) -> T) -> (x : T) -> T = (\f : (_ : T) -> T. (\x : T. f x))

test1 : T = (apply : (_ : (_ : T) -> T) -> (_ : T) -> T) id B

test2 : T = (apply : (_ : (_ : T) -> T) -> (_ : T) -> T) constA B

main :ᴿ T = Op test1 test2

### Metaified ###

postulate T :¹ Type

postulate A :² T

postulate B :³ T

postulate Op :⁴ (x :ᴿ T) -> (y :ᴿ T) -> T

id :⁵ (y :⁶ T) -> T = (\y :⁷ T. y)

constA :⁸ (_ :⁹ T) -> T = (\_ :¹⁰ T. A)

apply :¹¹ (f :¹² (_ :¹³ T) -> T) -> (x :¹⁴ T) -> T = (\f :¹⁵ (_ :¹⁶ T) -> T. (\x :¹⁷ T. f ¹⁸ x))

test1 :¹⁹ T = (apply : (_ :²² (_ :²³ T) -> T) -> (_ :²⁴ T) -> T) ²¹ id ²⁰ B

test2 :²⁵ T = (apply : (_ :²⁸ (_ :²⁹ T) -> T) -> (_ :³⁰ T) -> T) ²⁷ constA ²⁶ B

main :ᴿ T = Op ³² test1 ³¹ test2

### Inferred definitions ###

postulate A :² T

postulate B :³ T

postulate Op :⁴ (x :ᴿ T) -> (y :ᴿ T) -> T

postulate T :¹ Type

postulate Type :ᴿ Type

apply :¹¹ (f :¹² (_ :¹³ T) -> T) -> (x :¹⁴ T) -> T = (\f :¹⁵ (_ :¹⁶ T) -> T. (\x :¹⁷ T. f ¹⁸ x))
  [11] -> [15]
  [11,12] -> [15]
  [11,13] -> [16]
  [11,14] -> [17]
  [11,15] -> [12]
  [11,16] -> [13,17,18]
  [11,17] -> [14]
  [11,18] -> [16]

constA :⁸ (_ :⁹ T) -> T = (\_ :¹⁰ T. A)
  [8] -> [2]
  [8,9] -> [10]
  [8,10] -> [9]

id :⁵ (y :⁶ T) -> T = (\y :⁷ T. y)
  [5] -> [7]
  [5,6] -> [7]
  [5,7] -> [6]

main :ᴿ T = Op ³² test1 ³¹ test2
  [] -> [4,19,25,31,32,R]

test1 :¹⁹ T = (apply : (_ :²² (_ :²³ T) -> T) -> (_ :²⁴ T) -> T) ²¹ id ²⁰ B
  [6,19] -> [35]
  [19] -> [33]
  [19,20] -> [36]
  [19,21] -> [34]
  [19,22] -> [34]
  [19,23] -> [35]
  [19,24] -> [36]
  [19,33] -> [37]
  [19,33,34] -> [37]
  [19,33,35] -> [38]
  [19,33,36] -> [39]
  [19,33,37] -> [34]
  [19,33,38] -> [35,39,40]
  [19,33,39] -> [36]
  [19,33,40] -> [38]
  [19,34] -> [5,21,22]
  [19,35] -> [6,23]
  [19,36] -> [3,20,24]

test2 :²⁵ T = (apply : (_ :²⁸ (_ :²⁹ T) -> T) -> (_ :³⁰ T) -> T) ²⁷ constA ²⁶ B
  [9,25] -> [43]
  [25] -> [41]
  [25,26] -> [44]
  [25,27] -> [42]
  [25,28] -> [42]
  [25,29] -> [43]
  [25,30] -> [44]
  [25,41] -> [45]
  [25,41,42] -> [45]
  [25,41,43] -> [46]
  [25,41,44] -> [47]
  [25,41,45] -> [42]
  [25,41,46] -> [43,47,48]
  [25,41,47] -> [44]
  [25,41,48] -> [46]
  [25,42] -> [8,27,28]
  [25,43] -> [9,29]
  [25,44] -> [3,26,30]


### Constraints ###

[] -> [4,19,25,31,32,R]
[5] -> [7]
[5,6] -> [7]
[5,7] -> [6]
[6,19] -> [35]
[8] -> [2]
[8,9] -> [10]
[8,10] -> [9]
[9,25] -> [43]
[11] -> [15]
[11,12] -> [15]
[11,13] -> [16]
[11,14] -> [17]
[11,15] -> [12]
[11,16] -> [13,17,18]
[11,17] -> [14]
[11,18] -> [16]
[19] -> [33]
[19,20] -> [36]
[19,21] -> [34]
[19,22] -> [34]
[19,23] -> [35]
[19,24] -> [36]
[19,33] -> [37]
[19,33,34] -> [37]
[19,33,35] -> [38]
[19,33,36] -> [39]
[19,33,37] -> [34]
[19,33,38] -> [35,39,40]
[19,33,39] -> [36]
[19,33,40] -> [38]
[19,34] -> [5,21,22]
[19,35] -> [6,23]
[19,36] -> [3,20,24]
[25] -> [41]
[25,26] -> [44]
[25,27] -> [42]
[25,28] -> [42]
[25,29] -> [43]
[25,30] -> [44]
[25,41] -> [45]
[25,41,42] -> [45]
[25,41,43] -> [46]
[25,41,44] -> [47]
[25,41,45] -> [42]
[25,41,46] -> [43,47,48]
[25,41,47] -> [44]
[25,41,48] -> [46]
[25,42] -> [8,27,28]
[25,43] -> [9,29]
[25,44] -> [3,26,30]

### Solution ###

[2,3,4,5,6,7,8,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,45,R]

### Annotated ###

postulate T :ᴱ Type

postulate A :ᴿ T

postulate B :ᴿ T

postulate Op :ᴿ (x :ᴿ T) -> (y :ᴿ T) -> T

id :ᴿ (y :ᴿ T) -> T = (\y :ᴿ T. y)

constA :ᴿ (_ :ᴱ T) -> T = (\_ :ᴱ T. A)

apply :ᴱ (f :ᴱ (_ :ᴱ T) -> T) -> (x :ᴱ T) -> T = (\f :ᴱ (_ :ᴱ T) -> T. (\x :ᴱ T. f ᴱ x))

test1 :ᴿ T = (apply : (_ :ᴿ (_ :ᴿ T) -> T) -> (_ :ᴿ T) -> T) ᴿ id ᴿ B

test2 :ᴿ T = (apply : (_ :ᴿ (_ :ᴱ T) -> T) -> (_ :ᴱ T) -> T) ᴿ constA ᴱ B

main :ᴿ T = Op ᴿ test1 ᴿ test2

### Specialised ###

postulate T :ᴱ Type

postulate A :ᴿ T

postulate B :ᴿ T

postulate Op :ᴿ (x :ᴿ T) -> (y :ᴿ T) -> T

id :ᴿ (y :ᴿ T) -> T = (\y :ᴿ T. y)

constA :ᴿ (_ :ᴱ T) -> T = (\_ :ᴱ T. A)

apply :ᴱ (f :ᴱ (_ :ᴱ T) -> T) -> (x :ᴱ T) -> T = (\f :ᴱ (_ :ᴱ T) -> T. (\x :ᴱ T. f ᴱ x))

apply_REE :¹ (f :ᴿ (_ :ᴱ T) -> T) -> (x :ᴱ T) -> T = (\f :² (_ :³ T) -> T. (\x :⁴ T. f ⁵ x))

apply_RRR :⁶ (f :ᴿ (_ :ᴿ T) -> T) -> (x :ᴿ T) -> T = (\f :⁷ (_ :⁸ T) -> T. (\x :⁹ T. f ¹⁰ x))

test1 :ᴿ T = apply_RRR ᴿ id ᴿ B

test2 :ᴿ T = apply_REE ᴿ constA ᴱ B

main :ᴿ T = Op ᴿ test1 ᴿ test2

### Inferred definitions ###

postulate A :ᴿ T

postulate B :ᴿ T

postulate Op :ᴿ (x :ᴿ T) -> (y :ᴿ T) -> T

postulate T :ᴱ Type

postulate Type :ᴿ Type

apply :ᴱ (f :ᴱ (_ :ᴱ T) -> T) -> (x :ᴱ T) -> T = (\f :ᴱ (_ :ᴱ T) -> T. (\x :ᴱ T. f ᴱ x))
  [E] -> [E]

constA :ᴿ (_ :ᴱ T) -> T = (\_ :ᴱ T. A)
  [E] -> [E]

id :ᴿ (y :ᴿ T) -> T = (\y :ᴿ T. y)

main :ᴿ T = Op ᴿ test1 ᴿ test2

test1 :ᴿ T = apply_RRR ᴿ id ᴿ B
  [] -> [6,R]

test2 :ᴿ T = apply_REE ᴿ constA ᴱ B
  [] -> [1,R]
  [E] -> [E]

apply_REE :¹ (f :ᴿ (_ :ᴱ T) -> T) -> (x :ᴱ T) -> T = (\f :² (_ :³ T) -> T. (\x :⁴ T. f ⁵ x))
  [1] -> [2]
  [1,3] -> [4,5,E]
  [1,4] -> [E]
  [1,5] -> [3]
  [1,E] -> [3,4]

apply_RRR :⁶ (f :ᴿ (_ :ᴿ T) -> T) -> (x :ᴿ T) -> T = (\f :⁷ (_ :⁸ T) -> T. (\x :⁹ T. f ¹⁰ x))
  [6] -> [7,8,9]
  [6,8] -> [9,10]
  [6,10] -> [8]


### Constraints ###

[] -> [1,6,R]
[1] -> [2]
[1,3] -> [4,5,E]
[1,4] -> [E]
[1,5] -> [3]
[1,E] -> [3,4]
[6] -> [7,8,9]
[6,8] -> [9,10]
[6,10] -> [8]
[E] -> [E]

### Solution ###

[1,2,6,7,8,9,10,R]

### Annotated ###

postulate T :ᴱ Type

postulate A :ᴿ T

postulate B :ᴿ T

postulate Op :ᴿ (x :ᴿ T) -> (y :ᴿ T) -> T

id :ᴿ (y :ᴿ T) -> T = (\y :ᴿ T. y)

constA :ᴿ (_ :ᴱ T) -> T = (\_ :ᴱ T. A)

apply :ᴱ (f :ᴱ (_ :ᴱ T) -> T) -> (x :ᴱ T) -> T = (\f :ᴱ (_ :ᴱ T) -> T. (\x :ᴱ T. f ᴱ x))

apply_REE :ᴿ (f :ᴿ (_ :ᴱ T) -> T) -> (x :ᴱ T) -> T = (\f :ᴿ (_ :ᴱ T) -> T. (\x :ᴱ T. f ᴱ x))

apply_RRR :ᴿ (f :ᴿ (_ :ᴿ T) -> T) -> (x :ᴿ T) -> T = (\f :ᴿ (_ :ᴿ T) -> T. (\x :ᴿ T. f ᴿ x))

test1 :ᴿ T = apply_RRR ᴿ id ᴿ B

test2 :ᴿ T = apply_REE ᴿ constA ᴱ B

main :ᴿ T = Op ᴿ test1 ᴿ test2

### Specialised ###

postulate T :ᴱ Type

postulate A :ᴿ T

postulate B :ᴿ T

postulate Op :ᴿ (x :ᴿ T) -> (y :ᴿ T) -> T

id :ᴿ (y :ᴿ T) -> T = (\y :ᴿ T. y)

constA :ᴿ (_ :ᴱ T) -> T = (\_ :ᴱ T. A)

apply :ᴱ (f :ᴱ (_ :ᴱ T) -> T) -> (x :ᴱ T) -> T = (\f :ᴱ (_ :ᴱ T) -> T. (\x :ᴱ T. f ᴱ x))

apply_REE :ᴿ (f :ᴿ (_ :ᴱ T) -> T) -> (x :ᴱ T) -> T = (\f :ᴿ (_ :ᴱ T) -> T. (\x :ᴱ T. f ᴱ x))

apply_RRR :ᴿ (f :ᴿ (_ :ᴿ T) -> T) -> (x :ᴿ T) -> T = (\f :ᴿ (_ :ᴿ T) -> T. (\x :ᴿ T. f ᴿ x))

test1 :ᴿ T = apply_RRR ᴿ id ᴿ B

test2 :ᴿ T = apply_REE ᴿ constA ᴱ B

main :ᴿ T = Op ᴿ test1 ᴿ test2

### Final annotation ###

postulate T :ᴱ Type

postulate A :ᴿ T

postulate B :ᴿ T

postulate Op :ᴿ (x :ᴿ T) -> (y :ᴿ T) -> T

id :ᴿ (y :ᴿ T) -> T = (\y :ᴿ T. y)

constA :ᴿ (_ :ᴱ T) -> T = (\_ :ᴱ T. A)

apply :ᴱ (f :ᴱ (_ :ᴱ T) -> T) -> (x :ᴱ T) -> T = (\f :ᴱ (_ :ᴱ T) -> T. (\x :ᴱ T. f ᴱ x))

apply_REE :ᴿ (f :ᴿ (_ :ᴱ T) -> T) -> (x :ᴱ T) -> T = (\f :ᴿ (_ :ᴱ T) -> T. (\x :ᴱ T. f ᴱ x))

apply_RRR :ᴿ (f :ᴿ (_ :ᴿ T) -> T) -> (x :ᴿ T) -> T = (\f :ᴿ (_ :ᴿ T) -> T. (\x :ᴿ T. f ᴿ x))

test1 :ᴿ T = apply_RRR ᴿ id ᴿ B

test2 :ᴿ T = apply_REE ᴿ constA ᴱ B

main :ᴿ T = Op ᴿ test1 ᴿ test2

### Verification ###

Verification successful.

### Pruned ###

postulate A

postulate B

postulate Op

id = (\y. y)

constA = A

apply_REE = (\f. f)

apply_RRR = (\f. (\x. f x))

test1 = apply_RRR id B

test2 = apply_REE constA

main = Op test1 test2

### Normal forms ###

unerased:
  Op B A
erased:
  Op B A
