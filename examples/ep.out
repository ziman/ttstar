-- vim: ft=agda

### Desugared ###

postulate T : Type

postulate A : T

postulate B : T

postulate Op : (x :R: T) -> (y :R: T) -> T

id : (y : T) -> T = (\y : T. y)

constA : (_ : T) -> T = (\_ : T. A)

apply : (f : (_ : T) -> T) -> (x : T) -> T = (\f : (_ : T) -> T. (\x : T. f x))

test1 : T = [apply : (_ : (_ : T) -> T) -> (_ : T) -> T] id B

test2 : T = [apply : (_ : (_ : T) -> T) -> (_ : T) -> T] constA B

main :R: T = Op test1 test2

### Metaified ###

postulate T :1: Type

postulate A :2: T

postulate B :3: T

postulate Op :4: (x :R: T) -> (y :R: T) -> T

id :5: (y :6: T) -> T = (\y :7: T. y)

constA :8: (_ :9: T) -> T = (\_ :10: T. A)

apply :11: (f :12: (_ :13: T) -> T) -> (x :14: T) -> T = (\f :15: (_ :16: T) -> T. (\x :17: T. f -18- x))

test1 :19: T = [apply : (_ :22: (_ :23: T) -> T) -> (_ :24: T) -> T] -21- id -20- B

test2 :25: T = [apply : (_ :28: (_ :29: T) -> T) -> (_ :30: T) -> T] -27- constA -26- B

main :R: T = Op -32- test1 -31- test2

### Inferred definitions ###

postulate A :2: T {- constraints apply -}
  [1,2] -> [1]
  [2] -> [2]

postulate B :3: T {- constraints apply -}
  [1,3] -> [1]
  [3] -> [3]

postulate Op :4: (x :R: T) -> (y :R: T) -> T {- constraints apply -}
  [1,4] -> [1]
  [4] -> [4]

postulate T :1: Type {- constraints apply -}
  [1] -> [1]

postulate Type :R: Type

apply :11: (f :12: (_ :13: T) -> T) -> (x :14: T) -> T = (\f :15: (_ :16: T) -> T. (\x :17: T. f -18- x)) {- constraints apply -}
  [1,11] -> [1]
  [1,11,15] -> [1]
  [1,11,16,17] -> [1]
  [11] -> [11]
  [11,12] -> [15]
  [11,13] -> [16]
  [11,14] -> [17]
  [11,15] -> [12,15]
  [11,16] -> [13,18]
  [11,16,17] -> [17]
  [11,17] -> [14]
  [11,18] -> [16]

constA :8: (_ :9: T) -> T = (\_ :10: T. A) {- constraints apply -}
  [1,2,8] -> [1]
  [1,8] -> [1]
  [2,8] -> [2]
  [8] -> [8]
  [8,9] -> [10]
  [8,10] -> [9]

id :5: (y :6: T) -> T = (\y :7: T. y) {- constraints apply -}
  [1,5] -> [1]
  [1,5,7] -> [1]
  [5] -> [5]
  [5,6] -> [7]
  [5,7] -> [6,7]

main :R: T = Op -32- test1 -31- test2 {- constraints apply -}
  [] -> [31,32,R]
  [1] -> [1]
  [1,2,8,25,28] -> [1]
  [1,3,19,24] -> [1]
  [1,3,25,30] -> [1]
  [1,4] -> [1]
  [1,5,7,19,22] -> [1]
  [1,5,19,22] -> [1]
  [1,8,25,28] -> [1]
  [1,19] -> [1]
  [1,25] -> [1]
  [2,8,25,28] -> [2]
  [3,19,24] -> [3]
  [3,25,30] -> [3]
  [4] -> [4]
  [5,6,19,22] -> [7]
  [5,7,19,22] -> [6,7]
  [5,19,22] -> [5]
  [6,19] -> [23]
  [8,9,25,28] -> [10]
  [8,10,25,28] -> [9]
  [8,25,28] -> [8]
  [9,25] -> [29]
  [19] -> [19]
  [19,20] -> [24]
  [19,21] -> [22]
  [19,22] -> [21,34]
  [19,23] -> [6,35]
  [19,24] -> [20,36]
  [19,33] -> [33]
  [19,33,34] -> [37]
  [19,33,35] -> [38]
  [19,33,36] -> [39]
  [19,33,37] -> [34,37]
  [19,33,37,41] -> [41]
  [19,33,38] -> [35,40]
  [19,33,38,39] -> [39]
  [19,33,38,39,41] -> [41]
  [19,33,39] -> [36]
  [19,33,40] -> [38]
  [19,33,41] -> [41]
  [19,34] -> [22]
  [19,35] -> [23]
  [19,36] -> [24]
  [25] -> [25]
  [25,26] -> [30]
  [25,27] -> [28]
  [25,28] -> [27,43]
  [25,29] -> [9,44]
  [25,30] -> [26,45]
  [25,42] -> [42]
  [25,42,43] -> [46]
  [25,42,44] -> [47]
  [25,42,45] -> [48]
  [25,42,46] -> [43,46]
  [25,42,46,50] -> [50]
  [25,42,47] -> [44,49]
  [25,42,47,48] -> [48]
  [25,42,47,48,50] -> [50]
  [25,42,48] -> [45]
  [25,42,49] -> [47]
  [25,42,50] -> [50]
  [25,43] -> [28]
  [25,44] -> [29]
  [25,45] -> [30]

test1 :19: T = [apply : (_ :22: (_ :23: T) -> T) -> (_ :24: T) -> T] -21- id -20- B {- constraints apply -}
  [1,3,19,24] -> [1]
  [1,5,7,19,22] -> [1]
  [1,5,19,22] -> [1]
  [1,19] -> [1]
  [3,19,24] -> [3]
  [5,6,19,22] -> [7]
  [5,7,19,22] -> [6,7]
  [5,19,22] -> [5]
  [6,19] -> [23]
  [19] -> [19]
  [19,20] -> [24]
  [19,21] -> [22]
  [19,22] -> [21,34]
  [19,23] -> [6,35]
  [19,24] -> [20,36]
  [19,33] -> [33]
  [19,33,34] -> [37]
  [19,33,35] -> [38]
  [19,33,36] -> [39]
  [19,33,37] -> [34,37]
  [19,33,37,41] -> [41]
  [19,33,38] -> [35,40]
  [19,33,38,39] -> [39]
  [19,33,38,39,41] -> [41]
  [19,33,39] -> [36]
  [19,33,40] -> [38]
  [19,33,41] -> [41]
  [19,34] -> [22]
  [19,35] -> [23]
  [19,36] -> [24]

test2 :25: T = [apply : (_ :28: (_ :29: T) -> T) -> (_ :30: T) -> T] -27- constA -26- B {- constraints apply -}
  [1,2,8,25,28] -> [1]
  [1,3,25,30] -> [1]
  [1,8,25,28] -> [1]
  [1,25] -> [1]
  [2,8,25,28] -> [2]
  [3,25,30] -> [3]
  [8,9,25,28] -> [10]
  [8,10,25,28] -> [9]
  [8,25,28] -> [8]
  [9,25] -> [29]
  [25] -> [25]
  [25,26] -> [30]
  [25,27] -> [28]
  [25,28] -> [27,43]
  [25,29] -> [9,44]
  [25,30] -> [26,45]
  [25,42] -> [42]
  [25,42,43] -> [46]
  [25,42,44] -> [47]
  [25,42,45] -> [48]
  [25,42,46] -> [43,46]
  [25,42,46,50] -> [50]
  [25,42,47] -> [44,49]
  [25,42,47,48] -> [48]
  [25,42,47,48,50] -> [50]
  [25,42,48] -> [45]
  [25,42,49] -> [47]
  [25,42,50] -> [50]
  [25,43] -> [28]
  [25,44] -> [29]
  [25,45] -> [30]


### Constraints ###

[] -> [31,32,R]
[1] -> [1]
[1,2,8,25,28] -> [1]
[1,3,19,24] -> [1]
[1,3,25,30] -> [1]
[1,4] -> [1]
[1,5,7,19,22] -> [1]
[1,5,19,22] -> [1]
[1,8,25,28] -> [1]
[1,19] -> [1]
[1,25] -> [1]
[2,8,25,28] -> [2]
[3,19,24] -> [3]
[3,25,30] -> [3]
[4] -> [4]
[5,6,19,22] -> [7]
[5,7,19,22] -> [6,7]
[5,19,22] -> [5]
[6,19] -> [23]
[8,9,25,28] -> [10]
[8,10,25,28] -> [9]
[8,25,28] -> [8]
[9,25] -> [29]
[19] -> [19]
[19,20] -> [24]
[19,21] -> [22]
[19,22] -> [21,34]
[19,23] -> [6,35]
[19,24] -> [20,36]
[19,33] -> [33]
[19,33,34] -> [37]
[19,33,35] -> [38]
[19,33,36] -> [39]
[19,33,37] -> [34,37]
[19,33,37,41] -> [41]
[19,33,38] -> [35,40]
[19,33,38,39] -> [39]
[19,33,38,39,41] -> [41]
[19,33,39] -> [36]
[19,33,40] -> [38]
[19,33,41] -> [41]
[19,34] -> [22]
[19,35] -> [23]
[19,36] -> [24]
[25] -> [25]
[25,26] -> [30]
[25,27] -> [28]
[25,28] -> [27,43]
[25,29] -> [9,44]
[25,30] -> [26,45]
[25,42] -> [42]
[25,42,43] -> [46]
[25,42,44] -> [47]
[25,42,45] -> [48]
[25,42,46] -> [43,46]
[25,42,46,50] -> [50]
[25,42,47] -> [44,49]
[25,42,47,48] -> [48]
[25,42,47,48,50] -> [50]
[25,42,48] -> [45]
[25,42,49] -> [47]
[25,42,50] -> [50]
[25,43] -> [28]
[25,44] -> [29]
[25,45] -> [30]

### Solution ###

[31,32,R]

### Annotated ###

postulate T :E: Type

postulate A :E: T

postulate B :E: T

postulate Op :E: (x :R: T) -> (y :R: T) -> T

id :E: (y :E: T) -> T = (\y :E: T. y)

constA :E: (_ :E: T) -> T = (\_ :E: T. A)

apply :E: (f :E: (_ :E: T) -> T) -> (x :E: T) -> T = (\f :E: (_ :E: T) -> T. (\x :E: T. f -E- x))

test1 :E: T = [apply : (_ :E: (_ :E: T) -> T) -> (_ :E: T) -> T] -E- id -E- B

test2 :E: T = [apply : (_ :E: (_ :E: T) -> T) -> (_ :E: T) -> T] -E- constA -E- B

main :R: T = Op -R- test1 -R- test2

### Specialised ###

postulate T :E: Type

postulate A :E: T

postulate B :E: T

postulate Op :E: (x :R: T) -> (y :R: T) -> T

id :E: (y :E: T) -> T = (\y :E: T. y)

constA :E: (_ :E: T) -> T = (\_ :E: T. A)

apply :E: (f :E: (_ :E: T) -> T) -> (x :E: T) -> T = (\f :E: (_ :E: T) -> T. (\x :E: T. f -E- x))

apply_EEE :1: (f :E: (_ :E: T) -> T) -> (x :E: T) -> T = (\f :2: (_ :3: T) -> T. (\x :4: T. f -5- x))

test1 :E: T = apply_EEE -E- id -E- B

test2 :E: T = apply_EEE -E- constA -E- B

main :R: T = Op -R- test1 -R- test2

### Inferred definitions ###

postulate A :E: T {- constraints apply -}
  [E] -> [E]

postulate B :E: T {- constraints apply -}
  [E] -> [E]

postulate Op :E: (x :R: T) -> (y :R: T) -> T {- constraints apply -}
  [E] -> [E]

postulate T :E: Type {- constraints apply -}
  [E] -> [E]

postulate Type :R: Type

apply :E: (f :E: (_ :E: T) -> T) -> (x :E: T) -> T = (\f :E: (_ :E: T) -> T. (\x :E: T. f -E- x)) {- constraints apply -}
  [E] -> [E]

constA :E: (_ :E: T) -> T = (\_ :E: T. A) {- constraints apply -}
  [E] -> [E]

id :E: (y :E: T) -> T = (\y :E: T. y) {- constraints apply -}
  [E] -> [E]

main :R: T = Op -R- test1 -R- test2 {- constraints apply -}
  [1,2,E] -> [2,E]
  [1,3,4,E] -> [4,E]
  [1,3,E] -> [5,E]
  [1,4,E] -> [E]
  [1,5,E] -> [3]
  [1,E] -> [1,2,3,4,E]
  [E] -> [E]

test1 :E: T = apply_EEE -E- id -E- B {- constraints apply -}
  [1,2,E] -> [2,E]
  [1,3,4,E] -> [4,E]
  [1,3,E] -> [5,E]
  [1,4,E] -> [E]
  [1,5,E] -> [3]
  [1,E] -> [1,2,3,4,E]
  [E] -> [E]

test2 :E: T = apply_EEE -E- constA -E- B {- constraints apply -}
  [1,2,E] -> [2,E]
  [1,3,4,E] -> [4,E]
  [1,3,E] -> [5,E]
  [1,4,E] -> [E]
  [1,5,E] -> [3]
  [1,E] -> [1,2,3,4,E]
  [E] -> [E]

apply_EEE :1: (f :E: (_ :E: T) -> T) -> (x :E: T) -> T = (\f :2: (_ :3: T) -> T. (\x :4: T. f -5- x)) {- constraints apply -}
  [1] -> [1]
  [1,2] -> [2,E]
  [1,2,E] -> [E]
  [1,3] -> [5,E]
  [1,3,4] -> [4]
  [1,3,4,E] -> [E]
  [1,4] -> [E]
  [1,5] -> [3]
  [1,E] -> [2,3,4,E]


### Constraints ###

[1,2,E] -> [2,E]
[1,3,4,E] -> [4,E]
[1,3,E] -> [5,E]
[1,4,E] -> [E]
[1,5,E] -> [3]
[1,E] -> [1,2,3,4,E]
[E] -> [E]

### Solution ###

[R]

### Annotated ###

postulate T :E: Type

postulate A :E: T

postulate B :E: T

postulate Op :E: (x :R: T) -> (y :R: T) -> T

id :E: (y :E: T) -> T = (\y :E: T. y)

constA :E: (_ :E: T) -> T = (\_ :E: T. A)

apply :E: (f :E: (_ :E: T) -> T) -> (x :E: T) -> T = (\f :E: (_ :E: T) -> T. (\x :E: T. f -E- x))

apply_EEE :E: (f :E: (_ :E: T) -> T) -> (x :E: T) -> T = (\f :E: (_ :E: T) -> T. (\x :E: T. f -E- x))

test1 :E: T = apply_EEE -E- id -E- B

test2 :E: T = apply_EEE -E- constA -E- B

main :R: T = Op -R- test1 -R- test2

### Specialised ###

postulate T :E: Type

postulate A :E: T

postulate B :E: T

postulate Op :E: (x :R: T) -> (y :R: T) -> T

id :E: (y :E: T) -> T = (\y :E: T. y)

constA :E: (_ :E: T) -> T = (\_ :E: T. A)

apply :E: (f :E: (_ :E: T) -> T) -> (x :E: T) -> T = (\f :E: (_ :E: T) -> T. (\x :E: T. f -E- x))

apply_EEE :E: (f :E: (_ :E: T) -> T) -> (x :E: T) -> T = (\f :E: (_ :E: T) -> T. (\x :E: T. f -E- x))

test1 :E: T = apply_EEE -E- id -E- B

test2 :E: T = apply_EEE -E- constA -E- B

main :R: T = Op -R- test1 -R- test2

### Final annotation ###

postulate T :E: Type

postulate A :E: T

postulate B :E: T

postulate Op :E: (x :R: T) -> (y :R: T) -> T

id :E: (y :E: T) -> T = (\y :E: T. y)

constA :E: (_ :E: T) -> T = (\_ :E: T. A)

apply :E: (f :E: (_ :E: T) -> T) -> (x :E: T) -> T = (\f :E: (_ :E: T) -> T. (\x :E: T. f -E- x))

apply_EEE :E: (f :E: (_ :E: T) -> T) -> (x :E: T) -> T = (\f :E: (_ :E: T) -> T. (\x :E: T. f -E- x))

test1 :E: T = apply_EEE -E- id -E- B

test2 :E: T = apply_EEE -E- constA -E- B

main :R: T = Op -R- test1 -R- test2

### Verification ###

Verification successful.

### Pruned ###

main = Op test1 test2

### Normal forms ###

unerased:
  Op B A
erased:
