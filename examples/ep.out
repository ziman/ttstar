-- vim: ft=agda

### Desugared ###

postulate T : Type

postulate A : T

postulate B : T

postulate Op : (x  -R-  T) -> (y  -R-  T) -> T

id : (y : T) -> T = (\y : T. y)

constA : (_ : T) -> T = (\_ : T. A)

apply : (f : (_ : T) -> T) -> (x : T) -> T = (\f : (_ : T) -> T. (\x : T. f x))

test1 : T = (apply : (_ : (_ : T) -> T) -> (_ : T) -> T) id B

test2 : T = (apply : (_ : (_ : T) -> T) -> (_ : T) -> T) constA B

main  -R-  T = Op test1 test2

### Metaified ###

postulate T :?1: Type

postulate A :?2: T

postulate B :?3: T

postulate Op :?4: (x :!R: T) -> (y :!R: T) -> T

id :?5: (y :?6: T) -> T = (\y :?7: T. y)

constA :?8: (_ :?9: T) -> T = (\_ :?10: T. A)

apply :?11: (f :?12: (_ :?13: T) -> T) -> (x :?14: T) -> T = (\f :?15: (_ :?16: T) -> T. (\x :?17: T. f -?18- x))

test1 :?19: T = (apply : (_ :?22: (_ :?23: T) -> T) -> (_ :?24: T) -> T) -?21- id -?20- B

test2 :?25: T = (apply : (_ :?28: (_ :?29: T) -> T) -> (_ :?30: T) -> T) -?27- constA -?26- B

main :!R: T = Op -?32- test1 -?31- test2

### Inferred definitions ###

postulate A :?2: T

postulate B :?3: T

postulate Op :?4: (x :!R: T) -> (y :!R: T) -> T

postulate T :?1: Type

postulate Type :!R: Type

apply :?11: (f :?12: (_ :?13: T) -> T) -> (x :?14: T) -> T = (\f :?15: (_ :?16: T) -> T. (\x :?17: T. f -?18- x))
  [] -> [?12,?15,!R]
  [?13] -> [?16]
  [?14] -> [?17]
  [?16] -> [?13,?17,?18]
  [?17] -> [?14]
  [?18] -> [?16]

constA :?8: (_ :?9: T) -> T = (\_ :?10: T. A)
  [] -> [?2,!R]
  [?9] -> [?10]
  [?10] -> [?9]

id :?5: (y :?6: T) -> T = (\y :?7: T. y)
  [] -> [?6,?7,!R]

main :!R: T = Op -?32- test1 -?31- test2
  [] -> [?4,?19,?25,?31,?32,!R]

test1 :?19: T = (apply : (_ :?22: (_ :?23: T) -> T) -> (_ :?24: T) -> T) -?21- id -?20- B
  [] -> [?5,?21,?22,?34,?37,!R]
  [?6] -> [?35]
  [?20] -> [?36]
  [?23] -> [?35]
  [?24] -> [?36]
  [?35] -> [?6,?23,?38]
  [?36] -> [?3,?20,?24,?39]
  [?38] -> [?35,?39,?40]
  [?39] -> [?36]
  [?40] -> [?38]

test2 :?25: T = (apply : (_ :?28: (_ :?29: T) -> T) -> (_ :?30: T) -> T) -?27- constA -?26- B
  [] -> [?8,?27,?28,?42,?45,!R]
  [?9] -> [?43]
  [?26] -> [?44]
  [?29] -> [?43]
  [?30] -> [?44]
  [?43] -> [?9,?29,?46]
  [?44] -> [?3,?26,?30,?47]
  [?46] -> [?43,?47,?48]
  [?47] -> [?44]
  [?48] -> [?46]


### Constraints ###

[] -> [?2,?4,?5,?6,?7,?8,?12,?15,?19,?21,?22,?25,?27,?28,?31,?32,?34,?37,?42,?45,!R]
[?6] -> [?35]
[?9] -> [?10,?43]
[?10] -> [?9]
[?13] -> [?16]
[?14] -> [?17]
[?16] -> [?13,?17,?18]
[?17] -> [?14]
[?18] -> [?16]
[?20] -> [?36]
[?23] -> [?35]
[?24] -> [?36]
[?26] -> [?44]
[?29] -> [?43]
[?30] -> [?44]
[?35] -> [?6,?23,?38]
[?36] -> [?3,?20,?24,?39]
[?38] -> [?35,?39,?40]
[?39] -> [?36]
[?40] -> [?38]
[?43] -> [?9,?29,?46]
[?44] -> [?3,?26,?30,?47]
[?46] -> [?43,?47,?48]
[?47] -> [?44]
[?48] -> [?46]

### Solution ###

[?2,?3,?4,?5,?6,?7,?8,?12,?15,?19,?20,?21,?22,?23,?24,?25,?27,?28,?31,?32,?34,?35,?36,?37,?38,?39,?40,?42,?45,!R]

### Annotated ###

postulate T :E: Type

postulate A :R: T

postulate B :R: T

postulate Op :R: (x :R: T) -> (y :R: T) -> T

id :R: (y :R: T) -> T = (\y :R: T. y)

constA :R: (_ :E: T) -> T = (\_ :E: T. A)

apply :E: (f :R: (_ :E: T) -> T) -> (x :E: T) -> T = (\f :R: (_ :E: T) -> T. (\x :E: T. f -E- x))

test1 :R: T = (apply : (_ :R: (_ :R: T) -> T) -> (_ :R: T) -> T) -R- id -R- B

test2 :R: T = (apply : (_ :R: (_ :E: T) -> T) -> (_ :E: T) -> T) -R- constA -E- B

main :R: T = Op -R- test1 -R- test2

### Specialised ###

postulate T :!E: Type

postulate A :!R: T

postulate B :!R: T

postulate Op :!R: (x :!R: T) -> (y :!R: T) -> T

id :!R: (y :!R: T) -> T = (\y :!R: T. y)

constA :!R: (_ :!E: T) -> T = (\_ :!E: T. A)

apply :!E: (f :!R: (_ :!E: T) -> T) -> (x :!E: T) -> T = (\f :!R: (_ :!E: T) -> T. (\x :!E: T. f -!E- x))

apply_REE :?1: (f :!R: (_ :!E: T) -> T) -> (x :!E: T) -> T = (\f :?2: (_ :?3: T) -> T. (\x :?4: T. f -?5- x))

apply_RRR :?6: (f :!R: (_ :!R: T) -> T) -> (x :!R: T) -> T = (\f :?7: (_ :?8: T) -> T. (\x :?9: T. f -?10- x))

test1 :!R: T = apply_RRR -!R- id -!R- B

test2 :!R: T = apply_REE -!R- constA -!E- B

main :!R: T = Op -!R- test1 -!R- test2

### Inferred definitions ###

postulate A :!R: T

postulate B :!R: T

postulate Op :!R: (x :!R: T) -> (y :!R: T) -> T

postulate T :!E: Type

postulate Type :!R: Type

apply :!E: (f :!R: (_ :!E: T) -> T) -> (x :!E: T) -> T = (\f :!R: (_ :!E: T) -> T. (\x :!E: T. f -!E- x))
  [!E] -> [!E]

constA :!R: (_ :!E: T) -> T = (\_ :!E: T. A)
  [!E] -> [!E]

id :!R: (y :!R: T) -> T = (\y :!R: T. y)

main :!R: T = Op -!R- test1 -!R- test2

test1 :!R: T = apply_RRR -!R- id -!R- B
  [] -> [?6,!R]

test2 :!R: T = apply_REE -!R- constA -!E- B
  [] -> [?1,!R]
  [!E] -> [!E]

apply_REE :?1: (f :!R: (_ :!E: T) -> T) -> (x :!E: T) -> T = (\f :?2: (_ :?3: T) -> T. (\x :?4: T. f -?5- x))
  [] -> [?2,!R]
  [?3] -> [?4,?5,!E]
  [?4] -> [!E]
  [?5] -> [?3]
  [!E] -> [?3,?4]

apply_RRR :?6: (f :!R: (_ :!R: T) -> T) -> (x :!R: T) -> T = (\f :?7: (_ :?8: T) -> T. (\x :?9: T. f -?10- x))
  [] -> [?7,?8,?9,?10,!R]


### Constraints ###

[] -> [?1,?2,?6,?7,?8,?9,?10,!R]
[?3] -> [?4,?5,!E]
[?4] -> [!E]
[?5] -> [?3]
[!E] -> [?3,?4,!E]

### Solution ###

[?1,?2,?6,?7,?8,?9,?10,!R]

### Annotated ###

postulate T :E: Type

postulate A :R: T

postulate B :R: T

postulate Op :R: (x :R: T) -> (y :R: T) -> T

id :R: (y :R: T) -> T = (\y :R: T. y)

constA :R: (_ :E: T) -> T = (\_ :E: T. A)

apply :E: (f :R: (_ :E: T) -> T) -> (x :E: T) -> T = (\f :R: (_ :E: T) -> T. (\x :E: T. f -E- x))

apply_REE :R: (f :R: (_ :E: T) -> T) -> (x :E: T) -> T = (\f :R: (_ :E: T) -> T. (\x :E: T. f -E- x))

apply_RRR :R: (f :R: (_ :R: T) -> T) -> (x :R: T) -> T = (\f :R: (_ :R: T) -> T. (\x :R: T. f -R- x))

test1 :R: T = apply_RRR -R- id -R- B

test2 :R: T = apply_REE -R- constA -E- B

main :R: T = Op -R- test1 -R- test2

### Specialised ###

postulate T :!E: Type

postulate A :!R: T

postulate B :!R: T

postulate Op :!R: (x :!R: T) -> (y :!R: T) -> T

id :!R: (y :!R: T) -> T = (\y :!R: T. y)

constA :!R: (_ :!E: T) -> T = (\_ :!E: T. A)

apply :!E: (f :!R: (_ :!E: T) -> T) -> (x :!E: T) -> T = (\f :!R: (_ :!E: T) -> T. (\x :!E: T. f -!E- x))

apply_REE :!R: (f :!R: (_ :!E: T) -> T) -> (x :!E: T) -> T = (\f :!R: (_ :!E: T) -> T. (\x :!E: T. f -!E- x))

apply_RRR :!R: (f :!R: (_ :!R: T) -> T) -> (x :!R: T) -> T = (\f :!R: (_ :!R: T) -> T. (\x :!R: T. f -!R- x))

test1 :!R: T = apply_RRR -!R- id -!R- B

test2 :!R: T = apply_REE -!R- constA -!E- B

main :!R: T = Op -!R- test1 -!R- test2

### Final annotation ###

postulate T :E: Type

postulate A :R: T

postulate B :R: T

postulate Op :R: (x :R: T) -> (y :R: T) -> T

id :R: (y :R: T) -> T = (\y :R: T. y)

constA :R: (_ :E: T) -> T = (\_ :E: T. A)

apply :E: (f :R: (_ :E: T) -> T) -> (x :E: T) -> T = (\f :R: (_ :E: T) -> T. (\x :E: T. f -E- x))

apply_REE :R: (f :R: (_ :E: T) -> T) -> (x :E: T) -> T = (\f :R: (_ :E: T) -> T. (\x :E: T. f -E- x))

apply_RRR :R: (f :R: (_ :R: T) -> T) -> (x :R: T) -> T = (\f :R: (_ :R: T) -> T. (\x :R: T. f -R- x))

test1 :R: T = apply_RRR -R- id -R- B

test2 :R: T = apply_REE -R- constA -E- B

main :R: T = Op -R- test1 -R- test2

### Verification ###

Verification successful.

### Pruned ###

postulate A

postulate B

postulate Op

id = (\y. y)

constA = A

apply_REE = (\f. f)

apply_RRR = (\f. (\x. f x))

test1 = apply_RRR id B

test2 = apply_REE constA

main = Op test1 test2

### Normal forms ###

unerased:
  Op B A
erased:
  Op B A
