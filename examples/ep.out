-- vim: ft=agda

### Desugared ###

T : *

A : T

B : T

Op : (x  -R-  T) -> (y  -R-  T) -> T

id : (_ : T) -> T
id = \y : T. y

constA : (_ : T) -> T
constA = \_ : T. A

apply : (f : (_ : T) -> T) -> (_ : T) -> T
apply = \f : (_ : T) -> T. \x : T. (f x)

test1 : T
test1 = (apply id B)

test2 : T
test2 = (apply constA B)

main  -R-  T
main = (Op test1 test2)

### Metaified ###

T :?1: *

A :?2: T

B :?3: T

Op :?4: (x :!R: T) -> (y :!R: T) -> T

id :?5: (_ :?6: T) -> T
id = \y :?7: T. y

constA :?8: (_ :?9: T) -> T
constA = \_ :?10: T. A

apply :?11: (f :?12: (_ :?13: T) -> T) -> (_ :?14: T) -> T
apply = \f :?15: (_ :?16: T) -> T. \x :?17: T. (f -?18- x)

test1 :?19: T
test1 = (apply -?21- id -?20- B)

test2 :?22: T
test2 = (apply -?24- constA -?23- B)

main :!R: T
main = (Op -?26- test1 -?25- test2)

### Inferred definitions ###

A :?2: T
B :?3: T
Op :?4: (x :!R: T) -> (y :!R: T) -> T
T :?1: *
apply :?11: (f :?12: (_ :?13: T) -> T) -> (_ :?14: T) -> T
  [] -> [?12,?15,!R]
  [?13] -> [?16]
  [?14] -> [?17]
  [?16] -> [?13,?17,?18]
  [?17] -> [?14]
  [?18] -> [?16]

constA :?8: (_ :?9: T) -> T
  [] -> [?2,!R]
  [?9] -> [?10]
  [?10] -> [?9]

id :?5: (_ :?6: T) -> T
  [] -> [?6,?7,!R]

main :!R: T
  [] -> [?4,?19,?22,?25,?26,!R]

test1 :?19: T
  [] -> [?11,!R]
  [?6] -> [?13]
  [?12] -> [?5,?21]
  [?13] -> [?6]
  [?14] -> [?3,?20]
  [?20] -> [?14]
  [?21] -> [?12]

test2 :?22: T
  [] -> [?11,!R]
  [?9] -> [?13]
  [?12] -> [?8,?24]
  [?13] -> [?9]
  [?14] -> [?3,?23]
  [?23] -> [?14]
  [?24] -> [?12]


### Constraints ###

[] -> [?2,?4,?6,?7,?11,?12,?15,?19,?22,?25,?26,!R]
[?6] -> [?13]
[?9] -> [?10,?13]
[?10] -> [?9]
[?12] -> [?5,?8,?21,?24]
[?13] -> [?6,?9,?16]
[?14] -> [?3,?17,?20,?23]
[?16] -> [?13,?17,?18]
[?17] -> [?14]
[?18] -> [?16]
[?20] -> [?14]
[?21] -> [?12]
[?23] -> [?14]
[?24] -> [?12]

### Solution ###

[?2,?3,?4,?5,?6,?7,?8,?9,?10,?11,?12,?13,?14,?15,?16,?17,?18,?19,?20,?21,?22,?23,?24,?25,?26,!R]

### Annotated ###

T :E: *

A :R: T

B :R: T

Op :R: (x :R: T) -> (y :R: T) -> T

id :R: (_ :R: T) -> T
id = \y :R: T. y

constA :R: (_ :R: T) -> T
constA = \_ :R: T. A

apply :R: (f :R: (_ :R: T) -> T) -> (_ :R: T) -> T
apply = \f :R: (_ :R: T) -> T. \x :R: T. (f -R- x)

test1 :R: T
test1 = (apply -R- id -R- B)

test2 :R: T
test2 = (apply -R- constA -R- B)

main :R: T
main = (Op -R- test1 -R- test2)

### Pruned ###

id = \y. y

constA = \_. A

apply = \f. \x. (f x)

test1 = (apply id B)

test2 = (apply constA B)

main = (Op test1 test2)

### Normal forms ###

unerased:
  (Op B A)
erased:
  (Op B A)
