(require-extension matchable)
(define Type '(Type))
(print
  (letrec* (
    (Bool `(Bool))
    (True `(True))
    (False `(False))
    (Nat `(Nat))
    (Z `(Z))
    (S (lambda (n)
      `(S ,n)))
    (Vec (lambda (_x0)
      (lambda (_x1)
        `(Vec ,_x0 ,_x1))))
    (VNil (lambda (a)
      `(VNil ,a)))
    (VCons (lambda (a)
      (lambda (n)
        (lambda (x)
          (lambda (xs)
            `(VCons ,a ,n ,x ,xs))))))
    (vlen (lambda (_e0)
      (lambda (_e1)
        (lambda (_e2)
          (match (list _e0 _e1 _e2)
            [(a _ ('VNil _))
              Z]
            [(a ('S n) ('VCons _ _ x xs))
              (S (((vlen a) n) xs))])))))
    (testVec ((((VCons Bool) (S Z)) True) ((((VCons Bool) Z) False) (VNil Bool))))
    (main (((vlen Bool) (S (S Z))) testVec))
  )
    main))
