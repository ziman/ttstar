-- vim: ft=idris

data Bool : Type where
  True : Bool,
  False : Bool.

data Foo : Bool -> Type where
  Yeah : Foo True,
  Nope : Foo False.

data Maybe : Type -> Type where
  Nothing : (a : Type) -> Maybe a,
  Just : (a : Type) -> (x : a) -> Maybe a.

f (x : Maybe Bool) : Bool
  = case x of
      Just (a : Type) (b : Bool)
      | a = Bool
      => b,

      Nothing (a : Type)
      | a = Bool
      => False.

g (x : Maybe Bool) : Foo (f x)
  = case x of
      Just (a : Type) (b : Bool)
      | a = Bool
      => case b of
            True => Yeah,
            False => Nope.,
      Nothing (a : Type)
      | a = Bool
      => Nope.

main : Foo True
  = g (Just Bool True).

{-

I thought that TTstar wouldn't be able to see that in:
  case Just True of
    Just b => ...

the variable b = True. However, you can't do nested matches
so that's fine.

In other words, there's no matching patvars<->scrutinee args when typechecking.

-}
