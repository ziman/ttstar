import "../stdlib/prelude.tt"
import "../stdlib/state.tt"
import "../stdlib/io.tt"
import "../stdlib/rts-mlf.tt"

sumFor : Bool -> Int -> (Int -> Int) -> Int.
(n : Int) (f : Int -> Int)
  sumFor True  n f = int0,
(n : Int) (f : Int -> Int)
  sumFor False n f = 
    let n' \: Int = minus n int1
      in plus (f n) (sumFor (isZero n') n' f).

boolToInt : Bool -> Int.
boolToInt True = int1,
boolToInt False = int0.

pythag \(n : Int) : Int = 
  sumFor (isZero n) n (\x:Int.
    sumFor (isZero x) x (\y:Int.
      sumFor (isZero y) y (\z:Int.
        boolToInt (eqInt (plus (times x x) (times y y)) (times z z))
      )
    )
  ).

main \: Unspec = unsafePerformIO Unspec (
  let int2 : Int = plus int1 int1,
      int4 : Int = plus int2 int2,
      int16 : Int = times int4 int4,
      int256 : Int = times int16 int16,
      int512 : Int = times int256 int2
  in printInt (pythag int512)
).
