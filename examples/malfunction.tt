import "../stdlib/prelude.tt"
import "../stdlib/state.tt"
import "../stdlib/io.tt"
import "../stdlib/rts-mlf.tt"

sumFor \(n : Int) (f : Int -> Int) : Int
  = case isZero n with
    g : Bool -> Int.
    g True  = int0,
    g False = plus (f n) (sumFor (minus n int1) f)..

boolToInt : Bool -> Int.
boolToInt True = int1,
boolToInt False = int0.

isPythag \(x : Int) (y : Int) (z : Int) : Int
  = boolToInt (
    eqInt
      (times x x)
      (plus (times y y) (times z z))
  ).

pythag \(n : Int) : Int = 
  sumFor n (\x:Int.
    sumFor x (\y:Int.
      sumFor y (\z:Int.
        isPythag x y z
      )
    )
  ).

main : Unspec = unsafePerformIO Unspec (
  let int2 : Int = plus int1 int1,
      int4 : Int = times int2 int2,
      int16 : Int = times int4 int4,
      int256 : Int = times int16 int16,
      int512 : Int = times int256 int2
  in printInt (pythag int512)
).
