-- vim: ft=agda

### Desugared ###

postulate Id : (a : Type) -> (x : a) -> (y : a) -> Type

postulate Refl : (a : Type) -> (x : a) -> Id a x x

id : (a : Type) -> (_ : a) -> a = (\a : Type. (\x : a. x))

subst : (a : Type) -> (P : (_ : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (_ : P x) -> P y = \(a : Type) (P : (_ : a) -> Type) (x : a) (y : a) (eq : Id a x y).
  case eq of
    Refl (a' : Type) (x' : a)
      | a' = a
      | x' = x
      | y = x
      => (\w : P x'. w)

cong : (a : Type) -> (b : Type) -> (f : (_ : a) -> b) -> (x : a) -> (y : a) -> (eq : Id a x y) -> Id b (f x) (f y) = \(a : Type) (b : Type) (f : (_ : a) -> b) (x : a) (y : a) (eq : Id a x y).
  case eq of
    Refl (a' : Type) (x' : a)
      | a' = a
      | x' = x
      | y = x
      => Refl b (f y)

postulate Bool : Type

postulate T : Bool

postulate F : Bool

postulate List : Type

postulate Nil : List

postulate Cons : (x  -R-  Bool) -> (xs  -R-  List) -> List

one : (x : Bool) -> List = (\x : Bool. Cons x Nil)

app : (xs : List) -> (ys : List) -> List = \(xs : List) (ys : List).
  case xs of
    Nil
      => ys
    Cons (x : Bool) (xs' : List)
      => Cons x (app xs' ys)

appRightNeutral : (ys : List) -> Id List ys (app ys Nil) = \(ys : List).
  case ys of
    Nil
      => Refl List Nil
    Cons (x : Bool) (xs : List)
      => cong List List (Cons x) xs (app xs Nil) (appRightNeutral xs)

appAssoc : (xs : List) -> (ys : List) -> (zs : List) -> Id List (app (app xs ys) zs) (app xs (app ys zs)) = \(xs : List) (ys : List) (zs : List).
  case xs of
    Nil
      => Refl List (app ys zs)
    Cons (x : Bool) (xs' : List)
      => cong List List (Cons x) (app (app xs' ys) zs) (app xs' (app ys zs)) (appAssoc xs' ys zs)

postulate Rev : (_ : List) -> Type

postulate RNil : Rev Nil

postulate RSnoc : (xs : List) -> (x : Bool) -> (rxs : Rev xs) -> Rev (app xs (one x))

rev' : (xs : List) -> (rxs : Rev xs) -> (ys : List) -> Rev (app xs ys) = \(xs : List) (rxs : Rev xs) (ys : List).
  case ys of
    Nil
      => subst List Rev xs (app xs Nil) (appRightNeutral xs) rxs
    Cons (y : Bool) (ys' : List)
      => subst List Rev (app (app xs (one y)) ys') (app xs (Cons y ys')) (appAssoc xs (one y) ys') (rev' (app xs (one y)) (RSnoc xs y rxs) ys')

rev : (xs : List) -> Rev xs = (\xs : List. rev' Nil RNil xs)

reverse' : (xs : List) -> (rxs : Rev xs) -> List = \(xs : List) (rxs : Rev xs).
  case rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' : List) (x : Bool) (rxs' : Rev xs')
      | xs = app xs' (one x)
      => Cons x (reverse' xs' rxs')

reverse : (xs : List) -> List = (\xs : List. reverse' xs (rev xs))

main  -R-  List = reverse (Cons T (Cons F (Cons T (Cons F Nil))))

### Metaified ###

postulate Id :?1: (a :?2: Type) -> (x :?3: a) -> (y :?4: a) -> Type

postulate Refl :?5: (a :?6: Type) -> (x :?7: a) -> Id -?10- a -?9- x -?8- x

id :?11: (a :?12: Type) -> (_ :?13: a) -> a = (\a :?14: Type. (\x :?15: a. x))

subst :?16: (a :?17: Type) -> (P :?18: (_ :?19: a) -> Type) -> (x :?20: a) -> (y :?21: a) -> (eq :?22: Id -?25- a -?24- x -?23- y) -> (_ :?26: P -?27- x) -> P -?28- y = \(a :?29: Type) (P :?30: (_ :?31: a) -> Type) (x :?32: a) (y :?33: a) (eq :?34: Id -?37- a -?36- x -?35- y).
  case -?38- eq of
    Refl (a' :?39: Type) (x' :?40: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :?41: P -?42- x'. w)

cong :?43: (a :?44: Type) -> (b :?45: Type) -> (f :?46: (_ :?47: a) -> b) -> (x :?48: a) -> (y :?49: a) -> (eq :?50: Id -?53- a -?52- x -?51- y) -> Id -?56- b -?55- (f -?57- x) -?54- (f -?58- y) = \(a :?59: Type) (b :?60: Type) (f :?61: (_ :?62: a) -> b) (x :?63: a) (y :?64: a) (eq :?65: Id -?68- a -?67- x -?66- y).
  case -?69- eq of
    Refl (a' :?70: Type) (x' :?71: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -?73- b -?72- (f -?74- y)

postulate Bool :?75: Type

postulate T :?76: Bool

postulate F :?77: Bool

postulate List :?78: Type

postulate Nil :?79: List

postulate Cons :?80: (x :!R: Bool) -> (xs :!R: List) -> List

one :?81: (x :?82: Bool) -> List = (\x :?83: Bool. Cons -?85- x -?84- Nil)

app :?86: (xs :?87: List) -> (ys :?88: List) -> List = \(xs :?89: List) (ys :?90: List).
  case -?91- xs of
    Nil
      => ys
    Cons (x :?92: Bool) (xs' :?93: List)
      => Cons -?95- x -?94- (app -?97- xs' -?96- ys)

appRightNeutral :?98: (ys :?99: List) -> Id -?102- List -?101- ys -?100- (app -?104- ys -?103- Nil) = \(ys :?105: List).
  case -?106- ys of
    Nil
      => Refl -?108- List -?107- Nil
    Cons (x :?109: Bool) (xs :?110: List)
      => cong -?116- List -?115- List -?114- (Cons -?117- x) -?113- xs -?112- (app -?119- xs -?118- Nil) -?111- (appRightNeutral -?120- xs)

appAssoc :?121: (xs :?122: List) -> (ys :?123: List) -> (zs :?124: List) -> Id -?127- List -?126- (app -?129- (app -?131- xs -?130- ys) -?128- zs) -?125- (app -?133- xs -?132- (app -?135- ys -?134- zs)) = \(xs :?136: List) (ys :?137: List) (zs :?138: List).
  case -?139- xs of
    Nil
      => Refl -?141- List -?140- (app -?143- ys -?142- zs)
    Cons (x :?144: Bool) (xs' :?145: List)
      => cong -?151- List -?150- List -?149- (Cons -?152- x) -?148- (app -?154- (app -?156- xs' -?155- ys) -?153- zs) -?147- (app -?158- xs' -?157- (app -?160- ys -?159- zs)) -?146- (appAssoc -?163- xs' -?162- ys -?161- zs)

postulate Rev :?164: (_ :?165: List) -> Type

postulate RNil :?166: Rev -?167- Nil

postulate RSnoc :?168: (xs :?169: List) -> (x :?170: Bool) -> (rxs :?171: Rev -?172- xs) -> Rev -?173- (app -?175- xs -?174- (one -?176- x))

rev' :?177: (xs :?178: List) -> (rxs :?179: Rev -?180- xs) -> (ys :?181: List) -> Rev -?182- (app -?184- xs -?183- ys) = \(xs :?185: List) (rxs :?186: Rev -?187- xs) (ys :?188: List).
  case -?189- ys of
    Nil
      => subst -?195- List -?194- Rev -?193- xs -?192- (app -?197- xs -?196- Nil) -?191- (appRightNeutral -?198- xs) -?190- rxs
    Cons (y :?199: Bool) (ys' :?200: List)
      => subst -?206- List -?205- Rev -?204- (app -?208- (app -?210- xs -?209- (one -?211- y)) -?207- ys') -?203- (app -?213- xs -?212- (Cons -?215- y -?214- ys')) -?202- (appAssoc -?218- xs -?217- (one -?219- y) -?216- ys') -?201- (rev' -?222- (app -?224- xs -?223- (one -?225- y)) -?221- (RSnoc -?228- xs -?227- y -?226- rxs) -?220- ys')

rev :?229: (xs :?230: List) -> Rev -?231- xs = (\xs :?232: List. rev' -?235- Nil -?234- RNil -?233- xs)

reverse' :?236: (xs :?237: List) -> (rxs :?238: Rev -?239- xs) -> List = \(xs :?240: List) (rxs :?241: Rev -?242- xs).
  case -?243- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :?244: List) (x :?245: Bool) (rxs' :?246: Rev -?247- xs')
      | xs = app -?249- xs' -?248- (one -?250- x)
      => Cons -?252- x -?251- (reverse' -?254- xs' -?253- rxs')

reverse :?255: (xs :?256: List) -> List = (\xs :?257: List. reverse' -?259- xs -?258- (rev -?260- xs))

main :!R: List = reverse -?261- (Cons -?263- T -?262- (Cons -?265- F -?264- (Cons -?267- T -?266- (Cons -?269- F -?268- Nil))))

### Inferred definitions ###

postulate Bool :?75: Type

postulate Cons :?80: (x :!R: Bool) -> (xs :!R: List) -> List

postulate F :?77: Bool

postulate Id :?1: (a :?2: Type) -> (x :?3: a) -> (y :?4: a) -> Type

postulate List :?78: Type

postulate Nil :?79: List

postulate RNil :?166: Rev -?167- Nil

postulate RSnoc :?168: (xs :?169: List) -> (x :?170: Bool) -> (rxs :?171: Rev -?172- xs) -> Rev -?173- (app -?175- xs -?174- (one -?176- x))

postulate Refl :?5: (a :?6: Type) -> (x :?7: a) -> Id -?10- a -?9- x -?8- x

postulate Rev :?164: (_ :?165: List) -> Type

postulate T :?76: Bool

postulate Type :!R: Type

app :?86: (xs :?87: List) -> (ys :?88: List) -> List = \(xs :?89: List) (ys :?90: List).
  case -?91- xs of
    Nil
      => ys
    Cons (x :?92: Bool) (xs' :?93: List)
      => Cons -?95- x -?94- (app -?97- xs' -?96- ys)
  [?79,?86] -> [?87]
  [?80,?86] -> [?87]
  [?86] -> [?80,?86,?87,?90,?91,?92,?93,?94,?95]
  [?86,?87] -> [?89,?93,?97]
  [?86,?88] -> [?90,?96]
  [?86,?89] -> [?87]
  [?86,?90] -> [?88]
  [?86,?91] -> [?89]
  [?86,?92] -> [?87,?91]
  [?86,?93] -> [?87,?91]
  [?86,?96] -> [?88]
  [?86,?97] -> [?87]

appAssoc :?121: (xs :?122: List) -> (ys :?123: List) -> (zs :?124: List) -> Id -?127- List -?126- (app -?129- (app -?131- xs -?130- ys) -?128- zs) -?125- (app -?133- xs -?132- (app -?135- ys -?134- zs)) = \(xs :?136: List) (ys :?137: List) (zs :?138: List).
  case -?139- xs of
    Nil
      => Refl -?141- List -?140- (app -?143- ys -?142- zs)
    Cons (x :?144: Bool) (xs' :?145: List)
      => cong -?151- List -?150- List -?149- (Cons -?152- x) -?148- (app -?154- (app -?156- xs' -?155- ys) -?153- zs) -?147- (app -?158- xs' -?157- (app -?160- ys -?159- zs)) -?146- (appAssoc -?163- xs' -?162- ys -?161- zs)
  [?6,?121] -> [?78,?141]
  [?7,?87,?121] -> [?137,?143]
  [?7,?88,?121] -> [?138,?142]
  [?7,?121] -> [?86,?140]
  [?7,?121,?142] -> [?88]
  [?7,?121,?143] -> [?87]
  [?8,?121] -> [?125]
  [?9,?121] -> [?126]
  [?10,?121] -> [?127]
  [?44,?121] -> [?78,?151]
  [?45,?121] -> [?78,?150]
  [?46,?121] -> [?80,?144,?149,?152]
  [?48,?87,?88,?121] -> [?137,?155]
  [?48,?87,?121] -> [?86,?145,?154,?156]
  [?48,?87,?121,?155] -> [?88]
  [?48,?87,?121,?156] -> [?87]
  [?48,?88,?121] -> [?138,?153]
  [?48,?121] -> [?86,?148]
  [?48,?121,?153] -> [?88]
  [?48,?121,?154] -> [?87]
  [?49,?87,?88,?121] -> [?137,?160]
  [?49,?87,?121] -> [?145,?158]
  [?49,?88,?121] -> [?86,?138,?157,?159]
  [?49,?88,?121,?159] -> [?88]
  [?49,?88,?121,?160] -> [?87]
  [?49,?121] -> [?86,?147]
  [?49,?121,?157] -> [?88]
  [?49,?121,?158] -> [?87]
  [?50,?121] -> [?121,?146]
  [?50,?121,?122] -> [?145,?163]
  [?50,?121,?123] -> [?137,?162]
  [?50,?121,?124] -> [?138,?161]
  [?50,?121,?161] -> [?124]
  [?50,?121,?162] -> [?123]
  [?50,?121,?163] -> [?122]
  [?51,?121] -> [?125]
  [?52,?121] -> [?126]
  [?53,?121] -> [?127]
  [?54,?121] -> [?125]
  [?55,?121] -> [?126]
  [?56,?121] -> [?127]
  [?57,?121] -> [?94]
  [?58,?121] -> [?94]
  [?79,?121] -> [?122]
  [?80,?121] -> [?122]
  [?94,?121] -> [?57,?58]
  [?95,?121] -> [?152]
  [?96,?121] -> [?153,?155,?157]
  [?97,?121] -> [?154,?156,?158]
  [?121] -> [?5,?43,?47,?122,?139,?144,?145]
  [?121,?122] -> [?136]
  [?121,?123] -> [?137]
  [?121,?124] -> [?138]
  [?121,?125] -> [?8,?51,?54]
  [?121,?126] -> [?9,?52,?55]
  [?121,?127] -> [?10,?53,?56]
  [?121,?128] -> [?142,?153]
  [?121,?129] -> [?143,?154]
  [?121,?130] -> [?155]
  [?121,?131] -> [?156]
  [?121,?132] -> [?157]
  [?121,?133] -> [?158]
  [?121,?134] -> [?142,?159]
  [?121,?135] -> [?143,?160]
  [?121,?136] -> [?122]
  [?121,?137] -> [?123]
  [?121,?138] -> [?124]
  [?121,?139] -> [?136]
  [?121,?140] -> [?7]
  [?121,?141] -> [?6]
  [?121,?142] -> [?128,?134]
  [?121,?143] -> [?129,?135]
  [?121,?144] -> [?122,?139]
  [?121,?145] -> [?122,?139]
  [?121,?146] -> [?50]
  [?121,?147] -> [?49]
  [?121,?148] -> [?48]
  [?121,?149] -> [?46]
  [?121,?150] -> [?45]
  [?121,?151] -> [?44]
  [?121,?152] -> [?95]
  [?121,?153] -> [?96,?128]
  [?121,?154] -> [?97,?129]
  [?121,?155] -> [?96,?130]
  [?121,?156] -> [?97,?131]
  [?121,?157] -> [?96,?132]
  [?121,?158] -> [?97,?133]
  [?121,?159] -> [?134]
  [?121,?160] -> [?135]

appRightNeutral :?98: (ys :?99: List) -> Id -?102- List -?101- ys -?100- (app -?104- ys -?103- Nil) = \(ys :?105: List).
  case -?106- ys of
    Nil
      => Refl -?108- List -?107- Nil
    Cons (x :?109: Bool) (xs :?110: List)
      => cong -?116- List -?115- List -?114- (Cons -?117- x) -?113- xs -?112- (app -?119- xs -?118- Nil) -?111- (appRightNeutral -?120- xs)
  [?6,?98] -> [?78,?108]
  [?7,?98] -> [?79,?107]
  [?8,?98] -> [?100]
  [?9,?98] -> [?101]
  [?10,?98] -> [?102]
  [?44,?98] -> [?78,?116]
  [?45,?98] -> [?78,?115]
  [?46,?98] -> [?80,?109,?114,?117]
  [?48,?98] -> [?110,?113]
  [?49,?87,?98] -> [?110,?119]
  [?49,?88,?98] -> [?79,?118]
  [?49,?98] -> [?86,?112]
  [?49,?98,?118] -> [?88]
  [?49,?98,?119] -> [?87]
  [?50,?98] -> [?98,?111]
  [?50,?98,?99] -> [?110,?120]
  [?50,?98,?120] -> [?99]
  [?51,?98] -> [?100]
  [?52,?98] -> [?101]
  [?53,?98] -> [?102]
  [?54,?98] -> [?100]
  [?55,?98] -> [?101]
  [?56,?98] -> [?102]
  [?57,?98] -> [?110]
  [?58,?98] -> [?94]
  [?79,?98] -> [?99]
  [?80,?98] -> [?99]
  [?94,?98] -> [?58]
  [?95,?98] -> [?117]
  [?96,?98] -> [?118]
  [?97,?98] -> [?119]
  [?98] -> [?5,?43,?47,?99,?106,?109,?110]
  [?98,?99] -> [?105]
  [?98,?100] -> [?8,?51,?54]
  [?98,?101] -> [?9,?52,?55]
  [?98,?102] -> [?10,?53,?56]
  [?98,?103] -> [?118]
  [?98,?104] -> [?119]
  [?98,?105] -> [?99]
  [?98,?106] -> [?105]
  [?98,?107] -> [?7]
  [?98,?108] -> [?6]
  [?98,?109] -> [?99,?106,?117]
  [?98,?110] -> [?57,?99,?106]
  [?98,?111] -> [?50]
  [?98,?112] -> [?49]
  [?98,?113] -> [?48]
  [?98,?114] -> [?46]
  [?98,?115] -> [?45]
  [?98,?116] -> [?44]
  [?98,?117] -> [?95,?109]
  [?98,?118] -> [?96,?103]
  [?98,?119] -> [?97,?104]

cong :?43: (a :?44: Type) -> (b :?45: Type) -> (f :?46: (_ :?47: a) -> b) -> (x :?48: a) -> (y :?49: a) -> (eq :?50: Id -?53- a -?52- x -?51- y) -> Id -?56- b -?55- (f -?57- x) -?54- (f -?58- y) = \(a :?59: Type) (b :?60: Type) (f :?61: (_ :?62: a) -> b) (x :?63: a) (y :?64: a) (eq :?65: Id -?68- a -?67- x -?66- y).
  case -?69- eq of
    Refl (a' :?70: Type) (x' :?71: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -?73- b -?72- (f -?74- y)
  [?6,?43] -> [?50,?60,?70,?73]
  [?7,?43] -> [?50,?61,?71,?72]
  [?7,?43,?62] -> [?74]
  [?7,?43,?74] -> [?62]
  [?8,?43] -> [?51,?54]
  [?9,?43] -> [?52,?55]
  [?10,?43] -> [?53,?56]
  [?43] -> [?5]
  [?43,?44] -> [?59]
  [?43,?45] -> [?60]
  [?43,?46] -> [?61]
  [?43,?47] -> [?62]
  [?43,?48] -> [?63]
  [?43,?49] -> [?64]
  [?43,?50] -> [?65]
  [?43,?51] -> [?8]
  [?43,?52] -> [?9]
  [?43,?53] -> [?10]
  [?43,?54] -> [?8]
  [?43,?55] -> [?9]
  [?43,?56] -> [?10]
  [?43,?57] -> [?74]
  [?43,?58] -> [?74]
  [?43,?59] -> [?44]
  [?43,?60] -> [?45]
  [?43,?61] -> [?46]
  [?43,?62] -> [?47]
  [?43,?63] -> [?48]
  [?43,?64] -> [?49]
  [?43,?65] -> [?50]
  [?43,?69] -> [?65]
  [?43,?70] -> [?6,?50,?69]
  [?43,?71] -> [?7,?50,?69]
  [?43,?72] -> [?7]
  [?43,?73] -> [?6]
  [?43,?74] -> [?57,?58]

id :?11: (a :?12: Type) -> (_ :?13: a) -> a = (\a :?14: Type. (\x :?15: a. x))
  [?11] -> [?15]
  [?11,?12] -> [?14]
  [?11,?13] -> [?15]
  [?11,?14] -> [?12]
  [?11,?15] -> [?13]

main :!R: List = reverse -?261- (Cons -?263- T -?262- (Cons -?265- F -?264- (Cons -?267- T -?266- (Cons -?269- F -?268- Nil))))
  [] -> [?255,!R]
  [?256] -> [?76,?77,?79,?80,?261,?262,?263,?264,?265,?266,?267,?268,?269]
  [?261] -> [?256]

one :?81: (x :?82: Bool) -> List = (\x :?83: Bool. Cons -?85- x -?84- Nil)
  [?81] -> [?79,?80,?83,?84,?85]
  [?81,?82] -> [?83]
  [?81,?83] -> [?82]

rev :?229: (xs :?230: List) -> Rev -?231- xs = (\xs :?232: List. rev' -?235- Nil -?234- RNil -?233- xs)
  [?167,?229] -> [?180]
  [?178,?229] -> [?79,?235]
  [?179,?229] -> [?166,?234]
  [?180,?229] -> [?167]
  [?181,?229] -> [?232,?233]
  [?182,?229] -> [?231]
  [?229] -> [?177]
  [?229,?230] -> [?232]
  [?229,?231] -> [?182]
  [?229,?232] -> [?230]
  [?229,?233] -> [?181]
  [?229,?234] -> [?179]
  [?229,?235] -> [?178]

rev' :?177: (xs :?178: List) -> (rxs :?179: Rev -?180- xs) -> (ys :?181: List) -> Rev -?182- (app -?184- xs -?183- ys) = \(xs :?185: List) (rxs :?186: Rev -?187- xs) (ys :?188: List).
  case -?189- ys of
    Nil
      => subst -?195- List -?194- Rev -?193- xs -?192- (app -?197- xs -?196- Nil) -?191- (appRightNeutral -?198- xs) -?190- rxs
    Cons (y :?199: Bool) (ys' :?200: List)
      => subst -?206- List -?205- Rev -?204- (app -?208- (app -?210- xs -?209- (one -?211- y)) -?207- ys') -?203- (app -?213- xs -?212- (Cons -?215- y -?214- ys')) -?202- (appAssoc -?218- xs -?217- (one -?219- y) -?216- ys') -?201- (rev' -?222- (app -?224- xs -?223- (one -?225- y)) -?221- (RSnoc -?228- xs -?227- y -?226- rxs) -?220- ys')
  [?17,?177] -> [?78,?195,?206]
  [?18,?177] -> [?164,?194,?205]
  [?19,?177] -> [?165]
  [?20,?82,?87,?88,?177] -> [?199,?211]
  [?20,?87,?88,?177] -> [?81,?209]
  [?20,?87,?88,?177,?211] -> [?82]
  [?20,?87,?177] -> [?86,?185,?208,?210]
  [?20,?87,?177,?209] -> [?88]
  [?20,?87,?177,?210] -> [?87]
  [?20,?88,?177] -> [?200,?207]
  [?20,?177] -> [?86,?185,?193,?204]
  [?20,?177,?207] -> [?88]
  [?20,?177,?208] -> [?87]
  [?21,?87,?177] -> [?185,?197,?213]
  [?21,?88,?177] -> [?79,?80,?196,?199,?200,?212,?214,?215]
  [?21,?177] -> [?86,?192,?203]
  [?21,?177,?196] -> [?88]
  [?21,?177,?197] -> [?87]
  [?21,?177,?212] -> [?88]
  [?21,?177,?213] -> [?87]
  [?22,?82,?123,?177] -> [?199,?219]
  [?22,?99,?177] -> [?185,?198]
  [?22,?122,?177] -> [?185,?218]
  [?22,?123,?177] -> [?81,?217]
  [?22,?123,?177,?219] -> [?82]
  [?22,?124,?177] -> [?200,?216]
  [?22,?177] -> [?98,?121,?191,?202]
  [?22,?177,?198] -> [?99]
  [?22,?177,?216] -> [?124]
  [?22,?177,?217] -> [?123]
  [?22,?177,?218] -> [?122]
  [?23,?177] -> [?100,?125]
  [?24,?177] -> [?101,?126]
  [?25,?177] -> [?102,?127]
  [?26,?82,?88,?177,?178] -> [?199,?225]
  [?26,?84,?177] -> [?84]
  [?26,?85,?177] -> [?85]
  [?26,?87,?177,?178] -> [?185,?224]
  [?26,?88,?177,?178] -> [?81,?223]
  [?26,?88,?177,?178,?225] -> [?82]
  [?26,?169,?177,?179] -> [?185,?228]
  [?26,?170,?177,?179] -> [?199,?227]
  [?26,?171,?177,?179] -> [?186,?226]
  [?26,?172,?177,?179] -> [?187]
  [?26,?173,?177] -> [?180]
  [?26,?174,?177] -> [?223]
  [?26,?175,?177] -> [?224]
  [?26,?177] -> [?177,?186,?190,?201]
  [?26,?177,?178] -> [?86,?222]
  [?26,?177,?178,?223] -> [?88]
  [?26,?177,?178,?224] -> [?87]
  [?26,?177,?179] -> [?168,?221]
  [?26,?177,?179,?187] -> [?172]
  [?26,?177,?179,?226] -> [?171]
  [?26,?177,?179,?227] -> [?170]
  [?26,?177,?179,?228] -> [?169]
  [?26,?177,?180] -> [?173]
  [?26,?177,?181] -> [?200,?220]
  [?26,?177,?220] -> [?181]
  [?26,?177,?221] -> [?179]
  [?26,?177,?222] -> [?178]
  [?26,?177,?223] -> [?174]
  [?26,?177,?224] -> [?175]
  [?27,?177] -> [?182,?187]
  [?28,?177] -> [?182]
  [?79,?177] -> [?181]
  [?80,?177] -> [?181]
  [?84,?177] -> [?84]
  [?85,?177] -> [?85]
  [?94,?177] -> [?214]
  [?95,?177] -> [?215]
  [?100,?177] -> [?23]
  [?101,?177] -> [?24]
  [?102,?177] -> [?25]
  [?103,?177] -> [?196]
  [?104,?177] -> [?197]
  [?125,?177] -> [?23]
  [?126,?177] -> [?24]
  [?127,?177] -> [?25]
  [?128,?177] -> [?207]
  [?129,?177] -> [?208]
  [?130,?177] -> [?209]
  [?131,?177] -> [?210]
  [?132,?177] -> [?212]
  [?133,?177] -> [?213]
  [?165,?177] -> [?19]
  [?177] -> [?16,?181,?189,?199,?200]
  [?177,?178] -> [?185]
  [?177,?179] -> [?186]
  [?177,?180] -> [?187]
  [?177,?181] -> [?188]
  [?177,?182] -> [?27,?28]
  [?177,?183] -> [?196,?207,?212]
  [?177,?184] -> [?197,?208,?213]
  [?177,?185] -> [?178]
  [?177,?186] -> [?179]
  [?177,?187] -> [?27,?180]
  [?177,?188] -> [?181]
  [?177,?189] -> [?188]
  [?177,?190] -> [?26]
  [?177,?191] -> [?22]
  [?177,?192] -> [?21]
  [?177,?193] -> [?20]
  [?177,?194] -> [?18]
  [?177,?195] -> [?17]
  [?177,?196] -> [?103,?183]
  [?177,?197] -> [?104,?184]
  [?177,?199] -> [?181,?189,?215]
  [?177,?200] -> [?181,?189,?214]
  [?177,?201] -> [?26]
  [?177,?202] -> [?22]
  [?177,?203] -> [?21]
  [?177,?204] -> [?20]
  [?177,?205] -> [?18]
  [?177,?206] -> [?17]
  [?177,?207] -> [?128,?183]
  [?177,?208] -> [?129,?184]
  [?177,?209] -> [?130,?223]
  [?177,?210] -> [?131,?224]
  [?177,?212] -> [?132,?183]
  [?177,?213] -> [?133,?184]
  [?177,?214] -> [?94,?200]
  [?177,?215] -> [?95,?199]
  [?177,?223] -> [?209]
  [?177,?224] -> [?210]

reverse :?255: (xs :?256: List) -> List = (\xs :?257: List. reverse' -?259- xs -?258- (rev -?260- xs))
  [?230,?238,?255] -> [?257,?260]
  [?231,?255] -> [?239]
  [?237,?255] -> [?257,?259]
  [?238,?255] -> [?229,?258]
  [?238,?255,?260] -> [?230]
  [?239,?255] -> [?231]
  [?255] -> [?236]
  [?255,?256] -> [?257]
  [?255,?257] -> [?256]
  [?255,?258] -> [?238]
  [?255,?259] -> [?237]

reverse' :?236: (xs :?237: List) -> (rxs :?238: Rev -?239- xs) -> List = \(xs :?240: List) (rxs :?241: Rev -?242- xs).
  case -?243- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :?244: List) (x :?245: Bool) (rxs' :?246: Rev -?247- xs')
      | xs = app -?249- xs' -?248- (one -?250- x)
      => Cons -?252- x -?251- (reverse' -?254- xs' -?253- rxs')
  [?84,?236] -> [?84]
  [?85,?236] -> [?85]
  [?166,?236] -> [?238]
  [?167,?236] -> [?239]
  [?168,?236] -> [?238]
  [?169,?236] -> [?238,?244]
  [?170,?236] -> [?238,?245]
  [?171,?236] -> [?238,?246]
  [?172,?236] -> [?238,?247]
  [?173,?236] -> [?239]
  [?174,?236] -> [?248]
  [?175,?236] -> [?249]
  [?236] -> [?79,?80,?236,?243,?245,?251,?252]
  [?236,?237] -> [?240,?244,?254]
  [?236,?238] -> [?241,?246,?253]
  [?236,?239] -> [?167,?173,?247]
  [?236,?240] -> [?237]
  [?236,?241] -> [?238]
  [?236,?243] -> [?241]
  [?236,?244] -> [?169,?238,?243]
  [?236,?245] -> [?170,?238,?243]
  [?236,?246] -> [?171,?238,?243]
  [?236,?247] -> [?172,?238,?239]
  [?236,?248] -> [?174]
  [?236,?249] -> [?175]
  [?236,?253] -> [?238]
  [?236,?254] -> [?237]

subst :?16: (a :?17: Type) -> (P :?18: (_ :?19: a) -> Type) -> (x :?20: a) -> (y :?21: a) -> (eq :?22: Id -?25- a -?24- x -?23- y) -> (_ :?26: P -?27- x) -> P -?28- y = \(a :?29: Type) (P :?30: (_ :?31: a) -> Type) (x :?32: a) (y :?33: a) (eq :?34: Id -?37- a -?36- x -?35- y).
  case -?38- eq of
    Refl (a' :?39: Type) (x' :?40: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :?41: P -?42- x'. w)
  [?6,?16] -> [?22,?39]
  [?7,?16] -> [?22,?40]
  [?8,?16] -> [?23]
  [?9,?16] -> [?24]
  [?10,?16] -> [?25]
  [?16] -> [?41]
  [?16,?17] -> [?29]
  [?16,?18] -> [?30]
  [?16,?19] -> [?31]
  [?16,?20] -> [?32]
  [?16,?21] -> [?33]
  [?16,?22] -> [?34]
  [?16,?23] -> [?8]
  [?16,?24] -> [?9]
  [?16,?25] -> [?10]
  [?16,?26] -> [?41]
  [?16,?27] -> [?42]
  [?16,?28] -> [?42]
  [?16,?29] -> [?17]
  [?16,?30] -> [?18]
  [?16,?31] -> [?19]
  [?16,?32] -> [?20]
  [?16,?33] -> [?21]
  [?16,?34] -> [?22]
  [?16,?38] -> [?34]
  [?16,?39] -> [?6,?22,?38]
  [?16,?40] -> [?7,?22,?38]
  [?16,?41] -> [?26]
  [?16,?42] -> [?27,?28]


### Constraints ###

[] -> [?255,!R]
[?6,?16] -> [?22,?39]
[?6,?43] -> [?50,?60,?70,?73]
[?6,?98] -> [?78,?108]
[?6,?121] -> [?78,?141]
[?7,?16] -> [?22,?40]
[?7,?43] -> [?50,?61,?71,?72]
[?7,?43,?62] -> [?74]
[?7,?43,?74] -> [?62]
[?7,?87,?121] -> [?137,?143]
[?7,?88,?121] -> [?138,?142]
[?7,?98] -> [?79,?107]
[?7,?121] -> [?86,?140]
[?7,?121,?142] -> [?88]
[?7,?121,?143] -> [?87]
[?8,?16] -> [?23]
[?8,?43] -> [?51,?54]
[?8,?98] -> [?100]
[?8,?121] -> [?125]
[?9,?16] -> [?24]
[?9,?43] -> [?52,?55]
[?9,?98] -> [?101]
[?9,?121] -> [?126]
[?10,?16] -> [?25]
[?10,?43] -> [?53,?56]
[?10,?98] -> [?102]
[?10,?121] -> [?127]
[?11] -> [?15]
[?11,?12] -> [?14]
[?11,?13] -> [?15]
[?11,?14] -> [?12]
[?11,?15] -> [?13]
[?16] -> [?41]
[?16,?17] -> [?29]
[?16,?18] -> [?30]
[?16,?19] -> [?31]
[?16,?20] -> [?32]
[?16,?21] -> [?33]
[?16,?22] -> [?34]
[?16,?23] -> [?8]
[?16,?24] -> [?9]
[?16,?25] -> [?10]
[?16,?26] -> [?41]
[?16,?27] -> [?42]
[?16,?28] -> [?42]
[?16,?29] -> [?17]
[?16,?30] -> [?18]
[?16,?31] -> [?19]
[?16,?32] -> [?20]
[?16,?33] -> [?21]
[?16,?34] -> [?22]
[?16,?38] -> [?34]
[?16,?39] -> [?6,?22,?38]
[?16,?40] -> [?7,?22,?38]
[?16,?41] -> [?26]
[?16,?42] -> [?27,?28]
[?17,?177] -> [?78,?195,?206]
[?18,?177] -> [?164,?194,?205]
[?19,?177] -> [?165]
[?20,?82,?87,?88,?177] -> [?199,?211]
[?20,?87,?88,?177] -> [?81,?209]
[?20,?87,?88,?177,?211] -> [?82]
[?20,?87,?177] -> [?86,?185,?208,?210]
[?20,?87,?177,?209] -> [?88]
[?20,?87,?177,?210] -> [?87]
[?20,?88,?177] -> [?200,?207]
[?20,?177] -> [?86,?185,?193,?204]
[?20,?177,?207] -> [?88]
[?20,?177,?208] -> [?87]
[?21,?87,?177] -> [?185,?197,?213]
[?21,?88,?177] -> [?79,?80,?196,?199,?200,?212,?214,?215]
[?21,?177] -> [?86,?192,?203]
[?21,?177,?196] -> [?88]
[?21,?177,?197] -> [?87]
[?21,?177,?212] -> [?88]
[?21,?177,?213] -> [?87]
[?22,?82,?123,?177] -> [?199,?219]
[?22,?99,?177] -> [?185,?198]
[?22,?122,?177] -> [?185,?218]
[?22,?123,?177] -> [?81,?217]
[?22,?123,?177,?219] -> [?82]
[?22,?124,?177] -> [?200,?216]
[?22,?177] -> [?98,?121,?191,?202]
[?22,?177,?198] -> [?99]
[?22,?177,?216] -> [?124]
[?22,?177,?217] -> [?123]
[?22,?177,?218] -> [?122]
[?23,?177] -> [?100,?125]
[?24,?177] -> [?101,?126]
[?25,?177] -> [?102,?127]
[?26,?82,?88,?177,?178] -> [?199,?225]
[?26,?84,?177] -> [?84]
[?26,?85,?177] -> [?85]
[?26,?87,?177,?178] -> [?185,?224]
[?26,?88,?177,?178] -> [?81,?223]
[?26,?88,?177,?178,?225] -> [?82]
[?26,?169,?177,?179] -> [?185,?228]
[?26,?170,?177,?179] -> [?199,?227]
[?26,?171,?177,?179] -> [?186,?226]
[?26,?172,?177,?179] -> [?187]
[?26,?173,?177] -> [?180]
[?26,?174,?177] -> [?223]
[?26,?175,?177] -> [?224]
[?26,?177] -> [?177,?186,?190,?201]
[?26,?177,?178] -> [?86,?222]
[?26,?177,?178,?223] -> [?88]
[?26,?177,?178,?224] -> [?87]
[?26,?177,?179] -> [?168,?221]
[?26,?177,?179,?187] -> [?172]
[?26,?177,?179,?226] -> [?171]
[?26,?177,?179,?227] -> [?170]
[?26,?177,?179,?228] -> [?169]
[?26,?177,?180] -> [?173]
[?26,?177,?181] -> [?200,?220]
[?26,?177,?220] -> [?181]
[?26,?177,?221] -> [?179]
[?26,?177,?222] -> [?178]
[?26,?177,?223] -> [?174]
[?26,?177,?224] -> [?175]
[?27,?177] -> [?182,?187]
[?28,?177] -> [?182]
[?43] -> [?5]
[?43,?44] -> [?59]
[?43,?45] -> [?60]
[?43,?46] -> [?61]
[?43,?47] -> [?62]
[?43,?48] -> [?63]
[?43,?49] -> [?64]
[?43,?50] -> [?65]
[?43,?51] -> [?8]
[?43,?52] -> [?9]
[?43,?53] -> [?10]
[?43,?54] -> [?8]
[?43,?55] -> [?9]
[?43,?56] -> [?10]
[?43,?57] -> [?74]
[?43,?58] -> [?74]
[?43,?59] -> [?44]
[?43,?60] -> [?45]
[?43,?61] -> [?46]
[?43,?62] -> [?47]
[?43,?63] -> [?48]
[?43,?64] -> [?49]
[?43,?65] -> [?50]
[?43,?69] -> [?65]
[?43,?70] -> [?6,?50,?69]
[?43,?71] -> [?7,?50,?69]
[?43,?72] -> [?7]
[?43,?73] -> [?6]
[?43,?74] -> [?57,?58]
[?44,?98] -> [?78,?116]
[?44,?121] -> [?78,?151]
[?45,?98] -> [?78,?115]
[?45,?121] -> [?78,?150]
[?46,?98] -> [?80,?109,?114,?117]
[?46,?121] -> [?80,?144,?149,?152]
[?48,?87,?88,?121] -> [?137,?155]
[?48,?87,?121] -> [?86,?145,?154,?156]
[?48,?87,?121,?155] -> [?88]
[?48,?87,?121,?156] -> [?87]
[?48,?88,?121] -> [?138,?153]
[?48,?98] -> [?110,?113]
[?48,?121] -> [?86,?148]
[?48,?121,?153] -> [?88]
[?48,?121,?154] -> [?87]
[?49,?87,?88,?121] -> [?137,?160]
[?49,?87,?98] -> [?110,?119]
[?49,?87,?121] -> [?145,?158]
[?49,?88,?98] -> [?79,?118]
[?49,?88,?121] -> [?86,?138,?157,?159]
[?49,?88,?121,?159] -> [?88]
[?49,?88,?121,?160] -> [?87]
[?49,?98] -> [?86,?112]
[?49,?98,?118] -> [?88]
[?49,?98,?119] -> [?87]
[?49,?121] -> [?86,?147]
[?49,?121,?157] -> [?88]
[?49,?121,?158] -> [?87]
[?50,?98] -> [?98,?111]
[?50,?98,?99] -> [?110,?120]
[?50,?98,?120] -> [?99]
[?50,?121] -> [?121,?146]
[?50,?121,?122] -> [?145,?163]
[?50,?121,?123] -> [?137,?162]
[?50,?121,?124] -> [?138,?161]
[?50,?121,?161] -> [?124]
[?50,?121,?162] -> [?123]
[?50,?121,?163] -> [?122]
[?51,?98] -> [?100]
[?51,?121] -> [?125]
[?52,?98] -> [?101]
[?52,?121] -> [?126]
[?53,?98] -> [?102]
[?53,?121] -> [?127]
[?54,?98] -> [?100]
[?54,?121] -> [?125]
[?55,?98] -> [?101]
[?55,?121] -> [?126]
[?56,?98] -> [?102]
[?56,?121] -> [?127]
[?57,?98] -> [?110]
[?57,?121] -> [?94]
[?58,?98] -> [?94]
[?58,?121] -> [?94]
[?79,?86] -> [?87]
[?79,?98] -> [?99]
[?79,?121] -> [?122]
[?79,?177] -> [?181]
[?80,?86] -> [?87]
[?80,?98] -> [?99]
[?80,?121] -> [?122]
[?80,?177] -> [?181]
[?81] -> [?79,?80,?83,?84,?85]
[?81,?82] -> [?83]
[?81,?83] -> [?82]
[?84,?177] -> [?84]
[?84,?236] -> [?84]
[?85,?177] -> [?85]
[?85,?236] -> [?85]
[?86] -> [?80,?86,?87,?90,?91,?92,?93,?94,?95]
[?86,?87] -> [?89,?93,?97]
[?86,?88] -> [?90,?96]
[?86,?89] -> [?87]
[?86,?90] -> [?88]
[?86,?91] -> [?89]
[?86,?92] -> [?87,?91]
[?86,?93] -> [?87,?91]
[?86,?96] -> [?88]
[?86,?97] -> [?87]
[?94,?98] -> [?58]
[?94,?121] -> [?57,?58]
[?94,?177] -> [?214]
[?95,?98] -> [?117]
[?95,?121] -> [?152]
[?95,?177] -> [?215]
[?96,?98] -> [?118]
[?96,?121] -> [?153,?155,?157]
[?97,?98] -> [?119]
[?97,?121] -> [?154,?156,?158]
[?98] -> [?5,?43,?47,?99,?106,?109,?110]
[?98,?99] -> [?105]
[?98,?100] -> [?8,?51,?54]
[?98,?101] -> [?9,?52,?55]
[?98,?102] -> [?10,?53,?56]
[?98,?103] -> [?118]
[?98,?104] -> [?119]
[?98,?105] -> [?99]
[?98,?106] -> [?105]
[?98,?107] -> [?7]
[?98,?108] -> [?6]
[?98,?109] -> [?99,?106,?117]
[?98,?110] -> [?57,?99,?106]
[?98,?111] -> [?50]
[?98,?112] -> [?49]
[?98,?113] -> [?48]
[?98,?114] -> [?46]
[?98,?115] -> [?45]
[?98,?116] -> [?44]
[?98,?117] -> [?95,?109]
[?98,?118] -> [?96,?103]
[?98,?119] -> [?97,?104]
[?100,?177] -> [?23]
[?101,?177] -> [?24]
[?102,?177] -> [?25]
[?103,?177] -> [?196]
[?104,?177] -> [?197]
[?121] -> [?5,?43,?47,?122,?139,?144,?145]
[?121,?122] -> [?136]
[?121,?123] -> [?137]
[?121,?124] -> [?138]
[?121,?125] -> [?8,?51,?54]
[?121,?126] -> [?9,?52,?55]
[?121,?127] -> [?10,?53,?56]
[?121,?128] -> [?142,?153]
[?121,?129] -> [?143,?154]
[?121,?130] -> [?155]
[?121,?131] -> [?156]
[?121,?132] -> [?157]
[?121,?133] -> [?158]
[?121,?134] -> [?142,?159]
[?121,?135] -> [?143,?160]
[?121,?136] -> [?122]
[?121,?137] -> [?123]
[?121,?138] -> [?124]
[?121,?139] -> [?136]
[?121,?140] -> [?7]
[?121,?141] -> [?6]
[?121,?142] -> [?128,?134]
[?121,?143] -> [?129,?135]
[?121,?144] -> [?122,?139]
[?121,?145] -> [?122,?139]
[?121,?146] -> [?50]
[?121,?147] -> [?49]
[?121,?148] -> [?48]
[?121,?149] -> [?46]
[?121,?150] -> [?45]
[?121,?151] -> [?44]
[?121,?152] -> [?95]
[?121,?153] -> [?96,?128]
[?121,?154] -> [?97,?129]
[?121,?155] -> [?96,?130]
[?121,?156] -> [?97,?131]
[?121,?157] -> [?96,?132]
[?121,?158] -> [?97,?133]
[?121,?159] -> [?134]
[?121,?160] -> [?135]
[?125,?177] -> [?23]
[?126,?177] -> [?24]
[?127,?177] -> [?25]
[?128,?177] -> [?207]
[?129,?177] -> [?208]
[?130,?177] -> [?209]
[?131,?177] -> [?210]
[?132,?177] -> [?212]
[?133,?177] -> [?213]
[?165,?177] -> [?19]
[?166,?236] -> [?238]
[?167,?229] -> [?180]
[?167,?236] -> [?239]
[?168,?236] -> [?238]
[?169,?236] -> [?238,?244]
[?170,?236] -> [?238,?245]
[?171,?236] -> [?238,?246]
[?172,?236] -> [?238,?247]
[?173,?236] -> [?239]
[?174,?236] -> [?248]
[?175,?236] -> [?249]
[?177] -> [?16,?181,?189,?199,?200]
[?177,?178] -> [?185]
[?177,?179] -> [?186]
[?177,?180] -> [?187]
[?177,?181] -> [?188]
[?177,?182] -> [?27,?28]
[?177,?183] -> [?196,?207,?212]
[?177,?184] -> [?197,?208,?213]
[?177,?185] -> [?178]
[?177,?186] -> [?179]
[?177,?187] -> [?27,?180]
[?177,?188] -> [?181]
[?177,?189] -> [?188]
[?177,?190] -> [?26]
[?177,?191] -> [?22]
[?177,?192] -> [?21]
[?177,?193] -> [?20]
[?177,?194] -> [?18]
[?177,?195] -> [?17]
[?177,?196] -> [?103,?183]
[?177,?197] -> [?104,?184]
[?177,?199] -> [?181,?189,?215]
[?177,?200] -> [?181,?189,?214]
[?177,?201] -> [?26]
[?177,?202] -> [?22]
[?177,?203] -> [?21]
[?177,?204] -> [?20]
[?177,?205] -> [?18]
[?177,?206] -> [?17]
[?177,?207] -> [?128,?183]
[?177,?208] -> [?129,?184]
[?177,?209] -> [?130,?223]
[?177,?210] -> [?131,?224]
[?177,?212] -> [?132,?183]
[?177,?213] -> [?133,?184]
[?177,?214] -> [?94,?200]
[?177,?215] -> [?95,?199]
[?177,?223] -> [?209]
[?177,?224] -> [?210]
[?178,?229] -> [?79,?235]
[?179,?229] -> [?166,?234]
[?180,?229] -> [?167]
[?181,?229] -> [?232,?233]
[?182,?229] -> [?231]
[?229] -> [?177]
[?229,?230] -> [?232]
[?229,?231] -> [?182]
[?229,?232] -> [?230]
[?229,?233] -> [?181]
[?229,?234] -> [?179]
[?229,?235] -> [?178]
[?230,?238,?255] -> [?257,?260]
[?231,?255] -> [?239]
[?236] -> [?79,?80,?236,?243,?245,?251,?252]
[?236,?237] -> [?240,?244,?254]
[?236,?238] -> [?241,?246,?253]
[?236,?239] -> [?167,?173,?247]
[?236,?240] -> [?237]
[?236,?241] -> [?238]
[?236,?243] -> [?241]
[?236,?244] -> [?169,?238,?243]
[?236,?245] -> [?170,?238,?243]
[?236,?246] -> [?171,?238,?243]
[?236,?247] -> [?172,?238,?239]
[?236,?248] -> [?174]
[?236,?249] -> [?175]
[?236,?253] -> [?238]
[?236,?254] -> [?237]
[?237,?255] -> [?257,?259]
[?238,?255] -> [?229,?258]
[?238,?255,?260] -> [?230]
[?239,?255] -> [?231]
[?255] -> [?236]
[?255,?256] -> [?257]
[?255,?257] -> [?256]
[?255,?258] -> [?238]
[?255,?259] -> [?237]
[?256] -> [?76,?77,?79,?80,?261,?262,?263,?264,?265,?266,?267,?268,?269]
[?261] -> [?256]

### Solution ###

[?16,?26,?41,?76,?77,?79,?80,?94,?95,?166,?168,?170,?171,?177,?179,?181,?186,?188,?189,?190,?199,?200,?201,?214,?215,?220,?221,?226,?227,?229,?230,?232,?233,?234,?236,?238,?241,?243,?245,?246,?251,?252,?253,?255,?256,?257,?258,?260,?261,?262,?263,?264,?265,?266,?267,?268,?269,!R]

### Annotated ###

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x

id :E: (a :E: Type) -> (_ :E: a) -> a = (\a :E: Type. (\x :E: a. x))

subst :R: (a :E: Type) -> (P :E: (_ :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (_ :R: P -E- x) -> P -E- y = \(a :E: Type) (P :E: (_ :E: a) -> Type) (x :E: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :R: P -E- x'. w)

cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_ :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) = \(a :E: Type) (b :E: Type) (f :E: (_ :E: a) -> b) (x :E: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -E- b -E- (f -E- y)

postulate Bool :E: Type

postulate T :R: Bool

postulate F :R: Bool

postulate List :E: Type

postulate Nil :R: List

postulate Cons :R: (x :R: Bool) -> (xs :R: List) -> List

one :E: (x :E: Bool) -> List = (\x :E: Bool. Cons -E- x -E- Nil)

app :E: (xs :E: List) -> (ys :E: List) -> List = \(xs :E: List) (ys :E: List).
  case -E- xs of
    Nil
      => ys
    Cons (x :E: Bool) (xs' :E: List)
      => Cons -R- x -R- (app -E- xs' -E- ys)

appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) = \(ys :E: List).
  case -E- ys of
    Nil
      => Refl -E- List -E- Nil
    Cons (x :E: Bool) (xs :E: List)
      => cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)

appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) = \(xs :E: List) (ys :E: List) (zs :E: List).
  case -E- xs of
    Nil
      => Refl -E- List -E- (app -E- ys -E- zs)
    Cons (x :E: Bool) (xs' :E: List)
      => cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs' -E- ys) -E- zs) -E- (app -E- xs' -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs' -E- ys -E- zs)

postulate Rev :E: (_ :E: List) -> Type

postulate RNil :R: Rev -E- Nil

postulate RSnoc :R: (xs :E: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))

rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -E- xs -E- ys) = \(xs :E: List) (rxs :R: Rev -E- xs) (ys :R: List).
  case -R- ys of
    Nil
      => subst -E- List -E- Rev -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs) -R- rxs
    Cons (y :R: Bool) (ys' :R: List)
      => subst -E- List -E- Rev -E- (app -E- (app -E- xs -E- (one -E- y)) -E- ys') -E- (app -E- xs -E- (Cons -R- y -R- ys')) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys') -R- (rev' -E- (app -E- xs -E- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys')

rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)

reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List = \(xs :E: List) (rxs :R: Rev -E- xs).
  case -R- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :E: List) (x :R: Bool) (rxs' :R: Rev -E- xs')
      | xs = app -E- xs' -E- (one -E- x)
      => Cons -R- x -R- (reverse' -E- xs' -R- rxs')

reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))

main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))

### Specialised ###

postulate Id :!E: (a :!E: Type) -> (x :!E: a) -> (y :!E: a) -> Type

postulate Refl :!E: (a :!E: Type) -> (x :!E: a) -> Id -!E- a -!E- x -!E- x

id :!E: (a :!E: Type) -> (_ :!E: a) -> a = (\a :!E: Type. (\x :!E: a. x))

subst :!R: (a :!E: Type) -> (P :!E: (_ :!E: a) -> Type) -> (x :!E: a) -> (y :!E: a) -> (eq :!E: Id -!E- a -!E- x -!E- y) -> (_ :!R: P -!E- x) -> P -!E- y = \(a :!E: Type) (P :!E: (_ :!E: a) -> Type) (x :!E: a) (y :!E: a) (eq :!E: Id -!E- a -!E- x -!E- y).
  case -!E- eq of
    Refl (a' :!E: Type) (x' :!E: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :!R: P -!E- x'. w)

cong :!E: (a :!E: Type) -> (b :!E: Type) -> (f :!E: (_ :!E: a) -> b) -> (x :!E: a) -> (y :!E: a) -> (eq :!E: Id -!E- a -!E- x -!E- y) -> Id -!E- b -!E- (f -!E- x) -!E- (f -!E- y) = \(a :!E: Type) (b :!E: Type) (f :!E: (_ :!E: a) -> b) (x :!E: a) (y :!E: a) (eq :!E: Id -!E- a -!E- x -!E- y).
  case -!E- eq of
    Refl (a' :!E: Type) (x' :!E: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -!E- b -!E- (f -!E- y)

postulate Bool :!E: Type

postulate T :!R: Bool

postulate F :!R: Bool

postulate List :!E: Type

postulate Nil :!R: List

postulate Cons :!R: (x :!R: Bool) -> (xs :!R: List) -> List

one :!E: (x :!E: Bool) -> List = (\x :!E: Bool. Cons -!E- x -!E- Nil)

app :!E: (xs :!E: List) -> (ys :!E: List) -> List = \(xs :!E: List) (ys :!E: List).
  case -!E- xs of
    Nil
      => ys
    Cons (x :!E: Bool) (xs' :!E: List)
      => Cons -!R- x -!R- (app -!E- xs' -!E- ys)

appRightNeutral :!E: (ys :!E: List) -> Id -!E- List -!E- ys -!E- (app -!E- ys -!E- Nil) = \(ys :!E: List).
  case -!E- ys of
    Nil
      => Refl -!E- List -!E- Nil
    Cons (x :!E: Bool) (xs :!E: List)
      => cong -!E- List -!E- List -!E- (Cons -!E- x) -!E- xs -!E- (app -!E- xs -!E- Nil) -!E- (appRightNeutral -!E- xs)

appAssoc :!E: (xs :!E: List) -> (ys :!E: List) -> (zs :!E: List) -> Id -!E- List -!E- (app -!E- (app -!E- xs -!E- ys) -!E- zs) -!E- (app -!E- xs -!E- (app -!E- ys -!E- zs)) = \(xs :!E: List) (ys :!E: List) (zs :!E: List).
  case -!E- xs of
    Nil
      => Refl -!E- List -!E- (app -!E- ys -!E- zs)
    Cons (x :!E: Bool) (xs' :!E: List)
      => cong -!E- List -!E- List -!E- (Cons -!E- x) -!E- (app -!E- (app -!E- xs' -!E- ys) -!E- zs) -!E- (app -!E- xs' -!E- (app -!E- ys -!E- zs)) -!E- (appAssoc -!E- xs' -!E- ys -!E- zs)

postulate Rev :!E: (_ :!E: List) -> Type

postulate RNil :!R: Rev -!E- Nil

postulate RSnoc :!R: (xs :!E: List) -> (x :!R: Bool) -> (rxs :!R: Rev -!E- xs) -> Rev -!E- (app -!E- xs -!E- (one -!E- x))

rev' :!R: (xs :!E: List) -> (rxs :!R: Rev -!E- xs) -> (ys :!R: List) -> Rev -!E- (app -!E- xs -!E- ys) = \(xs :!E: List) (rxs :!R: Rev -!E- xs) (ys :!R: List).
  case -!R- ys of
    Nil
      => subst -!E- List -!E- Rev -!E- xs -!E- (app -!E- xs -!E- Nil) -!E- (appRightNeutral -!E- xs) -!R- rxs
    Cons (y :!R: Bool) (ys' :!R: List)
      => subst -!E- List -!E- Rev -!E- (app -!E- (app -!E- xs -!E- (one -!E- y)) -!E- ys') -!E- (app -!E- xs -!E- (Cons -!R- y -!R- ys')) -!E- (appAssoc -!E- xs -!E- (one -!E- y) -!E- ys') -!R- (rev' -!E- (app -!E- xs -!E- (one -!E- y)) -!R- (RSnoc -!E- xs -!R- y -!R- rxs) -!R- ys')

rev :!R: (xs :!R: List) -> Rev -!E- xs = (\xs :!R: List. rev' -!E- Nil -!R- RNil -!R- xs)

reverse' :!R: (xs :!E: List) -> (rxs :!R: Rev -!E- xs) -> List = \(xs :!E: List) (rxs :!R: Rev -!E- xs).
  case -!R- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :!E: List) (x :!R: Bool) (rxs' :!R: Rev -!E- xs')
      | xs = app -!E- xs' -!E- (one -!E- x)
      => Cons -!R- x -!R- (reverse' -!E- xs' -!R- rxs')

reverse :!R: (xs :!R: List) -> List = (\xs :!R: List. reverse' -!E- xs -!R- (rev -!R- xs))

main :!R: List = reverse -!R- (Cons -!R- T -!R- (Cons -!R- F -!R- (Cons -!R- T -!R- (Cons -!R- F -!R- Nil))))

### Final annotation ###

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x

id :E: (a :E: Type) -> (_ :E: a) -> a = (\a :E: Type. (\x :E: a. x))

subst :R: (a :E: Type) -> (P :E: (_ :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (_ :R: P -E- x) -> P -E- y = \(a :E: Type) (P :E: (_ :E: a) -> Type) (x :E: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :R: P -E- x'. w)

cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_ :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) = \(a :E: Type) (b :E: Type) (f :E: (_ :E: a) -> b) (x :E: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -E- b -E- (f -E- y)

postulate Bool :E: Type

postulate T :R: Bool

postulate F :R: Bool

postulate List :E: Type

postulate Nil :R: List

postulate Cons :R: (x :R: Bool) -> (xs :R: List) -> List

one :E: (x :E: Bool) -> List = (\x :E: Bool. Cons -E- x -E- Nil)

app :E: (xs :E: List) -> (ys :E: List) -> List = \(xs :E: List) (ys :E: List).
  case -E- xs of
    Nil
      => ys
    Cons (x :E: Bool) (xs' :E: List)
      => Cons -R- x -R- (app -E- xs' -E- ys)

appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) = \(ys :E: List).
  case -E- ys of
    Nil
      => Refl -E- List -E- Nil
    Cons (x :E: Bool) (xs :E: List)
      => cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)

appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) = \(xs :E: List) (ys :E: List) (zs :E: List).
  case -E- xs of
    Nil
      => Refl -E- List -E- (app -E- ys -E- zs)
    Cons (x :E: Bool) (xs' :E: List)
      => cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs' -E- ys) -E- zs) -E- (app -E- xs' -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs' -E- ys -E- zs)

postulate Rev :E: (_ :E: List) -> Type

postulate RNil :R: Rev -E- Nil

postulate RSnoc :R: (xs :E: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))

rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -E- xs -E- ys) = \(xs :E: List) (rxs :R: Rev -E- xs) (ys :R: List).
  case -R- ys of
    Nil
      => subst -E- List -E- Rev -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs) -R- rxs
    Cons (y :R: Bool) (ys' :R: List)
      => subst -E- List -E- Rev -E- (app -E- (app -E- xs -E- (one -E- y)) -E- ys') -E- (app -E- xs -E- (Cons -R- y -R- ys')) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys') -R- (rev' -E- (app -E- xs -E- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys')

rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)

reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List = \(xs :E: List) (rxs :R: Rev -E- xs).
  case -R- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :E: List) (x :R: Bool) (rxs' :R: Rev -E- xs')
      | xs = app -E- xs' -E- (one -E- x)
      => Cons -R- x -R- (reverse' -E- xs' -R- rxs')

reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))

main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))

### Verification ###

Verification successful.

### Pruned ###

subst = (\w. w)

postulate T

postulate F

postulate Nil

postulate Cons

postulate RNil

postulate RSnoc

rev' = \rxs ys.
  case ys of
    Nil
      => subst rxs
    Cons y ys'
      => subst (rev' (RSnoc y rxs) ys')

rev = (\xs. rev' RNil xs)

reverse' = \rxs.
  case rxs of
    RNil
      => Nil
    RSnoc x rxs'
      => Cons x (reverse' rxs')

reverse = (\xs. reverse' (rev xs))

main = reverse (Cons T (Cons F (Cons T (Cons F Nil))))

### Normal forms ###

unerased:
  Cons F (Cons T (Cons F (Cons T Nil)))
erased:
  Cons F (Cons T (Cons F (Cons T Nil)))
