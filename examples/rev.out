-- vim: ft=agda

### Desugared ###

postulate Id : (a : Type) -> (x : a) -> (y : a) -> Type

postulate Refl : (a : Type) -> (x : a) -> Id a x x

id : (a : Type) -> (_ : a) -> a = (\a : Type. (\x : a. x))

subst : (a : Type) -> (P : (_ : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (_ : P x) -> P y 
  pat (a : Type) (P : (_ : a) -> Type) (x : a) (eq : Id a x x).
    subst a P x [x] (Refl [a] [x]) = (\y : P x. y)

cong : (a : Type) -> (b : Type) -> (f : (_ : a) -> b) -> (x : a) -> (y : a) -> (eq : Id a x y) -> Id b (f x) (f y) 
  pat (a : Type) (b : Type) (f : (_ : a) -> b) (x : a).
    cong a b f x [x] (Refl a [x]) = Refl b (f x)

postulate Bool : Type

postulate T : Bool

postulate F : Bool

postulate List : Type

postulate Nil : List

postulate Cons : (x  -R-  Bool) -> (xs  -R-  List) -> List

one : (x : Bool) -> List = (\x : Bool. Cons x Nil)

app : (_ : List) -> (_ : List) -> List 
  pat (ys : List).
    app Nil ys = ys
  pat (x : Bool) (xs : List) (ys : List).
    app (Cons x xs) ys = Cons x (app xs ys)

appRightNeutral : (ys : List) -> Id List ys (app ys Nil) 
  appRightNeutral Nil = Refl List Nil
  pat (x : Bool) (xs : List).
    appRightNeutral (Cons x xs) = cong List List (Cons x) xs (app xs Nil) (appRightNeutral xs)

postulate appAssoc : (xs : List) -> (ys : List) -> (zs : List) -> Id List (app xs (app ys zs)) (app (app xs ys) zs)

main  -R-  Type = Type

### Metaified ###

postulate Id :?1: (a :?2: Type) -> (x :?3: a) -> (y :?4: a) -> Type

postulate Refl :?5: (a :?6: Type) -> (x :?7: a) -> Id -?10- a -?9- x -?8- x

id :?11: (a :?12: Type) -> (_ :?13: a) -> a = (\a :?14: Type. (\x :?15: a. x))

subst :?16: (a :?17: Type) -> (P :?18: (_ :?19: a) -> Type) -> (x :?20: a) -> (y :?21: a) -> (eq :?22: Id -?25- a -?24- x -?23- y) -> (_ :?26: P -?27- x) -> P -?28- y 
  pat (a :?29: Type) (P :?30: (_ :?31: a) -> Type) (x :?32: a) (eq :?33: Id -?36- a -?35- x -?34- x).
    subst -?41- a -?40- P -?39- x -?38- [x] -?37- (Refl -?43- [a] -?42- [x]) = (\y :?44: P -?45- x. y)

cong :?46: (a :?47: Type) -> (b :?48: Type) -> (f :?49: (_ :?50: a) -> b) -> (x :?51: a) -> (y :?52: a) -> (eq :?53: Id -?56- a -?55- x -?54- y) -> Id -?59- b -?58- (f -?60- x) -?57- (f -?61- y) 
  pat (a :?62: Type) (b :?63: Type) (f :?64: (_ :?65: a) -> b) (x :?66: a).
    cong -?72- a -?71- b -?70- f -?69- x -?68- [x] -?67- (Refl -?74- a -?73- [x]) = Refl -?76- b -?75- (f -?77- x)

postulate Bool :?78: Type

postulate T :?79: Bool

postulate F :?80: Bool

postulate List :?81: Type

postulate Nil :?82: List

postulate Cons :?83: (x :!R: Bool) -> (xs :!R: List) -> List

one :?84: (x :?85: Bool) -> List = (\x :?86: Bool. Cons -?88- x -?87- Nil)

app :?89: (_ :?90: List) -> (_ :?91: List) -> List 
  pat (ys :?92: List).
    app -?94- Nil -?93- ys = ys
  pat (x :?95: Bool) (xs :?96: List) (ys :?97: List).
    app -?99- (Cons -?101- x -?100- xs) -?98- ys = Cons -?103- x -?102- (app -?105- xs -?104- ys)

appRightNeutral :?106: (ys :?107: List) -> Id -?110- List -?109- ys -?108- (app -?112- ys -?111- Nil) 
  appRightNeutral -?113- Nil = Refl -?115- List -?114- Nil
  pat (x :?116: Bool) (xs :?117: List).
    appRightNeutral -?118- (Cons -?120- x -?119- xs) = cong -?126- List -?125- List -?124- (Cons -?127- x) -?123- xs -?122- (app -?129- xs -?128- Nil) -?121- (appRightNeutral -?130- xs)

postulate appAssoc :?131: (xs :?132: List) -> (ys :?133: List) -> (zs :?134: List) -> Id -?137- List -?136- (app -?139- xs -?138- (app -?141- ys -?140- zs)) -?135- (app -?143- (app -?145- xs -?144- ys) -?142- zs)

main :!R: Type = Type

### Inferred definitions ###

