-- vim: ft=agda

### Desugared ###

postulate Bool : Type

postulate T : Bool

postulate F : Bool

postulate List : Type

postulate Nil : List

postulate Cons : (x  -R-  Bool) -> (xs  -R-  List) -> List

one : (x : Bool) -> List = (\x : Bool. Cons x Nil)

app : (_ : List) -> (_ : List) -> List 
  pat (ys : List).
    app Nil ys = ys
  pat (x : Bool) (xs : List) (ys : List).
    app (Cons x xs) ys = Cons x (app xs ys)

postulate Rev : (_ : List) -> Type

postulate RNil : Rev Nil

postulate RSnoc : (x : Bool) -> (xs : List) -> (rxs : Rev xs) -> Rev (app xs (one x))

postulate rev : (xs : List) -> Rev xs

### Metaified ###

postulate Bool :?1: Type

postulate T :?2: Bool

postulate F :?3: Bool

postulate List :?4: Type

postulate Nil :?5: List

postulate Cons :?6: (x :!R: Bool) -> (xs :!R: List) -> List

one :?7: (x :?8: Bool) -> List = (\x :?9: Bool. Cons -?11- x -?10- Nil)

app :?12: (_ :?13: List) -> (_ :?14: List) -> List 
  pat (ys :?15: List).
    app -?17- Nil -?16- ys = ys
  pat (x :?18: Bool) (xs :?19: List) (ys :?20: List).
    app -?22- (Cons -?24- x -?23- xs) -?21- ys = Cons -?26- x -?25- (app -?28- xs -?27- ys)

postulate Rev :?29: (_ :?30: List) -> Type

postulate RNil :?31: Rev -?32- Nil

postulate RSnoc :?33: (x :?34: Bool) -> (xs :?35: List) -> (rxs :?36: Rev -?37- xs) -> Rev -?38- (app -?40- xs -?39- (one -?41- x))

postulate rev :?42: (xs :?43: List) -> Rev -?44- xs

### Inferred definitions ###

postulate Bool :?1: Type

postulate Cons :?6: (x :!R: Bool) -> (xs :!R: List) -> List

postulate F :?3: Bool

postulate List :?4: Type

postulate Nil :?5: List

postulate RNil :?31: Rev -?32- Nil

postulate RSnoc :?33: (x :?34: Bool) -> (xs :?35: List) -> (rxs :?36: Rev -?37- xs) -> Rev -?38- (app -?40- xs -?39- (one -?41- x))

postulate Rev :?29: (_ :?30: List) -> Type

postulate T :?2: Bool

postulate Type :!R: Type

app :?12: (_ :?13: List) -> (_ :?14: List) -> List 
  pat (ys :?15: List).
    app -?17- Nil -?16- ys = ys
  pat (x :?18: Bool) (xs :?19: List) (ys :?20: List).
    app -?22- (Cons -?24- x -?23- xs) -?21- ys = Cons -?26- x -?25- (app -?28- xs -?27- ys)
  [] -> [?6,?12,?13,?14,?15,?16,?17,?18,?19,?20,?21,?22,?23,?24,?25,?26,?27,?28,!R]

one :?7: (x :?8: Bool) -> List = (\x :?9: Bool. Cons -?11- x -?10- Nil)
  [] -> [?5,?6,?8,?9,?10,?11,!R]

postulate rev :?42: (xs :?43: List) -> Rev -?44- xs


### Constraints ###

[] -> [?5,?6,?8,?9,?10,?11,?12,?13,?14,?15,?16,?17,?18,?19,?20,?21,?22,?23,?24,?25,?26,?27,?28,!R]

### Solution ###

[?5,?6,?8,?9,?10,?11,?12,?13,?14,?15,?16,?17,?18,?19,?20,?21,?22,?23,?24,?25,?26,?27,?28,!R]

### Annotated ###

postulate Bool :E: Type

postulate T :E: Bool

postulate F :E: Bool

postulate List :E: Type

postulate Nil :R: List

postulate Cons :R: (x :R: Bool) -> (xs :R: List) -> List

one :E: (x :R: Bool) -> List = (\x :R: Bool. Cons -R- x -R- Nil)

app :R: (_ :R: List) -> (_ :R: List) -> List 
  pat (ys :R: List).
    app -R- Nil -R- ys = ys
  pat (x :R: Bool) (xs :R: List) (ys :R: List).
    app -R- (Cons -R- x -R- xs) -R- ys = Cons -R- x -R- (app -R- xs -R- ys)

postulate Rev :E: (_ :E: List) -> Type

postulate RNil :E: Rev -E- Nil

postulate RSnoc :E: (x :E: Bool) -> (xs :E: List) -> (rxs :E: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))

postulate rev :E: (xs :E: List) -> Rev -E- xs

### Specialised ###

postulate Bool :!E: Type

postulate T :!E: Bool

postulate F :!E: Bool

postulate List :!E: Type

postulate Nil :!R: List

postulate Cons :!R: (x :!R: Bool) -> (xs :!R: List) -> List

one :!E: (x :!R: Bool) -> List = (\x :!R: Bool. Cons -!R- x -!R- Nil)

app :!R: (_ :!R: List) -> (_ :!R: List) -> List 
  pat (ys :!R: List).
    app -!R- Nil -!R- ys = ys
  pat (x :!R: Bool) (xs :!R: List) (ys :!R: List).
    app -!R- (Cons -!R- x -!R- xs) -!R- ys = Cons -!R- x -!R- (app -!R- xs -!R- ys)

postulate Rev :!E: (_ :!E: List) -> Type

postulate RNil :!E: Rev -!E- Nil

postulate RSnoc :!E: (x :!E: Bool) -> (xs :!E: List) -> (rxs :!E: Rev -!E- xs) -> Rev -!E- (app -!E- xs -!E- (one -!E- x))

postulate rev :!E: (xs :!E: List) -> Rev -!E- xs

### Final annotation ###

postulate Bool :E: Type

postulate T :E: Bool

postulate F :E: Bool

postulate List :E: Type

postulate Nil :R: List

postulate Cons :R: (x :R: Bool) -> (xs :R: List) -> List

one :E: (x :R: Bool) -> List = (\x :R: Bool. Cons -R- x -R- Nil)

app :R: (_ :R: List) -> (_ :R: List) -> List 
  pat (ys :R: List).
    app -R- Nil -R- ys = ys
  pat (x :R: Bool) (xs :R: List) (ys :R: List).
    app -R- (Cons -R- x -R- xs) -R- ys = Cons -R- x -R- (app -R- xs -R- ys)

postulate Rev :E: (_ :E: List) -> Type

postulate RNil :E: Rev -E- Nil

postulate RSnoc :E: (x :E: Bool) -> (xs :E: List) -> (rxs :E: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))

postulate rev :E: (xs :E: List) -> Rev -E- xs

### Verification ###

Verification successful.

### Pruned ###

postulate Nil

postulate Cons

app 
  pat ys.
    app Nil ys = ys
  pat x xs ys.
    app (Cons x xs) ys = Cons x (app xs ys)

### Normal forms ###

unerased:
