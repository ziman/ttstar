-- vim: ft=agda

### Desugared ###

postulate Id : (a : Type) -> (x : a) -> (y : a) -> Type

postulate Refl : (a : Type) -> (x : a) -> Id a x x

id : (a : Type) -> (_ : a) -> a = (\a : Type. (\x : a. x))

subst : (a : Type) -> (P : (_ : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (_ : P x) -> P y = \(a : Type) (P : (_ : a) -> Type) (x : a) (y : a) (eq : Id a x y).
  case eq of
    Refl (a' : Type) (x' : a)
      | a' = a
      | x' = x
      | y = x
      => (\w : P x'. w)

cong : (a : Type) -> (b : Type) -> (f : (_ : a) -> b) -> (x : a) -> (y : a) -> (eq : Id a x y) -> Id b (f x) (f y) = \(a : Type) (b : Type) (f : (_ : a) -> b) (x : a) (y : a) (eq : Id a x y).
  case eq of
    Refl (a' : Type) (x' : a)
      | a' = a
      | x' = x
      | y = x
      => Refl b (f y)

postulate Bool : Type

postulate T : Bool

postulate F : Bool

postulate List : Type

postulate Nil : List

postulate Cons : (x  -R-  Bool) -> (xs  -R-  List) -> List

one : (x : Bool) -> List = (\x : Bool. Cons x Nil)

app : (xs : List) -> (ys : List) -> List = \(xs : List) (ys : List).
  case xs of
    Nil
      => ys
    Cons (x : Bool) (xs' : List)
      => Cons x (app xs' ys)

appRightNeutral : (ys : List) -> Id List ys (app ys Nil) = \(ys : List).
  case ys of
    Nil
      => Refl List Nil
    Cons (x : Bool) (xs : List)
      => cong List List (Cons x) xs (app xs Nil) (appRightNeutral xs)

appAssoc : (xs : List) -> (ys : List) -> (zs : List) -> Id List (app (app xs ys) zs) (app xs (app ys zs)) = \(xs : List) (ys : List) (zs : List).
  case xs of
    Nil
      => Refl List (app ys zs)
    Cons (x : Bool) (xs' : List)
      => cong List List (Cons x) (app (app xs' ys) zs) (app xs' (app ys zs)) (appAssoc xs' ys zs)

postulate Rev : (_ : List) -> Type

postulate RNil : Rev Nil

postulate RSnoc : (xs : List) -> (x : Bool) -> (rxs : Rev xs) -> Rev (app xs (one x))

rev' : (xs : List) -> (rxs : Rev xs) -> (ys : List) -> Rev (app xs ys) = \(xs : List) (rxs : Rev xs) (ys : List).
  case ys of
    Nil
      => subst List Rev xs (app xs Nil) (appRightNeutral xs) rxs
    Cons (y : Bool) (ys' : List)
      => subst List Rev (app (app xs (one y)) ys') (app xs (Cons y ys')) (appAssoc xs (one y) ys') (rev' (app xs (one y)) (RSnoc xs y rxs) ys')

rev : (xs : List) -> Rev xs = (\xs : List. rev' Nil RNil xs)

reverse' : (xs : List) -> (rxs : Rev xs) -> List = \(xs : List) (rxs : Rev xs).
  case rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' : List) (x : Bool) (rxs' : Rev xs')
      | xs = app xs' (one x)
      => Cons x (reverse' xs' rxs')

reverse : (xs : List) -> List = (\xs : List. reverse' xs (rev xs))

main  -R-  List = reverse (Cons T (Cons F (Cons T (Cons F Nil))))

### Metaified ###

postulate Id :?1: (a :?2: Type) -> (x :?3: a) -> (y :?4: a) -> Type

postulate Refl :?5: (a :?6: Type) -> (x :?7: a) -> Id -?10- a -?9- x -?8- x

id :?11: (a :?12: Type) -> (_ :?13: a) -> a = (\a :?14: Type. (\x :?15: a. x))

subst :?16: (a :?17: Type) -> (P :?18: (_ :?19: a) -> Type) -> (x :?20: a) -> (y :?21: a) -> (eq :?22: Id -?25- a -?24- x -?23- y) -> (_ :?26: P -?27- x) -> P -?28- y = \(a :?29: Type) (P :?30: (_ :?31: a) -> Type) (x :?32: a) (y :?33: a) (eq :?34: Id -?37- a -?36- x -?35- y).
  case -?38- eq of
    Refl (a' :?39: Type) (x' :?40: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :?41: P -?42- x'. w)

cong :?43: (a :?44: Type) -> (b :?45: Type) -> (f :?46: (_ :?47: a) -> b) -> (x :?48: a) -> (y :?49: a) -> (eq :?50: Id -?53- a -?52- x -?51- y) -> Id -?56- b -?55- (f -?57- x) -?54- (f -?58- y) = \(a :?59: Type) (b :?60: Type) (f :?61: (_ :?62: a) -> b) (x :?63: a) (y :?64: a) (eq :?65: Id -?68- a -?67- x -?66- y).
  case -?69- eq of
    Refl (a' :?70: Type) (x' :?71: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -?73- b -?72- (f -?74- y)

postulate Bool :?75: Type

postulate T :?76: Bool

postulate F :?77: Bool

postulate List :?78: Type

postulate Nil :?79: List

postulate Cons :?80: (x :!R: Bool) -> (xs :!R: List) -> List

one :?81: (x :?82: Bool) -> List = (\x :?83: Bool. Cons -?85- x -?84- Nil)

app :?86: (xs :?87: List) -> (ys :?88: List) -> List = \(xs :?89: List) (ys :?90: List).
  case -?91- xs of
    Nil
      => ys
    Cons (x :?92: Bool) (xs' :?93: List)
      => Cons -?95- x -?94- (app -?97- xs' -?96- ys)

appRightNeutral :?98: (ys :?99: List) -> Id -?102- List -?101- ys -?100- (app -?104- ys -?103- Nil) = \(ys :?105: List).
  case -?106- ys of
    Nil
      => Refl -?108- List -?107- Nil
    Cons (x :?109: Bool) (xs :?110: List)
      => cong -?116- List -?115- List -?114- (Cons -?117- x) -?113- xs -?112- (app -?119- xs -?118- Nil) -?111- (appRightNeutral -?120- xs)

appAssoc :?121: (xs :?122: List) -> (ys :?123: List) -> (zs :?124: List) -> Id -?127- List -?126- (app -?129- (app -?131- xs -?130- ys) -?128- zs) -?125- (app -?133- xs -?132- (app -?135- ys -?134- zs)) = \(xs :?136: List) (ys :?137: List) (zs :?138: List).
  case -?139- xs of
    Nil
      => Refl -?141- List -?140- (app -?143- ys -?142- zs)
    Cons (x :?144: Bool) (xs' :?145: List)
      => cong -?151- List -?150- List -?149- (Cons -?152- x) -?148- (app -?154- (app -?156- xs' -?155- ys) -?153- zs) -?147- (app -?158- xs' -?157- (app -?160- ys -?159- zs)) -?146- (appAssoc -?163- xs' -?162- ys -?161- zs)

postulate Rev :?164: (_ :?165: List) -> Type

postulate RNil :?166: Rev -?167- Nil

postulate RSnoc :?168: (xs :?169: List) -> (x :?170: Bool) -> (rxs :?171: Rev -?172- xs) -> Rev -?173- (app -?175- xs -?174- (one -?176- x))

rev' :?177: (xs :?178: List) -> (rxs :?179: Rev -?180- xs) -> (ys :?181: List) -> Rev -?182- (app -?184- xs -?183- ys) = \(xs :?185: List) (rxs :?186: Rev -?187- xs) (ys :?188: List).
  case -?189- ys of
    Nil
      => subst -?195- List -?194- Rev -?193- xs -?192- (app -?197- xs -?196- Nil) -?191- (appRightNeutral -?198- xs) -?190- rxs
    Cons (y :?199: Bool) (ys' :?200: List)
      => subst -?206- List -?205- Rev -?204- (app -?208- (app -?210- xs -?209- (one -?211- y)) -?207- ys') -?203- (app -?213- xs -?212- (Cons -?215- y -?214- ys')) -?202- (appAssoc -?218- xs -?217- (one -?219- y) -?216- ys') -?201- (rev' -?222- (app -?224- xs -?223- (one -?225- y)) -?221- (RSnoc -?228- xs -?227- y -?226- rxs) -?220- ys')

rev :?229: (xs :?230: List) -> Rev -?231- xs = (\xs :?232: List. rev' -?235- Nil -?234- RNil -?233- xs)

reverse' :?236: (xs :?237: List) -> (rxs :?238: Rev -?239- xs) -> List = \(xs :?240: List) (rxs :?241: Rev -?242- xs).
  case -?243- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :?244: List) (x :?245: Bool) (rxs' :?246: Rev -?247- xs')
      | xs = app -?249- xs' -?248- (one -?250- x)
      => Cons -?252- x -?251- (reverse' -?254- xs' -?253- rxs')

reverse :?255: (xs :?256: List) -> List = (\xs :?257: List. reverse' -?259- xs -?258- (rev -?260- xs))

main :!R: List = reverse -?261- (Cons -?263- T -?262- (Cons -?265- F -?264- (Cons -?267- T -?266- (Cons -?269- F -?268- Nil))))

### Inferred definitions ###

postulate Bool :?75: Type

postulate Cons :?80: (x :!R: Bool) -> (xs :!R: List) -> List

postulate F :?77: Bool

postulate Id :?1: (a :?2: Type) -> (x :?3: a) -> (y :?4: a) -> Type

postulate List :?78: Type

postulate Nil :?79: List

postulate RNil :?166: Rev -?167- Nil

postulate RSnoc :?168: (xs :?169: List) -> (x :?170: Bool) -> (rxs :?171: Rev -?172- xs) -> Rev -?173- (app -?175- xs -?174- (one -?176- x))

postulate Refl :?5: (a :?6: Type) -> (x :?7: a) -> Id -?10- a -?9- x -?8- x

postulate Rev :?164: (_ :?165: List) -> Type

postulate T :?76: Bool

postulate Type :!R: Type

app :?86: (xs :?87: List) -> (ys :?88: List) -> List = \(xs :?89: List) (ys :?90: List).
  case -?91- xs of
    Nil
      => ys
    Cons (x :?92: Bool) (xs' :?93: List)
      => Cons -?95- x -?94- (app -?97- xs' -?96- ys)
  [] -> [?80,?86,?87,?88,?89,?90,?91,?92,?93,?94,?95,?96,?97,!R]

appAssoc :?121: (xs :?122: List) -> (ys :?123: List) -> (zs :?124: List) -> Id -?127- List -?126- (app -?129- (app -?131- xs -?130- ys) -?128- zs) -?125- (app -?133- xs -?132- (app -?135- ys -?134- zs)) = \(xs :?136: List) (ys :?137: List) (zs :?138: List).
  case -?139- xs of
    Nil
      => Refl -?141- List -?140- (app -?143- ys -?142- zs)
    Cons (x :?144: Bool) (xs' :?145: List)
      => cong -?151- List -?150- List -?149- (Cons -?152- x) -?148- (app -?154- (app -?156- xs' -?155- ys) -?153- zs) -?147- (app -?158- xs' -?157- (app -?160- ys -?159- zs)) -?146- (appAssoc -?163- xs' -?162- ys -?161- zs)
  [] -> [?5,?43,?47,?122,?136,?139,?144,?145,!R]
  [?6] -> [?78,?141]
  [?7] -> [?86,?140]
  [?7,?87] -> [?137,?143]
  [?7,?88] -> [?138,?142]
  [?7,?142] -> [?88]
  [?7,?143] -> [?87]
  [?8] -> [?125]
  [?9] -> [?126]
  [?10] -> [?127]
  [?44] -> [?78,?151]
  [?45] -> [?78,?150]
  [?46] -> [?80,?149,?152]
  [?48] -> [?86,?148]
  [?48,?87] -> [?86,?154,?156]
  [?48,?87,?88] -> [?137,?155]
  [?48,?87,?155] -> [?88]
  [?48,?87,?156] -> [?87]
  [?48,?88] -> [?138,?153]
  [?48,?153] -> [?88]
  [?48,?154] -> [?87]
  [?49] -> [?86,?147]
  [?49,?87] -> [?158]
  [?49,?87,?88] -> [?137,?160]
  [?49,?88] -> [?86,?138,?157,?159]
  [?49,?88,?159] -> [?88]
  [?49,?88,?160] -> [?87]
  [?49,?157] -> [?88]
  [?49,?158] -> [?87]
  [?50] -> [?121,?146,?163]
  [?50,?123] -> [?137,?162]
  [?50,?124] -> [?138,?161]
  [?50,?161] -> [?124]
  [?50,?162] -> [?123]
  [?51] -> [?125]
  [?52] -> [?126]
  [?53] -> [?127]
  [?54] -> [?125]
  [?55] -> [?126]
  [?56] -> [?127]
  [?57] -> [?94]
  [?58] -> [?94]
  [?94] -> [?57,?58]
  [?95] -> [?152]
  [?96] -> [?153,?155,?157]
  [?97] -> [?154,?156,?158]
  [?123] -> [?137]
  [?124] -> [?138]
  [?125] -> [?8,?51,?54]
  [?126] -> [?9,?52,?55]
  [?127] -> [?10,?53,?56]
  [?128] -> [?142,?153]
  [?129] -> [?143,?154]
  [?130] -> [?155]
  [?131] -> [?156]
  [?132] -> [?157]
  [?133] -> [?158]
  [?134] -> [?142,?159]
  [?135] -> [?143,?160]
  [?137] -> [?123]
  [?138] -> [?124]
  [?140] -> [?7]
  [?141] -> [?6]
  [?142] -> [?128,?134]
  [?143] -> [?129,?135]
  [?146] -> [?50]
  [?147] -> [?49]
  [?148] -> [?48]
  [?149] -> [?46]
  [?150] -> [?45]
  [?151] -> [?44]
  [?152] -> [?95]
  [?153] -> [?96,?128]
  [?154] -> [?97,?129]
  [?155] -> [?96,?130]
  [?156] -> [?97,?131]
  [?157] -> [?96,?132]
  [?158] -> [?97,?133]
  [?159] -> [?134]
  [?160] -> [?135]

appRightNeutral :?98: (ys :?99: List) -> Id -?102- List -?101- ys -?100- (app -?104- ys -?103- Nil) = \(ys :?105: List).
  case -?106- ys of
    Nil
      => Refl -?108- List -?107- Nil
    Cons (x :?109: Bool) (xs :?110: List)
      => cong -?116- List -?115- List -?114- (Cons -?117- x) -?113- xs -?112- (app -?119- xs -?118- Nil) -?111- (appRightNeutral -?120- xs)
  [] -> [?5,?43,?47,?57,?95,?99,?105,?106,?109,?110,?117,!R]
  [?6] -> [?78,?108]
  [?7] -> [?79,?107]
  [?8] -> [?100]
  [?9] -> [?101]
  [?10] -> [?102]
  [?44] -> [?78,?116]
  [?45] -> [?78,?115]
  [?46] -> [?80,?114]
  [?48] -> [?113]
  [?49] -> [?86,?112]
  [?49,?87] -> [?119]
  [?49,?88] -> [?79,?118]
  [?49,?118] -> [?88]
  [?49,?119] -> [?87]
  [?50] -> [?98,?111,?120]
  [?51] -> [?100]
  [?52] -> [?101]
  [?53] -> [?102]
  [?54] -> [?100]
  [?55] -> [?101]
  [?56] -> [?102]
  [?58] -> [?94]
  [?94] -> [?58]
  [?96] -> [?118]
  [?97] -> [?119]
  [?100] -> [?8,?51,?54]
  [?101] -> [?9,?52,?55]
  [?102] -> [?10,?53,?56]
  [?103] -> [?118]
  [?104] -> [?119]
  [?107] -> [?7]
  [?108] -> [?6]
  [?111] -> [?50]
  [?112] -> [?49]
  [?113] -> [?48]
  [?114] -> [?46]
  [?115] -> [?45]
  [?116] -> [?44]
  [?118] -> [?96,?103]
  [?119] -> [?97,?104]

cong :?43: (a :?44: Type) -> (b :?45: Type) -> (f :?46: (_ :?47: a) -> b) -> (x :?48: a) -> (y :?49: a) -> (eq :?50: Id -?53- a -?52- x -?51- y) -> Id -?56- b -?55- (f -?57- x) -?54- (f -?58- y) = \(a :?59: Type) (b :?60: Type) (f :?61: (_ :?62: a) -> b) (x :?63: a) (y :?64: a) (eq :?65: Id -?68- a -?67- x -?66- y).
  case -?69- eq of
    Refl (a' :?70: Type) (x' :?71: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -?73- b -?72- (f -?74- y)
  [] -> [?5,!R]
  [?6] -> [?50,?60,?70,?73]
  [?7] -> [?50,?61,?71,?72]
  [?7,?62] -> [?74]
  [?7,?74] -> [?62]
  [?8] -> [?51,?54]
  [?9] -> [?52,?55]
  [?10] -> [?53,?56]
  [?44] -> [?59]
  [?45] -> [?60]
  [?46] -> [?61]
  [?47] -> [?62]
  [?48] -> [?63]
  [?49] -> [?64]
  [?50] -> [?65]
  [?51] -> [?8]
  [?52] -> [?9]
  [?53] -> [?10]
  [?54] -> [?8]
  [?55] -> [?9]
  [?56] -> [?10]
  [?57] -> [?74]
  [?58] -> [?74]
  [?59] -> [?44]
  [?60] -> [?45]
  [?61] -> [?46]
  [?62] -> [?47]
  [?63] -> [?48]
  [?64] -> [?49]
  [?65] -> [?50]
  [?69] -> [?65]
  [?70] -> [?6,?50,?69]
  [?71] -> [?7,?50,?69]
  [?72] -> [?7]
  [?73] -> [?6]
  [?74] -> [?57,?58]

id :?11: (a :?12: Type) -> (_ :?13: a) -> a = (\a :?14: Type. (\x :?15: a. x))
  [] -> [?13,?15,!R]
  [?12] -> [?14]
  [?14] -> [?12]

main :!R: List = reverse -?261- (Cons -?263- T -?262- (Cons -?265- F -?264- (Cons -?267- T -?266- (Cons -?269- F -?268- Nil))))
  [] -> [?255,!R]
  [?256] -> [?76,?77,?79,?80,?261,?262,?263,?264,?265,?266,?267,?268,?269]
  [?261] -> [?256]

one :?81: (x :?82: Bool) -> List = (\x :?83: Bool. Cons -?85- x -?84- Nil)
  [] -> [?79,?80,?82,?83,?84,?85,!R]

rev :?229: (xs :?230: List) -> Rev -?231- xs = (\xs :?232: List. rev' -?235- Nil -?234- RNil -?233- xs)
  [] -> [?177,!R]
  [?167] -> [?180]
  [?178] -> [?79,?235]
  [?179] -> [?166,?234]
  [?180] -> [?167]
  [?181] -> [?232,?233]
  [?182] -> [?231]
  [?230] -> [?232]
  [?231] -> [?182]
  [?232] -> [?230]
  [?233] -> [?181]
  [?234] -> [?179]
  [?235] -> [?178]

rev' :?177: (xs :?178: List) -> (rxs :?179: Rev -?180- xs) -> (ys :?181: List) -> Rev -?182- (app -?184- xs -?183- ys) = \(xs :?185: List) (rxs :?186: Rev -?187- xs) (ys :?188: List).
  case -?189- ys of
    Nil
      => subst -?195- List -?194- Rev -?193- xs -?192- (app -?197- xs -?196- Nil) -?191- (appRightNeutral -?198- xs) -?190- rxs
    Cons (y :?199: Bool) (ys' :?200: List)
      => subst -?206- List -?205- Rev -?204- (app -?208- (app -?210- xs -?209- (one -?211- y)) -?207- ys') -?203- (app -?213- xs -?212- (Cons -?215- y -?214- ys')) -?202- (appAssoc -?218- xs -?217- (one -?219- y) -?216- ys') -?201- (rev' -?222- (app -?224- xs -?223- (one -?225- y)) -?221- (RSnoc -?228- xs -?227- y -?226- rxs) -?220- ys')
  [] -> [?16,?94,?95,?181,?188,?189,?199,?200,?214,?215,!R]
  [?17] -> [?78,?195,?206]
  [?18] -> [?164,?194,?205]
  [?19] -> [?165]
  [?20] -> [?86,?185,?193,?204]
  [?20,?82,?87,?88] -> [?211]
  [?20,?87] -> [?86,?185,?208,?210]
  [?20,?87,?88] -> [?81,?209]
  [?20,?87,?88,?211] -> [?82]
  [?20,?87,?209] -> [?88]
  [?20,?87,?210] -> [?87]
  [?20,?88] -> [?207]
  [?20,?207] -> [?88]
  [?20,?208] -> [?87]
  [?21] -> [?86,?192,?203]
  [?21,?87] -> [?185,?197,?213]
  [?21,?88] -> [?79,?80,?196,?212]
  [?21,?196] -> [?88]
  [?21,?197] -> [?87]
  [?21,?212] -> [?88]
  [?21,?213] -> [?87]
  [?22] -> [?98,?121,?191,?202]
  [?22,?82,?123] -> [?219]
  [?22,?99] -> [?185,?198]
  [?22,?122] -> [?185,?218]
  [?22,?123] -> [?81,?217]
  [?22,?123,?219] -> [?82]
  [?22,?124] -> [?216]
  [?22,?198] -> [?99]
  [?22,?216] -> [?124]
  [?22,?217] -> [?123]
  [?22,?218] -> [?122]
  [?23] -> [?100,?125]
  [?24] -> [?101,?126]
  [?25] -> [?102,?127]
  [?26] -> [?177,?186,?190,?201,?220]
  [?26,?82,?88,?178] -> [?225]
  [?26,?84] -> [?84]
  [?26,?85] -> [?85]
  [?26,?87,?178] -> [?185,?224]
  [?26,?88,?178] -> [?81,?223]
  [?26,?88,?178,?225] -> [?82]
  [?26,?169,?179] -> [?185,?228]
  [?26,?170,?179] -> [?227]
  [?26,?171,?179] -> [?186,?226]
  [?26,?172,?179] -> [?187]
  [?26,?173] -> [?180]
  [?26,?174] -> [?223]
  [?26,?175] -> [?224]
  [?26,?178] -> [?86,?222]
  [?26,?178,?223] -> [?88]
  [?26,?178,?224] -> [?87]
  [?26,?179] -> [?168,?221]
  [?26,?179,?187] -> [?172]
  [?26,?179,?226] -> [?171]
  [?26,?179,?227] -> [?170]
  [?26,?179,?228] -> [?169]
  [?26,?180] -> [?173]
  [?26,?221] -> [?179]
  [?26,?222] -> [?178]
  [?26,?223] -> [?174]
  [?26,?224] -> [?175]
  [?27] -> [?182,?187]
  [?28] -> [?182]
  [?84] -> [?84]
  [?85] -> [?85]
  [?100] -> [?23]
  [?101] -> [?24]
  [?102] -> [?25]
  [?103] -> [?196]
  [?104] -> [?197]
  [?125] -> [?23]
  [?126] -> [?24]
  [?127] -> [?25]
  [?128] -> [?207]
  [?129] -> [?208]
  [?130] -> [?209]
  [?131] -> [?210]
  [?132] -> [?212]
  [?133] -> [?213]
  [?165] -> [?19]
  [?178] -> [?185]
  [?179] -> [?186]
  [?180] -> [?187]
  [?182] -> [?27,?28]
  [?183] -> [?196,?207,?212]
  [?184] -> [?197,?208,?213]
  [?185] -> [?178]
  [?186] -> [?179]
  [?187] -> [?27,?180]
  [?190] -> [?26]
  [?191] -> [?22]
  [?192] -> [?21]
  [?193] -> [?20]
  [?194] -> [?18]
  [?195] -> [?17]
  [?196] -> [?103,?183]
  [?197] -> [?104,?184]
  [?201] -> [?26]
  [?202] -> [?22]
  [?203] -> [?21]
  [?204] -> [?20]
  [?205] -> [?18]
  [?206] -> [?17]
  [?207] -> [?128,?183]
  [?208] -> [?129,?184]
  [?209] -> [?130,?223]
  [?210] -> [?131,?224]
  [?212] -> [?132,?183]
  [?213] -> [?133,?184]
  [?223] -> [?209]
  [?224] -> [?210]

reverse :?255: (xs :?256: List) -> List = (\xs :?257: List. reverse' -?259- xs -?258- (rev -?260- xs))
  [] -> [?236,!R]
  [?230,?238] -> [?257,?260]
  [?231] -> [?239]
  [?237] -> [?257,?259]
  [?238] -> [?229,?258]
  [?238,?260] -> [?230]
  [?239] -> [?231]
  [?256] -> [?257]
  [?257] -> [?256]
  [?258] -> [?238]
  [?259] -> [?237]

reverse' :?236: (xs :?237: List) -> (rxs :?238: Rev -?239- xs) -> List = \(xs :?240: List) (rxs :?241: Rev -?242- xs).
  case -?243- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :?244: List) (x :?245: Bool) (rxs' :?246: Rev -?247- xs')
      | xs = app -?249- xs' -?248- (one -?250- x)
      => Cons -?252- x -?251- (reverse' -?254- xs' -?253- rxs')
  [] -> [?79,?80,?170,?171,?236,?238,?241,?243,?245,?246,?251,?252,?253,!R]
  [?84] -> [?84]
  [?85] -> [?85]
  [?167] -> [?239]
  [?169] -> [?244]
  [?172] -> [?247]
  [?173] -> [?239]
  [?174] -> [?248]
  [?175] -> [?249]
  [?237] -> [?240,?244,?254]
  [?239] -> [?167,?173,?247]
  [?240] -> [?237]
  [?244] -> [?169]
  [?247] -> [?172,?239]
  [?248] -> [?174]
  [?249] -> [?175]
  [?254] -> [?237]

subst :?16: (a :?17: Type) -> (P :?18: (_ :?19: a) -> Type) -> (x :?20: a) -> (y :?21: a) -> (eq :?22: Id -?25- a -?24- x -?23- y) -> (_ :?26: P -?27- x) -> P -?28- y = \(a :?29: Type) (P :?30: (_ :?31: a) -> Type) (x :?32: a) (y :?33: a) (eq :?34: Id -?37- a -?36- x -?35- y).
  case -?38- eq of
    Refl (a' :?39: Type) (x' :?40: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :?41: P -?42- x'. w)
  [] -> [?26,?41,!R]
  [?6] -> [?22,?39]
  [?7] -> [?22,?40]
  [?8] -> [?23]
  [?9] -> [?24]
  [?10] -> [?25]
  [?17] -> [?29]
  [?18] -> [?30]
  [?19] -> [?31]
  [?20] -> [?32]
  [?21] -> [?33]
  [?22] -> [?34]
  [?23] -> [?8]
  [?24] -> [?9]
  [?25] -> [?10]
  [?27] -> [?42]
  [?28] -> [?42]
  [?29] -> [?17]
  [?30] -> [?18]
  [?31] -> [?19]
  [?32] -> [?20]
  [?33] -> [?21]
  [?34] -> [?22]
  [?38] -> [?34]
  [?39] -> [?6,?22,?38]
  [?40] -> [?7,?22,?38]
  [?42] -> [?27,?28]


### Constraints ###

[] -> [?5,?13,?15,?16,?26,?41,?43,?47,?57,?79,?80,?82,?83,?84,?85,?86,?87,?88,?89,?90,?91,?92,?93,?94,?95,?96,?97,?99,?105,?106,?109,?110,?117,?122,?136,?139,?144,?145,?170,?171,?177,?181,?188,?189,?199,?200,?214,?215,?236,?238,?241,?243,?245,?246,?251,?252,?253,?255,!R]
[?6] -> [?22,?39,?50,?60,?70,?73,?78,?108,?141]
[?7] -> [?22,?40,?50,?61,?71,?72,?79,?86,?107,?140]
[?7,?62] -> [?74]
[?7,?74] -> [?62]
[?7,?87] -> [?137,?143]
[?7,?88] -> [?138,?142]
[?7,?142] -> [?88]
[?7,?143] -> [?87]
[?8] -> [?23,?51,?54,?100,?125]
[?9] -> [?24,?52,?55,?101,?126]
[?10] -> [?25,?53,?56,?102,?127]
[?12] -> [?14]
[?14] -> [?12]
[?17] -> [?29,?78,?195,?206]
[?18] -> [?30,?164,?194,?205]
[?19] -> [?31,?165]
[?20] -> [?32,?86,?185,?193,?204]
[?20,?82,?87,?88] -> [?211]
[?20,?87] -> [?86,?185,?208,?210]
[?20,?87,?88] -> [?81,?209]
[?20,?87,?88,?211] -> [?82]
[?20,?87,?209] -> [?88]
[?20,?87,?210] -> [?87]
[?20,?88] -> [?207]
[?20,?207] -> [?88]
[?20,?208] -> [?87]
[?21] -> [?33,?86,?192,?203]
[?21,?87] -> [?185,?197,?213]
[?21,?88] -> [?79,?80,?196,?212]
[?21,?196] -> [?88]
[?21,?197] -> [?87]
[?21,?212] -> [?88]
[?21,?213] -> [?87]
[?22] -> [?34,?98,?121,?191,?202]
[?22,?82,?123] -> [?219]
[?22,?99] -> [?185,?198]
[?22,?122] -> [?185,?218]
[?22,?123] -> [?81,?217]
[?22,?123,?219] -> [?82]
[?22,?124] -> [?216]
[?22,?198] -> [?99]
[?22,?216] -> [?124]
[?22,?217] -> [?123]
[?22,?218] -> [?122]
[?23] -> [?8,?100,?125]
[?24] -> [?9,?101,?126]
[?25] -> [?10,?102,?127]
[?26] -> [?177,?186,?190,?201,?220]
[?26,?82,?88,?178] -> [?225]
[?26,?84] -> [?84]
[?26,?85] -> [?85]
[?26,?87,?178] -> [?185,?224]
[?26,?88,?178] -> [?81,?223]
[?26,?88,?178,?225] -> [?82]
[?26,?169,?179] -> [?185,?228]
[?26,?170,?179] -> [?227]
[?26,?171,?179] -> [?186,?226]
[?26,?172,?179] -> [?187]
[?26,?173] -> [?180]
[?26,?174] -> [?223]
[?26,?175] -> [?224]
[?26,?178] -> [?86,?222]
[?26,?178,?223] -> [?88]
[?26,?178,?224] -> [?87]
[?26,?179] -> [?168,?221]
[?26,?179,?187] -> [?172]
[?26,?179,?226] -> [?171]
[?26,?179,?227] -> [?170]
[?26,?179,?228] -> [?169]
[?26,?180] -> [?173]
[?26,?221] -> [?179]
[?26,?222] -> [?178]
[?26,?223] -> [?174]
[?26,?224] -> [?175]
[?27] -> [?42,?182,?187]
[?28] -> [?42,?182]
[?29] -> [?17]
[?30] -> [?18]
[?31] -> [?19]
[?32] -> [?20]
[?33] -> [?21]
[?34] -> [?22]
[?38] -> [?34]
[?39] -> [?6,?22,?38]
[?40] -> [?7,?22,?38]
[?42] -> [?27,?28]
[?44] -> [?59,?78,?116,?151]
[?45] -> [?60,?78,?115,?150]
[?46] -> [?61,?80,?114,?149,?152]
[?47] -> [?62]
[?48] -> [?63,?86,?113,?148]
[?48,?87] -> [?86,?154,?156]
[?48,?87,?88] -> [?137,?155]
[?48,?87,?155] -> [?88]
[?48,?87,?156] -> [?87]
[?48,?88] -> [?138,?153]
[?48,?153] -> [?88]
[?48,?154] -> [?87]
[?49] -> [?64,?86,?112,?147]
[?49,?87] -> [?119,?158]
[?49,?87,?88] -> [?137,?160]
[?49,?88] -> [?79,?86,?118,?138,?157,?159]
[?49,?88,?159] -> [?88]
[?49,?88,?160] -> [?87]
[?49,?118] -> [?88]
[?49,?119] -> [?87]
[?49,?157] -> [?88]
[?49,?158] -> [?87]
[?50] -> [?65,?98,?111,?120,?121,?146,?163]
[?50,?123] -> [?137,?162]
[?50,?124] -> [?138,?161]
[?50,?161] -> [?124]
[?50,?162] -> [?123]
[?51] -> [?8,?100,?125]
[?52] -> [?9,?101,?126]
[?53] -> [?10,?102,?127]
[?54] -> [?8,?100,?125]
[?55] -> [?9,?101,?126]
[?56] -> [?10,?102,?127]
[?57] -> [?74,?94]
[?58] -> [?74,?94]
[?59] -> [?44]
[?60] -> [?45]
[?61] -> [?46]
[?62] -> [?47]
[?63] -> [?48]
[?64] -> [?49]
[?65] -> [?50]
[?69] -> [?65]
[?70] -> [?6,?50,?69]
[?71] -> [?7,?50,?69]
[?72] -> [?7]
[?73] -> [?6]
[?74] -> [?57,?58]
[?84] -> [?84]
[?85] -> [?85]
[?94] -> [?57,?58]
[?95] -> [?152]
[?96] -> [?118,?153,?155,?157]
[?97] -> [?119,?154,?156,?158]
[?100] -> [?8,?23,?51,?54]
[?101] -> [?9,?24,?52,?55]
[?102] -> [?10,?25,?53,?56]
[?103] -> [?118,?196]
[?104] -> [?119,?197]
[?107] -> [?7]
[?108] -> [?6]
[?111] -> [?50]
[?112] -> [?49]
[?113] -> [?48]
[?114] -> [?46]
[?115] -> [?45]
[?116] -> [?44]
[?118] -> [?96,?103]
[?119] -> [?97,?104]
[?123] -> [?137]
[?124] -> [?138]
[?125] -> [?8,?23,?51,?54]
[?126] -> [?9,?24,?52,?55]
[?127] -> [?10,?25,?53,?56]
[?128] -> [?142,?153,?207]
[?129] -> [?143,?154,?208]
[?130] -> [?155,?209]
[?131] -> [?156,?210]
[?132] -> [?157,?212]
[?133] -> [?158,?213]
[?134] -> [?142,?159]
[?135] -> [?143,?160]
[?137] -> [?123]
[?138] -> [?124]
[?140] -> [?7]
[?141] -> [?6]
[?142] -> [?128,?134]
[?143] -> [?129,?135]
[?146] -> [?50]
[?147] -> [?49]
[?148] -> [?48]
[?149] -> [?46]
[?150] -> [?45]
[?151] -> [?44]
[?152] -> [?95]
[?153] -> [?96,?128]
[?154] -> [?97,?129]
[?155] -> [?96,?130]
[?156] -> [?97,?131]
[?157] -> [?96,?132]
[?158] -> [?97,?133]
[?159] -> [?134]
[?160] -> [?135]
[?165] -> [?19]
[?167] -> [?180,?239]
[?169] -> [?244]
[?172] -> [?247]
[?173] -> [?239]
[?174] -> [?248]
[?175] -> [?249]
[?178] -> [?79,?185,?235]
[?179] -> [?166,?186,?234]
[?180] -> [?167,?187]
[?181] -> [?232,?233]
[?182] -> [?27,?28,?231]
[?183] -> [?196,?207,?212]
[?184] -> [?197,?208,?213]
[?185] -> [?178]
[?186] -> [?179]
[?187] -> [?27,?180]
[?190] -> [?26]
[?191] -> [?22]
[?192] -> [?21]
[?193] -> [?20]
[?194] -> [?18]
[?195] -> [?17]
[?196] -> [?103,?183]
[?197] -> [?104,?184]
[?201] -> [?26]
[?202] -> [?22]
[?203] -> [?21]
[?204] -> [?20]
[?205] -> [?18]
[?206] -> [?17]
[?207] -> [?128,?183]
[?208] -> [?129,?184]
[?209] -> [?130,?223]
[?210] -> [?131,?224]
[?212] -> [?132,?183]
[?213] -> [?133,?184]
[?223] -> [?209]
[?224] -> [?210]
[?230] -> [?232]
[?230,?238] -> [?257,?260]
[?231] -> [?182,?239]
[?232] -> [?230]
[?233] -> [?181]
[?234] -> [?179]
[?235] -> [?178]
[?237] -> [?240,?244,?254,?257,?259]
[?238] -> [?229,?258]
[?238,?260] -> [?230]
[?239] -> [?167,?173,?231,?247]
[?240] -> [?237]
[?244] -> [?169]
[?247] -> [?172,?239]
[?248] -> [?174]
[?249] -> [?175]
[?254] -> [?237]
[?256] -> [?76,?77,?79,?80,?257,?261,?262,?263,?264,?265,?266,?267,?268,?269]
[?257] -> [?256]
[?258] -> [?238]
[?259] -> [?237]
[?261] -> [?256]

### Solution ###

[?5,?13,?15,?16,?26,?41,?43,?47,?57,?58,?62,?74,?76,?77,?79,?80,?82,?83,?84,?85,?86,?87,?88,?89,?90,?91,?92,?93,?94,?95,?96,?97,?99,?103,?104,?105,?106,?109,?110,?117,?118,?119,?122,?128,?129,?130,?131,?132,?133,?134,?135,?136,?139,?142,?143,?144,?145,?152,?153,?154,?155,?156,?157,?158,?159,?160,?166,?168,?170,?171,?174,?175,?177,?179,?181,?183,?184,?186,?188,?189,?190,?196,?197,?199,?200,?201,?207,?208,?209,?210,?212,?213,?214,?215,?220,?221,?223,?224,?226,?227,?229,?230,?232,?233,?234,?236,?238,?241,?243,?245,?246,?248,?249,?251,?252,?253,?255,?256,?257,?258,?260,?261,?262,?263,?264,?265,?266,?267,?268,?269,!R]

### Annotated ###

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :R: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x

id :E: (a :E: Type) -> (_ :R: a) -> a = (\a :E: Type. (\x :R: a. x))

subst :R: (a :E: Type) -> (P :E: (_ :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (_ :R: P -E- x) -> P -E- y = \(a :E: Type) (P :E: (_ :E: a) -> Type) (x :E: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :R: P -E- x'. w)

cong :R: (a :E: Type) -> (b :E: Type) -> (f :E: (_ :R: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -R- x) -E- (f -R- y) = \(a :E: Type) (b :E: Type) (f :E: (_ :R: a) -> b) (x :E: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -E- b -E- (f -R- y)

postulate Bool :E: Type

postulate T :R: Bool

postulate F :R: Bool

postulate List :E: Type

postulate Nil :R: List

postulate Cons :R: (x :R: Bool) -> (xs :R: List) -> List

one :E: (x :R: Bool) -> List = (\x :R: Bool. Cons -R- x -R- Nil)

app :R: (xs :R: List) -> (ys :R: List) -> List = \(xs :R: List) (ys :R: List).
  case -R- xs of
    Nil
      => ys
    Cons (x :R: Bool) (xs' :R: List)
      => Cons -R- x -R- (app -R- xs' -R- ys)

appRightNeutral :E: (ys :R: List) -> Id -E- List -E- ys -E- (app -R- ys -R- Nil) = \(ys :R: List).
  case -R- ys of
    Nil
      => Refl -E- List -E- Nil
    Cons (x :R: Bool) (xs :R: List)
      => cong -E- List -E- List -E- (Cons -R- x) -E- xs -E- (app -R- xs -R- Nil) -E- (appRightNeutral -E- xs)

appAssoc :E: (xs :R: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -R- (app -R- xs -R- ys) -R- zs) -E- (app -R- xs -R- (app -R- ys -R- zs)) = \(xs :R: List) (ys :E: List) (zs :E: List).
  case -R- xs of
    Nil
      => Refl -E- List -E- (app -R- ys -R- zs)
    Cons (x :R: Bool) (xs' :R: List)
      => cong -E- List -E- List -E- (Cons -R- x) -E- (app -R- (app -R- xs' -R- ys) -R- zs) -E- (app -R- xs' -R- (app -R- ys -R- zs)) -E- (appAssoc -E- xs' -E- ys -E- zs)

postulate Rev :E: (_ :E: List) -> Type

postulate RNil :R: Rev -E- Nil

postulate RSnoc :R: (xs :E: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -R- xs -R- (one -E- x))

rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -R- xs -R- ys) = \(xs :E: List) (rxs :R: Rev -E- xs) (ys :R: List).
  case -R- ys of
    Nil
      => subst -E- List -E- Rev -E- xs -E- (app -R- xs -R- Nil) -E- (appRightNeutral -E- xs) -R- rxs
    Cons (y :R: Bool) (ys' :R: List)
      => subst -E- List -E- Rev -E- (app -R- (app -R- xs -R- (one -E- y)) -R- ys') -E- (app -R- xs -R- (Cons -R- y -R- ys')) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys') -R- (rev' -E- (app -R- xs -R- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys')

rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)

reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List = \(xs :E: List) (rxs :R: Rev -E- xs).
  case -R- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :E: List) (x :R: Bool) (rxs' :R: Rev -E- xs')
      | xs = app -R- xs' -R- (one -E- x)
      => Cons -R- x -R- (reverse' -E- xs' -R- rxs')

reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))

main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))

### Specialised ###

postulate Id :!E: (a :!E: Type) -> (x :!E: a) -> (y :!E: a) -> Type

postulate Refl :!R: (a :!E: Type) -> (x :!E: a) -> Id -!E- a -!E- x -!E- x

id :!E: (a :!E: Type) -> (_ :!R: a) -> a = (\a :!E: Type. (\x :!R: a. x))

subst :!R: (a :!E: Type) -> (P :!E: (_ :!E: a) -> Type) -> (x :!E: a) -> (y :!E: a) -> (eq :!E: Id -!E- a -!E- x -!E- y) -> (_ :!R: P -!E- x) -> P -!E- y = \(a :!E: Type) (P :!E: (_ :!E: a) -> Type) (x :!E: a) (y :!E: a) (eq :!E: Id -!E- a -!E- x -!E- y).
  case -!E- eq of
    Refl (a' :!E: Type) (x' :!E: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :!R: P -!E- x'. w)

cong :!R: (a :!E: Type) -> (b :!E: Type) -> (f :!E: (_ :!R: a) -> b) -> (x :!E: a) -> (y :!E: a) -> (eq :!E: Id -!E- a -!E- x -!E- y) -> Id -!E- b -!E- (f -!R- x) -!E- (f -!R- y) = \(a :!E: Type) (b :!E: Type) (f :!E: (_ :!R: a) -> b) (x :!E: a) (y :!E: a) (eq :!E: Id -!E- a -!E- x -!E- y).
  case -!E- eq of
    Refl (a' :!E: Type) (x' :!E: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -!E- b -!E- (f -!R- y)

postulate Bool :!E: Type

postulate T :!R: Bool

postulate F :!R: Bool

postulate List :!E: Type

postulate Nil :!R: List

postulate Cons :!R: (x :!R: Bool) -> (xs :!R: List) -> List

one :!E: (x :!R: Bool) -> List = (\x :!R: Bool. Cons -!R- x -!R- Nil)

app :!R: (xs :!R: List) -> (ys :!R: List) -> List = \(xs :!R: List) (ys :!R: List).
  case -!R- xs of
    Nil
      => ys
    Cons (x :!R: Bool) (xs' :!R: List)
      => Cons -!R- x -!R- (app -!R- xs' -!R- ys)

appRightNeutral :!E: (ys :!R: List) -> Id -!E- List -!E- ys -!E- (app -!R- ys -!R- Nil) = \(ys :!R: List).
  case -!R- ys of
    Nil
      => Refl -!E- List -!E- Nil
    Cons (x :!R: Bool) (xs :!R: List)
      => cong -!E- List -!E- List -!E- (Cons -!R- x) -!E- xs -!E- (app -!R- xs -!R- Nil) -!E- (appRightNeutral -!E- xs)

appAssoc :!E: (xs :!R: List) -> (ys :!E: List) -> (zs :!E: List) -> Id -!E- List -!E- (app -!R- (app -!R- xs -!R- ys) -!R- zs) -!E- (app -!R- xs -!R- (app -!R- ys -!R- zs)) = \(xs :!R: List) (ys :!E: List) (zs :!E: List).
  case -!R- xs of
    Nil
      => Refl -!E- List -!E- (app -!R- ys -!R- zs)
    Cons (x :!R: Bool) (xs' :!R: List)
      => cong -!E- List -!E- List -!E- (Cons -!R- x) -!E- (app -!R- (app -!R- xs' -!R- ys) -!R- zs) -!E- (app -!R- xs' -!R- (app -!R- ys -!R- zs)) -!E- (appAssoc -!E- xs' -!E- ys -!E- zs)

postulate Rev :!E: (_ :!E: List) -> Type

postulate RNil :!R: Rev -!E- Nil

postulate RSnoc :!R: (xs :!E: List) -> (x :!R: Bool) -> (rxs :!R: Rev -!E- xs) -> Rev -!E- (app -!R- xs -!R- (one -!E- x))

rev' :!R: (xs :!E: List) -> (rxs :!R: Rev -!E- xs) -> (ys :!R: List) -> Rev -!E- (app -!R- xs -!R- ys) = \(xs :!E: List) (rxs :!R: Rev -!E- xs) (ys :!R: List).
  case -!R- ys of
    Nil
      => subst -!E- List -!E- Rev -!E- xs -!E- (app -!R- xs -!R- Nil) -!E- (appRightNeutral -!E- xs) -!R- rxs
    Cons (y :!R: Bool) (ys' :!R: List)
      => subst -!E- List -!E- Rev -!E- (app -!R- (app -!R- xs -!R- (one -!E- y)) -!R- ys') -!E- (app -!R- xs -!R- (Cons -!R- y -!R- ys')) -!E- (appAssoc -!E- xs -!E- (one -!E- y) -!E- ys') -!R- (rev' -!E- (app -!R- xs -!R- (one -!E- y)) -!R- (RSnoc -!E- xs -!R- y -!R- rxs) -!R- ys')

rev :!R: (xs :!R: List) -> Rev -!E- xs = (\xs :!R: List. rev' -!E- Nil -!R- RNil -!R- xs)

reverse' :!R: (xs :!E: List) -> (rxs :!R: Rev -!E- xs) -> List = \(xs :!E: List) (rxs :!R: Rev -!E- xs).
  case -!R- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :!E: List) (x :!R: Bool) (rxs' :!R: Rev -!E- xs')
      | xs = app -!R- xs' -!R- (one -!E- x)
      => Cons -!R- x -!R- (reverse' -!E- xs' -!R- rxs')

reverse :!R: (xs :!R: List) -> List = (\xs :!R: List. reverse' -!E- xs -!R- (rev -!R- xs))

main :!R: List = reverse -!R- (Cons -!R- T -!R- (Cons -!R- F -!R- (Cons -!R- T -!R- (Cons -!R- F -!R- Nil))))

### Final annotation ###

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :R: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x

id :E: (a :E: Type) -> (_ :R: a) -> a = (\a :E: Type. (\x :R: a. x))

subst :R: (a :E: Type) -> (P :E: (_ :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (_ :R: P -E- x) -> P -E- y = \(a :E: Type) (P :E: (_ :E: a) -> Type) (x :E: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :R: P -E- x'. w)

cong :R: (a :E: Type) -> (b :E: Type) -> (f :E: (_ :R: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -R- x) -E- (f -R- y) = \(a :E: Type) (b :E: Type) (f :E: (_ :R: a) -> b) (x :E: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -E- b -E- (f -R- y)

postulate Bool :E: Type

postulate T :R: Bool

postulate F :R: Bool

postulate List :E: Type

postulate Nil :R: List

postulate Cons :R: (x :R: Bool) -> (xs :R: List) -> List

one :E: (x :R: Bool) -> List = (\x :R: Bool. Cons -R- x -R- Nil)

app :R: (xs :R: List) -> (ys :R: List) -> List = \(xs :R: List) (ys :R: List).
  case -R- xs of
    Nil
      => ys
    Cons (x :R: Bool) (xs' :R: List)
      => Cons -R- x -R- (app -R- xs' -R- ys)

appRightNeutral :E: (ys :R: List) -> Id -E- List -E- ys -E- (app -R- ys -R- Nil) = \(ys :R: List).
  case -R- ys of
    Nil
      => Refl -E- List -E- Nil
    Cons (x :R: Bool) (xs :R: List)
      => cong -E- List -E- List -E- (Cons -R- x) -E- xs -E- (app -R- xs -R- Nil) -E- (appRightNeutral -E- xs)

appAssoc :E: (xs :R: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -R- (app -R- xs -R- ys) -R- zs) -E- (app -R- xs -R- (app -R- ys -R- zs)) = \(xs :R: List) (ys :E: List) (zs :E: List).
  case -R- xs of
    Nil
      => Refl -E- List -E- (app -R- ys -R- zs)
    Cons (x :R: Bool) (xs' :R: List)
      => cong -E- List -E- List -E- (Cons -R- x) -E- (app -R- (app -R- xs' -R- ys) -R- zs) -E- (app -R- xs' -R- (app -R- ys -R- zs)) -E- (appAssoc -E- xs' -E- ys -E- zs)

postulate Rev :E: (_ :E: List) -> Type

postulate RNil :R: Rev -E- Nil

postulate RSnoc :R: (xs :E: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -R- xs -R- (one -E- x))

rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -R- xs -R- ys) = \(xs :E: List) (rxs :R: Rev -E- xs) (ys :R: List).
  case -R- ys of
    Nil
      => subst -E- List -E- Rev -E- xs -E- (app -R- xs -R- Nil) -E- (appRightNeutral -E- xs) -R- rxs
    Cons (y :R: Bool) (ys' :R: List)
      => subst -E- List -E- Rev -E- (app -R- (app -R- xs -R- (one -E- y)) -R- ys') -E- (app -R- xs -R- (Cons -R- y -R- ys')) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys') -R- (rev' -E- (app -R- xs -R- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys')

rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)

reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List = \(xs :E: List) (rxs :R: Rev -E- xs).
  case -R- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :E: List) (x :R: Bool) (rxs' :R: Rev -E- xs')
      | xs = app -R- xs' -R- (one -E- x)
      => Cons -R- x -R- (reverse' -E- xs' -R- rxs')

reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))

main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))

### Verification ###

Verification successful.

### Pruned ###

postulate Refl

subst = (\w. w)

cong = Refl

postulate T

postulate F

postulate Nil

postulate Cons

app = \xs ys.
  case xs of
    Nil
      => ys
    Cons x xs'
      => Cons x (app xs' ys)

postulate RNil

postulate RSnoc

rev' = \rxs ys.
  case ys of
    Nil
      => subst rxs
    Cons y ys'
      => subst (rev' (RSnoc y rxs) ys')

rev = (\xs. rev' RNil xs)

reverse' = \rxs.
  case rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc x rxs'
      | xs = app xs' one
      => Cons x (reverse' rxs')

reverse = (\xs. reverse' (rev xs))

main = reverse (Cons T (Cons F (Cons T (Cons F Nil))))

### Normal forms ###

unerased:
  Cons F (Cons T (Cons F (Cons T Nil)))
erased:
  Cons F (Cons T (Cons F (Cons T Nil)))
