-- vim: ft=agda

### Desugared ###

postulate Id : (a : Type) -> (x : a) -> (y : a) -> Type

postulate Refl : (a : Type) -> (x : a) -> Id a x x

id : (a : Type) -> (_ : a) -> a = (\a : Type. (\x : a. x))

subst : (a : Type) -> (P : (_ : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (_ : P x) -> P y = \(a : Type) (P : (_ : a) -> Type) (x : a) (y : a) (eq : Id a x y).
  case eq of
    Refl (a' : Type) (x' : a)
      | a' = a
      | x' = x
      | y = x
      => (\w : P x'. w)

cong : (a : Type) -> (b : Type) -> (f : (_ : a) -> b) -> (x : a) -> (y : a) -> (eq : Id a x y) -> Id b (f x) (f y) = \(a : Type) (b : Type) (f : (_ : a) -> b) (x : a) (y : a) (eq : Id a x y).
  case eq of
    Refl (a' : Type) (x' : a)
      | a' = a
      | x' = x
      | y = x
      => Refl b (f y)

postulate Bool : Type

postulate T : Bool

postulate F : Bool

postulate List : Type

postulate Cuckoo : List

postulate Nil : List

postulate Cons : (x  -R-  Bool) -> (xs  -R-  List) -> List

one : (x : Bool) -> List = (\x : Bool. Cons x Nil)

app : (xs : List) -> (ys : List) -> List = \(xs : List) (ys : List).
  case xs of
    Nil
      => ys
    Cuckoo
      => Nil
    Cons (x : Bool) (xs' : List)
      => Cons x (app xs' ys)

appRightNeutral : (ys : List) -> Id List ys (app ys Nil) = \(ys : List).
  case ys of
    Nil
      => Refl List Nil
    Cons (x : Bool) (xs : List)
      => cong List List (Cons x) xs (app xs Nil) (appRightNeutral xs)

appAssoc : (xs : List) -> (ys : List) -> (zs : List) -> Id List (app (app xs ys) zs) (app xs (app ys zs)) = \(xs : List) (ys : List) (zs : List).
  case xs of
    Nil
      => Refl List (app ys zs)
    Cons (x : Bool) (xs' : List)
      => cong List List (Cons x) (app (app xs' ys) zs) (app xs' (app ys zs)) (appAssoc xs' ys zs)

postulate Rev : (_ : List) -> Type

postulate RNil : Rev Nil

postulate RSnoc : (xs : List) -> (x : Bool) -> (rxs : Rev xs) -> Rev (app xs (one x))

rev' : (xs : List) -> (rxs : Rev xs) -> (ys : List) -> Rev (app xs ys) = \(xs : List) (rxs : Rev xs) (ys : List).
  case ys of
    Nil
      => subst List Rev xs (app xs Nil) (appRightNeutral xs) rxs
    Cons (y : Bool) (ys' : List)
      => subst List Rev (app (app xs (one y)) ys') (app xs (Cons y ys')) (appAssoc xs (one y) ys') (rev' (app xs (one y)) (RSnoc xs y rxs) ys')

rev : (xs : List) -> Rev xs = (\xs : List. rev' Nil RNil xs)

reverse' : (xs : List) -> (rxs : Rev xs) -> List = \(xs : List) (rxs : Rev xs).
  case rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' : List) (x : Bool) (rxs' : Rev xs')
      | xs = app xs' (one x)
      => Cons x (reverse' xs' rxs')

reverse : (xs : List) -> List = (\xs : List. reverse' xs (rev xs))

main  -R-  List = reverse (Cons T (Cons F (Cons T (Cons F Nil))))

### Metaified ###

postulate Id :?1: (a :?2: Type) -> (x :?3: a) -> (y :?4: a) -> Type

postulate Refl :?5: (a :?6: Type) -> (x :?7: a) -> Id -?10- a -?9- x -?8- x

id :?11: (a :?12: Type) -> (_ :?13: a) -> a = (\a :?14: Type. (\x :?15: a. x))

subst :?16: (a :?17: Type) -> (P :?18: (_ :?19: a) -> Type) -> (x :?20: a) -> (y :?21: a) -> (eq :?22: Id -?25- a -?24- x -?23- y) -> (_ :?26: P -?27- x) -> P -?28- y = \(a :?29: Type) (P :?30: (_ :?31: a) -> Type) (x :?32: a) (y :?33: a) (eq :?34: Id -?37- a -?36- x -?35- y).
  case -?38- eq of
    Refl (a' :?39: Type) (x' :?40: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :?41: P -?42- x'. w)

cong :?43: (a :?44: Type) -> (b :?45: Type) -> (f :?46: (_ :?47: a) -> b) -> (x :?48: a) -> (y :?49: a) -> (eq :?50: Id -?53- a -?52- x -?51- y) -> Id -?56- b -?55- (f -?57- x) -?54- (f -?58- y) = \(a :?59: Type) (b :?60: Type) (f :?61: (_ :?62: a) -> b) (x :?63: a) (y :?64: a) (eq :?65: Id -?68- a -?67- x -?66- y).
  case -?69- eq of
    Refl (a' :?70: Type) (x' :?71: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -?73- b -?72- (f -?74- y)

postulate Bool :?75: Type

postulate T :?76: Bool

postulate F :?77: Bool

postulate List :?78: Type

postulate Cuckoo :?79: List

postulate Nil :?80: List

postulate Cons :?81: (x :!R: Bool) -> (xs :!R: List) -> List

one :?82: (x :?83: Bool) -> List = (\x :?84: Bool. Cons -?86- x -?85- Nil)

app :?87: (xs :?88: List) -> (ys :?89: List) -> List = \(xs :?90: List) (ys :?91: List).
  case -?92- xs of
    Nil
      => ys
    Cuckoo
      => Nil
    Cons (x :?93: Bool) (xs' :?94: List)
      => Cons -?96- x -?95- (app -?98- xs' -?97- ys)

appRightNeutral :?99: (ys :?100: List) -> Id -?103- List -?102- ys -?101- (app -?105- ys -?104- Nil) = \(ys :?106: List).
  case -?107- ys of
    Nil
      => Refl -?109- List -?108- Nil
    Cons (x :?110: Bool) (xs :?111: List)
      => cong -?117- List -?116- List -?115- (Cons -?118- x) -?114- xs -?113- (app -?120- xs -?119- Nil) -?112- (appRightNeutral -?121- xs)

appAssoc :?122: (xs :?123: List) -> (ys :?124: List) -> (zs :?125: List) -> Id -?128- List -?127- (app -?130- (app -?132- xs -?131- ys) -?129- zs) -?126- (app -?134- xs -?133- (app -?136- ys -?135- zs)) = \(xs :?137: List) (ys :?138: List) (zs :?139: List).
  case -?140- xs of
    Nil
      => Refl -?142- List -?141- (app -?144- ys -?143- zs)
    Cons (x :?145: Bool) (xs' :?146: List)
      => cong -?152- List -?151- List -?150- (Cons -?153- x) -?149- (app -?155- (app -?157- xs' -?156- ys) -?154- zs) -?148- (app -?159- xs' -?158- (app -?161- ys -?160- zs)) -?147- (appAssoc -?164- xs' -?163- ys -?162- zs)

postulate Rev :?165: (_ :?166: List) -> Type

postulate RNil :?167: Rev -?168- Nil

postulate RSnoc :?169: (xs :?170: List) -> (x :?171: Bool) -> (rxs :?172: Rev -?173- xs) -> Rev -?174- (app -?176- xs -?175- (one -?177- x))

rev' :?178: (xs :?179: List) -> (rxs :?180: Rev -?181- xs) -> (ys :?182: List) -> Rev -?183- (app -?185- xs -?184- ys) = \(xs :?186: List) (rxs :?187: Rev -?188- xs) (ys :?189: List).
  case -?190- ys of
    Nil
      => subst -?196- List -?195- Rev -?194- xs -?193- (app -?198- xs -?197- Nil) -?192- (appRightNeutral -?199- xs) -?191- rxs
    Cons (y :?200: Bool) (ys' :?201: List)
      => subst -?207- List -?206- Rev -?205- (app -?209- (app -?211- xs -?210- (one -?212- y)) -?208- ys') -?204- (app -?214- xs -?213- (Cons -?216- y -?215- ys')) -?203- (appAssoc -?219- xs -?218- (one -?220- y) -?217- ys') -?202- (rev' -?223- (app -?225- xs -?224- (one -?226- y)) -?222- (RSnoc -?229- xs -?228- y -?227- rxs) -?221- ys')

rev :?230: (xs :?231: List) -> Rev -?232- xs = (\xs :?233: List. rev' -?236- Nil -?235- RNil -?234- xs)

reverse' :?237: (xs :?238: List) -> (rxs :?239: Rev -?240- xs) -> List = \(xs :?241: List) (rxs :?242: Rev -?243- xs).
  case -?244- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :?245: List) (x :?246: Bool) (rxs' :?247: Rev -?248- xs')
      | xs = app -?250- xs' -?249- (one -?251- x)
      => Cons -?253- x -?252- (reverse' -?255- xs' -?254- rxs')

reverse :?256: (xs :?257: List) -> List = (\xs :?258: List. reverse' -?260- xs -?259- (rev -?261- xs))

main :!R: List = reverse -?262- (Cons -?264- T -?263- (Cons -?266- F -?265- (Cons -?268- T -?267- (Cons -?270- F -?269- Nil))))

### Inferred definitions ###

postulate Bool :?75: Type

postulate Cons :?81: (x :!R: Bool) -> (xs :!R: List) -> List

postulate Cuckoo :?79: List

postulate F :?77: Bool

postulate Id :?1: (a :?2: Type) -> (x :?3: a) -> (y :?4: a) -> Type

postulate List :?78: Type

postulate Nil :?80: List

postulate RNil :?167: Rev -?168- Nil

postulate RSnoc :?169: (xs :?170: List) -> (x :?171: Bool) -> (rxs :?172: Rev -?173- xs) -> Rev -?174- (app -?176- xs -?175- (one -?177- x))

postulate Refl :?5: (a :?6: Type) -> (x :?7: a) -> Id -?10- a -?9- x -?8- x

postulate Rev :?165: (_ :?166: List) -> Type

postulate T :?76: Bool

postulate Type :!R: Type

app :?87: (xs :?88: List) -> (ys :?89: List) -> List = \(xs :?90: List) (ys :?91: List).
  case -?92- xs of
    Nil
      => ys
    Cuckoo
      => Nil
    Cons (x :?93: Bool) (xs' :?94: List)
      => Cons -?96- x -?95- (app -?98- xs' -?97- ys)
  [] -> [?80,?81,?87,?88,?89,?90,?91,?92,?93,?94,?95,?96,?97,?98,!R]

appAssoc :?122: (xs :?123: List) -> (ys :?124: List) -> (zs :?125: List) -> Id -?128- List -?127- (app -?130- (app -?132- xs -?131- ys) -?129- zs) -?126- (app -?134- xs -?133- (app -?136- ys -?135- zs)) = \(xs :?137: List) (ys :?138: List) (zs :?139: List).
  case -?140- xs of
    Nil
      => Refl -?142- List -?141- (app -?144- ys -?143- zs)
    Cons (x :?145: Bool) (xs' :?146: List)
      => cong -?152- List -?151- List -?150- (Cons -?153- x) -?149- (app -?155- (app -?157- xs' -?156- ys) -?154- zs) -?148- (app -?159- xs' -?158- (app -?161- ys -?160- zs)) -?147- (appAssoc -?164- xs' -?163- ys -?162- zs)
  [] -> [?5,?43,?47,?123,?137,?140,?145,?146,!R]
  [?6] -> [?78,?142]
  [?7] -> [?87,?141]
  [?7,?88] -> [?138,?144]
  [?7,?89] -> [?139,?143]
  [?7,?143] -> [?89]
  [?7,?144] -> [?88]
  [?8] -> [?126]
  [?9] -> [?127]
  [?10] -> [?128]
  [?44] -> [?78,?152]
  [?45] -> [?78,?151]
  [?46] -> [?81,?150,?153]
  [?48] -> [?87,?149]
  [?48,?88] -> [?87,?155,?157]
  [?48,?88,?89] -> [?138,?156]
  [?48,?88,?156] -> [?89]
  [?48,?88,?157] -> [?88]
  [?48,?89] -> [?139,?154]
  [?48,?154] -> [?89]
  [?48,?155] -> [?88]
  [?49] -> [?87,?148]
  [?49,?88] -> [?159]
  [?49,?88,?89] -> [?138,?161]
  [?49,?89] -> [?87,?139,?158,?160]
  [?49,?89,?160] -> [?89]
  [?49,?89,?161] -> [?88]
  [?49,?158] -> [?89]
  [?49,?159] -> [?88]
  [?50] -> [?122,?147,?164]
  [?50,?124] -> [?138,?163]
  [?50,?125] -> [?139,?162]
  [?50,?162] -> [?125]
  [?50,?163] -> [?124]
  [?51] -> [?126]
  [?52] -> [?127]
  [?53] -> [?128]
  [?54] -> [?126]
  [?55] -> [?127]
  [?56] -> [?128]
  [?57] -> [?95]
  [?58] -> [?95]
  [?95] -> [?57,?58]
  [?96] -> [?153]
  [?97] -> [?154,?156,?158]
  [?98] -> [?155,?157,?159]
  [?124] -> [?138]
  [?125] -> [?139]
  [?126] -> [?8,?51,?54]
  [?127] -> [?9,?52,?55]
  [?128] -> [?10,?53,?56]
  [?129] -> [?143,?154]
  [?130] -> [?144,?155]
  [?131] -> [?156]
  [?132] -> [?157]
  [?133] -> [?158]
  [?134] -> [?159]
  [?135] -> [?143,?160]
  [?136] -> [?144,?161]
  [?138] -> [?124]
  [?139] -> [?125]
  [?141] -> [?7]
  [?142] -> [?6]
  [?143] -> [?129,?135]
  [?144] -> [?130,?136]
  [?147] -> [?50]
  [?148] -> [?49]
  [?149] -> [?48]
  [?150] -> [?46]
  [?151] -> [?45]
  [?152] -> [?44]
  [?153] -> [?96]
  [?154] -> [?97,?129]
  [?155] -> [?98,?130]
  [?156] -> [?97,?131]
  [?157] -> [?98,?132]
  [?158] -> [?97,?133]
  [?159] -> [?98,?134]
  [?160] -> [?135]
  [?161] -> [?136]

appRightNeutral :?99: (ys :?100: List) -> Id -?103- List -?102- ys -?101- (app -?105- ys -?104- Nil) = \(ys :?106: List).
  case -?107- ys of
    Nil
      => Refl -?109- List -?108- Nil
    Cons (x :?110: Bool) (xs :?111: List)
      => cong -?117- List -?116- List -?115- (Cons -?118- x) -?114- xs -?113- (app -?120- xs -?119- Nil) -?112- (appRightNeutral -?121- xs)
  [] -> [?5,?43,?47,?57,?96,?100,?106,?107,?110,?111,?118,!R]
  [?6] -> [?78,?109]
  [?7] -> [?80,?108]
  [?8] -> [?101]
  [?9] -> [?102]
  [?10] -> [?103]
  [?44] -> [?78,?117]
  [?45] -> [?78,?116]
  [?46] -> [?81,?115]
  [?48] -> [?114]
  [?49] -> [?87,?113]
  [?49,?88] -> [?120]
  [?49,?89] -> [?80,?119]
  [?49,?119] -> [?89]
  [?49,?120] -> [?88]
  [?50] -> [?99,?112,?121]
  [?51] -> [?101]
  [?52] -> [?102]
  [?53] -> [?103]
  [?54] -> [?101]
  [?55] -> [?102]
  [?56] -> [?103]
  [?58] -> [?95]
  [?95] -> [?58]
  [?97] -> [?119]
  [?98] -> [?120]
  [?101] -> [?8,?51,?54]
  [?102] -> [?9,?52,?55]
  [?103] -> [?10,?53,?56]
  [?104] -> [?119]
  [?105] -> [?120]
  [?108] -> [?7]
  [?109] -> [?6]
  [?112] -> [?50]
  [?113] -> [?49]
  [?114] -> [?48]
  [?115] -> [?46]
  [?116] -> [?45]
  [?117] -> [?44]
  [?119] -> [?97,?104]
  [?120] -> [?98,?105]

cong :?43: (a :?44: Type) -> (b :?45: Type) -> (f :?46: (_ :?47: a) -> b) -> (x :?48: a) -> (y :?49: a) -> (eq :?50: Id -?53- a -?52- x -?51- y) -> Id -?56- b -?55- (f -?57- x) -?54- (f -?58- y) = \(a :?59: Type) (b :?60: Type) (f :?61: (_ :?62: a) -> b) (x :?63: a) (y :?64: a) (eq :?65: Id -?68- a -?67- x -?66- y).
  case -?69- eq of
    Refl (a' :?70: Type) (x' :?71: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -?73- b -?72- (f -?74- y)
  [] -> [?5,!R]
  [?6] -> [?50,?60,?70,?73]
  [?7] -> [?50,?61,?71,?72]
  [?7,?62] -> [?74]
  [?7,?74] -> [?62]
  [?8] -> [?51,?54]
  [?9] -> [?52,?55]
  [?10] -> [?53,?56]
  [?44] -> [?59]
  [?45] -> [?60]
  [?46] -> [?61]
  [?47] -> [?62]
  [?48] -> [?63]
  [?49] -> [?64]
  [?50] -> [?65]
  [?51] -> [?8]
  [?52] -> [?9]
  [?53] -> [?10]
  [?54] -> [?8]
  [?55] -> [?9]
  [?56] -> [?10]
  [?57] -> [?74]
  [?58] -> [?74]
  [?59] -> [?44]
  [?60] -> [?45]
  [?61] -> [?46]
  [?62] -> [?47]
  [?63] -> [?48]
  [?64] -> [?49]
  [?65] -> [?50]
  [?69] -> [?65]
  [?70] -> [?6,?50,?69]
  [?71] -> [?7,?50,?69]
  [?72] -> [?7]
  [?73] -> [?6]
  [?74] -> [?57,?58]

id :?11: (a :?12: Type) -> (_ :?13: a) -> a = (\a :?14: Type. (\x :?15: a. x))
  [] -> [?13,?15,!R]
  [?12] -> [?14]
  [?14] -> [?12]

main :!R: List = reverse -?262- (Cons -?264- T -?263- (Cons -?266- F -?265- (Cons -?268- T -?267- (Cons -?270- F -?269- Nil))))
  [] -> [?256,!R]
  [?257] -> [?76,?77,?80,?81,?262,?263,?264,?265,?266,?267,?268,?269,?270]
  [?262] -> [?257]

one :?82: (x :?83: Bool) -> List = (\x :?84: Bool. Cons -?86- x -?85- Nil)
  [] -> [?80,?81,?83,?84,?85,?86,!R]

rev :?230: (xs :?231: List) -> Rev -?232- xs = (\xs :?233: List. rev' -?236- Nil -?235- RNil -?234- xs)
  [] -> [?178,!R]
  [?168] -> [?181]
  [?179] -> [?80,?236]
  [?180] -> [?167,?235]
  [?181] -> [?168]
  [?182] -> [?233,?234]
  [?183] -> [?232]
  [?231] -> [?233]
  [?232] -> [?183]
  [?233] -> [?231]
  [?234] -> [?182]
  [?235] -> [?180]
  [?236] -> [?179]

rev' :?178: (xs :?179: List) -> (rxs :?180: Rev -?181- xs) -> (ys :?182: List) -> Rev -?183- (app -?185- xs -?184- ys) = \(xs :?186: List) (rxs :?187: Rev -?188- xs) (ys :?189: List).
  case -?190- ys of
    Nil
      => subst -?196- List -?195- Rev -?194- xs -?193- (app -?198- xs -?197- Nil) -?192- (appRightNeutral -?199- xs) -?191- rxs
    Cons (y :?200: Bool) (ys' :?201: List)
      => subst -?207- List -?206- Rev -?205- (app -?209- (app -?211- xs -?210- (one -?212- y)) -?208- ys') -?204- (app -?214- xs -?213- (Cons -?216- y -?215- ys')) -?203- (appAssoc -?219- xs -?218- (one -?220- y) -?217- ys') -?202- (rev' -?223- (app -?225- xs -?224- (one -?226- y)) -?222- (RSnoc -?229- xs -?228- y -?227- rxs) -?221- ys')
  [] -> [?16,?95,?96,?182,?189,?190,?200,?201,?215,?216,!R]
  [?17] -> [?78,?196,?207]
  [?18] -> [?165,?195,?206]
  [?19] -> [?166]
  [?20] -> [?87,?186,?194,?205]
  [?20,?83,?88,?89] -> [?212]
  [?20,?88] -> [?87,?186,?209,?211]
  [?20,?88,?89] -> [?82,?210]
  [?20,?88,?89,?212] -> [?83]
  [?20,?88,?210] -> [?89]
  [?20,?88,?211] -> [?88]
  [?20,?89] -> [?208]
  [?20,?208] -> [?89]
  [?20,?209] -> [?88]
  [?21] -> [?87,?193,?204]
  [?21,?88] -> [?186,?198,?214]
  [?21,?89] -> [?80,?81,?197,?213]
  [?21,?197] -> [?89]
  [?21,?198] -> [?88]
  [?21,?213] -> [?89]
  [?21,?214] -> [?88]
  [?22] -> [?99,?122,?192,?203]
  [?22,?83,?124] -> [?220]
  [?22,?100] -> [?186,?199]
  [?22,?123] -> [?186,?219]
  [?22,?124] -> [?82,?218]
  [?22,?124,?220] -> [?83]
  [?22,?125] -> [?217]
  [?22,?199] -> [?100]
  [?22,?217] -> [?125]
  [?22,?218] -> [?124]
  [?22,?219] -> [?123]
  [?23] -> [?101,?126]
  [?24] -> [?102,?127]
  [?25] -> [?103,?128]
  [?26] -> [?178,?187,?191,?202,?221]
  [?26,?83,?89,?179] -> [?226]
  [?26,?85] -> [?85]
  [?26,?86] -> [?86]
  [?26,?88,?179] -> [?186,?225]
  [?26,?89,?179] -> [?82,?224]
  [?26,?89,?179,?226] -> [?83]
  [?26,?170,?180] -> [?186,?229]
  [?26,?171,?180] -> [?228]
  [?26,?172,?180] -> [?187,?227]
  [?26,?173,?180] -> [?188]
  [?26,?174] -> [?181]
  [?26,?175] -> [?224]
  [?26,?176] -> [?225]
  [?26,?179] -> [?87,?223]
  [?26,?179,?224] -> [?89]
  [?26,?179,?225] -> [?88]
  [?26,?180] -> [?169,?222]
  [?26,?180,?188] -> [?173]
  [?26,?180,?227] -> [?172]
  [?26,?180,?228] -> [?171]
  [?26,?180,?229] -> [?170]
  [?26,?181] -> [?174]
  [?26,?222] -> [?180]
  [?26,?223] -> [?179]
  [?26,?224] -> [?175]
  [?26,?225] -> [?176]
  [?27] -> [?183,?188]
  [?28] -> [?183]
  [?85] -> [?85]
  [?86] -> [?86]
  [?101] -> [?23]
  [?102] -> [?24]
  [?103] -> [?25]
  [?104] -> [?197]
  [?105] -> [?198]
  [?126] -> [?23]
  [?127] -> [?24]
  [?128] -> [?25]
  [?129] -> [?208]
  [?130] -> [?209]
  [?131] -> [?210]
  [?132] -> [?211]
  [?133] -> [?213]
  [?134] -> [?214]
  [?166] -> [?19]
  [?179] -> [?186]
  [?180] -> [?187]
  [?181] -> [?188]
  [?183] -> [?27,?28]
  [?184] -> [?197,?208,?213]
  [?185] -> [?198,?209,?214]
  [?186] -> [?179]
  [?187] -> [?180]
  [?188] -> [?27,?181]
  [?191] -> [?26]
  [?192] -> [?22]
  [?193] -> [?21]
  [?194] -> [?20]
  [?195] -> [?18]
  [?196] -> [?17]
  [?197] -> [?104,?184]
  [?198] -> [?105,?185]
  [?202] -> [?26]
  [?203] -> [?22]
  [?204] -> [?21]
  [?205] -> [?20]
  [?206] -> [?18]
  [?207] -> [?17]
  [?208] -> [?129,?184]
  [?209] -> [?130,?185]
  [?210] -> [?131,?224]
  [?211] -> [?132,?225]
  [?213] -> [?133,?184]
  [?214] -> [?134,?185]
  [?224] -> [?210]
  [?225] -> [?211]

reverse :?256: (xs :?257: List) -> List = (\xs :?258: List. reverse' -?260- xs -?259- (rev -?261- xs))
  [] -> [?237,!R]
  [?231,?239] -> [?258,?261]
  [?232] -> [?240]
  [?238] -> [?258,?260]
  [?239] -> [?230,?259]
  [?239,?261] -> [?231]
  [?240] -> [?232]
  [?257] -> [?258]
  [?258] -> [?257]
  [?259] -> [?239]
  [?260] -> [?238]

reverse' :?237: (xs :?238: List) -> (rxs :?239: Rev -?240- xs) -> List = \(xs :?241: List) (rxs :?242: Rev -?243- xs).
  case -?244- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :?245: List) (x :?246: Bool) (rxs' :?247: Rev -?248- xs')
      | xs = app -?250- xs' -?249- (one -?251- x)
      => Cons -?253- x -?252- (reverse' -?255- xs' -?254- rxs')
  [] -> [?80,?81,?171,?172,?237,?239,?242,?244,?246,?247,?252,?253,?254,!R]
  [?85] -> [?85]
  [?86] -> [?86]
  [?168] -> [?240]
  [?170] -> [?245]
  [?173] -> [?248]
  [?174] -> [?240]
  [?175] -> [?249]
  [?176] -> [?250]
  [?238] -> [?241,?245,?255]
  [?240] -> [?168,?174,?248]
  [?241] -> [?238]
  [?245] -> [?170]
  [?248] -> [?173,?240]
  [?249] -> [?175]
  [?250] -> [?176]
  [?255] -> [?238]

subst :?16: (a :?17: Type) -> (P :?18: (_ :?19: a) -> Type) -> (x :?20: a) -> (y :?21: a) -> (eq :?22: Id -?25- a -?24- x -?23- y) -> (_ :?26: P -?27- x) -> P -?28- y = \(a :?29: Type) (P :?30: (_ :?31: a) -> Type) (x :?32: a) (y :?33: a) (eq :?34: Id -?37- a -?36- x -?35- y).
  case -?38- eq of
    Refl (a' :?39: Type) (x' :?40: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :?41: P -?42- x'. w)
  [] -> [?26,?41,!R]
  [?6] -> [?22,?39]
  [?7] -> [?22,?40]
  [?8] -> [?23]
  [?9] -> [?24]
  [?10] -> [?25]
  [?17] -> [?29]
  [?18] -> [?30]
  [?19] -> [?31]
  [?20] -> [?32]
  [?21] -> [?33]
  [?22] -> [?34]
  [?23] -> [?8]
  [?24] -> [?9]
  [?25] -> [?10]
  [?27] -> [?42]
  [?28] -> [?42]
  [?29] -> [?17]
  [?30] -> [?18]
  [?31] -> [?19]
  [?32] -> [?20]
  [?33] -> [?21]
  [?34] -> [?22]
  [?38] -> [?34]
  [?39] -> [?6,?22,?38]
  [?40] -> [?7,?22,?38]
  [?42] -> [?27,?28]


### Constraints ###

[] -> [?5,?13,?15,?16,?26,?41,?43,?47,?57,?80,?81,?83,?84,?85,?86,?87,?88,?89,?90,?91,?92,?93,?94,?95,?96,?97,?98,?100,?106,?107,?110,?111,?118,?123,?137,?140,?145,?146,?171,?172,?178,?182,?189,?190,?200,?201,?215,?216,?237,?239,?242,?244,?246,?247,?252,?253,?254,?256,!R]
[?6] -> [?22,?39,?50,?60,?70,?73,?78,?109,?142]
[?7] -> [?22,?40,?50,?61,?71,?72,?80,?87,?108,?141]
[?7,?62] -> [?74]
[?7,?74] -> [?62]
[?7,?88] -> [?138,?144]
[?7,?89] -> [?139,?143]
[?7,?143] -> [?89]
[?7,?144] -> [?88]
[?8] -> [?23,?51,?54,?101,?126]
[?9] -> [?24,?52,?55,?102,?127]
[?10] -> [?25,?53,?56,?103,?128]
[?12] -> [?14]
[?14] -> [?12]
[?17] -> [?29,?78,?196,?207]
[?18] -> [?30,?165,?195,?206]
[?19] -> [?31,?166]
[?20] -> [?32,?87,?186,?194,?205]
[?20,?83,?88,?89] -> [?212]
[?20,?88] -> [?87,?186,?209,?211]
[?20,?88,?89] -> [?82,?210]
[?20,?88,?89,?212] -> [?83]
[?20,?88,?210] -> [?89]
[?20,?88,?211] -> [?88]
[?20,?89] -> [?208]
[?20,?208] -> [?89]
[?20,?209] -> [?88]
[?21] -> [?33,?87,?193,?204]
[?21,?88] -> [?186,?198,?214]
[?21,?89] -> [?80,?81,?197,?213]
[?21,?197] -> [?89]
[?21,?198] -> [?88]
[?21,?213] -> [?89]
[?21,?214] -> [?88]
[?22] -> [?34,?99,?122,?192,?203]
[?22,?83,?124] -> [?220]
[?22,?100] -> [?186,?199]
[?22,?123] -> [?186,?219]
[?22,?124] -> [?82,?218]
[?22,?124,?220] -> [?83]
[?22,?125] -> [?217]
[?22,?199] -> [?100]
[?22,?217] -> [?125]
[?22,?218] -> [?124]
[?22,?219] -> [?123]
[?23] -> [?8,?101,?126]
[?24] -> [?9,?102,?127]
[?25] -> [?10,?103,?128]
[?26] -> [?178,?187,?191,?202,?221]
[?26,?83,?89,?179] -> [?226]
[?26,?85] -> [?85]
[?26,?86] -> [?86]
[?26,?88,?179] -> [?186,?225]
[?26,?89,?179] -> [?82,?224]
[?26,?89,?179,?226] -> [?83]
[?26,?170,?180] -> [?186,?229]
[?26,?171,?180] -> [?228]
[?26,?172,?180] -> [?187,?227]
[?26,?173,?180] -> [?188]
[?26,?174] -> [?181]
[?26,?175] -> [?224]
[?26,?176] -> [?225]
[?26,?179] -> [?87,?223]
[?26,?179,?224] -> [?89]
[?26,?179,?225] -> [?88]
[?26,?180] -> [?169,?222]
[?26,?180,?188] -> [?173]
[?26,?180,?227] -> [?172]
[?26,?180,?228] -> [?171]
[?26,?180,?229] -> [?170]
[?26,?181] -> [?174]
[?26,?222] -> [?180]
[?26,?223] -> [?179]
[?26,?224] -> [?175]
[?26,?225] -> [?176]
[?27] -> [?42,?183,?188]
[?28] -> [?42,?183]
[?29] -> [?17]
[?30] -> [?18]
[?31] -> [?19]
[?32] -> [?20]
[?33] -> [?21]
[?34] -> [?22]
[?38] -> [?34]
[?39] -> [?6,?22,?38]
[?40] -> [?7,?22,?38]
[?42] -> [?27,?28]
[?44] -> [?59,?78,?117,?152]
[?45] -> [?60,?78,?116,?151]
[?46] -> [?61,?81,?115,?150,?153]
[?47] -> [?62]
[?48] -> [?63,?87,?114,?149]
[?48,?88] -> [?87,?155,?157]
[?48,?88,?89] -> [?138,?156]
[?48,?88,?156] -> [?89]
[?48,?88,?157] -> [?88]
[?48,?89] -> [?139,?154]
[?48,?154] -> [?89]
[?48,?155] -> [?88]
[?49] -> [?64,?87,?113,?148]
[?49,?88] -> [?120,?159]
[?49,?88,?89] -> [?138,?161]
[?49,?89] -> [?80,?87,?119,?139,?158,?160]
[?49,?89,?160] -> [?89]
[?49,?89,?161] -> [?88]
[?49,?119] -> [?89]
[?49,?120] -> [?88]
[?49,?158] -> [?89]
[?49,?159] -> [?88]
[?50] -> [?65,?99,?112,?121,?122,?147,?164]
[?50,?124] -> [?138,?163]
[?50,?125] -> [?139,?162]
[?50,?162] -> [?125]
[?50,?163] -> [?124]
[?51] -> [?8,?101,?126]
[?52] -> [?9,?102,?127]
[?53] -> [?10,?103,?128]
[?54] -> [?8,?101,?126]
[?55] -> [?9,?102,?127]
[?56] -> [?10,?103,?128]
[?57] -> [?74,?95]
[?58] -> [?74,?95]
[?59] -> [?44]
[?60] -> [?45]
[?61] -> [?46]
[?62] -> [?47]
[?63] -> [?48]
[?64] -> [?49]
[?65] -> [?50]
[?69] -> [?65]
[?70] -> [?6,?50,?69]
[?71] -> [?7,?50,?69]
[?72] -> [?7]
[?73] -> [?6]
[?74] -> [?57,?58]
[?85] -> [?85]
[?86] -> [?86]
[?95] -> [?57,?58]
[?96] -> [?153]
[?97] -> [?119,?154,?156,?158]
[?98] -> [?120,?155,?157,?159]
[?101] -> [?8,?23,?51,?54]
[?102] -> [?9,?24,?52,?55]
[?103] -> [?10,?25,?53,?56]
[?104] -> [?119,?197]
[?105] -> [?120,?198]
[?108] -> [?7]
[?109] -> [?6]
[?112] -> [?50]
[?113] -> [?49]
[?114] -> [?48]
[?115] -> [?46]
[?116] -> [?45]
[?117] -> [?44]
[?119] -> [?97,?104]
[?120] -> [?98,?105]
[?124] -> [?138]
[?125] -> [?139]
[?126] -> [?8,?23,?51,?54]
[?127] -> [?9,?24,?52,?55]
[?128] -> [?10,?25,?53,?56]
[?129] -> [?143,?154,?208]
[?130] -> [?144,?155,?209]
[?131] -> [?156,?210]
[?132] -> [?157,?211]
[?133] -> [?158,?213]
[?134] -> [?159,?214]
[?135] -> [?143,?160]
[?136] -> [?144,?161]
[?138] -> [?124]
[?139] -> [?125]
[?141] -> [?7]
[?142] -> [?6]
[?143] -> [?129,?135]
[?144] -> [?130,?136]
[?147] -> [?50]
[?148] -> [?49]
[?149] -> [?48]
[?150] -> [?46]
[?151] -> [?45]
[?152] -> [?44]
[?153] -> [?96]
[?154] -> [?97,?129]
[?155] -> [?98,?130]
[?156] -> [?97,?131]
[?157] -> [?98,?132]
[?158] -> [?97,?133]
[?159] -> [?98,?134]
[?160] -> [?135]
[?161] -> [?136]
[?166] -> [?19]
[?168] -> [?181,?240]
[?170] -> [?245]
[?173] -> [?248]
[?174] -> [?240]
[?175] -> [?249]
[?176] -> [?250]
[?179] -> [?80,?186,?236]
[?180] -> [?167,?187,?235]
[?181] -> [?168,?188]
[?182] -> [?233,?234]
[?183] -> [?27,?28,?232]
[?184] -> [?197,?208,?213]
[?185] -> [?198,?209,?214]
[?186] -> [?179]
[?187] -> [?180]
[?188] -> [?27,?181]
[?191] -> [?26]
[?192] -> [?22]
[?193] -> [?21]
[?194] -> [?20]
[?195] -> [?18]
[?196] -> [?17]
[?197] -> [?104,?184]
[?198] -> [?105,?185]
[?202] -> [?26]
[?203] -> [?22]
[?204] -> [?21]
[?205] -> [?20]
[?206] -> [?18]
[?207] -> [?17]
[?208] -> [?129,?184]
[?209] -> [?130,?185]
[?210] -> [?131,?224]
[?211] -> [?132,?225]
[?213] -> [?133,?184]
[?214] -> [?134,?185]
[?224] -> [?210]
[?225] -> [?211]
[?231] -> [?233]
[?231,?239] -> [?258,?261]
[?232] -> [?183,?240]
[?233] -> [?231]
[?234] -> [?182]
[?235] -> [?180]
[?236] -> [?179]
[?238] -> [?241,?245,?255,?258,?260]
[?239] -> [?230,?259]
[?239,?261] -> [?231]
[?240] -> [?168,?174,?232,?248]
[?241] -> [?238]
[?245] -> [?170]
[?248] -> [?173,?240]
[?249] -> [?175]
[?250] -> [?176]
[?255] -> [?238]
[?257] -> [?76,?77,?80,?81,?258,?262,?263,?264,?265,?266,?267,?268,?269,?270]
[?258] -> [?257]
[?259] -> [?239]
[?260] -> [?238]
[?262] -> [?257]

### Solution ###

[?5,?13,?15,?16,?26,?41,?43,?47,?57,?58,?62,?74,?76,?77,?80,?81,?83,?84,?85,?86,?87,?88,?89,?90,?91,?92,?93,?94,?95,?96,?97,?98,?100,?104,?105,?106,?107,?110,?111,?118,?119,?120,?123,?129,?130,?131,?132,?133,?134,?135,?136,?137,?140,?143,?144,?145,?146,?153,?154,?155,?156,?157,?158,?159,?160,?161,?167,?169,?171,?172,?175,?176,?178,?180,?182,?184,?185,?187,?189,?190,?191,?197,?198,?200,?201,?202,?208,?209,?210,?211,?213,?214,?215,?216,?221,?222,?224,?225,?227,?228,?230,?231,?233,?234,?235,?237,?239,?242,?244,?246,?247,?249,?250,?252,?253,?254,?256,?257,?258,?259,?261,?262,?263,?264,?265,?266,?267,?268,?269,?270,!R]

### Annotated ###

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :R: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x

id :E: (a :E: Type) -> (_ :R: a) -> a = (\a :E: Type. (\x :R: a. x))

subst :R: (a :E: Type) -> (P :E: (_ :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (_ :R: P -E- x) -> P -E- y = \(a :E: Type) (P :E: (_ :E: a) -> Type) (x :E: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :R: P -E- x'. w)

cong :R: (a :E: Type) -> (b :E: Type) -> (f :E: (_ :R: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -R- x) -E- (f -R- y) = \(a :E: Type) (b :E: Type) (f :E: (_ :R: a) -> b) (x :E: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -E- b -E- (f -R- y)

postulate Bool :E: Type

postulate T :R: Bool

postulate F :R: Bool

postulate List :E: Type

postulate Cuckoo :E: List

postulate Nil :R: List

postulate Cons :R: (x :R: Bool) -> (xs :R: List) -> List

one :E: (x :R: Bool) -> List = (\x :R: Bool. Cons -R- x -R- Nil)

app :R: (xs :R: List) -> (ys :R: List) -> List = \(xs :R: List) (ys :R: List).
  case -R- xs of
    Nil
      => ys
    Cuckoo
      => Nil
    Cons (x :R: Bool) (xs' :R: List)
      => Cons -R- x -R- (app -R- xs' -R- ys)

appRightNeutral :E: (ys :R: List) -> Id -E- List -E- ys -E- (app -R- ys -R- Nil) = \(ys :R: List).
  case -R- ys of
    Nil
      => Refl -E- List -E- Nil
    Cons (x :R: Bool) (xs :R: List)
      => cong -E- List -E- List -E- (Cons -R- x) -E- xs -E- (app -R- xs -R- Nil) -E- (appRightNeutral -E- xs)

appAssoc :E: (xs :R: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -R- (app -R- xs -R- ys) -R- zs) -E- (app -R- xs -R- (app -R- ys -R- zs)) = \(xs :R: List) (ys :E: List) (zs :E: List).
  case -R- xs of
    Nil
      => Refl -E- List -E- (app -R- ys -R- zs)
    Cons (x :R: Bool) (xs' :R: List)
      => cong -E- List -E- List -E- (Cons -R- x) -E- (app -R- (app -R- xs' -R- ys) -R- zs) -E- (app -R- xs' -R- (app -R- ys -R- zs)) -E- (appAssoc -E- xs' -E- ys -E- zs)

postulate Rev :E: (_ :E: List) -> Type

postulate RNil :R: Rev -E- Nil

postulate RSnoc :R: (xs :E: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -R- xs -R- (one -E- x))

rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -R- xs -R- ys) = \(xs :E: List) (rxs :R: Rev -E- xs) (ys :R: List).
  case -R- ys of
    Nil
      => subst -E- List -E- Rev -E- xs -E- (app -R- xs -R- Nil) -E- (appRightNeutral -E- xs) -R- rxs
    Cons (y :R: Bool) (ys' :R: List)
      => subst -E- List -E- Rev -E- (app -R- (app -R- xs -R- (one -E- y)) -R- ys') -E- (app -R- xs -R- (Cons -R- y -R- ys')) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys') -R- (rev' -E- (app -R- xs -R- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys')

rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)

reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List = \(xs :E: List) (rxs :R: Rev -E- xs).
  case -R- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :E: List) (x :R: Bool) (rxs' :R: Rev -E- xs')
      | xs = app -R- xs' -R- (one -E- x)
      => Cons -R- x -R- (reverse' -E- xs' -R- rxs')

reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))

main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))

### Specialised ###

postulate Id :!E: (a :!E: Type) -> (x :!E: a) -> (y :!E: a) -> Type

postulate Refl :!R: (a :!E: Type) -> (x :!E: a) -> Id -!E- a -!E- x -!E- x

id :!E: (a :!E: Type) -> (_ :!R: a) -> a = (\a :!E: Type. (\x :!R: a. x))

subst :!R: (a :!E: Type) -> (P :!E: (_ :!E: a) -> Type) -> (x :!E: a) -> (y :!E: a) -> (eq :!E: Id -!E- a -!E- x -!E- y) -> (_ :!R: P -!E- x) -> P -!E- y = \(a :!E: Type) (P :!E: (_ :!E: a) -> Type) (x :!E: a) (y :!E: a) (eq :!E: Id -!E- a -!E- x -!E- y).
  case -!E- eq of
    Refl (a' :!E: Type) (x' :!E: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :!R: P -!E- x'. w)

cong :!R: (a :!E: Type) -> (b :!E: Type) -> (f :!E: (_ :!R: a) -> b) -> (x :!E: a) -> (y :!E: a) -> (eq :!E: Id -!E- a -!E- x -!E- y) -> Id -!E- b -!E- (f -!R- x) -!E- (f -!R- y) = \(a :!E: Type) (b :!E: Type) (f :!E: (_ :!R: a) -> b) (x :!E: a) (y :!E: a) (eq :!E: Id -!E- a -!E- x -!E- y).
  case -!E- eq of
    Refl (a' :!E: Type) (x' :!E: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -!E- b -!E- (f -!R- y)

postulate Bool :!E: Type

postulate T :!R: Bool

postulate F :!R: Bool

postulate List :!E: Type

postulate Cuckoo :!E: List

postulate Nil :!R: List

postulate Cons :!R: (x :!R: Bool) -> (xs :!R: List) -> List

one :!E: (x :!R: Bool) -> List = (\x :!R: Bool. Cons -!R- x -!R- Nil)

app :!R: (xs :!R: List) -> (ys :!R: List) -> List = \(xs :!R: List) (ys :!R: List).
  case -!R- xs of
    Nil
      => ys
    Cuckoo
      => Nil
    Cons (x :!R: Bool) (xs' :!R: List)
      => Cons -!R- x -!R- (app -!R- xs' -!R- ys)

appRightNeutral :!E: (ys :!R: List) -> Id -!E- List -!E- ys -!E- (app -!R- ys -!R- Nil) = \(ys :!R: List).
  case -!R- ys of
    Nil
      => Refl -!E- List -!E- Nil
    Cons (x :!R: Bool) (xs :!R: List)
      => cong -!E- List -!E- List -!E- (Cons -!R- x) -!E- xs -!E- (app -!R- xs -!R- Nil) -!E- (appRightNeutral -!E- xs)

appAssoc :!E: (xs :!R: List) -> (ys :!E: List) -> (zs :!E: List) -> Id -!E- List -!E- (app -!R- (app -!R- xs -!R- ys) -!R- zs) -!E- (app -!R- xs -!R- (app -!R- ys -!R- zs)) = \(xs :!R: List) (ys :!E: List) (zs :!E: List).
  case -!R- xs of
    Nil
      => Refl -!E- List -!E- (app -!R- ys -!R- zs)
    Cons (x :!R: Bool) (xs' :!R: List)
      => cong -!E- List -!E- List -!E- (Cons -!R- x) -!E- (app -!R- (app -!R- xs' -!R- ys) -!R- zs) -!E- (app -!R- xs' -!R- (app -!R- ys -!R- zs)) -!E- (appAssoc -!E- xs' -!E- ys -!E- zs)

postulate Rev :!E: (_ :!E: List) -> Type

postulate RNil :!R: Rev -!E- Nil

postulate RSnoc :!R: (xs :!E: List) -> (x :!R: Bool) -> (rxs :!R: Rev -!E- xs) -> Rev -!E- (app -!R- xs -!R- (one -!E- x))

rev' :!R: (xs :!E: List) -> (rxs :!R: Rev -!E- xs) -> (ys :!R: List) -> Rev -!E- (app -!R- xs -!R- ys) = \(xs :!E: List) (rxs :!R: Rev -!E- xs) (ys :!R: List).
  case -!R- ys of
    Nil
      => subst -!E- List -!E- Rev -!E- xs -!E- (app -!R- xs -!R- Nil) -!E- (appRightNeutral -!E- xs) -!R- rxs
    Cons (y :!R: Bool) (ys' :!R: List)
      => subst -!E- List -!E- Rev -!E- (app -!R- (app -!R- xs -!R- (one -!E- y)) -!R- ys') -!E- (app -!R- xs -!R- (Cons -!R- y -!R- ys')) -!E- (appAssoc -!E- xs -!E- (one -!E- y) -!E- ys') -!R- (rev' -!E- (app -!R- xs -!R- (one -!E- y)) -!R- (RSnoc -!E- xs -!R- y -!R- rxs) -!R- ys')

rev :!R: (xs :!R: List) -> Rev -!E- xs = (\xs :!R: List. rev' -!E- Nil -!R- RNil -!R- xs)

reverse' :!R: (xs :!E: List) -> (rxs :!R: Rev -!E- xs) -> List = \(xs :!E: List) (rxs :!R: Rev -!E- xs).
  case -!R- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :!E: List) (x :!R: Bool) (rxs' :!R: Rev -!E- xs')
      | xs = app -!R- xs' -!R- (one -!E- x)
      => Cons -!R- x -!R- (reverse' -!E- xs' -!R- rxs')

reverse :!R: (xs :!R: List) -> List = (\xs :!R: List. reverse' -!E- xs -!R- (rev -!R- xs))

main :!R: List = reverse -!R- (Cons -!R- T -!R- (Cons -!R- F -!R- (Cons -!R- T -!R- (Cons -!R- F -!R- Nil))))

### Final annotation ###

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :R: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x

id :E: (a :E: Type) -> (_ :R: a) -> a = (\a :E: Type. (\x :R: a. x))

subst :R: (a :E: Type) -> (P :E: (_ :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (_ :R: P -E- x) -> P -E- y = \(a :E: Type) (P :E: (_ :E: a) -> Type) (x :E: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :R: P -E- x'. w)

cong :R: (a :E: Type) -> (b :E: Type) -> (f :E: (_ :R: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -R- x) -E- (f -R- y) = \(a :E: Type) (b :E: Type) (f :E: (_ :R: a) -> b) (x :E: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -E- b -E- (f -R- y)

postulate Bool :E: Type

postulate T :R: Bool

postulate F :R: Bool

postulate List :E: Type

postulate Cuckoo :E: List

postulate Nil :R: List

postulate Cons :R: (x :R: Bool) -> (xs :R: List) -> List

one :E: (x :R: Bool) -> List = (\x :R: Bool. Cons -R- x -R- Nil)

app :R: (xs :R: List) -> (ys :R: List) -> List = \(xs :R: List) (ys :R: List).
  case -R- xs of
    Nil
      => ys
    Cuckoo
      => Nil
    Cons (x :R: Bool) (xs' :R: List)
      => Cons -R- x -R- (app -R- xs' -R- ys)

appRightNeutral :E: (ys :R: List) -> Id -E- List -E- ys -E- (app -R- ys -R- Nil) = \(ys :R: List).
  case -R- ys of
    Nil
      => Refl -E- List -E- Nil
    Cons (x :R: Bool) (xs :R: List)
      => cong -E- List -E- List -E- (Cons -R- x) -E- xs -E- (app -R- xs -R- Nil) -E- (appRightNeutral -E- xs)

appAssoc :E: (xs :R: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -R- (app -R- xs -R- ys) -R- zs) -E- (app -R- xs -R- (app -R- ys -R- zs)) = \(xs :R: List) (ys :E: List) (zs :E: List).
  case -R- xs of
    Nil
      => Refl -E- List -E- (app -R- ys -R- zs)
    Cons (x :R: Bool) (xs' :R: List)
      => cong -E- List -E- List -E- (Cons -R- x) -E- (app -R- (app -R- xs' -R- ys) -R- zs) -E- (app -R- xs' -R- (app -R- ys -R- zs)) -E- (appAssoc -E- xs' -E- ys -E- zs)

postulate Rev :E: (_ :E: List) -> Type

postulate RNil :R: Rev -E- Nil

postulate RSnoc :R: (xs :E: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -R- xs -R- (one -E- x))

rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -R- xs -R- ys) = \(xs :E: List) (rxs :R: Rev -E- xs) (ys :R: List).
  case -R- ys of
    Nil
      => subst -E- List -E- Rev -E- xs -E- (app -R- xs -R- Nil) -E- (appRightNeutral -E- xs) -R- rxs
    Cons (y :R: Bool) (ys' :R: List)
      => subst -E- List -E- Rev -E- (app -R- (app -R- xs -R- (one -E- y)) -R- ys') -E- (app -R- xs -R- (Cons -R- y -R- ys')) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys') -R- (rev' -E- (app -R- xs -R- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys')

rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)

reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List = \(xs :E: List) (rxs :R: Rev -E- xs).
  case -R- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :E: List) (x :R: Bool) (rxs' :R: Rev -E- xs')
      | xs = app -R- xs' -R- (one -E- x)
      => Cons -R- x -R- (reverse' -E- xs' -R- rxs')

reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))

main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))

### Verification ###

Verification successful.

### Pruned ###

postulate Refl

subst = (\w. w)

cong = Refl

postulate T

postulate F

postulate Nil

postulate Cons

app = \xs ys.
  case xs of
    Nil
      => ys
    Cuckoo
      => Nil
    Cons x xs'
      => Cons x (app xs' ys)

postulate RNil

postulate RSnoc

rev' = \rxs ys.
  case ys of
    Nil
      => subst rxs
    Cons y ys'
      => subst (rev' (RSnoc y rxs) ys')

rev = (\xs. rev' RNil xs)

reverse' = \rxs.
  case rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc x rxs'
      | xs = app xs' one
      => Cons x (reverse' rxs')

reverse = (\xs. reverse' (rev xs))

main = reverse (Cons T (Cons F (Cons T (Cons F Nil))))

### Normal forms ###

unerased:
  Cons F (Cons T (Cons F (Cons T Nil)))
erased:
  Cons F (Cons T (Cons F (Cons T Nil)))
