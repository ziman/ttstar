-- vim: ft=agda

### Desugared ###

postulate Id : (a : Type) -> (x : a) -> (y : a) -> Type

postulate Refl : (a : Type) -> (x : a) -> Id a x x

id : (a : Type) -> (_ : a) -> a = (\a : Type. (\x : a. x))

subst : (a : Type) -> (P : (_ : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (_ : P x) -> P y 
  pat (a : Type) (P : (_ : a) -> Type) (x : a).
    subst a P x [x] (Refl [a] [x]) = (\y : P x. y)

cong : (a : Type) -> (b : Type) -> (f : (_ : a) -> b) -> (x : a) -> (y : a) -> (eq : Id a x y) -> Id b (f x) (f y) 
  pat (a : Type) (b : Type) (f : (_ : a) -> b) (x : a).
    cong a b f x [x] (Refl [a] [x]) = Refl b (f x)

postulate Bool : Type

postulate T : Bool

postulate F : Bool

postulate List : Type

postulate Nil : List

postulate Cons : (x  -R-  Bool) -> (xs  -R-  List) -> List

one : (x : Bool) -> List = (\x : Bool. Cons x Nil)

app : (_ : List) -> (_ : List) -> List 
  pat (ys : List).
    app Nil ys = ys
  pat (x : Bool) (xs : List) (ys : List).
    app (Cons x xs) ys = Cons x (app xs ys)

appRightNeutral : (ys : List) -> Id List ys (app ys Nil) 
  appRightNeutral Nil = Refl List Nil
  pat (x : Bool) (xs : List).
    appRightNeutral (Cons x xs) = cong List List (Cons x) xs (app xs Nil) (appRightNeutral xs)

appAssoc : (xs : List) -> (ys : List) -> (zs : List) -> Id List (app (app xs ys) zs) (app xs (app ys zs)) 
  pat (ys : List) (zs : List).
    appAssoc Nil ys zs = Refl List (app ys zs)
  pat (x : Bool) (xs : List) (ys : List) (zs : List).
    appAssoc (Cons x xs) ys zs = cong List List (Cons x) (app (app xs ys) zs) (app xs (app ys zs)) (appAssoc xs ys zs)

postulate Rev : (_ : List) -> Type

postulate RNil : Rev Nil

postulate RSnoc : (xs : List) -> (x : Bool) -> (rxs : Rev xs) -> Rev (app xs (one x))

rev' : (xs : List) -> (_ : Rev xs) -> (ys : List) -> Rev (app xs ys) 
  pat (xs : List) (rxs : Rev xs).
    rev' xs rxs Nil = subst List Rev xs (app xs Nil) (appRightNeutral xs) rxs
  pat (xs : List) (rxs : Rev xs) (y : Bool) (ys : List).
    rev' xs rxs (Cons y ys) = subst List Rev (app (app xs (one y)) ys) (app xs (Cons y ys)) (appAssoc xs (one y) ys) (rev' (app xs (one y)) (RSnoc xs y rxs) ys)

rev : (xs : List) -> Rev xs = (\xs : List. rev' Nil RNil xs)

reverse' : (xs : List) -> (rxs : Rev xs) -> List 
  reverse' Nil RNil = Nil
  pat (x : Bool) (xs : List) (rxs : Rev xs).
    reverse' [app xs (one x)] (RSnoc xs x rxs) = Cons x (reverse' xs rxs)

reverse : (xs : List) -> List = (\xs : List. reverse' xs (rev xs))

main  -R-  List = reverse (Cons T (Cons F (Cons T (Cons F Nil))))

### Metaified ###

postulate Id :?1: (a :?2: Type) -> (x :?3: a) -> (y :?4: a) -> Type

postulate Refl :?5: (a :?6: Type) -> (x :?7: a) -> Id -?10- a -?9- x -?8- x

id :?11: (a :?12: Type) -> (_ :?13: a) -> a = (\a :?14: Type. (\x :?15: a. x))

subst :?16: (a :?17: Type) -> (P :?18: (_ :?19: a) -> Type) -> (x :?20: a) -> (y :?21: a) -> (eq :?22: Id -?25- a -?24- x -?23- y) -> (_ :?26: P -?27- x) -> P -?28- y 
  pat (a :?29: Type) (P :?30: (_ :?31: a) -> Type) (x :?32: a).
    subst -?37- a -?36- P -?35- x -?34- [x] -?33- (Refl -?39- [a] -?38- [x]) = (\y :?40: P -?41- x. y)

cong :?42: (a :?43: Type) -> (b :?44: Type) -> (f :?45: (_ :?46: a) -> b) -> (x :?47: a) -> (y :?48: a) -> (eq :?49: Id -?52- a -?51- x -?50- y) -> Id -?55- b -?54- (f -?56- x) -?53- (f -?57- y) 
  pat (a :?58: Type) (b :?59: Type) (f :?60: (_ :?61: a) -> b) (x :?62: a).
    cong -?68- a -?67- b -?66- f -?65- x -?64- [x] -?63- (Refl -?70- [a] -?69- [x]) = Refl -?72- b -?71- (f -?73- x)

postulate Bool :?74: Type

postulate T :?75: Bool

postulate F :?76: Bool

postulate List :?77: Type

postulate Nil :?78: List

postulate Cons :?79: (x :!R: Bool) -> (xs :!R: List) -> List

one :?80: (x :?81: Bool) -> List = (\x :?82: Bool. Cons -?84- x -?83- Nil)

app :?85: (_ :?86: List) -> (_ :?87: List) -> List 
  pat (ys :?88: List).
    app -?90- Nil -?89- ys = ys
  pat (x :?91: Bool) (xs :?92: List) (ys :?93: List).
    app -?95- (Cons -?97- x -?96- xs) -?94- ys = Cons -?99- x -?98- (app -?101- xs -?100- ys)

appRightNeutral :?102: (ys :?103: List) -> Id -?106- List -?105- ys -?104- (app -?108- ys -?107- Nil) 
  appRightNeutral -?109- Nil = Refl -?111- List -?110- Nil
  pat (x :?112: Bool) (xs :?113: List).
    appRightNeutral -?114- (Cons -?116- x -?115- xs) = cong -?122- List -?121- List -?120- (Cons -?123- x) -?119- xs -?118- (app -?125- xs -?124- Nil) -?117- (appRightNeutral -?126- xs)

appAssoc :?127: (xs :?128: List) -> (ys :?129: List) -> (zs :?130: List) -> Id -?133- List -?132- (app -?135- (app -?137- xs -?136- ys) -?134- zs) -?131- (app -?139- xs -?138- (app -?141- ys -?140- zs)) 
  pat (ys :?142: List) (zs :?143: List).
    appAssoc -?146- Nil -?145- ys -?144- zs = Refl -?148- List -?147- (app -?150- ys -?149- zs)
  pat (x :?151: Bool) (xs :?152: List) (ys :?153: List) (zs :?154: List).
    appAssoc -?157- (Cons -?159- x -?158- xs) -?156- ys -?155- zs = cong -?165- List -?164- List -?163- (Cons -?166- x) -?162- (app -?168- (app -?170- xs -?169- ys) -?167- zs) -?161- (app -?172- xs -?171- (app -?174- ys -?173- zs)) -?160- (appAssoc -?177- xs -?176- ys -?175- zs)

postulate Rev :?178: (_ :?179: List) -> Type

postulate RNil :?180: Rev -?181- Nil

postulate RSnoc :?182: (xs :?183: List) -> (x :?184: Bool) -> (rxs :?185: Rev -?186- xs) -> Rev -?187- (app -?189- xs -?188- (one -?190- x))

rev' :?191: (xs :?192: List) -> (_ :?193: Rev -?194- xs) -> (ys :?195: List) -> Rev -?196- (app -?198- xs -?197- ys) 
  pat (xs :?199: List) (rxs :?200: Rev -?201- xs).
    rev' -?204- xs -?203- rxs -?202- Nil = subst -?210- List -?209- Rev -?208- xs -?207- (app -?212- xs -?211- Nil) -?206- (appRightNeutral -?213- xs) -?205- rxs
  pat (xs :?214: List) (rxs :?215: Rev -?216- xs) (y :?217: Bool) (ys :?218: List).
    rev' -?221- xs -?220- rxs -?219- (Cons -?223- y -?222- ys) = subst -?229- List -?228- Rev -?227- (app -?231- (app -?233- xs -?232- (one -?234- y)) -?230- ys) -?226- (app -?236- xs -?235- (Cons -?238- y -?237- ys)) -?225- (appAssoc -?241- xs -?240- (one -?242- y) -?239- ys) -?224- (rev' -?245- (app -?247- xs -?246- (one -?248- y)) -?244- (RSnoc -?251- xs -?250- y -?249- rxs) -?243- ys)

rev :?252: (xs :?253: List) -> Rev -?254- xs = (\xs :?255: List. rev' -?258- Nil -?257- RNil -?256- xs)

reverse' :?259: (xs :?260: List) -> (rxs :?261: Rev -?262- xs) -> List 
  reverse' -?264- Nil -?263- RNil = Nil
  pat (x :?265: Bool) (xs :?266: List) (rxs :?267: Rev -?268- xs).
    reverse' -?270- [app -?272- xs -?271- (one -?273- x)] -?269- (RSnoc -?276- xs -?275- x -?274- rxs) = Cons -?278- x -?277- (reverse' -?280- xs -?279- rxs)

reverse :?281: (xs :?282: List) -> List = (\xs :?283: List. reverse' -?285- xs -?284- (rev -?286- xs))

main :!R: List = reverse -?287- (Cons -?289- T -?288- (Cons -?291- F -?290- (Cons -?293- T -?292- (Cons -?295- F -?294- Nil))))

### Inferred definitions ###

postulate Bool :?74: Type

postulate Cons :?79: (x :!R: Bool) -> (xs :!R: List) -> List

postulate F :?76: Bool

postulate Id :?1: (a :?2: Type) -> (x :?3: a) -> (y :?4: a) -> Type

postulate List :?77: Type

postulate Nil :?78: List

postulate RNil :?180: Rev -?181- Nil

postulate RSnoc :?182: (xs :?183: List) -> (x :?184: Bool) -> (rxs :?185: Rev -?186- xs) -> Rev -?187- (app -?189- xs -?188- (one -?190- x))

postulate Refl :?5: (a :?6: Type) -> (x :?7: a) -> Id -?10- a -?9- x -?8- x

postulate Rev :?178: (_ :?179: List) -> Type

postulate T :?75: Bool

postulate Type :!R: Type

app :?85: (_ :?86: List) -> (_ :?87: List) -> List 
  pat (ys :?88: List).
    app -?90- Nil -?89- ys = ys
  pat (x :?91: Bool) (xs :?92: List) (ys :?93: List).
    app -?95- (Cons -?97- x -?96- xs) -?94- ys = Cons -?99- x -?98- (app -?101- xs -?100- ys)
  [] -> [?79,?85,?86,?87,?88,?89,?90,?91,?92,?93,?94,?95,?96,?97,?98,?99,?100,?101,!R]

appAssoc :?127: (xs :?128: List) -> (ys :?129: List) -> (zs :?130: List) -> Id -?133- List -?132- (app -?135- (app -?137- xs -?136- ys) -?134- zs) -?131- (app -?139- xs -?138- (app -?141- ys -?140- zs)) 
  pat (ys :?142: List) (zs :?143: List).
    appAssoc -?146- Nil -?145- ys -?144- zs = Refl -?148- List -?147- (app -?150- ys -?149- zs)
  pat (x :?151: Bool) (xs :?152: List) (ys :?153: List) (zs :?154: List).
    appAssoc -?157- (Cons -?159- x -?158- xs) -?156- ys -?155- zs = cong -?165- List -?164- List -?163- (Cons -?166- x) -?162- (app -?168- (app -?170- xs -?169- ys) -?167- zs) -?161- (app -?172- xs -?171- (app -?174- ys -?173- zs)) -?160- (appAssoc -?177- xs -?176- ys -?175- zs)
  [] -> [?5,?42,?46,?128,?146,?157,?158,?159,!R]
  [?6] -> [?77,?148]
  [?7] -> [?85,?147]
  [?7,?86] -> [?142,?150]
  [?7,?87] -> [?143,?149]
  [?7,?149] -> [?87]
  [?7,?150] -> [?86]
  [?8] -> [?131]
  [?9] -> [?132]
  [?10] -> [?133]
  [?43] -> [?77,?165]
  [?44] -> [?77,?164]
  [?45] -> [?79,?151,?163,?166]
  [?47] -> [?85,?162]
  [?47,?86] -> [?85,?152,?168,?170]
  [?47,?86,?87] -> [?153,?169]
  [?47,?86,?169] -> [?87]
  [?47,?86,?170] -> [?86]
  [?47,?87] -> [?154,?167]
  [?47,?167] -> [?87]
  [?47,?168] -> [?86]
  [?48] -> [?85,?161]
  [?48,?86] -> [?152,?172]
  [?48,?86,?87] -> [?153,?174]
  [?48,?87] -> [?85,?154,?171,?173]
  [?48,?87,?173] -> [?87]
  [?48,?87,?174] -> [?86]
  [?48,?171] -> [?87]
  [?48,?172] -> [?86]
  [?49] -> [?127,?152,?160,?177]
  [?49,?129] -> [?153,?176]
  [?49,?130] -> [?154,?175]
  [?49,?175] -> [?130]
  [?49,?176] -> [?129]
  [?50] -> [?131]
  [?51] -> [?132]
  [?52] -> [?133]
  [?53] -> [?131]
  [?54] -> [?132]
  [?55] -> [?133]
  [?56] -> [?98]
  [?57] -> [?98]
  [?98] -> [?56,?57]
  [?99] -> [?166]
  [?100] -> [?167,?169,?171]
  [?101] -> [?168,?170,?172]
  [?129] -> [?145,?156]
  [?130] -> [?144,?155]
  [?131] -> [?8,?50,?53]
  [?132] -> [?9,?51,?54]
  [?133] -> [?10,?52,?55]
  [?134] -> [?149,?167]
  [?135] -> [?150,?168]
  [?136] -> [?169]
  [?137] -> [?170]
  [?138] -> [?171]
  [?139] -> [?172]
  [?140] -> [?149,?173]
  [?141] -> [?150,?174]
  [?142] -> [?129]
  [?143] -> [?130]
  [?144] -> [?130]
  [?145] -> [?129]
  [?147] -> [?7]
  [?148] -> [?6]
  [?149] -> [?134,?140]
  [?150] -> [?135,?141]
  [?153] -> [?129]
  [?154] -> [?130]
  [?155] -> [?130]
  [?156] -> [?129]
  [?160] -> [?49]
  [?161] -> [?48]
  [?162] -> [?47]
  [?163] -> [?45]
  [?164] -> [?44]
  [?165] -> [?43]
  [?166] -> [?99]
  [?167] -> [?100,?134]
  [?168] -> [?101,?135]
  [?169] -> [?100,?136]
  [?170] -> [?101,?137]
  [?171] -> [?100,?138]
  [?172] -> [?101,?139]
  [?173] -> [?140]
  [?174] -> [?141]

appRightNeutral :?102: (ys :?103: List) -> Id -?106- List -?105- ys -?104- (app -?108- ys -?107- Nil) 
  appRightNeutral -?109- Nil = Refl -?111- List -?110- Nil
  pat (x :?112: Bool) (xs :?113: List).
    appRightNeutral -?114- (Cons -?116- x -?115- xs) = cong -?122- List -?121- List -?120- (Cons -?123- x) -?119- xs -?118- (app -?125- xs -?124- Nil) -?117- (appRightNeutral -?126- xs)
  [] -> [?5,?42,?46,?56,?99,?103,?109,?114,?115,?116,?123,!R]
  [?6] -> [?77,?111]
  [?7] -> [?78,?110]
  [?8] -> [?104]
  [?9] -> [?105]
  [?10] -> [?106]
  [?43] -> [?77,?122]
  [?44] -> [?77,?121]
  [?45] -> [?79,?112,?120]
  [?47] -> [?113,?119]
  [?48] -> [?85,?118]
  [?48,?86] -> [?113,?125]
  [?48,?87] -> [?78,?124]
  [?48,?124] -> [?87]
  [?48,?125] -> [?86]
  [?49] -> [?102,?113,?117,?126]
  [?50] -> [?104]
  [?51] -> [?105]
  [?52] -> [?106]
  [?53] -> [?104]
  [?54] -> [?105]
  [?55] -> [?106]
  [?57] -> [?98]
  [?98] -> [?57]
  [?100] -> [?124]
  [?101] -> [?125]
  [?104] -> [?8,?50,?53]
  [?105] -> [?9,?51,?54]
  [?106] -> [?10,?52,?55]
  [?107] -> [?124]
  [?108] -> [?125]
  [?110] -> [?7]
  [?111] -> [?6]
  [?117] -> [?49]
  [?118] -> [?48]
  [?119] -> [?47]
  [?120] -> [?45]
  [?121] -> [?44]
  [?122] -> [?43]
  [?124] -> [?100,?107]
  [?125] -> [?101,?108]

cong :?42: (a :?43: Type) -> (b :?44: Type) -> (f :?45: (_ :?46: a) -> b) -> (x :?47: a) -> (y :?48: a) -> (eq :?49: Id -?52- a -?51- x -?50- y) -> Id -?55- b -?54- (f -?56- x) -?53- (f -?57- y) 
  pat (a :?58: Type) (b :?59: Type) (f :?60: (_ :?61: a) -> b) (x :?62: a).
    cong -?68- a -?67- b -?66- f -?65- x -?64- [x] -?63- (Refl -?70- [a] -?69- [x]) = Refl -?72- b -?71- (f -?73- x)
  [] -> [?5,?49,?63,!R]
  [?6] -> [?59,?70,?72]
  [?7] -> [?60,?69,?71]
  [?7,?61] -> [?62,?73]
  [?7,?73] -> [?61]
  [?8] -> [?50,?53]
  [?9] -> [?51,?54]
  [?10] -> [?52,?55]
  [?43] -> [?68]
  [?44] -> [?67]
  [?45] -> [?66]
  [?46] -> [?61]
  [?47] -> [?65]
  [?48] -> [?64]
  [?50] -> [?8]
  [?51] -> [?9]
  [?52] -> [?10]
  [?53] -> [?8]
  [?54] -> [?9]
  [?55] -> [?10]
  [?56] -> [?73]
  [?57] -> [?73]
  [?58] -> [?43]
  [?59] -> [?44]
  [?60] -> [?45]
  [?61] -> [?46]
  [?62] -> [?47]
  [?64] -> [?48]
  [?65] -> [?47]
  [?66] -> [?45]
  [?67] -> [?44]
  [?68] -> [?43]
  [?69] -> [?7]
  [?70] -> [?6]
  [?71] -> [?7]
  [?72] -> [?6]
  [?73] -> [?56,?57]

id :?11: (a :?12: Type) -> (_ :?13: a) -> a = (\a :?14: Type. (\x :?15: a. x))
  [] -> [?13,?15,!R]
  [?12] -> [?14]
  [?14] -> [?12]

main :!R: List = reverse -?287- (Cons -?289- T -?288- (Cons -?291- F -?290- (Cons -?293- T -?292- (Cons -?295- F -?294- Nil))))
  [] -> [?281,!R]
  [?282] -> [?75,?76,?78,?79,?287,?288,?289,?290,?291,?292,?293,?294,?295]
  [?287] -> [?282]

one :?80: (x :?81: Bool) -> List = (\x :?82: Bool. Cons -?84- x -?83- Nil)
  [] -> [?78,?79,?81,?82,?83,?84,!R]

rev :?252: (xs :?253: List) -> Rev -?254- xs = (\xs :?255: List. rev' -?258- Nil -?257- RNil -?256- xs)
  [] -> [?191,!R]
  [?181] -> [?194]
  [?192] -> [?78,?258]
  [?193] -> [?180,?257]
  [?194] -> [?181]
  [?195] -> [?255,?256]
  [?196] -> [?254]
  [?253] -> [?255]
  [?254] -> [?196]
  [?255] -> [?253]
  [?256] -> [?195]
  [?257] -> [?193]
  [?258] -> [?192]

rev' :?191: (xs :?192: List) -> (_ :?193: Rev -?194- xs) -> (ys :?195: List) -> Rev -?196- (app -?198- xs -?197- ys) 
  pat (xs :?199: List) (rxs :?200: Rev -?201- xs).
    rev' -?204- xs -?203- rxs -?202- Nil = subst -?210- List -?209- Rev -?208- xs -?207- (app -?212- xs -?211- Nil) -?206- (appRightNeutral -?213- xs) -?205- rxs
  pat (xs :?214: List) (rxs :?215: Rev -?216- xs) (y :?217: Bool) (ys :?218: List).
    rev' -?221- xs -?220- rxs -?219- (Cons -?223- y -?222- ys) = subst -?229- List -?228- Rev -?227- (app -?231- (app -?233- xs -?232- (one -?234- y)) -?230- ys) -?226- (app -?236- xs -?235- (Cons -?238- y -?237- ys)) -?225- (appAssoc -?241- xs -?240- (one -?242- y) -?239- ys) -?224- (rev' -?245- (app -?247- xs -?246- (one -?248- y)) -?244- (RSnoc -?251- xs -?250- y -?249- rxs) -?243- ys)
  [] -> [?16,?98,?99,?195,?202,?219,?222,?223,?237,?238,!R]
  [?17] -> [?77,?210,?229]
  [?18] -> [?178,?209,?228]
  [?19] -> [?179]
  [?20] -> [?85,?199,?208,?227]
  [?20,?81,?86,?87] -> [?217,?234]
  [?20,?86] -> [?85,?214,?231,?233]
  [?20,?86,?87] -> [?80,?232]
  [?20,?86,?87,?234] -> [?81]
  [?20,?86,?232] -> [?87]
  [?20,?86,?233] -> [?86]
  [?20,?87] -> [?218,?230]
  [?20,?230] -> [?87]
  [?20,?231] -> [?86]
  [?21] -> [?85,?207,?226]
  [?21,?86] -> [?199,?212,?214,?236]
  [?21,?87] -> [?78,?79,?211,?217,?218,?235]
  [?21,?211] -> [?87]
  [?21,?212] -> [?86]
  [?21,?235] -> [?87]
  [?21,?236] -> [?86]
  [?22] -> [?102,?127,?206,?225]
  [?22,?81,?129] -> [?217,?242]
  [?22,?103] -> [?199,?213]
  [?22,?128] -> [?214,?241]
  [?22,?129] -> [?80,?240]
  [?22,?129,?242] -> [?81]
  [?22,?130] -> [?218,?239]
  [?22,?213] -> [?103]
  [?22,?239] -> [?130]
  [?22,?240] -> [?129]
  [?22,?241] -> [?128]
  [?23] -> [?104,?131]
  [?24] -> [?105,?132]
  [?25] -> [?106,?133]
  [?26] -> [?191,?200,?205,?218,?224,?243]
  [?26,?81,?87,?192] -> [?217,?248]
  [?26,?83] -> [?83]
  [?26,?84] -> [?84]
  [?26,?86,?192] -> [?214,?247]
  [?26,?87,?192] -> [?80,?246]
  [?26,?87,?192,?248] -> [?81]
  [?26,?183,?193] -> [?214,?251]
  [?26,?184,?193] -> [?217,?250]
  [?26,?185,?193] -> [?215,?249]
  [?26,?186,?193] -> [?216]
  [?26,?187] -> [?194]
  [?26,?188] -> [?246]
  [?26,?189] -> [?247]
  [?26,?192] -> [?85,?245]
  [?26,?192,?246] -> [?87]
  [?26,?192,?247] -> [?86]
  [?26,?193] -> [?182,?244]
  [?26,?193,?216] -> [?186]
  [?26,?193,?249] -> [?185]
  [?26,?193,?250] -> [?184]
  [?26,?193,?251] -> [?183]
  [?26,?194] -> [?187]
  [?26,?244] -> [?193]
  [?26,?245] -> [?192]
  [?26,?246] -> [?188]
  [?26,?247] -> [?189]
  [?27] -> [?196,?201]
  [?28] -> [?196]
  [?83] -> [?83]
  [?84] -> [?84]
  [?104] -> [?23]
  [?105] -> [?24]
  [?106] -> [?25]
  [?107] -> [?211]
  [?108] -> [?212]
  [?131] -> [?23]
  [?132] -> [?24]
  [?133] -> [?25]
  [?134] -> [?230]
  [?135] -> [?231]
  [?136] -> [?232]
  [?137] -> [?233]
  [?138] -> [?235]
  [?139] -> [?236]
  [?179] -> [?19]
  [?192] -> [?204,?221]
  [?193] -> [?203,?220]
  [?194] -> [?201,?216]
  [?196] -> [?27,?28]
  [?197] -> [?211,?230,?235]
  [?198] -> [?212,?231,?236]
  [?199] -> [?192]
  [?200] -> [?193]
  [?201] -> [?27,?194]
  [?203] -> [?193]
  [?204] -> [?192]
  [?205] -> [?26]
  [?206] -> [?22]
  [?207] -> [?21]
  [?208] -> [?20]
  [?209] -> [?18]
  [?210] -> [?17]
  [?211] -> [?107,?197]
  [?212] -> [?108,?198]
  [?214] -> [?192]
  [?215] -> [?193]
  [?216] -> [?194]
  [?220] -> [?193]
  [?221] -> [?192]
  [?224] -> [?26]
  [?225] -> [?22]
  [?226] -> [?21]
  [?227] -> [?20]
  [?228] -> [?18]
  [?229] -> [?17]
  [?230] -> [?134,?197]
  [?231] -> [?135,?198]
  [?232] -> [?136,?246]
  [?233] -> [?137,?247]
  [?235] -> [?138,?197]
  [?236] -> [?139,?198]
  [?246] -> [?232]
  [?247] -> [?233]

reverse :?281: (xs :?282: List) -> List = (\xs :?283: List. reverse' -?285- xs -?284- (rev -?286- xs))
  [] -> [?259,!R]
  [?253,?261] -> [?283,?286]
  [?254] -> [?262]
  [?260] -> [?283,?285]
  [?261] -> [?252,?284]
  [?261,?286] -> [?253]
  [?262] -> [?254]
  [?282] -> [?283]
  [?283] -> [?282]
  [?284] -> [?261]
  [?285] -> [?260]

reverse' :?259: (xs :?260: List) -> (rxs :?261: Rev -?262- xs) -> List 
  reverse' -?264- Nil -?263- RNil = Nil
  pat (x :?265: Bool) (xs :?266: List) (rxs :?267: Rev -?268- xs).
    reverse' -?270- [app -?272- xs -?271- (one -?273- x)] -?269- (RSnoc -?276- xs -?275- x -?274- rxs) = Cons -?278- x -?277- (reverse' -?280- xs -?279- rxs)
  [] -> [?78,?79,?183,?184,?185,?259,?260,?261,?263,?264,?265,?266,?267,?269,?270,?274,?275,?276,?277,?278,?279,?280,!R]
  [?83] -> [?83]
  [?84] -> [?84]
  [?181] -> [?262]
  [?186] -> [?268]
  [?187] -> [?262]
  [?188] -> [?271]
  [?189] -> [?272]
  [?262] -> [?181,?187,?268]
  [?268] -> [?186,?262]
  [?271] -> [?188]
  [?272] -> [?189]

subst :?16: (a :?17: Type) -> (P :?18: (_ :?19: a) -> Type) -> (x :?20: a) -> (y :?21: a) -> (eq :?22: Id -?25- a -?24- x -?23- y) -> (_ :?26: P -?27- x) -> P -?28- y 
  pat (a :?29: Type) (P :?30: (_ :?31: a) -> Type) (x :?32: a).
    subst -?37- a -?36- P -?35- x -?34- [x] -?33- (Refl -?39- [a] -?38- [x]) = (\y :?40: P -?41- x. y)
  [] -> [?26,?40,!R]
  [?5] -> [?22]
  [?6] -> [?22,?39]
  [?7] -> [?22,?38]
  [?8] -> [?23]
  [?9] -> [?24]
  [?10] -> [?25]
  [?17] -> [?37]
  [?18] -> [?36]
  [?19] -> [?31]
  [?20] -> [?35]
  [?21] -> [?34]
  [?22] -> [?33]
  [?23] -> [?8]
  [?24] -> [?9]
  [?25] -> [?10]
  [?27] -> [?41]
  [?28] -> [?41]
  [?29] -> [?17]
  [?30] -> [?18]
  [?31] -> [?19]
  [?32] -> [?20]
  [?33] -> [?22]
  [?34] -> [?21]
  [?35] -> [?20]
  [?36] -> [?18]
  [?37] -> [?17]
  [?38] -> [?7,?22]
  [?39] -> [?6,?22]
  [?41] -> [?27,?28]


### Constraints ###

[] -> [?5,?13,?15,?16,?26,?40,?42,?46,?49,?56,?63,?78,?79,?81,?82,?83,?84,?85,?86,?87,?88,?89,?90,?91,?92,?93,?94,?95,?96,?97,?98,?99,?100,?101,?103,?109,?114,?115,?116,?123,?128,?146,?157,?158,?159,?183,?184,?185,?191,?195,?202,?219,?222,?223,?237,?238,?259,?260,?261,?263,?264,?265,?266,?267,?269,?270,?274,?275,?276,?277,?278,?279,?280,?281,!R]
[?5] -> [?22]
[?6] -> [?22,?39,?59,?70,?72,?77,?111,?148]
[?7] -> [?22,?38,?60,?69,?71,?78,?85,?110,?147]
[?7,?61] -> [?62,?73]
[?7,?73] -> [?61]
[?7,?86] -> [?142,?150]
[?7,?87] -> [?143,?149]
[?7,?149] -> [?87]
[?7,?150] -> [?86]
[?8] -> [?23,?50,?53,?104,?131]
[?9] -> [?24,?51,?54,?105,?132]
[?10] -> [?25,?52,?55,?106,?133]
[?12] -> [?14]
[?14] -> [?12]
[?17] -> [?37,?77,?210,?229]
[?18] -> [?36,?178,?209,?228]
[?19] -> [?31,?179]
[?20] -> [?35,?85,?199,?208,?227]
[?20,?81,?86,?87] -> [?217,?234]
[?20,?86] -> [?85,?214,?231,?233]
[?20,?86,?87] -> [?80,?232]
[?20,?86,?87,?234] -> [?81]
[?20,?86,?232] -> [?87]
[?20,?86,?233] -> [?86]
[?20,?87] -> [?218,?230]
[?20,?230] -> [?87]
[?20,?231] -> [?86]
[?21] -> [?34,?85,?207,?226]
[?21,?86] -> [?199,?212,?214,?236]
[?21,?87] -> [?78,?79,?211,?217,?218,?235]
[?21,?211] -> [?87]
[?21,?212] -> [?86]
[?21,?235] -> [?87]
[?21,?236] -> [?86]
[?22] -> [?33,?102,?127,?206,?225]
[?22,?81,?129] -> [?217,?242]
[?22,?103] -> [?199,?213]
[?22,?128] -> [?214,?241]
[?22,?129] -> [?80,?240]
[?22,?129,?242] -> [?81]
[?22,?130] -> [?218,?239]
[?22,?213] -> [?103]
[?22,?239] -> [?130]
[?22,?240] -> [?129]
[?22,?241] -> [?128]
[?23] -> [?8,?104,?131]
[?24] -> [?9,?105,?132]
[?25] -> [?10,?106,?133]
[?26] -> [?191,?200,?205,?218,?224,?243]
[?26,?81,?87,?192] -> [?217,?248]
[?26,?83] -> [?83]
[?26,?84] -> [?84]
[?26,?86,?192] -> [?214,?247]
[?26,?87,?192] -> [?80,?246]
[?26,?87,?192,?248] -> [?81]
[?26,?183,?193] -> [?214,?251]
[?26,?184,?193] -> [?217,?250]
[?26,?185,?193] -> [?215,?249]
[?26,?186,?193] -> [?216]
[?26,?187] -> [?194]
[?26,?188] -> [?246]
[?26,?189] -> [?247]
[?26,?192] -> [?85,?245]
[?26,?192,?246] -> [?87]
[?26,?192,?247] -> [?86]
[?26,?193] -> [?182,?244]
[?26,?193,?216] -> [?186]
[?26,?193,?249] -> [?185]
[?26,?193,?250] -> [?184]
[?26,?193,?251] -> [?183]
[?26,?194] -> [?187]
[?26,?244] -> [?193]
[?26,?245] -> [?192]
[?26,?246] -> [?188]
[?26,?247] -> [?189]
[?27] -> [?41,?196,?201]
[?28] -> [?41,?196]
[?29] -> [?17]
[?30] -> [?18]
[?31] -> [?19]
[?32] -> [?20]
[?33] -> [?22]
[?34] -> [?21]
[?35] -> [?20]
[?36] -> [?18]
[?37] -> [?17]
[?38] -> [?7,?22]
[?39] -> [?6,?22]
[?41] -> [?27,?28]
[?43] -> [?68,?77,?122,?165]
[?44] -> [?67,?77,?121,?164]
[?45] -> [?66,?79,?112,?120,?151,?163,?166]
[?46] -> [?61]
[?47] -> [?65,?85,?113,?119,?162]
[?47,?86] -> [?85,?152,?168,?170]
[?47,?86,?87] -> [?153,?169]
[?47,?86,?169] -> [?87]
[?47,?86,?170] -> [?86]
[?47,?87] -> [?154,?167]
[?47,?167] -> [?87]
[?47,?168] -> [?86]
[?48] -> [?64,?85,?118,?161]
[?48,?86] -> [?113,?125,?152,?172]
[?48,?86,?87] -> [?153,?174]
[?48,?87] -> [?78,?85,?124,?154,?171,?173]
[?48,?87,?173] -> [?87]
[?48,?87,?174] -> [?86]
[?48,?124] -> [?87]
[?48,?125] -> [?86]
[?48,?171] -> [?87]
[?48,?172] -> [?86]
[?49] -> [?102,?113,?117,?126,?127,?152,?160,?177]
[?49,?129] -> [?153,?176]
[?49,?130] -> [?154,?175]
[?49,?175] -> [?130]
[?49,?176] -> [?129]
[?50] -> [?8,?104,?131]
[?51] -> [?9,?105,?132]
[?52] -> [?10,?106,?133]
[?53] -> [?8,?104,?131]
[?54] -> [?9,?105,?132]
[?55] -> [?10,?106,?133]
[?56] -> [?73,?98]
[?57] -> [?73,?98]
[?58] -> [?43]
[?59] -> [?44]
[?60] -> [?45]
[?61] -> [?46]
[?62] -> [?47]
[?64] -> [?48]
[?65] -> [?47]
[?66] -> [?45]
[?67] -> [?44]
[?68] -> [?43]
[?69] -> [?7]
[?70] -> [?6]
[?71] -> [?7]
[?72] -> [?6]
[?73] -> [?56,?57]
[?83] -> [?83]
[?84] -> [?84]
[?98] -> [?56,?57]
[?99] -> [?166]
[?100] -> [?124,?167,?169,?171]
[?101] -> [?125,?168,?170,?172]
[?104] -> [?8,?23,?50,?53]
[?105] -> [?9,?24,?51,?54]
[?106] -> [?10,?25,?52,?55]
[?107] -> [?124,?211]
[?108] -> [?125,?212]
[?110] -> [?7]
[?111] -> [?6]
[?117] -> [?49]
[?118] -> [?48]
[?119] -> [?47]
[?120] -> [?45]
[?121] -> [?44]
[?122] -> [?43]
[?124] -> [?100,?107]
[?125] -> [?101,?108]
[?129] -> [?145,?156]
[?130] -> [?144,?155]
[?131] -> [?8,?23,?50,?53]
[?132] -> [?9,?24,?51,?54]
[?133] -> [?10,?25,?52,?55]
[?134] -> [?149,?167,?230]
[?135] -> [?150,?168,?231]
[?136] -> [?169,?232]
[?137] -> [?170,?233]
[?138] -> [?171,?235]
[?139] -> [?172,?236]
[?140] -> [?149,?173]
[?141] -> [?150,?174]
[?142] -> [?129]
[?143] -> [?130]
[?144] -> [?130]
[?145] -> [?129]
[?147] -> [?7]
[?148] -> [?6]
[?149] -> [?134,?140]
[?150] -> [?135,?141]
[?153] -> [?129]
[?154] -> [?130]
[?155] -> [?130]
[?156] -> [?129]
[?160] -> [?49]
[?161] -> [?48]
[?162] -> [?47]
[?163] -> [?45]
[?164] -> [?44]
[?165] -> [?43]
[?166] -> [?99]
[?167] -> [?100,?134]
[?168] -> [?101,?135]
[?169] -> [?100,?136]
[?170] -> [?101,?137]
[?171] -> [?100,?138]
[?172] -> [?101,?139]
[?173] -> [?140]
[?174] -> [?141]
[?179] -> [?19]
[?181] -> [?194,?262]
[?186] -> [?268]
[?187] -> [?262]
[?188] -> [?271]
[?189] -> [?272]
[?192] -> [?78,?204,?221,?258]
[?193] -> [?180,?203,?220,?257]
[?194] -> [?181,?201,?216]
[?195] -> [?255,?256]
[?196] -> [?27,?28,?254]
[?197] -> [?211,?230,?235]
[?198] -> [?212,?231,?236]
[?199] -> [?192]
[?200] -> [?193]
[?201] -> [?27,?194]
[?203] -> [?193]
[?204] -> [?192]
[?205] -> [?26]
[?206] -> [?22]
[?207] -> [?21]
[?208] -> [?20]
[?209] -> [?18]
[?210] -> [?17]
[?211] -> [?107,?197]
[?212] -> [?108,?198]
[?214] -> [?192]
[?215] -> [?193]
[?216] -> [?194]
[?220] -> [?193]
[?221] -> [?192]
[?224] -> [?26]
[?225] -> [?22]
[?226] -> [?21]
[?227] -> [?20]
[?228] -> [?18]
[?229] -> [?17]
[?230] -> [?134,?197]
[?231] -> [?135,?198]
[?232] -> [?136,?246]
[?233] -> [?137,?247]
[?235] -> [?138,?197]
[?236] -> [?139,?198]
[?246] -> [?232]
[?247] -> [?233]
[?253] -> [?255]
[?253,?261] -> [?283,?286]
[?254] -> [?196,?262]
[?255] -> [?253]
[?256] -> [?195]
[?257] -> [?193]
[?258] -> [?192]
[?260] -> [?283,?285]
[?261] -> [?252,?284]
[?261,?286] -> [?253]
[?262] -> [?181,?187,?254,?268]
[?268] -> [?186,?262]
[?271] -> [?188]
[?272] -> [?189]
[?282] -> [?75,?76,?78,?79,?283,?287,?288,?289,?290,?291,?292,?293,?294,?295]
[?283] -> [?282]
[?284] -> [?261]
[?285] -> [?260]
[?287] -> [?282]

### Solution ###

[?5,?13,?15,?16,?22,?26,?33,?40,?42,?46,?49,?56,?57,?61,?63,?73,?75,?76,?78,?79,?80,?81,?82,?83,?84,?85,?86,?87,?88,?89,?90,?91,?92,?93,?94,?95,?96,?97,?98,?99,?100,?101,?102,?103,?107,?108,?109,?113,?114,?115,?116,?117,?123,?124,?125,?126,?127,?128,?134,?135,?136,?137,?138,?139,?140,?141,?146,?149,?150,?152,?157,?158,?159,?160,?166,?167,?168,?169,?170,?171,?172,?173,?174,?177,?180,?182,?183,?184,?185,?188,?189,?191,?192,?193,?195,?197,?198,?199,?200,?202,?203,?204,?205,?206,?211,?212,?213,?214,?215,?217,?218,?219,?220,?221,?222,?223,?224,?225,?230,?231,?232,?233,?235,?236,?237,?238,?241,?243,?244,?245,?246,?247,?248,?249,?250,?251,?252,?253,?255,?256,?257,?258,?259,?260,?261,?263,?264,?265,?266,?267,?269,?270,?271,?272,?274,?275,?276,?277,?278,?279,?280,?281,?282,?283,?284,?285,?286,?287,?288,?289,?290,?291,?292,?293,?294,?295,!R]

### Annotated ###

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :R: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x

id :E: (a :E: Type) -> (_ :R: a) -> a = (\a :E: Type. (\x :R: a. x))

subst :R: (a :E: Type) -> (P :E: (_ :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :R: Id -E- a -E- x -E- y) -> (_ :R: P -E- x) -> P -E- y 
  pat (a :E: Type) (P :E: (_ :E: a) -> Type) (x :E: a).
    subst -E- a -E- P -E- x -E- [x] -R- (Refl -E- [a] -E- [x]) = (\y :R: P -E- x. y)

cong :R: (a :E: Type) -> (b :E: Type) -> (f :E: (_ :R: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :R: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -R- x) -E- (f -R- y) 
  pat (a :E: Type) (b :E: Type) (f :E: (_ :R: a) -> b) (x :E: a).
    cong -E- a -E- b -E- f -E- x -E- [x] -R- (Refl -E- [a] -E- [x]) = Refl -E- b -E- (f -R- x)

postulate Bool :E: Type

postulate T :R: Bool

postulate F :R: Bool

postulate List :E: Type

postulate Nil :R: List

postulate Cons :R: (x :R: Bool) -> (xs :R: List) -> List

one :R: (x :R: Bool) -> List = (\x :R: Bool. Cons -R- x -R- Nil)

app :R: (_ :R: List) -> (_ :R: List) -> List 
  pat (ys :R: List).
    app -R- Nil -R- ys = ys
  pat (x :R: Bool) (xs :R: List) (ys :R: List).
    app -R- (Cons -R- x -R- xs) -R- ys = Cons -R- x -R- (app -R- xs -R- ys)

appRightNeutral :R: (ys :R: List) -> Id -E- List -E- ys -E- (app -R- ys -R- Nil) 
  appRightNeutral -R- Nil = Refl -E- List -E- Nil
  pat (x :E: Bool) (xs :R: List).
    appRightNeutral -R- (Cons -R- x -R- xs) = cong -E- List -E- List -E- (Cons -R- x) -E- xs -E- (app -R- xs -R- Nil) -R- (appRightNeutral -R- xs)

appAssoc :R: (xs :R: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -R- (app -R- xs -R- ys) -R- zs) -E- (app -R- xs -R- (app -R- ys -R- zs)) 
  pat (ys :E: List) (zs :E: List).
    appAssoc -R- Nil -E- ys -E- zs = Refl -E- List -E- (app -R- ys -R- zs)
  pat (x :E: Bool) (xs :R: List) (ys :E: List) (zs :E: List).
    appAssoc -R- (Cons -R- x -R- xs) -E- ys -E- zs = cong -E- List -E- List -E- (Cons -R- x) -E- (app -R- (app -R- xs -R- ys) -R- zs) -E- (app -R- xs -R- (app -R- ys -R- zs)) -R- (appAssoc -R- xs -E- ys -E- zs)

postulate Rev :E: (_ :E: List) -> Type

postulate RNil :R: Rev -E- Nil

postulate RSnoc :R: (xs :R: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -R- xs -R- (one -E- x))

rev' :R: (xs :R: List) -> (_ :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -R- xs -R- ys) 
  pat (xs :R: List) (rxs :R: Rev -E- xs).
    rev' -R- xs -R- rxs -R- Nil = subst -E- List -E- Rev -E- xs -E- (app -R- xs -R- Nil) -R- (appRightNeutral -R- xs) -R- rxs
  pat (xs :R: List) (rxs :R: Rev -E- xs) (y :R: Bool) (ys :R: List).
    rev' -R- xs -R- rxs -R- (Cons -R- y -R- ys) = subst -E- List -E- Rev -E- (app -R- (app -R- xs -R- (one -E- y)) -R- ys) -E- (app -R- xs -R- (Cons -R- y -R- ys)) -R- (appAssoc -R- xs -E- (one -E- y) -E- ys) -R- (rev' -R- (app -R- xs -R- (one -R- y)) -R- (RSnoc -R- xs -R- y -R- rxs) -R- ys)

rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -R- Nil -R- RNil -R- xs)

reverse' :R: (xs :R: List) -> (rxs :R: Rev -E- xs) -> List 
  reverse' -R- Nil -R- RNil = Nil
  pat (x :R: Bool) (xs :R: List) (rxs :R: Rev -E- xs).
    reverse' -R- [app -R- xs -R- (one -E- x)] -R- (RSnoc -R- xs -R- x -R- rxs) = Cons -R- x -R- (reverse' -R- xs -R- rxs)

reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -R- xs -R- (rev -R- xs))

main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))

### Specialised ###

postulate Id :!E: (a :!E: Type) -> (x :!E: a) -> (y :!E: a) -> Type

postulate Refl :!R: (a :!E: Type) -> (x :!E: a) -> Id -!E- a -!E- x -!E- x

id :!E: (a :!E: Type) -> (_ :!R: a) -> a = (\a :!E: Type. (\x :!R: a. x))

subst :!R: (a :!E: Type) -> (P :!E: (_ :!E: a) -> Type) -> (x :!E: a) -> (y :!E: a) -> (eq :!R: Id -!E- a -!E- x -!E- y) -> (_ :!R: P -!E- x) -> P -!E- y 
  pat (a :!E: Type) (P :!E: (_ :!E: a) -> Type) (x :!E: a).
    subst -!E- a -!E- P -!E- x -!E- [x] -!R- (Refl -!E- [a] -!E- [x]) = (\y :!R: P -!E- x. y)

cong :!R: (a :!E: Type) -> (b :!E: Type) -> (f :!E: (_ :!R: a) -> b) -> (x :!E: a) -> (y :!E: a) -> (eq :!R: Id -!E- a -!E- x -!E- y) -> Id -!E- b -!E- (f -!R- x) -!E- (f -!R- y) 
  pat (a :!E: Type) (b :!E: Type) (f :!E: (_ :!R: a) -> b) (x :!E: a).
    cong -!E- a -!E- b -!E- f -!E- x -!E- [x] -!R- (Refl -!E- [a] -!E- [x]) = Refl -!E- b -!E- (f -!R- x)

postulate Bool :!E: Type

postulate T :!R: Bool

postulate F :!R: Bool

postulate List :!E: Type

postulate Nil :!R: List

postulate Cons :!R: (x :!R: Bool) -> (xs :!R: List) -> List

one :!R: (x :!R: Bool) -> List = (\x :!R: Bool. Cons -!R- x -!R- Nil)

app :!R: (_ :!R: List) -> (_ :!R: List) -> List 
  pat (ys :!R: List).
    app -!R- Nil -!R- ys = ys
  pat (x :!R: Bool) (xs :!R: List) (ys :!R: List).
    app -!R- (Cons -!R- x -!R- xs) -!R- ys = Cons -!R- x -!R- (app -!R- xs -!R- ys)

appRightNeutral :!R: (ys :!R: List) -> Id -!E- List -!E- ys -!E- (app -!R- ys -!R- Nil) 
  appRightNeutral -!R- Nil = Refl -!E- List -!E- Nil
  pat (x :!E: Bool) (xs :!R: List).
    appRightNeutral -!R- (Cons -!R- x -!R- xs) = cong -!E- List -!E- List -!E- (Cons -!R- x) -!E- xs -!E- (app -!R- xs -!R- Nil) -!R- (appRightNeutral -!R- xs)

appAssoc :!R: (xs :!R: List) -> (ys :!E: List) -> (zs :!E: List) -> Id -!E- List -!E- (app -!R- (app -!R- xs -!R- ys) -!R- zs) -!E- (app -!R- xs -!R- (app -!R- ys -!R- zs)) 
  pat (ys :!E: List) (zs :!E: List).
    appAssoc -!R- Nil -!E- ys -!E- zs = Refl -!E- List -!E- (app -!R- ys -!R- zs)
  pat (x :!E: Bool) (xs :!R: List) (ys :!E: List) (zs :!E: List).
    appAssoc -!R- (Cons -!R- x -!R- xs) -!E- ys -!E- zs = cong -!E- List -!E- List -!E- (Cons -!R- x) -!E- (app -!R- (app -!R- xs -!R- ys) -!R- zs) -!E- (app -!R- xs -!R- (app -!R- ys -!R- zs)) -!R- (appAssoc -!R- xs -!E- ys -!E- zs)

postulate Rev :!E: (_ :!E: List) -> Type

postulate RNil :!R: Rev -!E- Nil

postulate RSnoc :!R: (xs :!R: List) -> (x :!R: Bool) -> (rxs :!R: Rev -!E- xs) -> Rev -!E- (app -!R- xs -!R- (one -!E- x))

rev' :!R: (xs :!R: List) -> (_ :!R: Rev -!E- xs) -> (ys :!R: List) -> Rev -!E- (app -!R- xs -!R- ys) 
  pat (xs :!R: List) (rxs :!R: Rev -!E- xs).
    rev' -!R- xs -!R- rxs -!R- Nil = subst -!E- List -!E- Rev -!E- xs -!E- (app -!R- xs -!R- Nil) -!R- (appRightNeutral -!R- xs) -!R- rxs
  pat (xs :!R: List) (rxs :!R: Rev -!E- xs) (y :!R: Bool) (ys :!R: List).
    rev' -!R- xs -!R- rxs -!R- (Cons -!R- y -!R- ys) = subst -!E- List -!E- Rev -!E- (app -!R- (app -!R- xs -!R- (one -!E- y)) -!R- ys) -!E- (app -!R- xs -!R- (Cons -!R- y -!R- ys)) -!R- (appAssoc -!R- xs -!E- (one -!E- y) -!E- ys) -!R- (rev' -!R- (app -!R- xs -!R- (one -!R- y)) -!R- (RSnoc -!R- xs -!R- y -!R- rxs) -!R- ys)

rev :!R: (xs :!R: List) -> Rev -!E- xs = (\xs :!R: List. rev' -!R- Nil -!R- RNil -!R- xs)

reverse' :!R: (xs :!R: List) -> (rxs :!R: Rev -!E- xs) -> List 
  reverse' -!R- Nil -!R- RNil = Nil
  pat (x :!R: Bool) (xs :!R: List) (rxs :!R: Rev -!E- xs).
    reverse' -!R- [app -!R- xs -!R- (one -!E- x)] -!R- (RSnoc -!R- xs -!R- x -!R- rxs) = Cons -!R- x -!R- (reverse' -!R- xs -!R- rxs)

reverse :!R: (xs :!R: List) -> List = (\xs :!R: List. reverse' -!R- xs -!R- (rev -!R- xs))

main :!R: List = reverse -!R- (Cons -!R- T -!R- (Cons -!R- F -!R- (Cons -!R- T -!R- (Cons -!R- F -!R- Nil))))

### Final annotation ###

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :R: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x

id :E: (a :E: Type) -> (_ :R: a) -> a = (\a :E: Type. (\x :R: a. x))

subst :R: (a :E: Type) -> (P :E: (_ :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :R: Id -E- a -E- x -E- y) -> (_ :R: P -E- x) -> P -E- y 
  pat (a :E: Type) (P :E: (_ :E: a) -> Type) (x :E: a).
    subst -E- a -E- P -E- x -E- [x] -R- (Refl -E- [a] -E- [x]) = (\y :R: P -E- x. y)

cong :R: (a :E: Type) -> (b :E: Type) -> (f :E: (_ :R: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :R: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -R- x) -E- (f -R- y) 
  pat (a :E: Type) (b :E: Type) (f :E: (_ :R: a) -> b) (x :E: a).
    cong -E- a -E- b -E- f -E- x -E- [x] -R- (Refl -E- [a] -E- [x]) = Refl -E- b -E- (f -R- x)

postulate Bool :E: Type

postulate T :R: Bool

postulate F :R: Bool

postulate List :E: Type

postulate Nil :R: List

postulate Cons :R: (x :R: Bool) -> (xs :R: List) -> List

one :R: (x :R: Bool) -> List = (\x :R: Bool. Cons -R- x -R- Nil)

app :R: (_ :R: List) -> (_ :R: List) -> List 
  pat (ys :R: List).
    app -R- Nil -R- ys = ys
  pat (x :R: Bool) (xs :R: List) (ys :R: List).
    app -R- (Cons -R- x -R- xs) -R- ys = Cons -R- x -R- (app -R- xs -R- ys)

appRightNeutral :R: (ys :R: List) -> Id -E- List -E- ys -E- (app -R- ys -R- Nil) 
  appRightNeutral -R- Nil = Refl -E- List -E- Nil
  pat (x :E: Bool) (xs :R: List).
    appRightNeutral -R- (Cons -R- x -R- xs) = cong -E- List -E- List -E- (Cons -R- x) -E- xs -E- (app -R- xs -R- Nil) -R- (appRightNeutral -R- xs)

appAssoc :R: (xs :R: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -R- (app -R- xs -R- ys) -R- zs) -E- (app -R- xs -R- (app -R- ys -R- zs)) 
  pat (ys :E: List) (zs :E: List).
    appAssoc -R- Nil -E- ys -E- zs = Refl -E- List -E- (app -R- ys -R- zs)
  pat (x :E: Bool) (xs :R: List) (ys :E: List) (zs :E: List).
    appAssoc -R- (Cons -R- x -R- xs) -E- ys -E- zs = cong -E- List -E- List -E- (Cons -R- x) -E- (app -R- (app -R- xs -R- ys) -R- zs) -E- (app -R- xs -R- (app -R- ys -R- zs)) -R- (appAssoc -R- xs -E- ys -E- zs)

postulate Rev :E: (_ :E: List) -> Type

postulate RNil :R: Rev -E- Nil

postulate RSnoc :R: (xs :R: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -R- xs -R- (one -E- x))

rev' :R: (xs :R: List) -> (_ :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -R- xs -R- ys) 
  pat (xs :R: List) (rxs :R: Rev -E- xs).
    rev' -R- xs -R- rxs -R- Nil = subst -E- List -E- Rev -E- xs -E- (app -R- xs -R- Nil) -R- (appRightNeutral -R- xs) -R- rxs
  pat (xs :R: List) (rxs :R: Rev -E- xs) (y :R: Bool) (ys :R: List).
    rev' -R- xs -R- rxs -R- (Cons -R- y -R- ys) = subst -E- List -E- Rev -E- (app -R- (app -R- xs -R- (one -E- y)) -R- ys) -E- (app -R- xs -R- (Cons -R- y -R- ys)) -R- (appAssoc -R- xs -E- (one -E- y) -E- ys) -R- (rev' -R- (app -R- xs -R- (one -R- y)) -R- (RSnoc -R- xs -R- y -R- rxs) -R- ys)

rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -R- Nil -R- RNil -R- xs)

reverse' :R: (xs :R: List) -> (rxs :R: Rev -E- xs) -> List 
  reverse' -R- Nil -R- RNil = Nil
  pat (x :R: Bool) (xs :R: List) (rxs :R: Rev -E- xs).
    reverse' -R- [app -R- xs -R- (one -E- x)] -R- (RSnoc -R- xs -R- x -R- rxs) = Cons -R- x -R- (reverse' -R- xs -R- rxs)

reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -R- xs -R- (rev -R- xs))

main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))

### Verification ###

Verification successful.

### Pruned ###

postulate Refl

subst 
  subst Refl = (\y. y)

cong 
  cong Refl = Refl

postulate T

postulate F

postulate Nil

postulate Cons

one = (\x. Cons x Nil)

app 
  pat ys.
    app Nil ys = ys
  pat x xs ys.
    app (Cons x xs) ys = Cons x (app xs ys)

appRightNeutral 
  appRightNeutral Nil = Refl
  pat xs.
    appRightNeutral (Cons _ xs) = cong (appRightNeutral xs)

appAssoc 
  appAssoc Nil = Refl
  pat xs.
    appAssoc (Cons _ xs) = cong (appAssoc xs)

postulate RNil

postulate RSnoc

rev' 
  pat xs rxs.
    rev' xs rxs Nil = subst (appRightNeutral xs) rxs
  pat xs rxs y ys.
    rev' xs rxs (Cons y ys) = subst (appAssoc xs) (rev' (app xs (one y)) (RSnoc xs y rxs) ys)

rev = (\xs. rev' Nil RNil xs)

reverse' 
  reverse' Nil RNil = Nil
  pat x xs rxs.
    reverse' _ (RSnoc xs x rxs) = Cons x (reverse' xs rxs)

reverse = (\xs. reverse' xs (rev xs))

main = reverse (Cons T (Cons F (Cons T (Cons F Nil))))

### Normal forms ###

unerased:
  Cons F (Cons T (Cons F (Cons T Nil)))
erased:
  Cons F (Cons T (Cons F (Cons T Nil)))
