-- vim: ft=agda

### Desugared ###

postulate Id : (a : Type) -> (x : a) -> (y : a) -> Type

postulate Refl : (a : Type) -> (x : a) -> Id a x x

id : (a : Type) -> (_ : a) -> a = (\a : Type. (\x : a. x))

subst : (a : Type) -> (P : (_ : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (_ : P x) -> P y = \(a : Type) (P : (_ : a) -> Type) (x : a) (y : a) (eq : Id a x y).
  case eq of
    Refl (a' : Type) (x' : a)
      | a' = a
      | x' = x
      | y = x
      => (\w : P x'. w)

cong : (a : Type) -> (b : Type) -> (f : (_ : a) -> b) -> (x : a) -> (y : a) -> (eq : Id a x y) -> Id b (f x) (f y) = \(a : Type) (b : Type) (f : (_ : a) -> b) (x : a) (y : a) (eq : Id a x y).
  case eq of
    Refl (a' : Type) (x' : a)
      | a' = a
      | x' = x
      | y = x
      => Refl b (f y)

postulate Bool : Type

postulate T : Bool

postulate F : Bool

postulate List : Type

postulate Nil : List

postulate Cons : (x :R: Bool) -> (xs :R: List) -> List

one : (x : Bool) -> List = (\x : Bool. Cons x Nil)

app : (xs : List) -> (ys : List) -> List = \(xs : List) (ys : List).
  case xs of
    Nil
      => ys
    Cons (x : Bool) (xs' : List)
      => Cons x (app xs' ys)

appRightNeutral : (ys : List) -> Id List ys (app ys Nil) = \(ys : List).
  case ys of
    Nil
      => Refl List Nil
    Cons (x : Bool) (xs : List)
      => cong List List (Cons x) xs (app xs Nil) (appRightNeutral xs)

appAssoc : (xs : List) -> (ys : List) -> (zs : List) -> Id List (app (app xs ys) zs) (app xs (app ys zs)) = \(xs : List) (ys : List) (zs : List).
  case xs of
    Nil
      => Refl List (app ys zs)
    Cons (x : Bool) (xs' : List)
      => cong List List (Cons x) (app (app xs' ys) zs) (app xs' (app ys zs)) (appAssoc xs' ys zs)

postulate Rev : (_ : List) -> Type

postulate RNil : Rev Nil

postulate RSnoc : (xs : List) -> (x : Bool) -> (rxs : Rev xs) -> Rev (app xs (one x))

rev' : (xs : List) -> (rxs : Rev xs) -> (ys : List) -> Rev (app xs ys) = \(xs : List) (rxs : Rev xs) (ys : List).
  case ys of
    Nil
      => subst List Rev xs (app xs Nil) (appRightNeutral xs) rxs
    Cons (y : Bool) (ys' : List)
      => subst List Rev (app (app xs (one y)) ys') (app xs (Cons y ys')) (appAssoc xs (one y) ys') (rev' (app xs (one y)) (RSnoc xs y rxs) ys')

rev : (xs : List) -> Rev xs = (\xs : List. rev' Nil RNil xs)

reverse' : (xs : List) -> (rxs : Rev xs) -> List = \(xs : List) (rxs : Rev xs).
  case rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' : List) (x : Bool) (rxs' : Rev xs')
      | xs = app xs' (one x)
      => Cons x (reverse' xs' rxs')

reverse : (xs : List) -> List = (\xs : List. reverse' xs (rev xs))

main :R: List = reverse (Cons T (Cons F (Cons T (Cons F Nil))))

### Metaified ###

postulate Id :1: (a :2: Type) -> (x :3: a) -> (y :4: a) -> Type

postulate Refl :5: (a :6: Type) -> (x :7: a) -> Id -10- a -9- x -8- x

id :11: (a :12: Type) -> (_ :13: a) -> a = (\a :14: Type. (\x :15: a. x))

subst :16: (a :17: Type) -> (P :18: (_ :19: a) -> Type) -> (x :20: a) -> (y :21: a) -> (eq :22: Id -25- a -24- x -23- y) -> (_ :26: P -27- x) -> P -28- y = \(a :29: Type) (P :30: (_ :31: a) -> Type) (x :32: a) (y :33: a) (eq :34: Id -37- a -36- x -35- y).
  case -38- eq of
    Refl (a' :39: Type) (x' :40: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :41: P -42- x'. w)

cong :43: (a :44: Type) -> (b :45: Type) -> (f :46: (_ :47: a) -> b) -> (x :48: a) -> (y :49: a) -> (eq :50: Id -53- a -52- x -51- y) -> Id -56- b -55- (f -57- x) -54- (f -58- y) = \(a :59: Type) (b :60: Type) (f :61: (_ :62: a) -> b) (x :63: a) (y :64: a) (eq :65: Id -68- a -67- x -66- y).
  case -69- eq of
    Refl (a' :70: Type) (x' :71: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -73- b -72- (f -74- y)

postulate Bool :75: Type

postulate T :76: Bool

postulate F :77: Bool

postulate List :78: Type

postulate Nil :79: List

postulate Cons :80: (x :R: Bool) -> (xs :R: List) -> List

one :81: (x :82: Bool) -> List = (\x :83: Bool. Cons -85- x -84- Nil)

app :86: (xs :87: List) -> (ys :88: List) -> List = \(xs :89: List) (ys :90: List).
  case -91- xs of
    Nil
      => ys
    Cons (x :92: Bool) (xs' :93: List)
      => Cons -95- x -94- (app -97- xs' -96- ys)

appRightNeutral :98: (ys :99: List) -> Id -102- List -101- ys -100- (app -104- ys -103- Nil) = \(ys :105: List).
  case -106- ys of
    Nil
      => Refl -108- List -107- Nil
    Cons (x :109: Bool) (xs :110: List)
      => cong -116- List -115- List -114- (Cons -117- x) -113- xs -112- (app -119- xs -118- Nil) -111- (appRightNeutral -120- xs)

appAssoc :121: (xs :122: List) -> (ys :123: List) -> (zs :124: List) -> Id -127- List -126- (app -129- (app -131- xs -130- ys) -128- zs) -125- (app -133- xs -132- (app -135- ys -134- zs)) = \(xs :136: List) (ys :137: List) (zs :138: List).
  case -139- xs of
    Nil
      => Refl -141- List -140- (app -143- ys -142- zs)
    Cons (x :144: Bool) (xs' :145: List)
      => cong -151- List -150- List -149- (Cons -152- x) -148- (app -154- (app -156- xs' -155- ys) -153- zs) -147- (app -158- xs' -157- (app -160- ys -159- zs)) -146- (appAssoc -163- xs' -162- ys -161- zs)

postulate Rev :164: (_ :165: List) -> Type

postulate RNil :166: Rev -167- Nil

postulate RSnoc :168: (xs :169: List) -> (x :170: Bool) -> (rxs :171: Rev -172- xs) -> Rev -173- (app -175- xs -174- (one -176- x))

rev' :177: (xs :178: List) -> (rxs :179: Rev -180- xs) -> (ys :181: List) -> Rev -182- (app -184- xs -183- ys) = \(xs :185: List) (rxs :186: Rev -187- xs) (ys :188: List).
  case -189- ys of
    Nil
      => subst -195- List -194- Rev -193- xs -192- (app -197- xs -196- Nil) -191- (appRightNeutral -198- xs) -190- rxs
    Cons (y :199: Bool) (ys' :200: List)
      => subst -206- List -205- Rev -204- (app -208- (app -210- xs -209- (one -211- y)) -207- ys') -203- (app -213- xs -212- (Cons -215- y -214- ys')) -202- (appAssoc -218- xs -217- (one -219- y) -216- ys') -201- (rev' -222- (app -224- xs -223- (one -225- y)) -221- (RSnoc -228- xs -227- y -226- rxs) -220- ys')

rev :229: (xs :230: List) -> Rev -231- xs = (\xs :232: List. rev' -235- Nil -234- RNil -233- xs)

reverse' :236: (xs :237: List) -> (rxs :238: Rev -239- xs) -> List = \(xs :240: List) (rxs :241: Rev -242- xs).
  case -243- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :244: List) (x :245: Bool) (rxs' :246: Rev -247- xs')
      | xs = app -249- xs' -248- (one -250- x)
      => Cons -252- x -251- (reverse' -254- xs' -253- rxs')

reverse :255: (xs :256: List) -> List = (\xs :257: List. reverse' -259- xs -258- (rev -260- xs))

main :R: List = reverse -261- (Cons -263- T -262- (Cons -265- F -264- (Cons -267- T -266- (Cons -269- F -268- Nil))))

### Inferred definitions ###

postulate Bool :75: Type {- constraints apply -}
  [] -> [75,R]

postulate Cons :80: (x :R: Bool) -> (xs :R: List) -> List {- constraints apply -}
  [] -> [80,R]

postulate F :77: Bool {- constraints apply -}
  [] -> [77,R]

postulate Id :1: (a :2: Type) -> (x :3: a) -> (y :4: a) -> Type {- constraints apply -}
  [] -> [1,R]

postulate List :78: Type {- constraints apply -}
  [] -> [78,R]

postulate Nil :79: List {- constraints apply -}
  [] -> [79,R]

postulate RNil :166: Rev -167- Nil {- constraints apply -}
  [] -> [166,R]

postulate RSnoc :168: (xs :169: List) -> (x :170: Bool) -> (rxs :171: Rev -172- xs) -> Rev -173- (app -175- xs -174- (one -176- x)) {- constraints apply -}
  [] -> [168,R]

postulate Refl :5: (a :6: Type) -> (x :7: a) -> Id -10- a -9- x -8- x {- constraints apply -}
  [] -> [5,R]

postulate Rev :164: (_ :165: List) -> Type {- constraints apply -}
  [] -> [164,R]

postulate T :76: Bool {- constraints apply -}
  [] -> [76,R]

postulate Type :R: Type

app :86: (xs :87: List) -> (ys :88: List) -> List = \(xs :89: List) (ys :90: List).
  case -91- xs of
    Nil
      => ys
    Cons (x :92: Bool) (xs' :93: List)
      => Cons -95- x -94- (app -97- xs' -96- ys) {- constraints apply -}
  [] -> [80,86,87,88,89,90,91,92,93,94,95,96,97,R]

appAssoc :121: (xs :122: List) -> (ys :123: List) -> (zs :124: List) -> Id -127- List -126- (app -129- (app -131- xs -130- ys) -128- zs) -125- (app -133- xs -132- (app -135- ys -134- zs)) = \(xs :136: List) (ys :137: List) (zs :138: List).
  case -139- xs of
    Nil
      => Refl -141- List -140- (app -143- ys -142- zs)
    Cons (x :144: Bool) (xs' :145: List)
      => cong -151- List -150- List -149- (Cons -152- x) -148- (app -154- (app -156- xs' -155- ys) -153- zs) -147- (app -158- xs' -157- (app -160- ys -159- zs)) -146- (appAssoc -163- xs' -162- ys -161- zs) {- constraints apply -}
  [] -> [5,43,44,45,46,47,48,57,58,59,60,61,62,63,74,78,80,86,87,88,89,90,91,92,93,94,95,96,97,121,122,123,124,136,137,138,139,144,145,148,149,150,151,152,153,154,155,156,157,158,R]
  [6] -> [50,70,73,141]
  [7] -> [50,71,72,140,142,143]
  [8] -> [50,51,54,125]
  [9] -> [50,52,55,126]
  [10] -> [50,53,56,127]
  [49] -> [64,147,159,160]
  [50] -> [65,128,129,130,131,132,133,146,161,162,163]
  [50,51] -> [125]
  [50,52] -> [126]
  [50,53] -> [127]
  [50,125] -> [51]
  [50,126] -> [52]
  [50,127] -> [53]
  [50,134] -> [159]
  [50,135] -> [160]
  [50,159] -> [134]
  [50,160] -> [135]
  [51] -> [8,50]
  [52] -> [9,50]
  [53] -> [10,50]
  [54] -> [8,125]
  [55] -> [9,126]
  [56] -> [10,127]
  [64] -> [49]
  [65] -> [50]
  [69] -> [65]
  [70] -> [6,50,69]
  [71] -> [7,50,69]
  [72] -> [7]
  [73] -> [6]
  [125] -> [8,54]
  [126] -> [9,55]
  [127] -> [10,56]
  [128] -> [142]
  [129] -> [143]
  [134] -> [142,159]
  [135] -> [143,160]
  [140] -> [7]
  [141] -> [6]
  [142] -> [128,134]
  [143] -> [129,135]
  [146] -> [50]
  [147] -> [49]
  [159] -> [134]
  [160] -> [135]

appRightNeutral :98: (ys :99: List) -> Id -102- List -101- ys -100- (app -104- ys -103- Nil) = \(ys :105: List).
  case -106- ys of
    Nil
      => Refl -108- List -107- Nil
    Cons (x :109: Bool) (xs :110: List)
      => cong -116- List -115- List -114- (Cons -117- x) -113- xs -112- (app -119- xs -118- Nil) -111- (appRightNeutral -120- xs) {- constraints apply -}
  [] -> [5,43,44,45,46,47,48,57,58,59,60,61,62,63,74,78,80,94,95,98,99,105,106,109,110,113,114,115,116,117,R]
  [6] -> [50,70,73,108]
  [7] -> [50,71,72,79,107]
  [8] -> [50,51,54,100]
  [9] -> [50,52,55,101]
  [10] -> [50,53,56,102]
  [49] -> [64,86,87,88,89,90,91,92,93,96,97,112]
  [49,87] -> [119]
  [49,88] -> [79,118]
  [49,118] -> [88]
  [49,119] -> [87]
  [50] -> [65,111,120]
  [50,51] -> [100]
  [50,52] -> [101]
  [50,53] -> [102]
  [50,100] -> [51]
  [50,101] -> [52]
  [50,102] -> [53]
  [50,103] -> [118]
  [50,104] -> [119]
  [50,118] -> [103]
  [50,119] -> [104]
  [51] -> [8,50]
  [52] -> [9,50]
  [53] -> [10,50]
  [54] -> [8,100]
  [55] -> [9,101]
  [56] -> [10,102]
  [64] -> [49]
  [65] -> [50]
  [69] -> [65]
  [70] -> [6,50,69]
  [71] -> [7,50,69]
  [72] -> [7]
  [73] -> [6]
  [96] -> [118]
  [97] -> [119]
  [100] -> [8,54]
  [101] -> [9,55]
  [102] -> [10,56]
  [107] -> [7]
  [108] -> [6]
  [111] -> [50]
  [112] -> [49]
  [118] -> [96]
  [119] -> [97]

cong :43: (a :44: Type) -> (b :45: Type) -> (f :46: (_ :47: a) -> b) -> (x :48: a) -> (y :49: a) -> (eq :50: Id -53- a -52- x -51- y) -> Id -56- b -55- (f -57- x) -54- (f -58- y) = \(a :59: Type) (b :60: Type) (f :61: (_ :62: a) -> b) (x :63: a) (y :64: a) (eq :65: Id -68- a -67- x -66- y).
  case -69- eq of
    Refl (a' :70: Type) (x' :71: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -73- b -72- (f -74- y) {- constraints apply -}
  [] -> [5,43,44,45,46,48,59,60,61,63,R]
  [6] -> [50,70,73]
  [7] -> [50,71,72]
  [7,62] -> [74]
  [7,74] -> [62]
  [8] -> [50,51,54]
  [9] -> [50,52,55]
  [10] -> [50,53,56]
  [47] -> [62]
  [49] -> [64]
  [50] -> [65]
  [51] -> [8,50]
  [52] -> [9,50]
  [53] -> [10,50]
  [54] -> [8]
  [55] -> [9]
  [56] -> [10]
  [57] -> [74]
  [58] -> [74]
  [62] -> [47]
  [64] -> [49]
  [65] -> [50]
  [69] -> [65]
  [70] -> [6,50,69]
  [71] -> [7,50,69]
  [72] -> [7]
  [73] -> [6]
  [74] -> [57,58]

id :11: (a :12: Type) -> (_ :13: a) -> a = (\a :14: Type. (\x :15: a. x)) {- constraints apply -}
  [] -> [11,13,15,R]
  [12] -> [14]
  [14] -> [12]

main :R: List = reverse -261- (Cons -263- T -262- (Cons -265- F -264- (Cons -267- T -266- (Cons -269- F -268- Nil)))) {- constraints apply -}
  [] -> [16,17,18,20,26,29,30,32,41,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,164,166,168,169,170,171,174,175,177,178,179,181,183,184,185,186,188,189,190,193,194,195,196,197,199,200,201,204,205,206,207,208,209,210,211,212,213,214,215,220,221,222,223,224,225,226,227,228,229,230,232,233,234,235,236,238,241,243,244,245,246,248,249,251,252,253,255,256,257,258,260,261,262,263,264,265,266,267,268,269,R]
  [6] -> [22,39]
  [6,22] -> [50,70,73,108,141]
  [7] -> [22,40]
  [7,22] -> [50,71,72,107,140,142,143]
  [8] -> [22,23]
  [8,22] -> [50,51,54,100,125]
  [9] -> [22,24]
  [9,22] -> [50,52,55,101,126]
  [10] -> [22,25]
  [10,22] -> [50,53,56,102,127]
  [19] -> [31,165]
  [21] -> [33,192,203]
  [22] -> [5,34,43,44,45,46,47,48,57,58,59,60,61,62,63,74,98,99,103,104,105,106,109,110,113,114,115,116,117,118,119,121,122,123,124,128,129,130,131,132,133,136,137,138,139,144,145,148,149,150,151,152,153,154,155,156,157,158,191,202]
  [22,23] -> [100,125]
  [22,24] -> [101,126]
  [22,25] -> [102,127]
  [22,49] -> [64,112,118,119,147,159,160]
  [22,50] -> [65,111,120,128,129,130,131,132,133,146,161,162,163]
  [22,50,51] -> [100,125]
  [22,50,52] -> [101,126]
  [22,50,53] -> [102,127]
  [22,50,100] -> [51]
  [22,50,101] -> [52]
  [22,50,102] -> [53]
  [22,50,103] -> [118]
  [22,50,104] -> [119]
  [22,50,118] -> [103]
  [22,50,119] -> [104]
  [22,50,125] -> [51]
  [22,50,126] -> [52]
  [22,50,127] -> [53]
  [22,50,134] -> [159]
  [22,50,135] -> [160]
  [22,50,159] -> [134]
  [22,50,160] -> [135]
  [22,51] -> [8,50]
  [22,52] -> [9,50]
  [22,53] -> [10,50]
  [22,54] -> [8,100,125]
  [22,55] -> [9,101,126]
  [22,56] -> [10,102,127]
  [22,64] -> [49]
  [22,65] -> [50]
  [22,69] -> [65]
  [22,70] -> [6,50,69]
  [22,71] -> [7,50,69]
  [22,72] -> [7]
  [22,73] -> [6]
  [22,99] -> [198]
  [22,100] -> [8,23,54]
  [22,101] -> [9,24,55]
  [22,102] -> [10,25,56]
  [22,107] -> [7]
  [22,108] -> [6]
  [22,111] -> [50]
  [22,112] -> [49]
  [22,122] -> [218]
  [22,123] -> [217,219]
  [22,124] -> [216]
  [22,125] -> [8,23,54]
  [22,126] -> [9,24,55]
  [22,127] -> [10,25,56]
  [22,128] -> [142]
  [22,129] -> [143]
  [22,134] -> [142,159]
  [22,135] -> [143,160]
  [22,140] -> [7]
  [22,141] -> [6]
  [22,142] -> [128,134]
  [22,143] -> [129,135]
  [22,146] -> [50]
  [22,147] -> [49]
  [22,159] -> [134]
  [22,160] -> [135]
  [22,198] -> [99]
  [22,216] -> [124]
  [22,217] -> [123]
  [22,218] -> [122]
  [23] -> [8,22]
  [24] -> [9,22]
  [25] -> [10,22]
  [27] -> [42,182,187]
  [28] -> [42,182]
  [31] -> [19]
  [33] -> [21]
  [34] -> [22]
  [38] -> [34]
  [39] -> [6,22,38]
  [40] -> [7,22,38]
  [42] -> [27,28]
  [165] -> [19]
  [167] -> [180,239]
  [172] -> [187,247]
  [173] -> [180,239]
  [180] -> [167,173,187]
  [182] -> [27,28,231]
  [187] -> [27,172,180]
  [191] -> [22]
  [192] -> [21]
  [202] -> [22]
  [203] -> [21]
  [231] -> [182,239]
  [237] -> [240,254,259]
  [239] -> [167,173,231,247]
  [240] -> [237]
  [247] -> [172,239]
  [254] -> [237]
  [259] -> [237]

one :81: (x :82: Bool) -> List = (\x :83: Bool. Cons -85- x -84- Nil) {- constraints apply -}
  [] -> [79,80,81,82,83,84,85,R]

rev :229: (xs :230: List) -> Rev -231- xs = (\xs :232: List. rev' -235- Nil -234- RNil -233- xs) {- constraints apply -}
  [] -> [16,17,18,20,26,29,30,32,41,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,164,166,168,174,175,177,178,179,181,183,184,185,186,188,189,190,193,194,195,196,197,199,200,201,204,205,206,207,208,209,210,211,212,213,214,215,220,221,222,223,224,225,229,230,232,233,234,235,R]
  [6] -> [22,39]
  [6,22] -> [50,70,73,108,141]
  [7] -> [22,40]
  [7,22] -> [50,71,72,107,140,142,143]
  [8] -> [22,23]
  [8,22] -> [50,51,54,100,125]
  [9] -> [22,24]
  [9,22] -> [50,52,55,101,126]
  [10] -> [22,25]
  [10,22] -> [50,53,56,102,127]
  [19] -> [31,165]
  [21] -> [33,192,203]
  [22] -> [5,34,43,44,45,46,47,48,57,58,59,60,61,62,63,74,98,99,103,104,105,106,109,110,113,114,115,116,117,118,119,121,122,123,124,128,129,130,131,132,133,136,137,138,139,144,145,148,149,150,151,152,153,154,155,156,157,158,191,202]
  [22,23] -> [100,125]
  [22,24] -> [101,126]
  [22,25] -> [102,127]
  [22,49] -> [64,112,118,119,147,159,160]
  [22,50] -> [65,111,120,128,129,130,131,132,133,146,161,162,163]
  [22,50,51] -> [100,125]
  [22,50,52] -> [101,126]
  [22,50,53] -> [102,127]
  [22,50,100] -> [51]
  [22,50,101] -> [52]
  [22,50,102] -> [53]
  [22,50,103] -> [118]
  [22,50,104] -> [119]
  [22,50,118] -> [103]
  [22,50,119] -> [104]
  [22,50,125] -> [51]
  [22,50,126] -> [52]
  [22,50,127] -> [53]
  [22,50,134] -> [159]
  [22,50,135] -> [160]
  [22,50,159] -> [134]
  [22,50,160] -> [135]
  [22,51] -> [8,50]
  [22,52] -> [9,50]
  [22,53] -> [10,50]
  [22,54] -> [8,100,125]
  [22,55] -> [9,101,126]
  [22,56] -> [10,102,127]
  [22,64] -> [49]
  [22,65] -> [50]
  [22,69] -> [65]
  [22,70] -> [6,50,69]
  [22,71] -> [7,50,69]
  [22,72] -> [7]
  [22,73] -> [6]
  [22,99] -> [198]
  [22,100] -> [8,23,54]
  [22,101] -> [9,24,55]
  [22,102] -> [10,25,56]
  [22,107] -> [7]
  [22,108] -> [6]
  [22,111] -> [50]
  [22,112] -> [49]
  [22,122] -> [218]
  [22,123] -> [217,219]
  [22,124] -> [216]
  [22,125] -> [8,23,54]
  [22,126] -> [9,24,55]
  [22,127] -> [10,25,56]
  [22,128] -> [142]
  [22,129] -> [143]
  [22,134] -> [142,159]
  [22,135] -> [143,160]
  [22,140] -> [7]
  [22,141] -> [6]
  [22,142] -> [128,134]
  [22,143] -> [129,135]
  [22,146] -> [50]
  [22,147] -> [49]
  [22,159] -> [134]
  [22,160] -> [135]
  [22,198] -> [99]
  [22,216] -> [124]
  [22,217] -> [123]
  [22,218] -> [122]
  [23] -> [8,22]
  [24] -> [9,22]
  [25] -> [10,22]
  [27] -> [42,182,187]
  [28] -> [42,182]
  [31] -> [19]
  [33] -> [21]
  [34] -> [22]
  [38] -> [34]
  [39] -> [6,22,38]
  [40] -> [7,22,38]
  [42] -> [27,28]
  [165] -> [19]
  [167] -> [180]
  [169] -> [228]
  [170] -> [227]
  [171] -> [226]
  [171,172] -> [187]
  [171,187] -> [172]
  [173] -> [180]
  [180] -> [167,173,187]
  [182] -> [27,28,231]
  [187] -> [27,180]
  [191] -> [22]
  [192] -> [21]
  [202] -> [22]
  [203] -> [21]
  [226] -> [171]
  [227] -> [170]
  [228] -> [169]
  [231] -> [182]

rev' :177: (xs :178: List) -> (rxs :179: Rev -180- xs) -> (ys :181: List) -> Rev -182- (app -184- xs -183- ys) = \(xs :185: List) (rxs :186: Rev -187- xs) (ys :188: List).
  case -189- ys of
    Nil
      => subst -195- List -194- Rev -193- xs -192- (app -197- xs -196- Nil) -191- (appRightNeutral -198- xs) -190- rxs
    Cons (y :199: Bool) (ys' :200: List)
      => subst -206- List -205- Rev -204- (app -208- (app -210- xs -209- (one -211- y)) -207- ys') -203- (app -213- xs -212- (Cons -215- y -214- ys')) -202- (appAssoc -218- xs -217- (one -219- y) -216- ys') -201- (rev' -222- (app -224- xs -223- (one -225- y)) -221- (RSnoc -228- xs -227- y -226- rxs) -220- ys') {- constraints apply -}
  [] -> [16,17,18,20,26,29,30,32,41,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,164,168,174,175,177,178,179,181,183,184,185,186,188,189,190,193,194,195,196,197,199,200,201,204,205,206,207,208,209,210,211,212,213,214,215,220,221,222,223,224,225,R]
  [6] -> [22,39]
  [6,22] -> [50,70,73,108,141]
  [7] -> [22,40]
  [7,22] -> [50,71,72,107,140,142,143]
  [8] -> [22,23]
  [8,22] -> [50,51,54,100,125]
  [9] -> [22,24]
  [9,22] -> [50,52,55,101,126]
  [10] -> [22,25]
  [10,22] -> [50,53,56,102,127]
  [19] -> [31,165]
  [21] -> [33,192,203]
  [22] -> [5,34,43,44,45,46,47,48,57,58,59,60,61,62,63,74,98,99,103,104,105,106,109,110,113,114,115,116,117,118,119,121,122,123,124,128,129,130,131,132,133,136,137,138,139,144,145,148,149,150,151,152,153,154,155,156,157,158,191,202]
  [22,23] -> [100,125]
  [22,24] -> [101,126]
  [22,25] -> [102,127]
  [22,49] -> [64,112,118,119,147,159,160]
  [22,50] -> [65,111,120,128,129,130,131,132,133,146,161,162,163]
  [22,50,51] -> [100,125]
  [22,50,52] -> [101,126]
  [22,50,53] -> [102,127]
  [22,50,100] -> [51]
  [22,50,101] -> [52]
  [22,50,102] -> [53]
  [22,50,103] -> [118]
  [22,50,104] -> [119]
  [22,50,118] -> [103]
  [22,50,119] -> [104]
  [22,50,125] -> [51]
  [22,50,126] -> [52]
  [22,50,127] -> [53]
  [22,50,134] -> [159]
  [22,50,135] -> [160]
  [22,50,159] -> [134]
  [22,50,160] -> [135]
  [22,51] -> [8,50]
  [22,52] -> [9,50]
  [22,53] -> [10,50]
  [22,54] -> [8,100,125]
  [22,55] -> [9,101,126]
  [22,56] -> [10,102,127]
  [22,64] -> [49]
  [22,65] -> [50]
  [22,69] -> [65]
  [22,70] -> [6,50,69]
  [22,71] -> [7,50,69]
  [22,72] -> [7]
  [22,73] -> [6]
  [22,99] -> [198]
  [22,100] -> [8,23,54]
  [22,101] -> [9,24,55]
  [22,102] -> [10,25,56]
  [22,107] -> [7]
  [22,108] -> [6]
  [22,111] -> [50]
  [22,112] -> [49]
  [22,122] -> [218]
  [22,123] -> [217,219]
  [22,124] -> [216]
  [22,125] -> [8,23,54]
  [22,126] -> [9,24,55]
  [22,127] -> [10,25,56]
  [22,128] -> [142]
  [22,129] -> [143]
  [22,134] -> [142,159]
  [22,135] -> [143,160]
  [22,140] -> [7]
  [22,141] -> [6]
  [22,142] -> [128,134]
  [22,143] -> [129,135]
  [22,146] -> [50]
  [22,147] -> [49]
  [22,159] -> [134]
  [22,160] -> [135]
  [22,198] -> [99]
  [22,216] -> [124]
  [22,217] -> [123]
  [22,218] -> [122]
  [23] -> [8,22]
  [24] -> [9,22]
  [25] -> [10,22]
  [27] -> [42,182,187]
  [28] -> [42,182]
  [31] -> [19]
  [33] -> [21]
  [34] -> [22]
  [38] -> [34]
  [39] -> [6,22,38]
  [40] -> [7,22,38]
  [42] -> [27,28]
  [165] -> [19]
  [169] -> [228]
  [170] -> [227]
  [171] -> [226]
  [171,172] -> [187]
  [171,187] -> [172]
  [173] -> [180]
  [180] -> [173,187]
  [182] -> [27,28]
  [187] -> [27,180]
  [191] -> [22]
  [192] -> [21]
  [202] -> [22]
  [203] -> [21]
  [226] -> [171]
  [227] -> [170]
  [228] -> [169]

reverse :255: (xs :256: List) -> List = (\xs :257: List. reverse' -259- xs -258- (rev -260- xs)) {- constraints apply -}
  [] -> [16,17,18,20,26,29,30,32,41,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,164,166,168,169,170,171,174,175,177,178,179,181,183,184,185,186,188,189,190,193,194,195,196,197,199,200,201,204,205,206,207,208,209,210,211,212,213,214,215,220,221,222,223,224,225,226,227,228,229,230,232,233,234,235,236,238,241,243,244,245,246,248,249,251,252,253,255,256,257,258,260,R]
  [6] -> [22,39]
  [6,22] -> [50,70,73,108,141]
  [7] -> [22,40]
  [7,22] -> [50,71,72,107,140,142,143]
  [8] -> [22,23]
  [8,22] -> [50,51,54,100,125]
  [9] -> [22,24]
  [9,22] -> [50,52,55,101,126]
  [10] -> [22,25]
  [10,22] -> [50,53,56,102,127]
  [19] -> [31,165]
  [21] -> [33,192,203]
  [22] -> [5,34,43,44,45,46,47,48,57,58,59,60,61,62,63,74,98,99,103,104,105,106,109,110,113,114,115,116,117,118,119,121,122,123,124,128,129,130,131,132,133,136,137,138,139,144,145,148,149,150,151,152,153,154,155,156,157,158,191,202]
  [22,23] -> [100,125]
  [22,24] -> [101,126]
  [22,25] -> [102,127]
  [22,49] -> [64,112,118,119,147,159,160]
  [22,50] -> [65,111,120,128,129,130,131,132,133,146,161,162,163]
  [22,50,51] -> [100,125]
  [22,50,52] -> [101,126]
  [22,50,53] -> [102,127]
  [22,50,100] -> [51]
  [22,50,101] -> [52]
  [22,50,102] -> [53]
  [22,50,103] -> [118]
  [22,50,104] -> [119]
  [22,50,118] -> [103]
  [22,50,119] -> [104]
  [22,50,125] -> [51]
  [22,50,126] -> [52]
  [22,50,127] -> [53]
  [22,50,134] -> [159]
  [22,50,135] -> [160]
  [22,50,159] -> [134]
  [22,50,160] -> [135]
  [22,51] -> [8,50]
  [22,52] -> [9,50]
  [22,53] -> [10,50]
  [22,54] -> [8,100,125]
  [22,55] -> [9,101,126]
  [22,56] -> [10,102,127]
  [22,64] -> [49]
  [22,65] -> [50]
  [22,69] -> [65]
  [22,70] -> [6,50,69]
  [22,71] -> [7,50,69]
  [22,72] -> [7]
  [22,73] -> [6]
  [22,99] -> [198]
  [22,100] -> [8,23,54]
  [22,101] -> [9,24,55]
  [22,102] -> [10,25,56]
  [22,107] -> [7]
  [22,108] -> [6]
  [22,111] -> [50]
  [22,112] -> [49]
  [22,122] -> [218]
  [22,123] -> [217,219]
  [22,124] -> [216]
  [22,125] -> [8,23,54]
  [22,126] -> [9,24,55]
  [22,127] -> [10,25,56]
  [22,128] -> [142]
  [22,129] -> [143]
  [22,134] -> [142,159]
  [22,135] -> [143,160]
  [22,140] -> [7]
  [22,141] -> [6]
  [22,142] -> [128,134]
  [22,143] -> [129,135]
  [22,146] -> [50]
  [22,147] -> [49]
  [22,159] -> [134]
  [22,160] -> [135]
  [22,198] -> [99]
  [22,216] -> [124]
  [22,217] -> [123]
  [22,218] -> [122]
  [23] -> [8,22]
  [24] -> [9,22]
  [25] -> [10,22]
  [27] -> [42,182,187]
  [28] -> [42,182]
  [31] -> [19]
  [33] -> [21]
  [34] -> [22]
  [38] -> [34]
  [39] -> [6,22,38]
  [40] -> [7,22,38]
  [42] -> [27,28]
  [165] -> [19]
  [167] -> [180,239]
  [172] -> [187,247]
  [173] -> [180,239]
  [180] -> [167,173,187]
  [182] -> [27,28,231]
  [187] -> [27,172,180]
  [191] -> [22]
  [192] -> [21]
  [202] -> [22]
  [203] -> [21]
  [231] -> [182,239]
  [237] -> [240,254,259]
  [239] -> [167,173,231,247]
  [240] -> [237]
  [247] -> [172,239]
  [254] -> [237]
  [259] -> [237]

reverse' :236: (xs :237: List) -> (rxs :238: Rev -239- xs) -> List = \(xs :240: List) (rxs :241: Rev -242- xs).
  case -243- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :244: List) (x :245: Bool) (rxs' :246: Rev -247- xs')
      | xs = app -249- xs' -248- (one -250- x)
      => Cons -252- x -251- (reverse' -254- xs' -253- rxs') {- constraints apply -}
  [] -> [79,80,169,170,171,236,238,241,243,244,245,246,251,252,253,R]
  [84] -> [84]
  [85] -> [85]
  [167] -> [239]
  [172] -> [247]
  [173] -> [239]
  [174] -> [248]
  [175] -> [249]
  [237] -> [240,254]
  [239] -> [167,173,247]
  [240] -> [237]
  [247] -> [172,239]
  [248] -> [174]
  [249] -> [175]
  [254] -> [237]

subst :16: (a :17: Type) -> (P :18: (_ :19: a) -> Type) -> (x :20: a) -> (y :21: a) -> (eq :22: Id -25- a -24- x -23- y) -> (_ :26: P -27- x) -> P -28- y = \(a :29: Type) (P :30: (_ :31: a) -> Type) (x :32: a) (y :33: a) (eq :34: Id -37- a -36- x -35- y).
  case -38- eq of
    Refl (a' :39: Type) (x' :40: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :41: P -42- x'. w) {- constraints apply -}
  [] -> [16,17,18,20,26,29,30,32,41,R]
  [6] -> [22,39]
  [7] -> [22,40]
  [8] -> [22,23]
  [9] -> [22,24]
  [10] -> [22,25]
  [19] -> [31]
  [21] -> [33]
  [22] -> [34]
  [23] -> [8,22]
  [24] -> [9,22]
  [25] -> [10,22]
  [27] -> [42]
  [28] -> [42]
  [31] -> [19]
  [33] -> [21]
  [34] -> [22]
  [38] -> [34]
  [39] -> [6,22,38]
  [40] -> [7,22,38]
  [42] -> [27,28]


### Constraints ###

[] -> [16,17,18,20,26,29,30,32,41,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,164,166,168,169,170,171,174,175,177,178,179,181,183,184,185,186,188,189,190,193,194,195,196,197,199,200,201,204,205,206,207,208,209,210,211,212,213,214,215,220,221,222,223,224,225,226,227,228,229,230,232,233,234,235,236,238,241,243,244,245,246,248,249,251,252,253,255,256,257,258,260,261,262,263,264,265,266,267,268,269,R]
[6] -> [22,39]
[6,22] -> [50,70,73,108,141]
[7] -> [22,40]
[7,22] -> [50,71,72,107,140,142,143]
[8] -> [22,23]
[8,22] -> [50,51,54,100,125]
[9] -> [22,24]
[9,22] -> [50,52,55,101,126]
[10] -> [22,25]
[10,22] -> [50,53,56,102,127]
[19] -> [31,165]
[21] -> [33,192,203]
[22] -> [5,34,43,44,45,46,47,48,57,58,59,60,61,62,63,74,98,99,103,104,105,106,109,110,113,114,115,116,117,118,119,121,122,123,124,128,129,130,131,132,133,136,137,138,139,144,145,148,149,150,151,152,153,154,155,156,157,158,191,202]
[22,23] -> [100,125]
[22,24] -> [101,126]
[22,25] -> [102,127]
[22,49] -> [64,112,118,119,147,159,160]
[22,50] -> [65,111,120,128,129,130,131,132,133,146,161,162,163]
[22,50,51] -> [100,125]
[22,50,52] -> [101,126]
[22,50,53] -> [102,127]
[22,50,100] -> [51]
[22,50,101] -> [52]
[22,50,102] -> [53]
[22,50,103] -> [118]
[22,50,104] -> [119]
[22,50,118] -> [103]
[22,50,119] -> [104]
[22,50,125] -> [51]
[22,50,126] -> [52]
[22,50,127] -> [53]
[22,50,134] -> [159]
[22,50,135] -> [160]
[22,50,159] -> [134]
[22,50,160] -> [135]
[22,51] -> [8,50]
[22,52] -> [9,50]
[22,53] -> [10,50]
[22,54] -> [8,100,125]
[22,55] -> [9,101,126]
[22,56] -> [10,102,127]
[22,64] -> [49]
[22,65] -> [50]
[22,69] -> [65]
[22,70] -> [6,50,69]
[22,71] -> [7,50,69]
[22,72] -> [7]
[22,73] -> [6]
[22,99] -> [198]
[22,100] -> [8,23,54]
[22,101] -> [9,24,55]
[22,102] -> [10,25,56]
[22,107] -> [7]
[22,108] -> [6]
[22,111] -> [50]
[22,112] -> [49]
[22,122] -> [218]
[22,123] -> [217,219]
[22,124] -> [216]
[22,125] -> [8,23,54]
[22,126] -> [9,24,55]
[22,127] -> [10,25,56]
[22,128] -> [142]
[22,129] -> [143]
[22,134] -> [142,159]
[22,135] -> [143,160]
[22,140] -> [7]
[22,141] -> [6]
[22,142] -> [128,134]
[22,143] -> [129,135]
[22,146] -> [50]
[22,147] -> [49]
[22,159] -> [134]
[22,160] -> [135]
[22,198] -> [99]
[22,216] -> [124]
[22,217] -> [123]
[22,218] -> [122]
[23] -> [8,22]
[24] -> [9,22]
[25] -> [10,22]
[27] -> [42,182,187]
[28] -> [42,182]
[31] -> [19]
[33] -> [21]
[34] -> [22]
[38] -> [34]
[39] -> [6,22,38]
[40] -> [7,22,38]
[42] -> [27,28]
[165] -> [19]
[167] -> [180,239]
[172] -> [187,247]
[173] -> [180,239]
[180] -> [167,173,187]
[182] -> [27,28,231]
[187] -> [27,172,180]
[191] -> [22]
[192] -> [21]
[202] -> [22]
[203] -> [21]
[231] -> [182,239]
[237] -> [240,254,259]
[239] -> [167,173,231,247]
[240] -> [237]
[247] -> [172,239]
[254] -> [237]
[259] -> [237]

### Solution ###

[16,17,18,20,26,29,30,32,41,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,164,166,168,169,170,171,174,175,177,178,179,181,183,184,185,186,188,189,190,193,194,195,196,197,199,200,201,204,205,206,207,208,209,210,211,212,213,214,215,220,221,222,223,224,225,226,227,228,229,230,232,233,234,235,236,238,241,243,244,245,246,248,249,251,252,253,255,256,257,258,260,261,262,263,264,265,266,267,268,269,R]

### Annotated ###

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x

id :E: (a :E: Type) -> (_ :E: a) -> a = (\a :E: Type. (\x :E: a. x))

subst :R: (a :R: Type) -> (P :R: (_ :E: a) -> Type) -> (x :R: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (_ :R: P -E- x) -> P -E- y = \(a :R: Type) (P :R: (_ :E: a) -> Type) (x :R: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :R: P -E- x'. w)

cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_ :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) = \(a :E: Type) (b :E: Type) (f :E: (_ :E: a) -> b) (x :E: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -E- b -E- (f -E- y)

postulate Bool :E: Type

postulate T :R: Bool

postulate F :R: Bool

postulate List :R: Type

postulate Nil :R: List

postulate Cons :R: (x :R: Bool) -> (xs :R: List) -> List

one :R: (x :R: Bool) -> List = (\x :R: Bool. Cons -R- x -R- Nil)

app :R: (xs :R: List) -> (ys :R: List) -> List = \(xs :R: List) (ys :R: List).
  case -R- xs of
    Nil
      => ys
    Cons (x :R: Bool) (xs' :R: List)
      => Cons -R- x -R- (app -R- xs' -R- ys)

appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) = \(ys :E: List).
  case -E- ys of
    Nil
      => Refl -E- List -E- Nil
    Cons (x :E: Bool) (xs :E: List)
      => cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)

appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) = \(xs :E: List) (ys :E: List) (zs :E: List).
  case -E- xs of
    Nil
      => Refl -E- List -E- (app -E- ys -E- zs)
    Cons (x :E: Bool) (xs' :E: List)
      => cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs' -E- ys) -E- zs) -E- (app -E- xs' -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs' -E- ys -E- zs)

postulate Rev :R: (_ :E: List) -> Type

postulate RNil :R: Rev -E- Nil

postulate RSnoc :R: (xs :R: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -R- xs -R- (one -E- x))

rev' :R: (xs :R: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -R- xs -R- ys) = \(xs :R: List) (rxs :R: Rev -E- xs) (ys :R: List).
  case -R- ys of
    Nil
      => subst -R- List -R- Rev -R- xs -E- (app -R- xs -R- Nil) -E- (appRightNeutral -E- xs) -R- rxs
    Cons (y :R: Bool) (ys' :R: List)
      => subst -R- List -R- Rev -R- (app -R- (app -R- xs -R- (one -R- y)) -R- ys') -E- (app -R- xs -R- (Cons -R- y -R- ys')) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys') -R- (rev' -R- (app -R- xs -R- (one -R- y)) -R- (RSnoc -R- xs -R- y -R- rxs) -R- ys')

rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -R- Nil -R- RNil -R- xs)

reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List = \(xs :E: List) (rxs :R: Rev -E- xs).
  case -R- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :R: List) (x :R: Bool) (rxs' :R: Rev -E- xs')
      | xs = app -R- xs' -R- (one -E- x)
      => Cons -R- x -R- (reverse' -E- xs' -R- rxs')

reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))

main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))

### Specialised ###

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x

id :E: (a :E: Type) -> (_ :E: a) -> a = (\a :E: Type. (\x :E: a. x))

subst :R: (a :R: Type) -> (P :R: (_ :E: a) -> Type) -> (x :R: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (_ :R: P -E- x) -> P -E- y = \(a :R: Type) (P :R: (_ :E: a) -> Type) (x :R: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :R: P -E- x'. w)

cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_ :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) = \(a :E: Type) (b :E: Type) (f :E: (_ :E: a) -> b) (x :E: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -E- b -E- (f -E- y)

postulate Bool :E: Type

postulate T :R: Bool

postulate F :R: Bool

postulate List :R: Type

postulate Nil :R: List

postulate Cons :R: (x :R: Bool) -> (xs :R: List) -> List

one :R: (x :R: Bool) -> List = (\x :R: Bool. Cons -R- x -R- Nil)

app :R: (xs :R: List) -> (ys :R: List) -> List = \(xs :R: List) (ys :R: List).
  case -R- xs of
    Nil
      => ys
    Cons (x :R: Bool) (xs' :R: List)
      => Cons -R- x -R- (app -R- xs' -R- ys)

appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) = \(ys :E: List).
  case -E- ys of
    Nil
      => Refl -E- List -E- Nil
    Cons (x :E: Bool) (xs :E: List)
      => cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)

appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) = \(xs :E: List) (ys :E: List) (zs :E: List).
  case -E- xs of
    Nil
      => Refl -E- List -E- (app -E- ys -E- zs)
    Cons (x :E: Bool) (xs' :E: List)
      => cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs' -E- ys) -E- zs) -E- (app -E- xs' -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs' -E- ys -E- zs)

postulate Rev :R: (_ :E: List) -> Type

postulate RNil :R: Rev -E- Nil

postulate RSnoc :R: (xs :R: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -R- xs -R- (one -E- x))

rev' :R: (xs :R: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -R- xs -R- ys) = \(xs :R: List) (rxs :R: Rev -E- xs) (ys :R: List).
  case -R- ys of
    Nil
      => subst -R- List -R- Rev -R- xs -E- (app -R- xs -R- Nil) -E- (appRightNeutral -E- xs) -R- rxs
    Cons (y :R: Bool) (ys' :R: List)
      => subst -R- List -R- Rev -R- (app -R- (app -R- xs -R- (one -R- y)) -R- ys') -E- (app -R- xs -R- (Cons -R- y -R- ys')) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys') -R- (rev' -R- (app -R- xs -R- (one -R- y)) -R- (RSnoc -R- xs -R- y -R- rxs) -R- ys')

rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -R- Nil -R- RNil -R- xs)

reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List = \(xs :E: List) (rxs :R: Rev -E- xs).
  case -R- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :R: List) (x :R: Bool) (rxs' :R: Rev -E- xs')
      | xs = app -R- xs' -R- (one -E- x)
      => Cons -R- x -R- (reverse' -E- xs' -R- rxs')

reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))

main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))

### Final annotation ###

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x

id :E: (a :E: Type) -> (_ :E: a) -> a = (\a :E: Type. (\x :E: a. x))

subst :R: (a :R: Type) -> (P :R: (_ :E: a) -> Type) -> (x :R: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (_ :R: P -E- x) -> P -E- y = \(a :R: Type) (P :R: (_ :E: a) -> Type) (x :R: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :R: P -E- x'. w)

cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_ :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) = \(a :E: Type) (b :E: Type) (f :E: (_ :E: a) -> b) (x :E: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -E- b -E- (f -E- y)

postulate Bool :E: Type

postulate T :R: Bool

postulate F :R: Bool

postulate List :R: Type

postulate Nil :R: List

postulate Cons :R: (x :R: Bool) -> (xs :R: List) -> List

one :R: (x :R: Bool) -> List = (\x :R: Bool. Cons -R- x -R- Nil)

app :R: (xs :R: List) -> (ys :R: List) -> List = \(xs :R: List) (ys :R: List).
  case -R- xs of
    Nil
      => ys
    Cons (x :R: Bool) (xs' :R: List)
      => Cons -R- x -R- (app -R- xs' -R- ys)

appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) = \(ys :E: List).
  case -E- ys of
    Nil
      => Refl -E- List -E- Nil
    Cons (x :E: Bool) (xs :E: List)
      => cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)

appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) = \(xs :E: List) (ys :E: List) (zs :E: List).
  case -E- xs of
    Nil
      => Refl -E- List -E- (app -E- ys -E- zs)
    Cons (x :E: Bool) (xs' :E: List)
      => cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs' -E- ys) -E- zs) -E- (app -E- xs' -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs' -E- ys -E- zs)

postulate Rev :R: (_ :E: List) -> Type

postulate RNil :R: Rev -E- Nil

postulate RSnoc :R: (xs :R: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -R- xs -R- (one -E- x))

rev' :R: (xs :R: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -R- xs -R- ys) = \(xs :R: List) (rxs :R: Rev -E- xs) (ys :R: List).
  case -R- ys of
    Nil
      => subst -R- List -R- Rev -R- xs -E- (app -R- xs -R- Nil) -E- (appRightNeutral -E- xs) -R- rxs
    Cons (y :R: Bool) (ys' :R: List)
      => subst -R- List -R- Rev -R- (app -R- (app -R- xs -R- (one -R- y)) -R- ys') -E- (app -R- xs -R- (Cons -R- y -R- ys')) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys') -R- (rev' -R- (app -R- xs -R- (one -R- y)) -R- (RSnoc -R- xs -R- y -R- rxs) -R- ys')

rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -R- Nil -R- RNil -R- xs)

reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List = \(xs :E: List) (rxs :R: Rev -E- xs).
  case -R- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :R: List) (x :R: Bool) (rxs' :R: Rev -E- xs')
      | xs = app -R- xs' -R- (one -E- x)
      => Cons -R- x -R- (reverse' -E- xs' -R- rxs')

reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))

main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))

### Verification ###

