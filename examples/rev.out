-- vim: ft=agda

### Desugared ###

postulate Id : (a : Type) -> (x : a) -> (y : a) -> Type

postulate Refl : (a : Type) -> (x : a) -> Id a x x

id : (a : Type) -> (_ : a) -> a = (\a : Type. (\x : a. x))

subst : (a : Type) -> (P : (_ : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (_ : P x) -> P y = \(a : Type) (P : (_ : a) -> Type) (x : a) (y : a) (eq : Id a x y).
  case eq of
    Refl (a' : Type) (x' : a)
      | a' = a
      | x' = x
      | y = x
      => (\w : P x'. w)

cong : (a : Type) -> (b : Type) -> (f : (_ : a) -> b) -> (x : a) -> (y : a) -> (eq : Id a x y) -> Id b (f x) (f y) = \(a : Type) (b : Type) (f : (_ : a) -> b) (x : a) (y : a) (eq : Id a x y).
  case eq of
    Refl (a' : Type) (x' : a)
      | a' = a
      | x' = x
      | y = x
      => Refl b (f y)

postulate Bool : Type

postulate T : Bool

postulate F : Bool

postulate List : Type

postulate Nil : List

postulate Cons : (x :R: Bool) -> (xs :R: List) -> List

one : (x : Bool) -> List = (\x : Bool. Cons x Nil)

app : (xs : List) -> (ys : List) -> List = \(xs : List) (ys : List).
  case xs of
    Nil
      => ys
    Cons (x : Bool) (xs' : List)
      => Cons x (app xs' ys)

appRightNeutral : (ys : List) -> Id List ys (app ys Nil) = \(ys : List).
  case ys of
    Nil
      => Refl List Nil
    Cons (x : Bool) (xs : List)
      => cong List List (Cons x) xs (app xs Nil) (appRightNeutral xs)

appAssoc : (xs : List) -> (ys : List) -> (zs : List) -> Id List (app (app xs ys) zs) (app xs (app ys zs)) = \(xs : List) (ys : List) (zs : List).
  case xs of
    Nil
      => Refl List (app ys zs)
    Cons (x : Bool) (xs' : List)
      => cong List List (Cons x) (app (app xs' ys) zs) (app xs' (app ys zs)) (appAssoc xs' ys zs)

postulate Rev : (_ : List) -> Type

postulate RNil : Rev Nil

postulate RSnoc : (xs : List) -> (x : Bool) -> (rxs : Rev xs) -> Rev (app xs (one x))

rev' : (xs : List) -> (rxs : Rev xs) -> (ys : List) -> Rev (app xs ys) = \(xs : List) (rxs : Rev xs) (ys : List).
  case ys of
    Nil
      => subst List Rev xs (app xs Nil) (appRightNeutral xs) rxs
    Cons (y : Bool) (ys' : List)
      => subst List Rev (app (app xs (one y)) ys') (app xs (Cons y ys')) (appAssoc xs (one y) ys') (rev' (app xs (one y)) (RSnoc xs y rxs) ys')

rev : (xs : List) -> Rev xs = (\xs : List. rev' Nil RNil xs)

reverse' : (xs : List) -> (rxs : Rev xs) -> List = \(xs : List) (rxs : Rev xs).
  case rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' : List) (x : Bool) (rxs' : Rev xs')
      | xs = app xs' (one x)
      => Cons x (reverse' xs' rxs')

reverse : (xs : List) -> List = (\xs : List. reverse' xs (rev xs))

main :R: List = reverse (Cons T (Cons F (Cons T (Cons F Nil))))

### Metaified ###

postulate Id :1: (a :2: Type) -> (x :3: a) -> (y :4: a) -> Type

postulate Refl :5: (a :6: Type) -> (x :7: a) -> Id -10- a -9- x -8- x

id :11: (a :12: Type) -> (_ :13: a) -> a = (\a :14: Type. (\x :15: a. x))

subst :16: (a :17: Type) -> (P :18: (_ :19: a) -> Type) -> (x :20: a) -> (y :21: a) -> (eq :22: Id -25- a -24- x -23- y) -> (_ :26: P -27- x) -> P -28- y = \(a :29: Type) (P :30: (_ :31: a) -> Type) (x :32: a) (y :33: a) (eq :34: Id -37- a -36- x -35- y).
  case -38- eq of
    Refl/39 (a' :40: Type) (x' :41: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :42: P -43- x'. w)

cong :44: (a :45: Type) -> (b :46: Type) -> (f :47: (_ :48: a) -> b) -> (x :49: a) -> (y :50: a) -> (eq :51: Id -54- a -53- x -52- y) -> Id -57- b -56- (f -58- x) -55- (f -59- y) = \(a :60: Type) (b :61: Type) (f :62: (_ :63: a) -> b) (x :64: a) (y :65: a) (eq :66: Id -69- a -68- x -67- y).
  case -70- eq of
    Refl/71 (a' :72: Type) (x' :73: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -75- b -74- (f -76- y)

postulate Bool :77: Type

postulate T :78: Bool

postulate F :79: Bool

postulate List :80: Type

postulate Nil :81: List

postulate Cons :82: (x :R: Bool) -> (xs :R: List) -> List

one :83: (x :84: Bool) -> List = (\x :85: Bool. Cons -87- x -86- Nil)

app :88: (xs :89: List) -> (ys :90: List) -> List = \(xs :91: List) (ys :92: List).
  case -93- xs of
    Nil/94
      => ys
    Cons/95 (x :96: Bool) (xs' :97: List)
      => Cons -99- x -98- (app -101- xs' -100- ys)

appRightNeutral :102: (ys :103: List) -> Id -106- List -105- ys -104- (app -108- ys -107- Nil) = \(ys :109: List).
  case -110- ys of
    Nil/111
      => Refl -113- List -112- Nil
    Cons/114 (x :115: Bool) (xs :116: List)
      => cong -122- List -121- List -120- (Cons -123- x) -119- xs -118- (app -125- xs -124- Nil) -117- (appRightNeutral -126- xs)

appAssoc :127: (xs :128: List) -> (ys :129: List) -> (zs :130: List) -> Id -133- List -132- (app -135- (app -137- xs -136- ys) -134- zs) -131- (app -139- xs -138- (app -141- ys -140- zs)) = \(xs :142: List) (ys :143: List) (zs :144: List).
  case -145- xs of
    Nil/146
      => Refl -148- List -147- (app -150- ys -149- zs)
    Cons/151 (x :152: Bool) (xs' :153: List)
      => cong -159- List -158- List -157- (Cons -160- x) -156- (app -162- (app -164- xs' -163- ys) -161- zs) -155- (app -166- xs' -165- (app -168- ys -167- zs)) -154- (appAssoc -171- xs' -170- ys -169- zs)

postulate Rev :172: (_ :173: List) -> Type

postulate RNil :174: Rev -175- Nil

postulate RSnoc :176: (xs :177: List) -> (x :178: Bool) -> (rxs :179: Rev -180- xs) -> Rev -181- (app -183- xs -182- (one -184- x))

rev' :185: (xs :186: List) -> (rxs :187: Rev -188- xs) -> (ys :189: List) -> Rev -190- (app -192- xs -191- ys) = \(xs :193: List) (rxs :194: Rev -195- xs) (ys :196: List).
  case -197- ys of
    Nil/198
      => subst -204- List -203- Rev -202- xs -201- (app -206- xs -205- Nil) -200- (appRightNeutral -207- xs) -199- rxs
    Cons/208 (y :209: Bool) (ys' :210: List)
      => subst -216- List -215- Rev -214- (app -218- (app -220- xs -219- (one -221- y)) -217- ys') -213- (app -223- xs -222- (Cons -225- y -224- ys')) -212- (appAssoc -228- xs -227- (one -229- y) -226- ys') -211- (rev' -232- (app -234- xs -233- (one -235- y)) -231- (RSnoc -238- xs -237- y -236- rxs) -230- ys')

rev :239: (xs :240: List) -> Rev -241- xs = (\xs :242: List. rev' -245- Nil -244- RNil -243- xs)

reverse' :246: (xs :247: List) -> (rxs :248: Rev -249- xs) -> List = \(xs :250: List) (rxs :251: Rev -252- xs).
  case -253- rxs of
    RNil/254
      | xs = Nil
      => Nil
    RSnoc/255 (xs' :256: List) (x :257: Bool) (rxs' :258: Rev -259- xs')
      | xs = app -261- xs' -260- (one -262- x)
      => Cons -264- x -263- (reverse' -266- xs' -265- rxs')

reverse :267: (xs :268: List) -> List = (\xs :269: List. reverse' -271- xs -270- (rev -272- xs))

main :R: List = reverse -273- (Cons -275- T -274- (Cons -277- F -276- (Cons -279- T -278- (Cons -281- F -280- Nil))))

### Inferred definitions ###

postulate Bool :77: Type {- constraints apply -}
  [] -> [77,R]

postulate Cons :82: (x :R: Bool) -> (xs :R: List) -> List {- constraints apply -}
  [] -> [82,R]

postulate F :79: Bool {- constraints apply -}
  [] -> [79,R]

postulate Id :1: (a :2: Type) -> (x :3: a) -> (y :4: a) -> Type {- constraints apply -}
  [] -> [1,R]

postulate List :80: Type {- constraints apply -}
  [] -> [80,R]

postulate Nil :81: List {- constraints apply -}
  [] -> [81,R]

postulate RNil :174: Rev -175- Nil {- constraints apply -}
  [] -> [174,R]

postulate RSnoc :176: (xs :177: List) -> (x :178: Bool) -> (rxs :179: Rev -180- xs) -> Rev -181- (app -183- xs -182- (one -184- x)) {- constraints apply -}
  [] -> [176,R]

postulate Refl :5: (a :6: Type) -> (x :7: a) -> Id -10- a -9- x -8- x {- constraints apply -}
  [] -> [5,R]

postulate Rev :172: (_ :173: List) -> Type {- constraints apply -}
  [] -> [172,R]

postulate T :78: Bool {- constraints apply -}
  [] -> [78,R]

postulate Type :E: Type

app :88: (xs :89: List) -> (ys :90: List) -> List = \(xs :91: List) (ys :92: List).
  case -93- xs of
    Nil/94
      => ys
    Cons/95 (x :96: Bool) (xs' :97: List)
      => Cons -99- x -98- (app -101- xs' -100- ys) {- constraints apply -}
  [] -> [82,88,89,90,91,92,93,95,96,97,98,99,100,101,R]
  [81] -> [94]
  [94] -> [81]

appAssoc :127: (xs :128: List) -> (ys :129: List) -> (zs :130: List) -> Id -133- List -132- (app -135- (app -137- xs -136- ys) -134- zs) -131- (app -139- xs -138- (app -141- ys -140- zs)) = \(xs :142: List) (ys :143: List) (zs :144: List).
  case -145- xs of
    Nil/146
      => Refl -148- List -147- (app -150- ys -149- zs)
    Cons/151 (x :152: Bool) (xs' :153: List)
      => cong -159- List -158- List -157- (Cons -160- x) -156- (app -162- (app -164- xs' -163- ys) -161- zs) -155- (app -166- xs' -165- (app -168- ys -167- zs)) -154- (appAssoc -171- xs' -170- ys -169- zs) {- constraints apply -}
  [] -> [5,44,45,46,47,48,49,58,59,60,61,62,63,64,71,76,80,82,88,89,90,91,92,93,95,96,97,98,99,100,101,127,128,129,130,142,143,144,145,151,152,153,156,157,158,159,160,161,162,163,164,165,166,R]
  [6] -> [51,72,75,148]
  [7] -> [51,73,74,147,149,150]
  [7,81] -> [94]
  [7,94] -> [81]
  [8] -> [51,52,55,131]
  [9] -> [51,53,56,132]
  [10] -> [51,54,57,133]
  [50] -> [65,155,167,168]
  [50,81] -> [94]
  [50,94] -> [81]
  [51] -> [66,134,135,136,137,138,139,154,169,170,171]
  [51,52] -> [131]
  [51,53] -> [132]
  [51,54] -> [133]
  [51,131] -> [52]
  [51,132] -> [53]
  [51,133] -> [54]
  [51,140] -> [167]
  [51,141] -> [168]
  [51,167] -> [140]
  [51,168] -> [141]
  [52] -> [8,51]
  [53] -> [9,51]
  [54] -> [10,51]
  [55] -> [8,131]
  [56] -> [9,132]
  [57] -> [10,133]
  [65] -> [50]
  [66] -> [51]
  [70] -> [66]
  [72] -> [6,51,70]
  [73] -> [7,51,70]
  [74] -> [7]
  [75] -> [6]
  [81] -> [94,146]
  [94] -> [81]
  [131] -> [8,55]
  [132] -> [9,56]
  [133] -> [10,57]
  [134] -> [149]
  [135] -> [150]
  [140] -> [149,167]
  [141] -> [150,168]
  [146] -> [81]
  [147] -> [7]
  [148] -> [6]
  [149] -> [134,140]
  [150] -> [135,141]
  [154] -> [51]
  [155] -> [50]
  [167] -> [140]
  [168] -> [141]

appRightNeutral :102: (ys :103: List) -> Id -106- List -105- ys -104- (app -108- ys -107- Nil) = \(ys :109: List).
  case -110- ys of
    Nil/111
      => Refl -113- List -112- Nil
    Cons/114 (x :115: Bool) (xs :116: List)
      => cong -122- List -121- List -120- (Cons -123- x) -119- xs -118- (app -125- xs -124- Nil) -117- (appRightNeutral -126- xs) {- constraints apply -}
  [] -> [5,44,45,46,47,48,49,58,59,60,61,62,63,64,71,76,80,82,98,99,102,103,109,110,114,115,116,119,120,121,122,123,R]
  [6] -> [51,72,75,113]
  [7] -> [51,73,74,81,112]
  [8] -> [51,52,55,104]
  [9] -> [51,53,56,105]
  [10] -> [51,54,57,106]
  [50] -> [65,88,89,90,91,92,93,95,96,97,100,101,118]
  [50,81] -> [94]
  [50,89] -> [125]
  [50,90] -> [81,124]
  [50,94] -> [81]
  [50,124] -> [90]
  [50,125] -> [89]
  [51] -> [66,117,126]
  [51,52] -> [104]
  [51,53] -> [105]
  [51,54] -> [106]
  [51,104] -> [52]
  [51,105] -> [53]
  [51,106] -> [54]
  [51,107] -> [124]
  [51,108] -> [125]
  [51,124] -> [107]
  [51,125] -> [108]
  [52] -> [8,51]
  [53] -> [9,51]
  [54] -> [10,51]
  [55] -> [8,104]
  [56] -> [9,105]
  [57] -> [10,106]
  [65] -> [50]
  [66] -> [51]
  [70] -> [66]
  [72] -> [6,51,70]
  [73] -> [7,51,70]
  [74] -> [7]
  [75] -> [6]
  [81] -> [111]
  [100] -> [124]
  [101] -> [125]
  [104] -> [8,55]
  [105] -> [9,56]
  [106] -> [10,57]
  [111] -> [81]
  [112] -> [7]
  [113] -> [6]
  [117] -> [51]
  [118] -> [50]
  [124] -> [100]
  [125] -> [101]

cong :44: (a :45: Type) -> (b :46: Type) -> (f :47: (_ :48: a) -> b) -> (x :49: a) -> (y :50: a) -> (eq :51: Id -54- a -53- x -52- y) -> Id -57- b -56- (f -58- x) -55- (f -59- y) = \(a :60: Type) (b :61: Type) (f :62: (_ :63: a) -> b) (x :64: a) (y :65: a) (eq :66: Id -69- a -68- x -67- y).
  case -70- eq of
    Refl/71 (a' :72: Type) (x' :73: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -75- b -74- (f -76- y) {- constraints apply -}
  [] -> [5,44,45,46,47,49,60,61,62,64,71,R]
  [6] -> [51,72,75]
  [7] -> [51,73,74]
  [7,63] -> [76]
  [7,76] -> [63]
  [8] -> [51,52,55]
  [9] -> [51,53,56]
  [10] -> [51,54,57]
  [48] -> [63]
  [50] -> [65]
  [51] -> [66]
  [52] -> [8,51]
  [53] -> [9,51]
  [54] -> [10,51]
  [55] -> [8]
  [56] -> [9]
  [57] -> [10]
  [58] -> [76]
  [59] -> [76]
  [63] -> [48]
  [65] -> [50]
  [66] -> [51]
  [70] -> [66]
  [72] -> [6,51,70]
  [73] -> [7,51,70]
  [74] -> [7]
  [75] -> [6]
  [76] -> [58,59]

id :11: (a :12: Type) -> (_ :13: a) -> a = (\a :14: Type. (\x :15: a. x)) {- constraints apply -}
  [] -> [11,13,15,R]
  [12] -> [14]
  [14] -> [12]

main :R: List = reverse -273- (Cons -275- T -274- (Cons -277- F -276- (Cons -279- T -278- (Cons -281- F -280- Nil)))) {- constraints apply -}
  [] -> [16,17,18,20,26,29,30,32,42,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,172,174,176,177,178,179,182,183,185,186,187,189,191,192,193,194,196,197,198,199,202,203,204,205,206,208,209,210,211,214,215,216,217,218,219,220,221,222,223,224,225,230,231,232,233,234,235,236,237,238,239,240,242,243,244,245,246,248,251,253,254,255,256,257,258,260,261,263,264,265,267,268,269,270,272,273,274,275,276,277,278,279,280,281,R]
  [5] -> [39]
  [6] -> [22,40]
  [6,22] -> [51,72,75,113,148]
  [7] -> [22,41]
  [7,22] -> [51,73,74,112,147,149,150]
  [8] -> [22,23]
  [8,22] -> [51,52,55,104,131]
  [9] -> [22,24]
  [9,22] -> [51,53,56,105,132]
  [10] -> [22,25]
  [10,22] -> [51,54,57,106,133]
  [19] -> [31,173]
  [21] -> [33,201,213]
  [22] -> [5,34,44,45,46,47,48,49,58,59,60,61,62,63,64,71,76,102,103,107,108,109,110,111,114,115,116,119,120,121,122,123,124,125,127,128,129,130,134,135,136,137,138,139,142,143,144,145,146,151,152,153,156,157,158,159,160,161,162,163,164,165,166,200,212]
  [22,23] -> [104,131]
  [22,24] -> [105,132]
  [22,25] -> [106,133]
  [22,50] -> [65,118,124,125,155,167,168]
  [22,51] -> [66,117,126,134,135,136,137,138,139,154,169,170,171]
  [22,51,52] -> [104,131]
  [22,51,53] -> [105,132]
  [22,51,54] -> [106,133]
  [22,51,104] -> [52]
  [22,51,105] -> [53]
  [22,51,106] -> [54]
  [22,51,107] -> [124]
  [22,51,108] -> [125]
  [22,51,124] -> [107]
  [22,51,125] -> [108]
  [22,51,131] -> [52]
  [22,51,132] -> [53]
  [22,51,133] -> [54]
  [22,51,140] -> [167]
  [22,51,141] -> [168]
  [22,51,167] -> [140]
  [22,51,168] -> [141]
  [22,52] -> [8,51]
  [22,53] -> [9,51]
  [22,54] -> [10,51]
  [22,55] -> [8,104,131]
  [22,56] -> [9,105,132]
  [22,57] -> [10,106,133]
  [22,65] -> [50]
  [22,66] -> [51]
  [22,70] -> [66]
  [22,72] -> [6,51,70]
  [22,73] -> [7,51,70]
  [22,74] -> [7]
  [22,75] -> [6]
  [22,103] -> [207]
  [22,104] -> [8,23,55]
  [22,105] -> [9,24,56]
  [22,106] -> [10,25,57]
  [22,112] -> [7]
  [22,113] -> [6]
  [22,117] -> [51]
  [22,118] -> [50]
  [22,128] -> [228]
  [22,129] -> [227,229]
  [22,130] -> [226]
  [22,131] -> [8,23,55]
  [22,132] -> [9,24,56]
  [22,133] -> [10,25,57]
  [22,134] -> [149]
  [22,135] -> [150]
  [22,140] -> [149,167]
  [22,141] -> [150,168]
  [22,147] -> [7]
  [22,148] -> [6]
  [22,149] -> [134,140]
  [22,150] -> [135,141]
  [22,154] -> [51]
  [22,155] -> [50]
  [22,167] -> [140]
  [22,168] -> [141]
  [22,207] -> [103]
  [22,226] -> [130]
  [22,227] -> [129]
  [22,228] -> [128]
  [23] -> [8,22]
  [24] -> [9,22]
  [25] -> [10,22]
  [27] -> [43,190,195]
  [28] -> [43,190]
  [31] -> [19]
  [33] -> [21]
  [34] -> [22]
  [38] -> [34]
  [39] -> [5]
  [40] -> [6,22,38]
  [41] -> [7,22,38]
  [43] -> [27,28]
  [173] -> [19]
  [175] -> [188,249]
  [180] -> [195,259]
  [181] -> [188,249]
  [188] -> [175,181,195]
  [190] -> [27,28,241]
  [195] -> [27,180,188]
  [200] -> [22]
  [201] -> [21]
  [212] -> [22]
  [213] -> [21]
  [241] -> [190,249]
  [247] -> [250,266,271]
  [249] -> [175,181,241,259]
  [250] -> [247]
  [259] -> [180,249]
  [266] -> [247]
  [271] -> [247]

one :83: (x :84: Bool) -> List = (\x :85: Bool. Cons -87- x -86- Nil) {- constraints apply -}
  [] -> [81,82,83,84,85,86,87,R]

rev :239: (xs :240: List) -> Rev -241- xs = (\xs :242: List. rev' -245- Nil -244- RNil -243- xs) {- constraints apply -}
  [] -> [16,17,18,20,26,29,30,32,42,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,172,174,176,182,183,185,186,187,189,191,192,193,194,196,197,198,199,202,203,204,205,206,208,209,210,211,214,215,216,217,218,219,220,221,222,223,224,225,230,231,232,233,234,235,239,240,242,243,244,245,R]
  [5] -> [39]
  [6] -> [22,40]
  [6,22] -> [51,72,75,113,148]
  [7] -> [22,41]
  [7,22] -> [51,73,74,112,147,149,150]
  [8] -> [22,23]
  [8,22] -> [51,52,55,104,131]
  [9] -> [22,24]
  [9,22] -> [51,53,56,105,132]
  [10] -> [22,25]
  [10,22] -> [51,54,57,106,133]
  [19] -> [31,173]
  [21] -> [33,201,213]
  [22] -> [5,34,44,45,46,47,48,49,58,59,60,61,62,63,64,71,76,102,103,107,108,109,110,111,114,115,116,119,120,121,122,123,124,125,127,128,129,130,134,135,136,137,138,139,142,143,144,145,146,151,152,153,156,157,158,159,160,161,162,163,164,165,166,200,212]
  [22,23] -> [104,131]
  [22,24] -> [105,132]
  [22,25] -> [106,133]
  [22,50] -> [65,118,124,125,155,167,168]
  [22,51] -> [66,117,126,134,135,136,137,138,139,154,169,170,171]
  [22,51,52] -> [104,131]
  [22,51,53] -> [105,132]
  [22,51,54] -> [106,133]
  [22,51,104] -> [52]
  [22,51,105] -> [53]
  [22,51,106] -> [54]
  [22,51,107] -> [124]
  [22,51,108] -> [125]
  [22,51,124] -> [107]
  [22,51,125] -> [108]
  [22,51,131] -> [52]
  [22,51,132] -> [53]
  [22,51,133] -> [54]
  [22,51,140] -> [167]
  [22,51,141] -> [168]
  [22,51,167] -> [140]
  [22,51,168] -> [141]
  [22,52] -> [8,51]
  [22,53] -> [9,51]
  [22,54] -> [10,51]
  [22,55] -> [8,104,131]
  [22,56] -> [9,105,132]
  [22,57] -> [10,106,133]
  [22,65] -> [50]
  [22,66] -> [51]
  [22,70] -> [66]
  [22,72] -> [6,51,70]
  [22,73] -> [7,51,70]
  [22,74] -> [7]
  [22,75] -> [6]
  [22,103] -> [207]
  [22,104] -> [8,23,55]
  [22,105] -> [9,24,56]
  [22,106] -> [10,25,57]
  [22,112] -> [7]
  [22,113] -> [6]
  [22,117] -> [51]
  [22,118] -> [50]
  [22,128] -> [228]
  [22,129] -> [227,229]
  [22,130] -> [226]
  [22,131] -> [8,23,55]
  [22,132] -> [9,24,56]
  [22,133] -> [10,25,57]
  [22,134] -> [149]
  [22,135] -> [150]
  [22,140] -> [149,167]
  [22,141] -> [150,168]
  [22,147] -> [7]
  [22,148] -> [6]
  [22,149] -> [134,140]
  [22,150] -> [135,141]
  [22,154] -> [51]
  [22,155] -> [50]
  [22,167] -> [140]
  [22,168] -> [141]
  [22,207] -> [103]
  [22,226] -> [130]
  [22,227] -> [129]
  [22,228] -> [128]
  [23] -> [8,22]
  [24] -> [9,22]
  [25] -> [10,22]
  [27] -> [43,190,195]
  [28] -> [43,190]
  [31] -> [19]
  [33] -> [21]
  [34] -> [22]
  [38] -> [34]
  [39] -> [5]
  [40] -> [6,22,38]
  [41] -> [7,22,38]
  [43] -> [27,28]
  [173] -> [19]
  [175] -> [188]
  [177] -> [238]
  [178] -> [237]
  [179] -> [236]
  [179,180] -> [195]
  [179,195] -> [180]
  [181] -> [188]
  [188] -> [175,181,195]
  [190] -> [27,28,241]
  [195] -> [27,188]
  [200] -> [22]
  [201] -> [21]
  [212] -> [22]
  [213] -> [21]
  [236] -> [179]
  [237] -> [178]
  [238] -> [177]
  [241] -> [190]

rev' :185: (xs :186: List) -> (rxs :187: Rev -188- xs) -> (ys :189: List) -> Rev -190- (app -192- xs -191- ys) = \(xs :193: List) (rxs :194: Rev -195- xs) (ys :196: List).
  case -197- ys of
    Nil/198
      => subst -204- List -203- Rev -202- xs -201- (app -206- xs -205- Nil) -200- (appRightNeutral -207- xs) -199- rxs
    Cons/208 (y :209: Bool) (ys' :210: List)
      => subst -216- List -215- Rev -214- (app -218- (app -220- xs -219- (one -221- y)) -217- ys') -213- (app -223- xs -222- (Cons -225- y -224- ys')) -212- (appAssoc -228- xs -227- (one -229- y) -226- ys') -211- (rev' -232- (app -234- xs -233- (one -235- y)) -231- (RSnoc -238- xs -237- y -236- rxs) -230- ys') {- constraints apply -}
  [] -> [16,17,18,20,26,29,30,32,42,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,172,176,182,183,185,186,187,189,191,192,193,194,196,197,198,199,202,203,204,205,206,208,209,210,211,214,215,216,217,218,219,220,221,222,223,224,225,230,231,232,233,234,235,R]
  [5] -> [39]
  [6] -> [22,40]
  [6,22] -> [51,72,75,113,148]
  [7] -> [22,41]
  [7,22] -> [51,73,74,112,147,149,150]
  [8] -> [22,23]
  [8,22] -> [51,52,55,104,131]
  [9] -> [22,24]
  [9,22] -> [51,53,56,105,132]
  [10] -> [22,25]
  [10,22] -> [51,54,57,106,133]
  [19] -> [31,173]
  [21] -> [33,201,213]
  [22] -> [5,34,44,45,46,47,48,49,58,59,60,61,62,63,64,71,76,102,103,107,108,109,110,111,114,115,116,119,120,121,122,123,124,125,127,128,129,130,134,135,136,137,138,139,142,143,144,145,146,151,152,153,156,157,158,159,160,161,162,163,164,165,166,200,212]
  [22,23] -> [104,131]
  [22,24] -> [105,132]
  [22,25] -> [106,133]
  [22,50] -> [65,118,124,125,155,167,168]
  [22,51] -> [66,117,126,134,135,136,137,138,139,154,169,170,171]
  [22,51,52] -> [104,131]
  [22,51,53] -> [105,132]
  [22,51,54] -> [106,133]
  [22,51,104] -> [52]
  [22,51,105] -> [53]
  [22,51,106] -> [54]
  [22,51,107] -> [124]
  [22,51,108] -> [125]
  [22,51,124] -> [107]
  [22,51,125] -> [108]
  [22,51,131] -> [52]
  [22,51,132] -> [53]
  [22,51,133] -> [54]
  [22,51,140] -> [167]
  [22,51,141] -> [168]
  [22,51,167] -> [140]
  [22,51,168] -> [141]
  [22,52] -> [8,51]
  [22,53] -> [9,51]
  [22,54] -> [10,51]
  [22,55] -> [8,104,131]
  [22,56] -> [9,105,132]
  [22,57] -> [10,106,133]
  [22,65] -> [50]
  [22,66] -> [51]
  [22,70] -> [66]
  [22,72] -> [6,51,70]
  [22,73] -> [7,51,70]
  [22,74] -> [7]
  [22,75] -> [6]
  [22,103] -> [207]
  [22,104] -> [8,23,55]
  [22,105] -> [9,24,56]
  [22,106] -> [10,25,57]
  [22,112] -> [7]
  [22,113] -> [6]
  [22,117] -> [51]
  [22,118] -> [50]
  [22,128] -> [228]
  [22,129] -> [227,229]
  [22,130] -> [226]
  [22,131] -> [8,23,55]
  [22,132] -> [9,24,56]
  [22,133] -> [10,25,57]
  [22,134] -> [149]
  [22,135] -> [150]
  [22,140] -> [149,167]
  [22,141] -> [150,168]
  [22,147] -> [7]
  [22,148] -> [6]
  [22,149] -> [134,140]
  [22,150] -> [135,141]
  [22,154] -> [51]
  [22,155] -> [50]
  [22,167] -> [140]
  [22,168] -> [141]
  [22,207] -> [103]
  [22,226] -> [130]
  [22,227] -> [129]
  [22,228] -> [128]
  [23] -> [8,22]
  [24] -> [9,22]
  [25] -> [10,22]
  [27] -> [43,190,195]
  [28] -> [43,190]
  [31] -> [19]
  [33] -> [21]
  [34] -> [22]
  [38] -> [34]
  [39] -> [5]
  [40] -> [6,22,38]
  [41] -> [7,22,38]
  [43] -> [27,28]
  [173] -> [19]
  [177] -> [238]
  [178] -> [237]
  [179] -> [236]
  [179,180] -> [195]
  [179,195] -> [180]
  [181] -> [188]
  [188] -> [181,195]
  [190] -> [27,28]
  [195] -> [27,188]
  [200] -> [22]
  [201] -> [21]
  [212] -> [22]
  [213] -> [21]
  [236] -> [179]
  [237] -> [178]
  [238] -> [177]

reverse :267: (xs :268: List) -> List = (\xs :269: List. reverse' -271- xs -270- (rev -272- xs)) {- constraints apply -}
  [] -> [16,17,18,20,26,29,30,32,42,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,172,174,176,177,178,179,182,183,185,186,187,189,191,192,193,194,196,197,198,199,202,203,204,205,206,208,209,210,211,214,215,216,217,218,219,220,221,222,223,224,225,230,231,232,233,234,235,236,237,238,239,240,242,243,244,245,246,248,251,253,254,255,256,257,258,260,261,263,264,265,267,268,269,270,272,R]
  [5] -> [39]
  [6] -> [22,40]
  [6,22] -> [51,72,75,113,148]
  [7] -> [22,41]
  [7,22] -> [51,73,74,112,147,149,150]
  [8] -> [22,23]
  [8,22] -> [51,52,55,104,131]
  [9] -> [22,24]
  [9,22] -> [51,53,56,105,132]
  [10] -> [22,25]
  [10,22] -> [51,54,57,106,133]
  [19] -> [31,173]
  [21] -> [33,201,213]
  [22] -> [5,34,44,45,46,47,48,49,58,59,60,61,62,63,64,71,76,102,103,107,108,109,110,111,114,115,116,119,120,121,122,123,124,125,127,128,129,130,134,135,136,137,138,139,142,143,144,145,146,151,152,153,156,157,158,159,160,161,162,163,164,165,166,200,212]
  [22,23] -> [104,131]
  [22,24] -> [105,132]
  [22,25] -> [106,133]
  [22,50] -> [65,118,124,125,155,167,168]
  [22,51] -> [66,117,126,134,135,136,137,138,139,154,169,170,171]
  [22,51,52] -> [104,131]
  [22,51,53] -> [105,132]
  [22,51,54] -> [106,133]
  [22,51,104] -> [52]
  [22,51,105] -> [53]
  [22,51,106] -> [54]
  [22,51,107] -> [124]
  [22,51,108] -> [125]
  [22,51,124] -> [107]
  [22,51,125] -> [108]
  [22,51,131] -> [52]
  [22,51,132] -> [53]
  [22,51,133] -> [54]
  [22,51,140] -> [167]
  [22,51,141] -> [168]
  [22,51,167] -> [140]
  [22,51,168] -> [141]
  [22,52] -> [8,51]
  [22,53] -> [9,51]
  [22,54] -> [10,51]
  [22,55] -> [8,104,131]
  [22,56] -> [9,105,132]
  [22,57] -> [10,106,133]
  [22,65] -> [50]
  [22,66] -> [51]
  [22,70] -> [66]
  [22,72] -> [6,51,70]
  [22,73] -> [7,51,70]
  [22,74] -> [7]
  [22,75] -> [6]
  [22,103] -> [207]
  [22,104] -> [8,23,55]
  [22,105] -> [9,24,56]
  [22,106] -> [10,25,57]
  [22,112] -> [7]
  [22,113] -> [6]
  [22,117] -> [51]
  [22,118] -> [50]
  [22,128] -> [228]
  [22,129] -> [227,229]
  [22,130] -> [226]
  [22,131] -> [8,23,55]
  [22,132] -> [9,24,56]
  [22,133] -> [10,25,57]
  [22,134] -> [149]
  [22,135] -> [150]
  [22,140] -> [149,167]
  [22,141] -> [150,168]
  [22,147] -> [7]
  [22,148] -> [6]
  [22,149] -> [134,140]
  [22,150] -> [135,141]
  [22,154] -> [51]
  [22,155] -> [50]
  [22,167] -> [140]
  [22,168] -> [141]
  [22,207] -> [103]
  [22,226] -> [130]
  [22,227] -> [129]
  [22,228] -> [128]
  [23] -> [8,22]
  [24] -> [9,22]
  [25] -> [10,22]
  [27] -> [43,190,195]
  [28] -> [43,190]
  [31] -> [19]
  [33] -> [21]
  [34] -> [22]
  [38] -> [34]
  [39] -> [5]
  [40] -> [6,22,38]
  [41] -> [7,22,38]
  [43] -> [27,28]
  [173] -> [19]
  [175] -> [188,249]
  [180] -> [195,259]
  [181] -> [188,249]
  [188] -> [175,181,195]
  [190] -> [27,28,241]
  [195] -> [27,180,188]
  [200] -> [22]
  [201] -> [21]
  [212] -> [22]
  [213] -> [21]
  [241] -> [190,249]
  [247] -> [250,266,271]
  [249] -> [175,181,241,259]
  [250] -> [247]
  [259] -> [180,249]
  [266] -> [247]
  [271] -> [247]

reverse' :246: (xs :247: List) -> (rxs :248: Rev -249- xs) -> List = \(xs :250: List) (rxs :251: Rev -252- xs).
  case -253- rxs of
    RNil/254
      | xs = Nil
      => Nil
    RSnoc/255 (xs' :256: List) (x :257: Bool) (rxs' :258: Rev -259- xs')
      | xs = app -261- xs' -260- (one -262- x)
      => Cons -264- x -263- (reverse' -266- xs' -265- rxs') {- constraints apply -}
  [] -> [81,82,177,178,179,246,248,251,253,256,257,258,263,264,265,R]
  [86] -> [86]
  [87] -> [87]
  [174] -> [254]
  [175] -> [249]
  [176] -> [255]
  [180] -> [259]
  [181] -> [249]
  [182] -> [260]
  [183] -> [261]
  [247] -> [250,266]
  [249] -> [175,181,259]
  [250] -> [247]
  [254] -> [174]
  [255] -> [176]
  [259] -> [180,249]
  [260] -> [182]
  [261] -> [183]
  [266] -> [247]

subst :16: (a :17: Type) -> (P :18: (_ :19: a) -> Type) -> (x :20: a) -> (y :21: a) -> (eq :22: Id -25- a -24- x -23- y) -> (_ :26: P -27- x) -> P -28- y = \(a :29: Type) (P :30: (_ :31: a) -> Type) (x :32: a) (y :33: a) (eq :34: Id -37- a -36- x -35- y).
  case -38- eq of
    Refl/39 (a' :40: Type) (x' :41: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :42: P -43- x'. w) {- constraints apply -}
  [] -> [16,17,18,20,26,29,30,32,42,R]
  [5] -> [39]
  [6] -> [22,40]
  [7] -> [22,41]
  [8] -> [22,23]
  [9] -> [22,24]
  [10] -> [22,25]
  [19] -> [31]
  [21] -> [33]
  [22] -> [34]
  [23] -> [8,22]
  [24] -> [9,22]
  [25] -> [10,22]
  [27] -> [43]
  [28] -> [43]
  [31] -> [19]
  [33] -> [21]
  [34] -> [22]
  [38] -> [34]
  [39] -> [5]
  [40] -> [6,22,38]
  [41] -> [7,22,38]
  [43] -> [27,28]


### Constraints ###

[] -> [16,17,18,20,26,29,30,32,42,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,172,174,176,177,178,179,182,183,185,186,187,189,191,192,193,194,196,197,198,199,202,203,204,205,206,208,209,210,211,214,215,216,217,218,219,220,221,222,223,224,225,230,231,232,233,234,235,236,237,238,239,240,242,243,244,245,246,248,251,253,254,255,256,257,258,260,261,263,264,265,267,268,269,270,272,273,274,275,276,277,278,279,280,281,R]
[5] -> [39]
[6] -> [22,40]
[6,22] -> [51,72,75,113,148]
[7] -> [22,41]
[7,22] -> [51,73,74,112,147,149,150]
[8] -> [22,23]
[8,22] -> [51,52,55,104,131]
[9] -> [22,24]
[9,22] -> [51,53,56,105,132]
[10] -> [22,25]
[10,22] -> [51,54,57,106,133]
[19] -> [31,173]
[21] -> [33,201,213]
[22] -> [5,34,44,45,46,47,48,49,58,59,60,61,62,63,64,71,76,102,103,107,108,109,110,111,114,115,116,119,120,121,122,123,124,125,127,128,129,130,134,135,136,137,138,139,142,143,144,145,146,151,152,153,156,157,158,159,160,161,162,163,164,165,166,200,212]
[22,23] -> [104,131]
[22,24] -> [105,132]
[22,25] -> [106,133]
[22,50] -> [65,118,124,125,155,167,168]
[22,51] -> [66,117,126,134,135,136,137,138,139,154,169,170,171]
[22,51,52] -> [104,131]
[22,51,53] -> [105,132]
[22,51,54] -> [106,133]
[22,51,104] -> [52]
[22,51,105] -> [53]
[22,51,106] -> [54]
[22,51,107] -> [124]
[22,51,108] -> [125]
[22,51,124] -> [107]
[22,51,125] -> [108]
[22,51,131] -> [52]
[22,51,132] -> [53]
[22,51,133] -> [54]
[22,51,140] -> [167]
[22,51,141] -> [168]
[22,51,167] -> [140]
[22,51,168] -> [141]
[22,52] -> [8,51]
[22,53] -> [9,51]
[22,54] -> [10,51]
[22,55] -> [8,104,131]
[22,56] -> [9,105,132]
[22,57] -> [10,106,133]
[22,65] -> [50]
[22,66] -> [51]
[22,70] -> [66]
[22,72] -> [6,51,70]
[22,73] -> [7,51,70]
[22,74] -> [7]
[22,75] -> [6]
[22,103] -> [207]
[22,104] -> [8,23,55]
[22,105] -> [9,24,56]
[22,106] -> [10,25,57]
[22,112] -> [7]
[22,113] -> [6]
[22,117] -> [51]
[22,118] -> [50]
[22,128] -> [228]
[22,129] -> [227,229]
[22,130] -> [226]
[22,131] -> [8,23,55]
[22,132] -> [9,24,56]
[22,133] -> [10,25,57]
[22,134] -> [149]
[22,135] -> [150]
[22,140] -> [149,167]
[22,141] -> [150,168]
[22,147] -> [7]
[22,148] -> [6]
[22,149] -> [134,140]
[22,150] -> [135,141]
[22,154] -> [51]
[22,155] -> [50]
[22,167] -> [140]
[22,168] -> [141]
[22,207] -> [103]
[22,226] -> [130]
[22,227] -> [129]
[22,228] -> [128]
[23] -> [8,22]
[24] -> [9,22]
[25] -> [10,22]
[27] -> [43,190,195]
[28] -> [43,190]
[31] -> [19]
[33] -> [21]
[34] -> [22]
[38] -> [34]
[39] -> [5]
[40] -> [6,22,38]
[41] -> [7,22,38]
[43] -> [27,28]
[173] -> [19]
[175] -> [188,249]
[180] -> [195,259]
[181] -> [188,249]
[188] -> [175,181,195]
[190] -> [27,28,241]
[195] -> [27,180,188]
[200] -> [22]
[201] -> [21]
[212] -> [22]
[213] -> [21]
[241] -> [190,249]
[247] -> [250,266,271]
[249] -> [175,181,241,259]
[250] -> [247]
[259] -> [180,249]
[266] -> [247]
[271] -> [247]

### Solution ###

[16,17,18,20,26,29,30,32,42,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,172,174,176,177,178,179,182,183,185,186,187,189,191,192,193,194,196,197,198,199,202,203,204,205,206,208,209,210,211,214,215,216,217,218,219,220,221,222,223,224,225,230,231,232,233,234,235,236,237,238,239,240,242,243,244,245,246,248,251,253,254,255,256,257,258,260,261,263,264,265,267,268,269,270,272,273,274,275,276,277,278,279,280,281,R]

### Annotated ###

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x

id :E: (a :E: Type) -> (_ :E: a) -> a = (\a :E: Type. (\x :E: a. x))

subst :R: (a :R: Type) -> (P :R: (_ :E: a) -> Type) -> (x :R: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (_ :R: P -E- x) -> P -E- y = \(a :R: Type) (P :R: (_ :E: a) -> Type) (x :R: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl/E (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :R: P -E- x'. w)

cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_ :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) = \(a :E: Type) (b :E: Type) (f :E: (_ :E: a) -> b) (x :E: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl/E (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -E- b -E- (f -E- y)

postulate Bool :E: Type

postulate T :R: Bool

postulate F :R: Bool

postulate List :R: Type

postulate Nil :R: List

postulate Cons :R: (x :R: Bool) -> (xs :R: List) -> List

one :R: (x :R: Bool) -> List = (\x :R: Bool. Cons -R- x -R- Nil)

app :R: (xs :R: List) -> (ys :R: List) -> List = \(xs :R: List) (ys :R: List).
  case -R- xs of
    Nil/R
      => ys
    Cons/R (x :R: Bool) (xs' :R: List)
      => Cons -R- x -R- (app -R- xs' -R- ys)

appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) = \(ys :E: List).
  case -E- ys of
    Nil/E
      => Refl -E- List -E- Nil
    Cons/E (x :E: Bool) (xs :E: List)
      => cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)

appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) = \(xs :E: List) (ys :E: List) (zs :E: List).
  case -E- xs of
    Nil/E
      => Refl -E- List -E- (app -E- ys -E- zs)
    Cons/E (x :E: Bool) (xs' :E: List)
      => cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs' -E- ys) -E- zs) -E- (app -E- xs' -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs' -E- ys -E- zs)

postulate Rev :R: (_ :E: List) -> Type

postulate RNil :R: Rev -E- Nil

postulate RSnoc :R: (xs :R: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -R- xs -R- (one -E- x))

rev' :R: (xs :R: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -R- xs -R- ys) = \(xs :R: List) (rxs :R: Rev -E- xs) (ys :R: List).
  case -R- ys of
    Nil/R
      => subst -R- List -R- Rev -R- xs -E- (app -R- xs -R- Nil) -E- (appRightNeutral -E- xs) -R- rxs
    Cons/R (y :R: Bool) (ys' :R: List)
      => subst -R- List -R- Rev -R- (app -R- (app -R- xs -R- (one -R- y)) -R- ys') -E- (app -R- xs -R- (Cons -R- y -R- ys')) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys') -R- (rev' -R- (app -R- xs -R- (one -R- y)) -R- (RSnoc -R- xs -R- y -R- rxs) -R- ys')

rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -R- Nil -R- RNil -R- xs)

reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List = \(xs :E: List) (rxs :R: Rev -E- xs).
  case -R- rxs of
    RNil/R
      | xs = Nil
      => Nil
    RSnoc/R (xs' :R: List) (x :R: Bool) (rxs' :R: Rev -E- xs')
      | xs = app -R- xs' -R- (one -E- x)
      => Cons -R- x -R- (reverse' -E- xs' -R- rxs')

reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))

main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))

### Specialised ###

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x

id :E: (a :E: Type) -> (_ :E: a) -> a = (\a :E: Type. (\x :E: a. x))

subst :R: (a :R: Type) -> (P :R: (_ :E: a) -> Type) -> (x :R: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (_ :R: P -E- x) -> P -E- y = \(a :R: Type) (P :R: (_ :E: a) -> Type) (x :R: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl/E (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :R: P -E- x'. w)

cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_ :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) = \(a :E: Type) (b :E: Type) (f :E: (_ :E: a) -> b) (x :E: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl/E (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -E- b -E- (f -E- y)

postulate Bool :E: Type

postulate T :R: Bool

postulate F :R: Bool

postulate List :R: Type

postulate Nil :R: List

postulate Cons :R: (x :R: Bool) -> (xs :R: List) -> List

one :R: (x :R: Bool) -> List = (\x :R: Bool. Cons -R- x -R- Nil)

app :R: (xs :R: List) -> (ys :R: List) -> List = \(xs :R: List) (ys :R: List).
  case -R- xs of
    Nil/R
      => ys
    Cons/R (x :R: Bool) (xs' :R: List)
      => Cons -R- x -R- (app -R- xs' -R- ys)

appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) = \(ys :E: List).
  case -E- ys of
    Nil/E
      => Refl -E- List -E- Nil
    Cons/E (x :E: Bool) (xs :E: List)
      => cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)

appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) = \(xs :E: List) (ys :E: List) (zs :E: List).
  case -E- xs of
    Nil/E
      => Refl -E- List -E- (app -E- ys -E- zs)
    Cons/E (x :E: Bool) (xs' :E: List)
      => cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs' -E- ys) -E- zs) -E- (app -E- xs' -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs' -E- ys -E- zs)

postulate Rev :R: (_ :E: List) -> Type

postulate RNil :R: Rev -E- Nil

postulate RSnoc :R: (xs :R: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -R- xs -R- (one -E- x))

rev' :R: (xs :R: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -R- xs -R- ys) = \(xs :R: List) (rxs :R: Rev -E- xs) (ys :R: List).
  case -R- ys of
    Nil/R
      => subst -R- List -R- Rev -R- xs -E- (app -R- xs -R- Nil) -E- (appRightNeutral -E- xs) -R- rxs
    Cons/R (y :R: Bool) (ys' :R: List)
      => subst -R- List -R- Rev -R- (app -R- (app -R- xs -R- (one -R- y)) -R- ys') -E- (app -R- xs -R- (Cons -R- y -R- ys')) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys') -R- (rev' -R- (app -R- xs -R- (one -R- y)) -R- (RSnoc -R- xs -R- y -R- rxs) -R- ys')

rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -R- Nil -R- RNil -R- xs)

reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List = \(xs :E: List) (rxs :R: Rev -E- xs).
  case -R- rxs of
    RNil/R
      | xs = Nil
      => Nil
    RSnoc/R (xs' :R: List) (x :R: Bool) (rxs' :R: Rev -E- xs')
      | xs = app -R- xs' -R- (one -E- x)
      => Cons -R- x -R- (reverse' -E- xs' -R- rxs')

reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))

main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))

### Final annotation ###

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x

id :E: (a :E: Type) -> (_ :E: a) -> a = (\a :E: Type. (\x :E: a. x))

subst :R: (a :R: Type) -> (P :R: (_ :E: a) -> Type) -> (x :R: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (_ :R: P -E- x) -> P -E- y = \(a :R: Type) (P :R: (_ :E: a) -> Type) (x :R: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl/E (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :R: P -E- x'. w)

cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_ :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) = \(a :E: Type) (b :E: Type) (f :E: (_ :E: a) -> b) (x :E: a) (y :E: a) (eq :E: Id -E- a -E- x -E- y).
  case -E- eq of
    Refl/E (a' :E: Type) (x' :E: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -E- b -E- (f -E- y)

postulate Bool :E: Type

postulate T :R: Bool

postulate F :R: Bool

postulate List :R: Type

postulate Nil :R: List

postulate Cons :R: (x :R: Bool) -> (xs :R: List) -> List

one :R: (x :R: Bool) -> List = (\x :R: Bool. Cons -R- x -R- Nil)

app :R: (xs :R: List) -> (ys :R: List) -> List = \(xs :R: List) (ys :R: List).
  case -R- xs of
    Nil/R
      => ys
    Cons/R (x :R: Bool) (xs' :R: List)
      => Cons -R- x -R- (app -R- xs' -R- ys)

appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) = \(ys :E: List).
  case -E- ys of
    Nil/E
      => Refl -E- List -E- Nil
    Cons/E (x :E: Bool) (xs :E: List)
      => cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)

appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) = \(xs :E: List) (ys :E: List) (zs :E: List).
  case -E- xs of
    Nil/E
      => Refl -E- List -E- (app -E- ys -E- zs)
    Cons/E (x :E: Bool) (xs' :E: List)
      => cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs' -E- ys) -E- zs) -E- (app -E- xs' -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs' -E- ys -E- zs)

postulate Rev :R: (_ :E: List) -> Type

postulate RNil :R: Rev -E- Nil

postulate RSnoc :R: (xs :R: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -R- xs -R- (one -E- x))

rev' :R: (xs :R: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -R- xs -R- ys) = \(xs :R: List) (rxs :R: Rev -E- xs) (ys :R: List).
  case -R- ys of
    Nil/R
      => subst -R- List -R- Rev -R- xs -E- (app -R- xs -R- Nil) -E- (appRightNeutral -E- xs) -R- rxs
    Cons/R (y :R: Bool) (ys' :R: List)
      => subst -R- List -R- Rev -R- (app -R- (app -R- xs -R- (one -R- y)) -R- ys') -E- (app -R- xs -R- (Cons -R- y -R- ys')) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys') -R- (rev' -R- (app -R- xs -R- (one -R- y)) -R- (RSnoc -R- xs -R- y -R- rxs) -R- ys')

rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -R- Nil -R- RNil -R- xs)

reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List = \(xs :E: List) (rxs :R: Rev -E- xs).
  case -R- rxs of
    RNil/R
      | xs = Nil
      => Nil
    RSnoc/R (xs' :R: List) (x :R: Bool) (rxs' :R: Rev -E- xs')
      | xs = app -R- xs' -R- (one -E- x)
      => Cons -R- x -R- (reverse' -E- xs' -R- rxs')

reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))

main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))

### Verification ###

Verification successful.

### Pruned ###

subst = \a P x.
  (\w. w)

postulate T

postulate F

postulate List

postulate Nil

postulate Cons

one = (\x. Cons x Nil)

app = \xs ys.
  case xs of
    Nil
      => ys
    Cons x xs'
      => Cons x (app xs' ys)

postulate Rev

postulate RNil

postulate RSnoc

rev' = \xs rxs ys.
  case ys of
    Nil
      => subst List Rev xs rxs
    Cons y ys'
      => subst List Rev (app (app xs (one y)) ys') (rev' (app xs (one y)) (RSnoc xs y rxs) ys')

rev = (\xs. rev' Nil RNil xs)

reverse' = \rxs.
  case rxs of
    RNil
      => Nil
    RSnoc xs' x rxs'
      => Cons x (reverse' rxs')

reverse = (\xs. reverse' (rev xs))

main = reverse (Cons T (Cons F (Cons T (Cons F Nil))))

### Normal forms ###

unerased:
  Cons F (Cons T (Cons F (Cons T Nil)))
erased:
  Cons F (Cons T (Cons F (Cons T Nil)))
