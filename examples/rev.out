-- vim: ft=agda

### Desugared ###

postulate Id : (a : Type) -> (x : a) -> (y : a) -> Type

postulate Refl : (a : Type) -> (x : a) -> Id a x x

id : (a : Type) -> (_ : a) -> a = (\a : Type. (\x : a. x))

subst : (a : Type) -> (P : (_ : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (_ : P x) -> P y = \(a : Type) (P : (_ : a) -> Type) (x : a) (y : a) (eq : Id a x y).
  case eq of
    Refl (a' : Type) (x' : a)
      | a' = a
      | x' = x
      | y = x
      => (\w : P x'. w)

cong : (a : Type) -> (b : Type) -> (f : (_ : a) -> b) -> (x : a) -> (y : a) -> (eq : Id a x y) -> Id b (f x) (f y) = \(a : Type) (b : Type) (f : (_ : a) -> b) (x : a) (y : a) (eq : Id a x y).
  case eq of
    Refl (a' : Type) (x' : a)
      | a' = a
      | x' = x
      | y = x
      => Refl b (f y)

postulate Bool : Type

postulate T : Bool

postulate F : Bool

postulate List : Type

postulate Nil : List

postulate Cons : (x  -R-  Bool) -> (xs  -R-  List) -> List

one : (x : Bool) -> List = (\x : Bool. Cons x Nil)

app : (xs : List) -> (ys : List) -> List = \(xs : List) (ys : List).
  case xs of
    Nil
      => ys
    Cuckoo
      => Nil
    Cons (x : Bool) (xs' : List)
      => Cons x (app xs' ys)

appRightNeutral : (ys : List) -> Id List ys (app ys Nil) = \(ys : List).
  case ys of
    Nil
      => Refl List Nil
    Cons (x : Bool) (xs : List)
      => cong List List (Cons x) xs (app xs Nil) (appRightNeutral xs)

appAssoc : (xs : List) -> (ys : List) -> (zs : List) -> Id List (app (app xs ys) zs) (app xs (app ys zs)) = \(xs : List) (ys : List) (zs : List).
  case xs of
    Nil
      => Refl List (app ys zs)
    Cons (x : Bool) (xs' : List)
      => cong List List (Cons x) (app (app xs' ys) zs) (app xs' (app ys zs)) (appAssoc xs' ys zs)

postulate Rev : (_ : List) -> Type

postulate RNil : Rev Nil

postulate RSnoc : (xs : List) -> (x : Bool) -> (rxs : Rev xs) -> Rev (app xs (one x))

rev' : (xs : List) -> (rxs : Rev xs) -> (ys : List) -> Rev (app xs ys) = \(xs : List) (rxs : Rev xs) (ys : List).
  case ys of
    Nil
      => subst List Rev xs (app xs Nil) (appRightNeutral xs) rxs
    Cons (y : Bool) (ys' : List)
      => subst List Rev (app (app xs (one y)) ys') (app xs (Cons y ys')) (appAssoc xs (one y) ys') (rev' (app xs (one y)) (RSnoc xs y rxs) ys')

rev : (xs : List) -> Rev xs = (\xs : List. rev' Nil RNil xs)

reverse' : (xs : List) -> (rxs : Rev xs) -> List = \(xs : List) (rxs : Rev xs).
  case rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' : List) (x : Bool) (rxs' : Rev xs')
      | xs = app xs' (one x)
      => Cons x (reverse' xs' rxs')

reverse : (xs : List) -> List = (\xs : List. reverse' xs (rev xs))

main  -R-  List = reverse (Cons T (Cons F (Cons T (Cons F Nil))))

### Metaified ###

postulate Id :?1: (a :?2: Type) -> (x :?3: a) -> (y :?4: a) -> Type

postulate Refl :?5: (a :?6: Type) -> (x :?7: a) -> Id -?10- a -?9- x -?8- x

id :?11: (a :?12: Type) -> (_ :?13: a) -> a = (\a :?14: Type. (\x :?15: a. x))

subst :?16: (a :?17: Type) -> (P :?18: (_ :?19: a) -> Type) -> (x :?20: a) -> (y :?21: a) -> (eq :?22: Id -?25- a -?24- x -?23- y) -> (_ :?26: P -?27- x) -> P -?28- y = \(a :?29: Type) (P :?30: (_ :?31: a) -> Type) (x :?32: a) (y :?33: a) (eq :?34: Id -?37- a -?36- x -?35- y).
  case -?38- eq of
    Refl (a' :?39: Type) (x' :?40: a)
      | a' = a
      | x' = x
      | y = x
      => (\w :?41: P -?42- x'. w)

cong :?43: (a :?44: Type) -> (b :?45: Type) -> (f :?46: (_ :?47: a) -> b) -> (x :?48: a) -> (y :?49: a) -> (eq :?50: Id -?53- a -?52- x -?51- y) -> Id -?56- b -?55- (f -?57- x) -?54- (f -?58- y) = \(a :?59: Type) (b :?60: Type) (f :?61: (_ :?62: a) -> b) (x :?63: a) (y :?64: a) (eq :?65: Id -?68- a -?67- x -?66- y).
  case -?69- eq of
    Refl (a' :?70: Type) (x' :?71: a)
      | a' = a
      | x' = x
      | y = x
      => Refl -?73- b -?72- (f -?74- y)

postulate Bool :?75: Type

postulate T :?76: Bool

postulate F :?77: Bool

postulate List :?78: Type

postulate Nil :?79: List

postulate Cons :?80: (x :!R: Bool) -> (xs :!R: List) -> List

one :?81: (x :?82: Bool) -> List = (\x :?83: Bool. Cons -?85- x -?84- Nil)

app :?86: (xs :?87: List) -> (ys :?88: List) -> List = \(xs :?89: List) (ys :?90: List).
  case -?91- xs of
    Nil
      => ys
    Cuckoo
      => Nil
    Cons (x :?92: Bool) (xs' :?93: List)
      => Cons -?95- x -?94- (app -?97- xs' -?96- ys)

appRightNeutral :?98: (ys :?99: List) -> Id -?102- List -?101- ys -?100- (app -?104- ys -?103- Nil) = \(ys :?105: List).
  case -?106- ys of
    Nil
      => Refl -?108- List -?107- Nil
    Cons (x :?109: Bool) (xs :?110: List)
      => cong -?116- List -?115- List -?114- (Cons -?117- x) -?113- xs -?112- (app -?119- xs -?118- Nil) -?111- (appRightNeutral -?120- xs)

appAssoc :?121: (xs :?122: List) -> (ys :?123: List) -> (zs :?124: List) -> Id -?127- List -?126- (app -?129- (app -?131- xs -?130- ys) -?128- zs) -?125- (app -?133- xs -?132- (app -?135- ys -?134- zs)) = \(xs :?136: List) (ys :?137: List) (zs :?138: List).
  case -?139- xs of
    Nil
      => Refl -?141- List -?140- (app -?143- ys -?142- zs)
    Cons (x :?144: Bool) (xs' :?145: List)
      => cong -?151- List -?150- List -?149- (Cons -?152- x) -?148- (app -?154- (app -?156- xs' -?155- ys) -?153- zs) -?147- (app -?158- xs' -?157- (app -?160- ys -?159- zs)) -?146- (appAssoc -?163- xs' -?162- ys -?161- zs)

postulate Rev :?164: (_ :?165: List) -> Type

postulate RNil :?166: Rev -?167- Nil

postulate RSnoc :?168: (xs :?169: List) -> (x :?170: Bool) -> (rxs :?171: Rev -?172- xs) -> Rev -?173- (app -?175- xs -?174- (one -?176- x))

rev' :?177: (xs :?178: List) -> (rxs :?179: Rev -?180- xs) -> (ys :?181: List) -> Rev -?182- (app -?184- xs -?183- ys) = \(xs :?185: List) (rxs :?186: Rev -?187- xs) (ys :?188: List).
  case -?189- ys of
    Nil
      => subst -?195- List -?194- Rev -?193- xs -?192- (app -?197- xs -?196- Nil) -?191- (appRightNeutral -?198- xs) -?190- rxs
    Cons (y :?199: Bool) (ys' :?200: List)
      => subst -?206- List -?205- Rev -?204- (app -?208- (app -?210- xs -?209- (one -?211- y)) -?207- ys') -?203- (app -?213- xs -?212- (Cons -?215- y -?214- ys')) -?202- (appAssoc -?218- xs -?217- (one -?219- y) -?216- ys') -?201- (rev' -?222- (app -?224- xs -?223- (one -?225- y)) -?221- (RSnoc -?228- xs -?227- y -?226- rxs) -?220- ys')

rev :?229: (xs :?230: List) -> Rev -?231- xs = (\xs :?232: List. rev' -?235- Nil -?234- RNil -?233- xs)

reverse' :?236: (xs :?237: List) -> (rxs :?238: Rev -?239- xs) -> List = \(xs :?240: List) (rxs :?241: Rev -?242- xs).
  case -?243- rxs of
    RNil
      | xs = Nil
      => Nil
    RSnoc (xs' :?244: List) (x :?245: Bool) (rxs' :?246: Rev -?247- xs')
      | xs = app -?249- xs' -?248- (one -?250- x)
      => Cons -?252- x -?251- (reverse' -?254- xs' -?253- rxs')

reverse :?255: (xs :?256: List) -> List = (\xs :?257: List. reverse' -?259- xs -?258- (rev -?260- xs))

main :!R: List = reverse -?261- (Cons -?263- T -?262- (Cons -?265- F -?264- (Cons -?267- T -?266- (Cons -?269- F -?268- Nil))))

### Inferred definitions ###

