-- vim: ft=idris

data Mool : Type where
  Q : Mool,
  W : Mool.

data Bool : Type where
  T : Bool,
  F : Bool.

data Id : (a : Type) -> (x : a) -> (y : a) -> Type where
  Refl : (a : Type) -> (x : a) -> Id a x x.

not (x : Bool) : Bool
  = case x of {
      T => F,
      F => T
    }

notnot (x : Bool) : Id Bool x (not (not x))
  = case x of {
      T => Refl Bool T,
      F => Refl Bool F
    }

retTy (x : Bool) : Type
  = case x of {
      T => Bool,
      F => Mool
    }

mot (m : Mool) : Mool
  = case m of {
      Q => W,
      W => Q
    }

invert (t : Bool) (x : retTy t) : retTy t
  = case t of {
      T => not x,
      F => mot x
    }

main : Mool = invert F Q.
