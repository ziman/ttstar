-- vim: ft=agda

postulate Mool : *.
postulate Q : Mool.
postulate W : Mool.

postulate Bool : *.
postulate T : Bool.
postulate F : Bool.

postulate Id : (a : *) -> (x : a) -> (y : a) -> *.
postulate Refl : (a : *) -> (x : a) -> Id x x.

not (x : Bool) : Bool
    = case (x) of
        T -> F,
        F -> T.

notnot (x : Bool) : Id x (not (not x))
    = case (x) returns (Id x (not (not x))) of
        T -> Refl Bool T,
        F -> Refl Bool F.

retTy (x : Bool) : *
    = case (x) of
        T -> Bool,
        F -> Mool.

mot (x : Mool) : Mool
    = case (x) of
        Q -> W,
        W -> Q.

conv (t : Bool)  (x : retTy t) : retTy t
    = case (t) returns (retTy t) of
        T -> not x,
        F -> mot x.

main :R: Mool = conv F Q.
