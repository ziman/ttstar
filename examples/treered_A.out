-- vim: ft=idris

### Desugared ###

  let
    postulate N : Type
    postulate Z : N
    postulate S : (x :R: N) -> N
    postulate Vec : (_x0 : N) -> (_x1 : Type) -> Type
    postulate Nil : (a : Type) -> Vec Z a
    postulate Cons : (a : Type) -> (n : N) -> (x :R: a) -> (xs :R: Vec n a) -> Vec (S n) a
    vlen : (n : N) -> (xs : Vec n N) -> N 
      [vlen] [Z] (Nil [N]) = Z
      m : N y : N ys : Vec m N
        [vlen] ([S] m) (Cons [N] [m] y ys) = S (vlen m ys)
    main : N = vlen 1 (Cons N Z 3 (Nil N))
  in main

### Evarified ###

  let
    postulate N :1: Type
    postulate Z :2: N
    postulate S :3: (x :R: N) -> N
    postulate Vec :4: (_x0 :5: N) -> (_x1 :6: Type) -> Type
    postulate Nil :7: (a :8: Type) -> Vec -10- Z -9- a
    postulate Cons :11: (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
    vlen :19: (n :20: N) -> (xs :21: Vec -23- n -22- N) -> N 
      [vlen] -25- [Z] -24- (Nil -26- [N]) = Z
      m :27: N y :28: N ys :29: Vec -31- m -30- N
        [vlen] -33- ([S] -34- m) -32- (Cons -38- [N] -37- [m] -36- y -35- ys) = S -39- (vlen -41- m -40- ys)
    main :42: N = vlen -44- 1 -43- (Cons -49- N -48- Z -47- 3 -46- (Nil -53- N))
  in main

### Constraints ###

[] -> [2,3,7,11,19,21,24,29,32,35,36,39,40,43,46,47,50,51,52,R]
[8] -> [1,26,53]
[9] -> [14,22]
[10] -> [15,23]
[12] -> [1,38,49]
[13] -> [37,48]
[14] -> [9,30]
[15] -> [10,31]
[16] -> [22]
[17] -> [23]
[18] -> [34,45]
[20] -> [25,27,33,41,44,45]
[22] -> [9,16,30]
[23] -> [10,17,31]
[25] -> [20]
[26] -> [1,8]
[27] -> [34]
[30] -> [14,22]
[31] -> [15,23]
[33] -> [20,34]
[34] -> [18,33]
[37] -> [13,27]
[38] -> [1,12]
[41] -> [20]
[44] -> [20]
[45] -> [18]
[48] -> [13]
[49] -> [12]
[53] -> [8]
[R] -> [42]

### Solution ###

[2,3,7,11,19,21,24,29,32,35,36,39,40,42,43,46,47,50,51,52,R]

### Annotated ###

  let
    postulate N :E: Type
    postulate Z :R: N
    postulate S :R: (x :R: N) -> N
    postulate Vec :E: (_x0 :E: N) -> (_x1 :E: Type) -> Type
    postulate Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    postulate Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    vlen :R: (n :E: N) -> (xs :R: Vec -E- n -E- N) -> N 
      [vlen] -E- [Z] -R- (Nil -E- [N]) = Z
      m :E: N y :E: N ys :R: Vec -E- m -E- N
        [vlen] -E- ([S] -E- m) -R- (Cons -E- [N] -E- [m] -R- y -R- ys) = S -R- (vlen -E- m -R- ys)
    main :R: N = vlen -E- 1 -R- (Cons -E- N -E- Z -R- 3 -R- (Nil -E- N))
  in main

### Specialised ###

  let
    postulate N :E: Type
    postulate Z :R: N
    postulate S :R: (x :R: N) -> N
    postulate Vec :E: (_x0 :E: N) -> (_x1 :E: Type) -> Type
    postulate Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    postulate Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    vlen :R: (n :E: N) -> (xs :R: Vec -E- n -E- N) -> N 
      [vlen] -E- [Z] -R- (Nil -E- [N]) = Z
      m :E: N y :E: N ys :R: Vec -E- m -E- N
        [vlen] -E- ([S] -E- m) -R- (Cons -E- [N] -E- [m] -R- y -R- ys) = S -R- (vlen -E- m -R- ys)
    main :R: N = vlen -E- 1 -R- (Cons -E- N -E- Z -R- 3 -R- (Nil -E- N))
  in main

### Final annotation ###

  let
    postulate N :E: Type
    postulate Z :R: N
    postulate S :R: (x :R: N) -> N
    postulate Vec :E: (_x0 :E: N) -> (_x1 :E: Type) -> Type
    postulate Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    postulate Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    vlen :R: (n :E: N) -> (xs :R: Vec -E- n -E- N) -> N 
      [vlen] -E- [Z] -R- (Nil -E- [N]) = Z
      m :E: N y :E: N ys :R: Vec -E- m -E- N
        [vlen] -E- ([S] -E- m) -R- (Cons -E- [N] -E- [m] -R- y -R- ys) = S -R- (vlen -E- m -R- ys)
    main :R: N = vlen -E- 1 -R- (Cons -E- N -E- Z -R- 3 -R- (Nil -E- N))
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    postulate Z : N
    postulate S : (x) -> N
    postulate Nil : Vec
    postulate Cons : (x) -> (xs) -> Vec
    vlen 
      [_] Nil = Z
      [_] (Cons _ ys) = S (vlen ys)
    main = vlen (Cons 3 Nil)
  in main

### Normal forms ###

unerased:
  
  let
    postulate Z : N
    postulate S : (x :R: N) -> N
  in 1

erased:
  
  let
    postulate Z : N
    postulate S : (x) -> N
  in 1

