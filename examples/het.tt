-- vim: ft=idris

postulate Tuple : (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type.

data Bool : Type where
  T : Bool,
  F : Bool.

data Mool : Type where
  Q : Mool,
  W : Mool.

data U : Type where
  B : U,
  M : U.

ty (u : U) : Type =
  case u of {
    B => Bool,
    M => Mool
  }

f (u : U) (x : ty u) : Type =
  case x of {
    T => case u of [B] => Bool,
    F => case u of [B] => Bool,
    Q => case u of [M] => Mool,
    W => case u of [M] => Mool
  }

main : Type =
  Tuple (f B T) (f B F) (f M Q) (f M W).
