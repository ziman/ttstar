(require-extension matchable)
(define Type '(Type))
(print
  (letrec* (
    (Bool `(Bool))
    (True `(True))
    (False `(False))
    (Foo (lambda (_x0)
      `(Foo ,_x0)))
    (Yeah `(Yeah))
    (Nope `(Nope))
    (Maybe (lambda (_x1)
      `(Maybe ,_x1)))
    (Nothing (lambda (a)
      `(Nothing ,a)))
    (Just (lambda (a)
      (lambda (x)
        `(Just ,a ,x))))
    (f (lambda (_e0)
      (match (list _e0)
        [(('Just _ b))
          b]
        [(('Nothing _))
          False])))
    (g (lambda (_e0)
      (match (list _e0)
        [(('Just _ ('True)))
          Yeah]
        [(('Just _ ('False)))
          Nope]
        [(('Nothing _))
          Nope])))
    (main (g ((Just Bool) True)))
  )
    main))
