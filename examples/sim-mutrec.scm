(print
  (letrec (
    (True (list 'True))
    (False (list 'False))
    (Z (list 'Z))
    (S (lambda (_x0)
      (list 'S _x0)))
    (Even (list 'Even))
    (Odd (list 'Odd))
    (fun (lambda (tag)
      (case (car tag)
        ((Even) (lambda (n)
          (letrec ((_casefun0 (lambda (_x4)
            (case (car _x4)
              ((Z) True)
              ((S) (let* (
                (_args-n_ (cdr _x4))
                (n_ (car _args-n_))
              )
                ((fun Odd) n_)))))))
            (_casefun0 n))))
        ((Odd) (lambda (n)
          (letrec ((_casefun1 (lambda (_x5)
            (case (car _x5)
              ((Z) False)
              ((S) (let* (
                (_args-n_ (cdr _x5))
                (n_ (car _args-n_))
              )
                ((fun Even) n_)))))))
            (_casefun1 n)))))))
    (even (fun Even))
    (main (even (S (S (S (S (S (S (S (S Z))))))))))
  )
    main))
(newline)
