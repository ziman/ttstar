-- vim: ft=idris

data N : Type.
  Z : N,
  S : N -> N.

plus (m : N) (n : N) : N =
  case (m) return (N) of {
    Z          => n,
    S (m' : N) => S (plus m' n)
  }.

data Vect : N -> Type.
  Nil : Vect Z,
  Cons : (n : N) -> (x : N) -> (xs : Vect n) -> Vect (S n).

zipWith (n : N) (f : N -> N -> N) (xs : Vect n) (ys : Vect n) : Vect n
  = case (xs) return (Vect n) of {
      Cons (n1 : N) (x1 : N) (xs1 : Vect n1)
        | n = S n1
        => case (ys) return (Vect n) of {
            Cons (n2 : N) (x2 : N) (xs2 : Vect n1)  -- n1 = n2, so this should typecheck
              | n2 = n1
              => Cons n1 (f x1 x2) (zipWith n1 f xs1 xs2)
           },
      Nil
        | n = Z
        => case (ys) return (Vect n) of {
            Nil => Nil
           }
    }.

main :R: N
  = let
      pred (x : N) : N =
        case (x) return (N) of {
          Z => Z,
          S (x' : N) => x'
        }.
    in plus (pred 4) (pred 5).
