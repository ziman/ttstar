-- vim: ft=idris

data N : Type where
  Z : N,
  S : N -> N.

plus : N -> N -> N.
  pat (m : N).
    plus Z m = m,
  pat (m : N) (n : N).
    plus (S n) m = S (plus n m).

data Vect : N -> Type where
  Nil : Vect Z,
  Cons : (n : N) -> (x : N) -> (xs : Vect n) -> Vect (S n).

zipWith : (n : N) -> (f : N -> N -> N) -> (xs : Vect n) -> (ys : Vect n) -> Vect n.
  pat (f : N -> N -> N).
    zipWith [Z] f Nil Nil = Nil,
  pat (n : N) (f : N -> N -> N) (x : N) (y : N) (xs : Vect n) (ys : Vect n).
    zipWith (S n) f (Cons [n] x xs) (Cons [n] y ys) = Cons n (f x y) (zipWith n f xs ys).

main : N
  = let
      pred : N -> N.
        pat.
          pred Z = Z,
        pat (n : N).
          pred (S n) = n.
    in
      plus (pred 4) (pred 5).
