-- vim: ft=agda

postulate Void : Type.

data Maybe : Type -> Type where
    Just : (a : Type) -> (x : a) -> Maybe a,
    Nothing : (a : Type) -> Maybe a.

data Bool : Type where
    True : Bool,
    False : Bool.

retTy (x : Maybe Bool) : Type
    = case x of {
        Just (a : Type) (t : Bool) =>
            case a of {
                [Bool] => Bool
            },
        Nothing (a : Type) =>
            case a of {
                [Bool] => Type
            }
    }

f (x : Maybe Bool) : retTy x
    = case x of {
        Just (a : Type) (b : Bool) =>
            case a of {
                [Bool] => b
            },
        Nothing (a : Type) =>
            case a of {
                [Bool] => Bool
            }
    }

main : Bool
    = f (Just Bool False).
