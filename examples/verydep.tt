-- vim: ft=agda

postulate Void : Type.

postulate Maybe : Type -> Type.
postulate Just : (a : Type) -> (x : a) -> Maybe a.
postulate Nothing : (a : Type) -> Maybe a.

postulate Bool : Type.
postulate True : Bool.
postulate False : Bool.

retTy (x : Maybe Bool) : Type
    = case (x) of
        Just    (a : Type) (t : a) -> Bool,
        Nothing (a : Type)         -> Type.

f (x : Maybe Bool) : retTy x
    = case (x) of
        Just    (a : Type) (b : a)  -> b,
        Nothing (a : Type)          -> Bool.

main :R: Bool
    = f (Just Bool False).
