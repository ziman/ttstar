(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (N `(N))
    (Z `(Z))
    (S (lambda (_x0)
      `(S ,_x0)))
    (B `(B))
    (T `(T))
    (F `(F))
    (isSuc (lambda (_e0)
      (match (list _e0)
        ((('S n))
          T)
        ((n)
          F))))
    (main (lambda (x)
      (isSuc x)))
  )
    main))
