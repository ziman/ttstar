-- vim: ft=agda

### Desugared ###

postulate Bool : Type

postulate T : Bool

postulate F : Bool

postulate Id : (a : Type) -> (x : a) -> (y : a) -> Type

postulate Refl : (a : Type) -> (x : a) -> Id a x x

not : (x : Bool) -> Bool = \(x : Bool).
  case x of
    T
      => F
    F
      => T

notnot : (x : Bool) -> Id Bool x (not (not x)) = \(x : Bool).
  case x of
    T
      => Refl Bool T
    F
      => Refl Bool F

main :R: Id Bool F (not (not F)) = notnot F

### Metaified ###

postulate Bool :1: Type

postulate T :2: Bool

postulate F :3: Bool

postulate Id :4: (a :5: Type) -> (x :6: a) -> (y :7: a) -> Type

postulate Refl :8: (a :9: Type) -> (x :10: a) -> Id -13- a -12- x -11- x

not :14: (x :15: Bool) -> Bool = \(x :16: Bool).
  case -17- x of
    T
      => F
    F
      => T

notnot :18: (x :19: Bool) -> Id -22- Bool -21- x -20- (not -23- (not -24- x)) = \(x :25: Bool).
  case -26- x of
    T
      => Refl -28- Bool -27- T
    F
      => Refl -30- Bool -29- F

main :R: Id -33- Bool -32- F -31- (not -34- (not -35- F)) = notnot -36- F

### Inferred definitions ###

postulate Bool :1: Type {- constraints apply -}
  [] -> [1,R]

postulate F :3: Bool {- constraints apply -}
  [] -> [3,R]

postulate Id :4: (a :5: Type) -> (x :6: a) -> (y :7: a) -> Type {- constraints apply -}
  [] -> [4,R]

postulate Refl :8: (a :9: Type) -> (x :10: a) -> Id -13- a -12- x -11- x {- constraints apply -}
  [] -> [8,R]

postulate T :2: Bool {- constraints apply -}
  [] -> [2,R]

postulate Type :R: Type

main :R: Id -33- Bool -32- F -31- (not -34- (not -35- F)) = notnot -36- F {- constraints apply -}
  [] -> [3,8,18,19,25,26,36,R]
  [9] -> [1,28,30]
  [10] -> [2,27,29]
  [11] -> [20]
  [12] -> [21]
  [13] -> [22]
  [20] -> [11,31]
  [21] -> [12,32]
  [22] -> [13,33]
  [27] -> [10]
  [28] -> [9]
  [29] -> [10]
  [30] -> [9]
  [31] -> [20]
  [32] -> [21]
  [33] -> [22]

not :14: (x :15: Bool) -> Bool = \(x :16: Bool).
  case -17- x of
    T
      => F
    F
      => T {- constraints apply -}
  [] -> [2,3,14,15,16,17,R]

notnot :18: (x :19: Bool) -> Id -22- Bool -21- x -20- (not -23- (not -24- x)) = \(x :25: Bool).
  case -26- x of
    T
      => Refl -28- Bool -27- T
    F
      => Refl -30- Bool -29- F {- constraints apply -}
  [] -> [8,18,19,25,26,R]
  [9] -> [1,28,30]
  [10] -> [2,3,27,29]
  [11] -> [20]
  [12] -> [21]
  [13] -> [22]
  [20] -> [11]
  [21] -> [12]
  [22] -> [13]
  [27] -> [10]
  [28] -> [9]
  [29] -> [10]
  [30] -> [9]


### Constraints ###

[] -> [3,8,18,19,25,26,36,R]
[9] -> [1,28,30]
[10] -> [2,27,29]
[11] -> [20]
[12] -> [21]
[13] -> [22]
[20] -> [11,31]
[21] -> [12,32]
[22] -> [13,33]
[27] -> [10]
[28] -> [9]
[29] -> [10]
[30] -> [9]
[31] -> [20]
[32] -> [21]
[33] -> [22]

### Solution ###

[3,8,18,19,25,26,36,R]

### Annotated ###

postulate Bool :E: Type

postulate T :E: Bool

postulate F :R: Bool

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :R: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x

not :E: (x :E: Bool) -> Bool = \(x :E: Bool).
  case -E- x of
    T
      => F
    F
      => T

notnot :R: (x :R: Bool) -> Id -E- Bool -E- x -E- (not -E- (not -E- x)) = \(x :R: Bool).
  case -R- x of
    T
      => Refl -E- Bool -E- T
    F
      => Refl -E- Bool -E- F

main :R: Id -E- Bool -E- F -E- (not -E- (not -E- F)) = notnot -R- F

### Specialised ###

postulate Bool :E: Type

postulate T :E: Bool

postulate F :R: Bool

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :R: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x

not :E: (x :E: Bool) -> Bool = \(x :E: Bool).
  case -E- x of
    T
      => F
    F
      => T

notnot :R: (x :R: Bool) -> Id -E- Bool -E- x -E- (not -E- (not -E- x)) = \(x :R: Bool).
  case -R- x of
    T
      => Refl -E- Bool -E- T
    F
      => Refl -E- Bool -E- F

main :R: Id -E- Bool -E- F -E- (not -E- (not -E- F)) = notnot -R- F

### Final annotation ###

postulate Bool :E: Type

postulate T :E: Bool

postulate F :R: Bool

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :R: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x

not :E: (x :E: Bool) -> Bool = \(x :E: Bool).
  case -E- x of
    T
      => F
    F
      => T

notnot :R: (x :R: Bool) -> Id -E- Bool -E- x -E- (not -E- (not -E- x)) = \(x :R: Bool).
  case -R- x of
    T
      => Refl -E- Bool -E- T
    F
      => Refl -E- Bool -E- F

main :R: Id -E- Bool -E- F -E- (not -E- (not -E- F)) = notnot -R- F

### Verification ###

Verification successful.

### Pruned ###

postulate F

postulate Refl

notnot = \x.
  case x of
    T
      => Refl
    F
      => Refl

main = notnot F

### Normal forms ###

unerased:
  Refl Bool F
erased:
  Refl
