-- vim: ft=agda

### Desugared ###

postulate Bool : Type

postulate T : Bool

postulate F : Bool

postulate Id : (a : Type) -> (x : a) -> (y : a) -> Type

postulate Refl : (a : Type) -> (x : a) -> Id x x

not : (x : Bool) -> Bool = \(x : Bool).
  case x of
    T
      => F
    F
      => T

notnot : (x : Bool) -> Id x (not (not x)) = \(x : Bool).
  case x of
    T
      => Refl Bool T
    F
      => Refl Bool F

main  -R-  Id F (not (not F)) = notnot F

### Metaified ###

postulate Bool :?1: Type

postulate T :?2: Bool

postulate F :?3: Bool

postulate Id :?4: (a :?5: Type) -> (x :?6: a) -> (y :?7: a) -> Type

postulate Refl :?8: (a :?9: Type) -> (x :?10: a) -> Id -?12- x -?11- x

not :?13: (x :?14: Bool) -> Bool = \(x :?15: Bool).
  case -?16- x of
    T
      => F
    F
      => T

notnot :?17: (x :?18: Bool) -> Id -?20- x -?19- (not -?21- (not -?22- x)) = \(x :?23: Bool).
  case -?24- x of
    T
      => Refl -?26- Bool -?25- T
    F
      => Refl -?28- Bool -?27- F

main :!R: Id -?30- F -?29- (not -?31- (not -?32- F)) = notnot -?33- F

### Inferred definitions ###

postulate Bool :?1: Type

postulate F :?3: Bool

postulate Id :?4: (a :?5: Type) -> (x :?6: a) -> (y :?7: a) -> Type

postulate Refl :?8: (a :?9: Type) -> (x :?10: a) -> Id -?12- x -?11- x

postulate T :?2: Bool

postulate Type :!R: Type

main :!R: Id -?30- F -?29- (not -?31- (not -?32- F)) = notnot -?33- F
  [] -> [?17,!R]
  [?18] -> [?3,?33]
  [?19] -> [?29]
  [?20] -> [?30]
  [?29] -> [?19]
  [?30] -> [?20]
  [?33] -> [?18]

not :?13: (x :?14: Bool) -> Bool = \(x :?15: Bool).
  case -?16- x of
    T
      => F
    F
      => T
  [?2,?13] -> [?14]
  [?3,?13] -> [?14]
  [?13] -> [?2,?3,?16]
  [?13,?14] -> [?15]
  [?13,?15] -> [?14]
  [?13,?16] -> [?15]

notnot :?17: (x :?18: Bool) -> Id -?20- x -?19- (not -?21- (not -?22- x)) = \(x :?23: Bool).
  case -?24- x of
    T
      => Refl -?26- Bool -?25- T
    F
      => Refl -?28- Bool -?27- F
  [?2,?17] -> [?18]
  [?3,?17] -> [?18]
  [?9,?17] -> [?1,?26,?28]
  [?10,?17] -> [?2,?3,?25,?27]
  [?11,?17] -> [?19]
  [?12,?17] -> [?20]
  [?17] -> [?8,?24]
  [?17,?18] -> [?23]
  [?17,?19] -> [?11]
  [?17,?20] -> [?12]
  [?17,?23] -> [?18]
  [?17,?24] -> [?23]
  [?17,?25] -> [?10]
  [?17,?26] -> [?9]
  [?17,?27] -> [?10]
  [?17,?28] -> [?9]


### Constraints ###

[] -> [?17,!R]
[?2,?13] -> [?14]
[?2,?17] -> [?18]
[?3,?13] -> [?14]
[?3,?17] -> [?18]
[?9,?17] -> [?1,?26,?28]
[?10,?17] -> [?2,?3,?25,?27]
[?11,?17] -> [?19]
[?12,?17] -> [?20]
[?13] -> [?2,?3,?16]
[?13,?14] -> [?15]
[?13,?15] -> [?14]
[?13,?16] -> [?15]
[?17] -> [?8,?24]
[?17,?18] -> [?23]
[?17,?19] -> [?11]
[?17,?20] -> [?12]
[?17,?23] -> [?18]
[?17,?24] -> [?23]
[?17,?25] -> [?10]
[?17,?26] -> [?9]
[?17,?27] -> [?10]
[?17,?28] -> [?9]
[?18] -> [?3,?33]
[?19] -> [?29]
[?20] -> [?30]
[?29] -> [?19]
[?30] -> [?20]
[?33] -> [?18]

### Solution ###

[?3,?8,?17,?18,?23,?24,?33,!R]

### Annotated ###

postulate Bool :E: Type

postulate T :E: Bool

postulate F :R: Bool

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :R: (a :E: Type) -> (x :E: a) -> Id -E- x -E- x

not :E: (x :E: Bool) -> Bool = \(x :E: Bool).
  case -E- x of
    T
      => F
    F
      => T

notnot :R: (x :R: Bool) -> Id -E- x -E- (not -E- (not -E- x)) = \(x :R: Bool).
  case -R- x of
    T
      => Refl -E- Bool -E- T
    F
      => Refl -E- Bool -E- F

main :R: Id -E- F -E- (not -E- (not -E- F)) = notnot -R- F

### Specialised ###

postulate Bool :!E: Type

postulate T :!E: Bool

postulate F :!R: Bool

postulate Id :!E: (a :!E: Type) -> (x :!E: a) -> (y :!E: a) -> Type

postulate Refl :!R: (a :!E: Type) -> (x :!E: a) -> Id -!E- x -!E- x

not :!E: (x :!E: Bool) -> Bool = \(x :!E: Bool).
  case -!E- x of
    T
      => F
    F
      => T

notnot :!R: (x :!R: Bool) -> Id -!E- x -!E- (not -!E- (not -!E- x)) = \(x :!R: Bool).
  case -!R- x of
    T
      => Refl -!E- Bool -!E- T
    F
      => Refl -!E- Bool -!E- F

main :!R: Id -!E- F -!E- (not -!E- (not -!E- F)) = notnot -!R- F

### Final annotation ###

postulate Bool :E: Type

postulate T :E: Bool

postulate F :R: Bool

postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type

postulate Refl :R: (a :E: Type) -> (x :E: a) -> Id -E- x -E- x

not :E: (x :E: Bool) -> Bool = \(x :E: Bool).
  case -E- x of
    T
      => F
    F
      => T

notnot :R: (x :R: Bool) -> Id -E- x -E- (not -E- (not -E- x)) = \(x :R: Bool).
  case -R- x of
    T
      => Refl -E- Bool -E- T
    F
      => Refl -E- Bool -E- F

main :R: Id -E- F -E- (not -E- (not -E- F)) = notnot -R- F

### Verification ###

Verification successful.

### Pruned ###

postulate F

postulate Refl

notnot = \x.
  case x of
    T
      => Refl
    F
      => Refl

main = notnot F

### Normal forms ###

unerased:
  Refl Bool F
erased:
  Refl
