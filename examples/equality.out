-- vim: ft=agda

### Desugared ###

postulate Bool : Type

postulate T : Bool

postulate F : Bool

postulate Id : (a : Type) -> (x : a) -> (y : a) -> Type

postulate Refl : (a : Type) -> (x : a) -> Id x x

not : (x : Bool) -> Bool = \(x : Bool).
  case x of
    T
      => F
    F
      => T

notnot : (x : Bool) -> Id x (not (not x)) = \(x : Bool).
  case x of
    T
      => Refl Bool T
    F
      => Refl Bool F

main :ᴿ Id F (not (not F)) = notnot F

### Metaified ###

postulate Bool :¹ Type

postulate T :² Bool

postulate F :³ Bool

postulate Id :⁴ (a :⁵ Type) -> (x :⁶ a) -> (y :⁷ a) -> Type

postulate Refl :⁸ (a :⁹ Type) -> (x :¹⁰ a) -> Id ¹² x ¹¹ x

not :¹³ (x :¹⁴ Bool) -> Bool = \(x :¹⁵ Bool).
  case ¹⁶ x of
    T
      => F
    F
      => T

notnot :¹⁷ (x :¹⁸ Bool) -> Id ²⁰ x ¹⁹ (not ²¹ (not ²² x)) = \(x :²³ Bool).
  case ²⁴ x of
    T
      => Refl ²⁶ Bool ²⁵ T
    F
      => Refl ²⁸ Bool ²⁷ F

main :ᴿ Id ³⁰ F ²⁹ (not ³¹ (not ³² F)) = notnot ³³ F

### Inferred definitions ###

postulate Bool :¹ Type

postulate F :³ Bool

postulate Id :⁴ (a :⁵ Type) -> (x :⁶ a) -> (y :⁷ a) -> Type

postulate Refl :⁸ (a :⁹ Type) -> (x :¹⁰ a) -> Id ¹² x ¹¹ x

postulate T :² Bool

postulate Type :ᴿ Type

main :ᴿ Id ³⁰ F ²⁹ (not ³¹ (not ³² F)) = notnot ³³ F
  [] -> [17,R]
  [18] -> [3,33]
  [19] -> [29]
  [20] -> [30]
  [29] -> [19]
  [30] -> [20]
  [33] -> [18]

not :¹³ (x :¹⁴ Bool) -> Bool = \(x :¹⁵ Bool).
  case ¹⁶ x of
    T
      => F
    F
      => T
  [2,13] -> [14]
  [3,13] -> [14]
  [13] -> [2,3,16]
  [13,14] -> [15]
  [13,15] -> [14]
  [13,16] -> [15]

notnot :¹⁷ (x :¹⁸ Bool) -> Id ²⁰ x ¹⁹ (not ²¹ (not ²² x)) = \(x :²³ Bool).
  case ²⁴ x of
    T
      => Refl ²⁶ Bool ²⁵ T
    F
      => Refl ²⁸ Bool ²⁷ F
  [2,17] -> [18]
  [3,17] -> [18]
  [9,17] -> [1,26,28]
  [10,17] -> [2,3,25,27]
  [11,17] -> [19]
  [12,17] -> [20]
  [17] -> [8,24]
  [17,18] -> [23]
  [17,19] -> [11]
  [17,20] -> [12]
  [17,23] -> [18]
  [17,24] -> [23]
  [17,25] -> [10]
  [17,26] -> [9]
  [17,27] -> [10]
  [17,28] -> [9]


### Constraints ###

[] -> [17,R]
[2,13] -> [14]
[2,17] -> [18]
[3,13] -> [14]
[3,17] -> [18]
[9,17] -> [1,26,28]
[10,17] -> [2,3,25,27]
[11,17] -> [19]
[12,17] -> [20]
[13] -> [2,3,16]
[13,14] -> [15]
[13,15] -> [14]
[13,16] -> [15]
[17] -> [8,24]
[17,18] -> [23]
[17,19] -> [11]
[17,20] -> [12]
[17,23] -> [18]
[17,24] -> [23]
[17,25] -> [10]
[17,26] -> [9]
[17,27] -> [10]
[17,28] -> [9]
[18] -> [3,33]
[19] -> [29]
[20] -> [30]
[29] -> [19]
[30] -> [20]
[33] -> [18]

### Solution ###

[3,8,17,18,23,24,33,R]

### Annotated ###

postulate Bool :ᴱ Type

postulate T :ᴱ Bool

postulate F :ᴿ Bool

postulate Id :ᴱ (a :ᴱ Type) -> (x :ᴱ a) -> (y :ᴱ a) -> Type

postulate Refl :ᴿ (a :ᴱ Type) -> (x :ᴱ a) -> Id ᴱ x ᴱ x

not :ᴱ (x :ᴱ Bool) -> Bool = \(x :ᴱ Bool).
  case ᴱ x of
    T
      => F
    F
      => T

notnot :ᴿ (x :ᴿ Bool) -> Id ᴱ x ᴱ (not ᴱ (not ᴱ x)) = \(x :ᴿ Bool).
  case ᴿ x of
    T
      => Refl ᴱ Bool ᴱ T
    F
      => Refl ᴱ Bool ᴱ F

main :ᴿ Id ᴱ F ᴱ (not ᴱ (not ᴱ F)) = notnot ᴿ F

### Specialised ###

postulate Bool :ᴱ Type

postulate T :ᴱ Bool

postulate F :ᴿ Bool

postulate Id :ᴱ (a :ᴱ Type) -> (x :ᴱ a) -> (y :ᴱ a) -> Type

postulate Refl :ᴿ (a :ᴱ Type) -> (x :ᴱ a) -> Id ᴱ x ᴱ x

not :ᴱ (x :ᴱ Bool) -> Bool = \(x :ᴱ Bool).
  case ᴱ x of
    T
      => F
    F
      => T

notnot :ᴿ (x :ᴿ Bool) -> Id ᴱ x ᴱ (not ᴱ (not ᴱ x)) = \(x :ᴿ Bool).
  case ᴿ x of
    T
      => Refl ᴱ Bool ᴱ T
    F
      => Refl ᴱ Bool ᴱ F

main :ᴿ Id ᴱ F ᴱ (not ᴱ (not ᴱ F)) = notnot ᴿ F

### Final annotation ###

postulate Bool :ᴱ Type

postulate T :ᴱ Bool

postulate F :ᴿ Bool

postulate Id :ᴱ (a :ᴱ Type) -> (x :ᴱ a) -> (y :ᴱ a) -> Type

postulate Refl :ᴿ (a :ᴱ Type) -> (x :ᴱ a) -> Id ᴱ x ᴱ x

not :ᴱ (x :ᴱ Bool) -> Bool = \(x :ᴱ Bool).
  case ᴱ x of
    T
      => F
    F
      => T

notnot :ᴿ (x :ᴿ Bool) -> Id ᴱ x ᴱ (not ᴱ (not ᴱ x)) = \(x :ᴿ Bool).
  case ᴿ x of
    T
      => Refl ᴱ Bool ᴱ T
    F
      => Refl ᴱ Bool ᴱ F

main :ᴿ Id ᴱ F ᴱ (not ᴱ (not ᴱ F)) = notnot ᴿ F

### Verification ###

Verification successful.

### Pruned ###

postulate F

postulate Refl

notnot = \x.
  case x of
    T
      => Refl
    F
      => Refl

main = notnot F

### Normal forms ###

unerased:
  Refl Bool F
erased:
  Refl
