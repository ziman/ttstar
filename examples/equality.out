-- vim: ft=agda

### Desugared ###

postulate Bool : Type

postulate T : Bool

postulate F : Bool

postulate Id : (a : Type) -> (x : a) -> (y : a) -> Type

postulate Refl : (a : Type) -> (x : a) -> Id x x

not : (x : Bool) -> Bool = \(x : Bool).
  case x of
    T
      => F
    F
      => T

notnot : (x : Bool) -> Id x (not (not x)) = \(x : Bool).
  case x of
    T
      => Refl Bool T
    F
      => Refl Bool F

main :R: Id F (not (not F)) = notnot F

### Metaified ###

postulate Bool :1: Type

postulate T :2: Bool

postulate F :3: Bool

postulate Id :4: (a :5: Type) -> (x :6: a) -> (y :7: a) -> Type

postulate Refl :8: (a :9: Type) -> (x :10: a) -> Id -12- x -11- x

not :13: (x :14: Bool) -> Bool = \(x :15: Bool).
  case -16- x of
    T
      => F
    F
      => T

notnot :17: (x :18: Bool) -> Id -20- x -19- (not -21- (not -22- x)) = \(x :23: Bool).
  case -24- x of
    T
      => Refl -26- Bool -25- T
    F
      => Refl -28- Bool -27- F

main :R: Id -30- F -29- (not -31- (not -32- F)) = notnot -33- F

### Inferred definitions ###

