-- vim: ft=agda

### Desugared ###

Void : *

Maybe : (_ : *) -> *

Just : (a : *) -> (x : a) -> (Maybe a)

Nothing : (a : *) -> (Maybe a)

Bool : *

True : Bool

False : Bool

retTy : (x : (Maybe Bool)) -> *
retTy = (\x : (Maybe Bool). 
  case x of
    Just (a : *) (t : a) -> Bool
    Nothing (a : *) -> *)

f : (x : (Maybe Bool)) -> (retTy x)
f = (\x : (Maybe Bool). 
  case x of
    Just (a : *) (b : a) -> b
    Nothing (a : *) -> Bool)

main  -R-  Bool
main = (f (Just Bool False))

### Metaified ###

Void :?1: *

Maybe :?2: (_ :?3: *) -> *

Just :?4: (a :?5: *) -> (x :?6: a) -> (Maybe -?7- a)

Nothing :?8: (a :?9: *) -> (Maybe -?10- a)

Bool :?11: *

True :?12: Bool

False :?13: Bool

retTy :?14: (x :?15: (Maybe -?16- Bool)) -> *
retTy = (\x :?17: (Maybe -?18- Bool). 
  case x of
    Just (a :?19: *) (t :?20: a) -> Bool
    Nothing (a :?21: *) -> *)

f :?22: (x :?23: (Maybe -?24- Bool)) -> (retTy -?25- x)
f = (\x :?26: (Maybe -?27- Bool). 
  case x of
    Just (a :?28: *) (b :?29: a) -> b
    Nothing (a :?30: *) -> Bool)

main :!R: Bool
main = (f -?31- (Just -?33- Bool -?32- False))

### Inferred definitions ###

Bool :?11: *
False :?13: Bool
Just :?4: (a :?5: *) -> (x :?6: a) -> (Maybe -?7- a)
Maybe :?2: (_ :?3: *) -> *
Nothing :?8: (a :?9: *) -> (Maybe -?10- a)
True :?12: Bool
Void :?1: *
f :?22: (x :?23: (Maybe -?24- Bool)) -> (retTy -?25- x)
  [] -> [?6,?11,?23,?26,?29,!R]
  [?7] -> [?24]
  [?10] -> [?24]
  [?24] -> [?7,?10,?27]
  [?27] -> [?24]
  [?28] -> [?5]
  [?30] -> [?9]

main :!R: Bool
  [] -> [?22,!R]
  [?5,?23] -> [?11,?33]
  [?6,?23] -> [?13,?32]
  [?7] -> [?24]
  [?23] -> [?4,?31]
  [?23,?32] -> [?6]
  [?23,?33] -> [?5]
  [?24] -> [?7]
  [?31] -> [?23]

retTy :?14: (x :?15: (Maybe -?16- Bool)) -> *
  [] -> [?11,?15,?17,!R]
  [?16] -> [?18]
  [?18] -> [?16]
  [?19] -> [?5]
  [?20] -> [?6]
  [?21] -> [?9]


### Constraints ###

[] -> [?6,?11,?15,?17,?22,?23,?26,?29,!R]
[?5,?23] -> [?11,?33]
[?6,?23] -> [?13,?32]
[?7] -> [?24]
[?10] -> [?24]
[?16] -> [?18]
[?18] -> [?16]
[?19] -> [?5]
[?20] -> [?6]
[?21] -> [?9]
[?23] -> [?4,?31]
[?23,?32] -> [?6]
[?23,?33] -> [?5]
[?24] -> [?7,?10,?27]
[?27] -> [?24]
[?28] -> [?5]
[?30] -> [?9]
[?31] -> [?23]

### Solution ###

[?4,?6,?11,?13,?15,?17,?22,?23,?26,?29,?31,?32,!R]

### Annotated ###

Void :E: *

Maybe :E: (_ :E: *) -> *

Just :R: (a :E: *) -> (x :R: a) -> (Maybe -E- a)

Nothing :E: (a :E: *) -> (Maybe -E- a)

Bool :R: *

True :E: Bool

False :R: Bool

retTy :E: (x :R: (Maybe -E- Bool)) -> *
retTy = (\x :R: (Maybe -E- Bool). 
  case x of
    Just (a :E: *) (t :E: a) -> Bool
    Nothing (a :E: *) -> *)

f :R: (x :R: (Maybe -E- Bool)) -> (retTy -E- x)
f = (\x :R: (Maybe -E- Bool). 
  case x of
    Just (a :E: *) (b :R: a) -> b
    Nothing (a :E: *) -> Bool)

main :R: Bool
main = (f -R- (Just -E- Bool -R- False))

### Specialised ###

Void :!E: *

Maybe :!E: (_ :!E: *) -> *

Just :!R: (a :!E: *) -> (x :!R: a) -> (Maybe -!E- a)

Nothing :!E: (a :!E: *) -> (Maybe -!E- a)

Bool :!R: *

True :!E: Bool

False :!R: Bool

retTy :!E: (x :!R: (Maybe -!E- Bool)) -> *
retTy = (\x :!R: (Maybe -!E- Bool). 
  case x of
    Just (a :!E: *) (t :!E: a) -> Bool
    Nothing (a :!E: *) -> *)

f :!R: (x :!R: (Maybe -!E- Bool)) -> (retTy -!E- x)
f = (\x :!R: (Maybe -!E- Bool). 
  case x of
    Just (a :!E: *) (b :!R: a) -> b
    Nothing (a :!E: *) -> Bool)

main :!R: Bool
main = (f -!R- (Just -!E- Bool -!R- False))

### Final annotation ###

Void :E: *

Maybe :E: (_ :E: *) -> *

Just :R: (a :E: *) -> (x :R: a) -> (Maybe -E- a)

Nothing :E: (a :E: *) -> (Maybe -E- a)

Bool :R: *

True :E: Bool

False :R: Bool

retTy :E: (x :R: (Maybe -E- Bool)) -> *
retTy = (\x :R: (Maybe -E- Bool). 
  case x of
    Just (a :E: *) (t :E: a) -> Bool
    Nothing (a :E: *) -> *)

f :R: (x :R: (Maybe -E- Bool)) -> (retTy -E- x)
f = (\x :R: (Maybe -E- Bool). 
  case x of
    Just (a :E: *) (b :R: a) -> b
    Nothing (a :E: *) -> Bool)

main :R: Bool
main = (f -R- (Just -E- Bool -R- False))

### Pruned ###

f = (\x. 
  case x of
    Just b -> b
    Nothing -> Bool)

main = (f (Just False))

### Normal forms ###

unerased:
  False
erased:
  False
