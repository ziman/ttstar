-- vim: ft=agda

### Desugared ###

postulate Void : Type

postulate Maybe : (_ : Type) -> Type

postulate Just : (a : Type) -> (x : a) -> Maybe a

postulate Nothing : (a : Type) -> Maybe a

postulate Bool : Type

postulate True : Bool

postulate False : Bool

retTy : (x : Maybe Bool) -> Type = \(x : Maybe Bool).
  case x of
    Just (a : Type) (t : a)
      | a = Bool
      => Bool
    Nothing (a : Type)
      | a = Bool
      => Type

f : (x : Maybe Bool) -> retTy x = \(x : Maybe Bool).
  case x of
    Just (a : Type) (b : a)
      | a = Bool
      => b
    Nothing (a : Type)
      | a = Bool
      => Bool

main  -R-  Bool = f (Just Bool False)

### Metaified ###

postulate Void :?1: Type

postulate Maybe :?2: (_ :?3: Type) -> Type

postulate Just :?4: (a :?5: Type) -> (x :?6: a) -> Maybe -?7- a

postulate Nothing :?8: (a :?9: Type) -> Maybe -?10- a

postulate Bool :?11: Type

postulate True :?12: Bool

postulate False :?13: Bool

retTy :?14: (x :?15: Maybe -?16- Bool) -> Type = \(x :?17: Maybe -?18- Bool).
  case -?19- x of
    Just (a :?20: Type) (t :?21: a)
      | a = Bool
      => Bool
    Nothing (a :?22: Type)
      | a = Bool
      => Type

f :?23: (x :?24: Maybe -?25- Bool) -> retTy -?26- x = \(x :?27: Maybe -?28- Bool).
  case -?29- x of
    Just (a :?30: Type) (b :?31: a)
      | a = Bool
      => b
    Nothing (a :?32: Type)
      | a = Bool
      => Bool

main :!R: Bool = f -?33- (Just -?35- Bool -?34- False)

### Inferred definitions ###

postulate Bool :?11: Type

postulate False :?13: Bool

postulate Just :?4: (a :?5: Type) -> (x :?6: a) -> Maybe -?7- a

postulate Maybe :?2: (_ :?3: Type) -> Type

postulate Nothing :?8: (a :?9: Type) -> Maybe -?10- a

postulate True :?12: Bool

postulate Type :!R: Type

postulate Void :?1: Type

f :?23: (x :?24: Maybe -?25- Bool) -> retTy -?26- x = \(x :?27: Maybe -?28- Bool).
  case -?29- x of
    Just (a :?30: Type) (b :?31: a)
      | a = Bool
      => b
    Nothing (a :?32: Type)
      | a = Bool
      => Bool
  [] -> [?6,?11,?24,?27,?29,?31,!R]
  [?5] -> [?30]
  [?7] -> [?25]
  [?9] -> [?32]
  [?10] -> [?25]
  [?25] -> [?7,?10]
  [?30] -> [?5]
  [?32] -> [?9]

main :!R: Bool = f -?33- (Just -?35- Bool -?34- False)
  [] -> [?23,!R]
  [?5,?24] -> [?11,?35]
  [?6,?24] -> [?13,?34]
  [?7] -> [?25]
  [?24] -> [?4,?33]
  [?24,?34] -> [?6]
  [?24,?35] -> [?5]
  [?25] -> [?7]
  [?33] -> [?24]

retTy :?14: (x :?15: Maybe -?16- Bool) -> Type = \(x :?17: Maybe -?18- Bool).
  case -?19- x of
    Just (a :?20: Type) (t :?21: a)
      | a = Bool
      => Bool
    Nothing (a :?22: Type)
      | a = Bool
      => Type
  [] -> [?11,?15,?17,?19,!R]
  [?5] -> [?20]
  [?6] -> [?21]
  [?7] -> [?16]
  [?9] -> [?22]
  [?10] -> [?16]
  [?16] -> [?7,?10]
  [?20] -> [?5]
  [?21] -> [?6]
  [?22] -> [?9]


### Constraints ###

[] -> [?6,?11,?15,?17,?19,?23,?24,?27,?29,?31,!R]
[?5] -> [?20,?30]
[?5,?24] -> [?11,?35]
[?6] -> [?21]
[?6,?24] -> [?13,?34]
[?7] -> [?16,?25]
[?9] -> [?22,?32]
[?10] -> [?16,?25]
[?16] -> [?7,?10]
[?20] -> [?5]
[?21] -> [?6]
[?22] -> [?9]
[?24] -> [?4,?33]
[?24,?34] -> [?6]
[?24,?35] -> [?5]
[?25] -> [?7,?10]
[?30] -> [?5]
[?32] -> [?9]
[?33] -> [?24]

### Solution ###

[?4,?6,?11,?13,?15,?17,?19,?21,?23,?24,?27,?29,?31,?33,?34,!R]

### Annotated ###

postulate Void :E: Type

postulate Maybe :E: (_ :E: Type) -> Type

postulate Just :R: (a :E: Type) -> (x :R: a) -> Maybe -E- a

postulate Nothing :E: (a :E: Type) -> Maybe -E- a

postulate Bool :R: Type

postulate True :E: Bool

postulate False :R: Bool

retTy :E: (x :R: Maybe -E- Bool) -> Type = \(x :R: Maybe -E- Bool).
  case -R- x of
    Just (a :E: Type) (t :R: a)
      | a = Bool
      => Bool
    Nothing (a :E: Type)
      | a = Bool
      => Type

f :R: (x :R: Maybe -E- Bool) -> retTy -E- x = \(x :R: Maybe -E- Bool).
  case -R- x of
    Just (a :E: Type) (b :R: a)
      | a = Bool
      => b
    Nothing (a :E: Type)
      | a = Bool
      => Bool

main :R: Bool = f -R- (Just -E- Bool -R- False)

### Specialised ###

postulate Void :!E: Type

postulate Maybe :!E: (_ :!E: Type) -> Type

postulate Just :!R: (a :!E: Type) -> (x :!R: a) -> Maybe -!E- a

postulate Nothing :!E: (a :!E: Type) -> Maybe -!E- a

postulate Bool :!R: Type

postulate True :!E: Bool

postulate False :!R: Bool

retTy :!E: (x :!R: Maybe -!E- Bool) -> Type = \(x :!R: Maybe -!E- Bool).
  case -!R- x of
    Just (a :!E: Type) (t :!R: a)
      | a = Bool
      => Bool
    Nothing (a :!E: Type)
      | a = Bool
      => Type

f :!R: (x :!R: Maybe -!E- Bool) -> retTy -!E- x = \(x :!R: Maybe -!E- Bool).
  case -!R- x of
    Just (a :!E: Type) (b :!R: a)
      | a = Bool
      => b
    Nothing (a :!E: Type)
      | a = Bool
      => Bool

main :!R: Bool = f -!R- (Just -!E- Bool -!R- False)

### Final annotation ###

postulate Void :E: Type

postulate Maybe :E: (_ :E: Type) -> Type

postulate Just :R: (a :E: Type) -> (x :R: a) -> Maybe -E- a

postulate Nothing :E: (a :E: Type) -> Maybe -E- a

postulate Bool :R: Type

postulate True :E: Bool

postulate False :R: Bool

retTy :E: (x :R: Maybe -E- Bool) -> Type = \(x :R: Maybe -E- Bool).
  case -R- x of
    Just (a :E: Type) (t :R: a)
      | a = Bool
      => Bool
    Nothing (a :E: Type)
      | a = Bool
      => Type

f :R: (x :R: Maybe -E- Bool) -> retTy -E- x = \(x :R: Maybe -E- Bool).
  case -R- x of
    Just (a :E: Type) (b :R: a)
      | a = Bool
      => b
    Nothing (a :E: Type)
      | a = Bool
      => Bool

main :R: Bool = f -R- (Just -E- Bool -R- False)

### Verification ###

Verification successful.

### Pruned ###

postulate Just

postulate Bool

postulate False

f = \x.
  case x of
    Just b
      => b
    Nothing
      => Bool

main = f (Just False)

### Normal forms ###

unerased:
  False
erased:
  False
