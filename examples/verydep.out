-- vim: ft=agda

### Desugared ###

Void : *
Void = (axiom)

Maybe : (_ : *) -> *
Maybe = (axiom)

Just : (a : *) -> (x : a) -> (Maybe a)
Just = (axiom)

Nothing : (a : *) -> (Maybe a)
Nothing = (axiom)

Bool : *
Bool = (axiom)

True : Bool
True = (axiom)

False : Bool
False = (axiom)

retTy : (x : (Maybe Bool)) -> *
retTy = \x : (Maybe Bool). 
  case x of
    Just (a : *) (t : a) -> Bool
    Nothing (a : *) -> *

f : (x : (Maybe Bool)) -> (retTy x)
f = \x : (Maybe Bool). 
  case x of
    Just (a : *) (b : a) -> b
    Nothing (a : *) -> Bool

main  -R-  Bool
main = (f (Just Bool False))

### Metaified ###

Void :?1: *
Void = (axiom)

Maybe :?2: (_ :?3: *) -> *
Maybe = (axiom)

Just :?4: (a :?5: *) -> (x :?6: a) -> (Maybe -?8- a)
Just = (axiom)

Nothing :?9: (a :?10: *) -> (Maybe -?12- a)
Nothing = (axiom)

Bool :?13: *
Bool = (axiom)

True :?14: Bool
True = (axiom)

False :?15: Bool
False = (axiom)

retTy :?16: (x :?17: (Maybe -?19- Bool)) -> *
retTy = \x :?20: (Maybe -?22- Bool). 
  case x of
    Just (a :?24: *) (t :?25: a) -> Bool
    Nothing (a :?27: *) -> *

f :?28: (x :?29: (Maybe -?31- Bool)) -> (retTy -?33- x)
f = \x :?34: (Maybe -?36- Bool). 
  case x of
    Just (a :?38: *) (b :?39: a) -> b
    Nothing (a :?41: *) -> Bool

main :!R: Bool
main = (f -?43- (Just -?47- Bool -?45- False))

### Inferred definitions ###

Bool :?13: *

False :?15: Bool

Just :?4: (a :?5: *) -> (x :?6: a) -> (Maybe -?8- a)

Maybe :?2: (_ :?3: *) -> *

Nothing :?9: (a :?10: *) -> (Maybe -?12- a)

True :?14: Bool

Void :?1: *

f :?28: (x :?29: (Maybe -?31- Bool)) -> (retTy -?33- x)
  [] -> [?6,?13,?29,?34,?39,!R]
  [?7] -> [?30_6]
  [?8] -> [?31_6]
  [?11] -> [?30_6]
  [?12] -> [?31_6]
  [?23] -> [?37]
  [?26] -> [?40]
  [?30] -> [?35]
  [?30_6] -> [?7,?11,?30]
  [?31] -> [?36]
  [?31_6] -> [?8,?12,?31]
  [?35] -> [?30]
  [?35_3] -> [?35]
  [?36] -> [?31]
  [?36_3] -> [?36]
  [?37] -> [?23]
  [?38] -> [?5]
  [?40] -> [?26]
  [?41] -> [?10]

main :!R: Bool
  [] -> [?4,?6_7,?13_7,?28,?29,?29_7,?34_7,?39_7,?42,?43,!R]
  [?5] -> [?46]
  [?5_8] -> [?5,?13,?47]
  [?6] -> [?44]
  [?6_8] -> [?6,?15,?45]
  [?7_7] -> [?30_7]
  [?7_8] -> [?7,?30_7]
  [?8_7] -> [?31_7]
  [?8_8] -> [?8,?31_7]
  [?11_7] -> [?30_7]
  [?12_7] -> [?31_7]
  [?23_7] -> [?37_7]
  [?26_7] -> [?40_7]
  [?30_7] -> [?7_7,?7_8,?11_7,?30,?30_7,?35_7]
  [?31_7] -> [?8_7,?8_8,?12_7,?31,?31_7,?36_7]
  [?32_7] -> [?32]
  [?33_7] -> [?33]
  [?35_7] -> [?30_7,?35_7]
  [?36_7] -> [?31_7,?36_7]
  [?37_7] -> [?23_7]
  [?38_7] -> [?5_7]
  [?40_7] -> [?26_7]
  [?41_7] -> [?10_7]

retTy :?16: (x :?17: (Maybe -?19- Bool)) -> *
  [] -> [?13,?17,?20,!R]
  [?18] -> [?21]
  [?19] -> [?22]
  [?21] -> [?18]
  [?21_1] -> [?21]
  [?22] -> [?19]
  [?22_1] -> [?22]
  [?24] -> [?5]
  [?25] -> [?6]
  [?27] -> [?10]


### Constraints ###

[] -> [?4,?6,?6_7,?13,?13_7,?17,?20,?28,?29,?29_7,?34,?34_7,?39,?39_7,?42,?43,!R]
[?5] -> [?46]
[?5_8] -> [?5,?13,?47]
[?6] -> [?44]
[?6_8] -> [?6,?15,?45]
[?7] -> [?30_6]
[?7_7] -> [?30_7]
[?7_8] -> [?7,?30_7]
[?8] -> [?31_6]
[?8_7] -> [?31_7]
[?8_8] -> [?8,?31_7]
[?11] -> [?30_6]
[?11_7] -> [?30_7]
[?12] -> [?31_6]
[?12_7] -> [?31_7]
[?18] -> [?21]
[?19] -> [?22]
[?21] -> [?18]
[?21_1] -> [?21]
[?22] -> [?19]
[?22_1] -> [?22]
[?23] -> [?37]
[?23_7] -> [?37_7]
[?24] -> [?5]
[?25] -> [?6]
[?26] -> [?40]
[?26_7] -> [?40_7]
[?27] -> [?10]
[?30] -> [?35]
[?30_6] -> [?7,?11,?30]
[?30_7] -> [?7_7,?7_8,?11_7,?30,?30_7,?35_7]
[?31] -> [?36]
[?31_6] -> [?8,?12,?31]
[?31_7] -> [?8_7,?8_8,?12_7,?31,?31_7,?36_7]
[?32_7] -> [?32]
[?33_7] -> [?33]
[?35] -> [?30]
[?35_3] -> [?35]
[?35_7] -> [?30_7,?35_7]
[?36] -> [?31]
[?36_3] -> [?36]
[?36_7] -> [?31_7,?36_7]
[?37] -> [?23]
[?37_7] -> [?23_7]
[?38] -> [?5]
[?38_7] -> [?5_7]
[?40] -> [?26]
[?40_7] -> [?26_7]
[?41] -> [?10]
[?41_7] -> [?10_7]

### Solution ###

[?4,?6,?6_7,?13,?13_7,?17,?20,?28,?29,?29_7,?34,?34_7,?39,?39_7,?42,?43,?44,!R]

### Annotated ###

Void :I: *
Void = (axiom)

Maybe :I: (_ :I: *) -> *
Maybe = (axiom)

Just :R: (a :I: *) -> (x :R: a) -> (Maybe -I- a)
Just = (axiom)

Nothing :I: (a :I: *) -> (Maybe -I- a)
Nothing = (axiom)

Bool :R: *
Bool = (axiom)

True :I: Bool
True = (axiom)

False :I: Bool
False = (axiom)

retTy :I: (x :R: (Maybe -I- Bool)) -> *
retTy = \x :R: (Maybe -I- Bool). 
  case x of
    Just (a :I: *) (t :I: a) -> Bool
    Nothing (a :I: *) -> *

f :R: (x :R: (Maybe -I- Bool)) -> (retTy -I- x)
f = \x :R: (Maybe -I- Bool). 
  case x of
    Just (a :I: *) (b :R: a) -> b
    Nothing (a :I: *) -> Bool

main :R: Bool
main = (f -R- (Just -I- Bool -I- False))

### Pruned ###

Just = (axiom)

Bool = (axiom)

f = \x. 
  case x of
    Just b -> b
    Nothing -> Bool

main = (f (Just ____))

