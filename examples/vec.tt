-- vim: ft=agda

postulate N : *.
postulate Z : N.
postulate S : N -> N.

postulate Vec : N -> * -> *.
postulate Nil : (a : *) -> Vec Z a.
postulate Cons : (a : *) -> (n : N) -> (x : a) -> (xs : Vec n a) -> Vec (S n) a.

plus (x : N) (y : N) : N
    = case (x) of
        Z         -> y,
        S (z : N) -> S (plus z y).

append (a : *) (m : N) (n : N) (xs : Vec m a) (ys : Vec n a)
    : Vec (plus m n) a
    = case (xs) returns (Vec (plus m n) a) of
        Nil (aa : *)
            -> (
                case (m) returns (Vec (plus m n) a) of
                    Z -> ys
            ),
        Cons (aa :*) (mm : N) (x : a) (zs : Vec mm a)
            -> (
                case (m) returns (Vec (plus m n) a) of
                    S (mmm : N)
                        -> Cons aa mm x (append a mmm n zs ys)
            ).

main :R: Vec Z N
    = Nil N.
