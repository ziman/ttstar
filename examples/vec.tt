data N : Type where
  Z : N,
  S : (x :R: N) -> N.

data Vec : N -> Type -> Type where
  Nil : (a : Type) -> Vec Z a,
  Cons : (a : Type) -> (n : N) -> (x :R: a) -> (xs :R: Vec n a) -> Vec (S n) a.

plus : N -> N -> N.
  (n : N)
    plus Z n = n,
  (m : N) (n : N)
    plus (S m) n = S (plus m n).

append : (a : Type) -> (m : N) -> (n : N) -> (xs : Vec m a) -> (ys : Vec n a) -> Vec (plus m n) a.
  (a : Type) (n : N) (ys : Vec n a)
    append a {Z} n (Nil [a]) ys = ys,
  (a : Type) (m : N) (n : N) (x : a) (xs : Vec m a) (ys : Vec n a)
    append a ({S} m) n (Cons [a] [m] x xs) ys = Cons a (plus m n) x (append a m n xs ys).

main : Vec 1 N
    = append N 0 1 (Nil N) (Cons N Z 4 (Nil N)).
