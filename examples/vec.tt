-- vim: ft=ttstar

data N : Type where
  Z : N,
  S : (x :R: N) -> N.

data Vec : N -> Type -> Type where
  Nil : forall a -> Vec Z a,
  Cons : forall a n -> (x :R: a) -> (xs :R: Vec n a) -> Vec (S n) a.

plus : N -> N -> N.
  pat n.
    plus Z n = n,
  pat m n.
    plus (S m) n = S (plus m n).

append : forall a m n -> (xs : Vec m a) -> (ys : Vec n a) -> Vec (plus m n) a.
  pat a n ys.
    append a {Z} n (Nil [_]) ys = ys,
  pat a m n x xs ys.
    append a ({S} m) n (Cons [_] [_] x xs) ys = Cons _ _ x (append _ _ _ xs ys).

main : Vec _ _
  = append _ _ _ (Nil _) (Cons _ _ 4 (Nil _)).
