-- vim: ft=agda

### Desugared ###

postulate N : Type

postulate Z : N

postulate S : (x : N) -> N

postulate Vec : (_ : N) -> Type

postulate Nil : Vec Z

vlen : (n : N) -> (xs : Vec n) -> N = \(n : N) (xs : Vec n).
  case xs of
    Nil
      | n = Z
      => n

main :R: N = vlen Z Nil

### Metaified ###

postulate N :1: Type

postulate Z :2: N

postulate S :3: (x :4: N) -> N

postulate Vec :5: (_ :6: N) -> Type

postulate Nil :7: Vec -8- Z

vlen :9: (n :10: N) -> (xs :11: Vec -12- n) -> N = \(n :13: N) (xs :14: Vec -15- n).
  case -16- xs of
    Nil/17
      | n = Z
      => n

main :R: N = vlen -19- Z -18- Nil

### Inferred definitions ###

