-- vim: ft=idris

### Desugared ###

  let
    postulate N : Type
    postulate Z : N
    postulate S : (x : N) -> N
    postulate Vec : (_x0 : N) -> Type
    postulate Nil : Vec Z
    vlen : (n : N) -> (xs : Vec n) -> N = \(n : N) (xs : Vec n).
      case xs of
        Nil =>
          case n of [Z] =>
            n
    main : N = vlen Z Nil
  in main

### Metaified ###

  let
    postulate N :1: Type
    postulate Z :2: N
    postulate S :3: (x :4: N) -> N
    postulate Vec :5: (_x0 :6: N) -> Type
    postulate Nil :7: Vec -8- Z
    vlen :9: (n :10: N) -> (xs :11: Vec -12- n) -> N = \(n :13: N) (xs :14: Vec -15- n).
      case -16- xs of
        Nil/17 =>
          case -18- n of [Z] =>
            n
    main :19: N = vlen -21- Z -20- Nil
  in main

### Constraints ###

ttstar: Traceback:
1. In context:
  Type : Type

("LET",
  let
    postulate N :1: Type
    postulate Z :2: N
    postulate S :3: (x :4: N) -> N
    postulate Vec :5: (_x0 :6: N) -> Type
    postulate Nil :7: Vec -8- Z
    vlen :9: (n :10: N) -> (xs :11: Vec -12- n) -> N = \(n :13: N) (xs :14: Vec -15- n).
      case -16- xs of
        Nil/17 =>
          case -18- n of [Z] =>
            n
    main :19: N = vlen -21- Z -20- Nil
  in main)

2. In context:
  N : Type
  Nil : Vec -8- Z
  S : (x :4: N) -> N
  Type : Type
  Vec : (_x0 :6: N) -> Type
  Z : N
  vlen : (n :10: N) -> (xs :11: Vec -12- n) -> N

("DEF-PATTERNS",vlen)

3. In context:
  N : Type
  Nil : Vec -8- Z
  S : (x :4: N) -> N
  Type : Type
  Vec : (_x0 :6: N) -> Type
  Z : N
  vlen : (n :10: N) -> (xs :11: Vec -12- n) -> N

("CASE-FUN",vlen)

4. In context:
  N : Type
  Nil : Vec -8- Z
  S : (x :4: N) -> N
  Type : Type
  Vec : (_x0 :6: N) -> Type
  Z : N
  vlen : (n :10: N) -> (xs :11: Vec -12- n) -> N

("CASE",vlen -13- n -14- xs,case -16- xs of
  Nil/17 =>
    case -18- n of [Z] =>
      n)

5. In context:
  N : Type
  Nil : Vec -8- Z
  S : (x :4: N) -> N
  Type : Type
  Vec : (_x0 :6: N) -> Type
  Z : N
  vlen : (n :10: N) -> (xs :11: Vec -12- n) -> N

("ALT-CTOR",Nil)

6. In context:
  N : Type
  Nil : Vec -8- Z
  S : (x :4: N) -> N
  Type : Type
  Vec : (_x0 :6: N) -> Type
  Z : N
  vlen : (n :10: N) -> (xs :11: Vec -12- n) -> N

("CASE",vlen -13- n -14- Nil,case -18- n of [Z] =>
  n)

7. In context:
  N : Type
  Nil : Vec -8- Z
  S : (x :4: N) -> N
  Type : Type
  Vec : (_x0 :6: N) -> Type
  Z : N
  vlen : (n :10: N) -> (xs :11: Vec -12- n) -> N

("ALT-FORCED",Z)

8. In context:
  N : Type
  Nil : Vec -8- Z
  S : (x :4: N) -> N
  Type : Type
  Vec : (_x0 :6: N) -> Type
  Z : N
  vlen : (n :10: N) -> (xs :11: Vec -12- n) -> N

("PLAIN-TERM",vlen -13- [Z] -14- Nil,n)

9. In context:
  N : Type
  Nil : Vec -8- Z
  S : (x :4: N) -> N
  Type : Type
  Vec : (_x0 :6: N) -> Type
  Z : N
  vlen : (n :10: N) -> (xs :11: Vec -12- n) -> N

("VAR",n)

Error: UnknownName n

CallStack (from HasCallStack):
  error, called at Main.hs:130:38 in main:Main
