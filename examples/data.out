-- vim: ft=idris

### Desugared ###

  let
    postulate N : Type
    postulate Z : N
    postulate S : (_x0 : N) -> N
    plus : (_x1 : N) -> (_x2 : N) -> N 
      m : N
        [plus] Z m = m
      m : N n : N
        [plus] (S n) m = S (plus n m)
    main : N = 
      let pred : (_x3 : N) -> N 
        [pred] Z = Z
        n : N
          [pred] (S n) = n
      in plus 2 3
  in main

### Evarified ###

  let
    postulate N :1: Type
    postulate Z :2: N
    postulate S :3: (_x0 :4: N) -> N
    plus :5: (_x1 :6: N) -> (_x2 :7: N) -> N 
      m :8: N
        [plus] -10- Z -9- m = m
      m :11: N n :12: N
        [plus] -14- (S -15- n) -13- m = S -16- (plus -18- n -17- m)
    main :19: N = 
      let pred :20: (_x3 :21: N) -> N 
        [pred] -22- Z = Z
        n :23: N
          [pred] -24- (S -25- n) = n
      in plus -27- 2 -26- 3
  in main

### Constraints ###

[] -> [2,3,5,6,7,8,9,10,11,13,14,26,27,R]
[4] -> [12,15,16,17,18,28,29,30,31,32]
[4,29] -> [4]
[4,31] -> [4]
[4,32] -> [4]
[12] -> [15]
[15] -> [4,12]
[16] -> [4]
[28] -> [4]
[30] -> [4]
[R] -> [19]

### Solution ###

[2,3,5,6,7,8,9,10,11,13,14,19,26,27,R]

### Annotated ###

  let
    postulate N :E: Type
    postulate Z :R: N
    postulate S :R: (_x0 :E: N) -> N
    plus :R: (_x1 :R: N) -> (_x2 :R: N) -> N 
      m :R: N
        [plus] -R- Z -R- m = m
      m :R: N n :E: N
        [plus] -R- (S -E- n) -R- m = S -E- (plus -E- n -E- m)
    main :R: N = 
      let pred :E: (_x3 :E: N) -> N 
        [pred] -E- Z = Z
        n :E: N
          [pred] -E- (S -E- n) = n
      in plus -R- 2 -R- 3
  in main

### Specialised ###

  let
    postulate N :E: Type
    postulate Z :R: N
    postulate S :R: (_x0 :E: N) -> N
    plus :R: (_x1 :R: N) -> (_x2 :R: N) -> N 
      m :R: N
        [plus] -R- Z -R- m = m
      m :R: N n :E: N
        [plus] -R- (S -E- n) -R- m = S -E- (plus -E- n -E- m)
    main :R: N = 
      let pred :E: (_x3 :E: N) -> N 
        [pred] -E- Z = Z
        n :E: N
          [pred] -E- (S -E- n) = n
      in plus -R- 2 -R- 3
  in main

### Final annotation ###

  let
    postulate N :E: Type
    postulate Z :R: N
    postulate S :R: (_x0 :E: N) -> N
    plus :R: (_x1 :R: N) -> (_x2 :R: N) -> N 
      m :R: N
        [plus] -R- Z -R- m = m
      m :R: N n :E: N
        [plus] -R- (S -E- n) -R- m = S -E- (plus -E- n -E- m)
    main :R: N = 
      let pred :E: (_x3 :E: N) -> N 
        [pred] -E- Z = Z
        n :E: N
          [pred] -E- (S -E- n) = n
      in plus -R- 2 -R- 3
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    postulate Z : N
    postulate S : N
    plus 
      [_] Z m = m
      [_] S m = S
    main = plus S S
  in main

### Normal forms ###

unerased:
  
  let
    postulate Z : N
    postulate S : (_x0 : N) -> N
  in 5

erased:
  
  let postulate S : N
  in S

