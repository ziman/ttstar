-- vim: ft=agda

### Desugared ###

postulate N : Type

postulate Z : N

postulate S : (_ : N) -> N

plus : (_ : N) -> (_ : N) -> N 
  pat (n : N).
    plus Z n = n
  pat (m : N) (n : N).
    plus (S m) n = S (plus m n)

main  -R-  N = 
  let id : (_ : N) -> N 
    pat (x : N).
      id x = x
  in plus (id 3) (id 4)

### Metaified ###

postulate N :?1: Type

postulate Z :?2: N

postulate S :?3: (_ :?4: N) -> N

plus :?5: (_ :?6: N) -> (_ :?7: N) -> N 
  pat (n :?8: N).
    plus -?10- Z -?9- n = n
  pat (m :?11: N) (n :?12: N).
    plus -?14- (S -?15- m) -?13- n = S -?16- (plus -?18- m -?17- n)

main :!R: N = 
  let id :?19: (_ :?20: N) -> N 
    pat (x :?21: N).
      id -?22- x = x
  in plus -?24- (id -?25- 3) -?23- (id -?29- 4)

### Inferred definitions ###

postulate N :?1: Type

postulate S :?3: (_ :?4: N) -> N

postulate Type :!R: Type

postulate Z :?2: N

main :!R: N = 
  let id :?19: (_ :?20: N) -> N 
    pat (x :?21: N).
      id -?22- x = x
  in plus -?24- (id -?25- 3) -?23- (id -?29- 4)
  [] -> [?5,?20,?21,?22,!R]
  [?4,?6] -> [?2,?3,?26,?27,?28]
  [?4,?6,?27] -> [?4]
  [?4,?6,?28] -> [?4]
  [?4,?7] -> [?2,?3,?30,?31,?32,?33]
  [?4,?7,?31] -> [?4]
  [?4,?7,?32] -> [?4]
  [?4,?7,?33] -> [?4]
  [?6] -> [?3,?19,?24,?25]
  [?6,?26] -> [?4]
  [?7] -> [?3,?19,?23,?29]
  [?7,?30] -> [?4]
  [?23] -> [?7]
  [?24] -> [?6]

plus :?5: (_ :?6: N) -> (_ :?7: N) -> N 
  pat (n :?8: N).
    plus -?10- Z -?9- n = n
  pat (m :?11: N) (n :?12: N).
    plus -?14- (S -?15- m) -?13- n = S -?16- (plus -?18- m -?17- n)
  [] -> [?3,?6,?7,?8,?9,?10,?13,?14,!R]
  [?4] -> [?5,?11,?12,?15,?16,?17,?18]
  [?11] -> [?4]
  [?15] -> [?4]
  [?16] -> [?4]


### Constraints ###

[] -> [?3,?5,?6,?7,?8,?9,?10,?13,?14,?20,?21,?22,!R]
[?4] -> [?5,?11,?12,?15,?16,?17,?18]
[?4,?6] -> [?2,?3,?26,?27,?28]
[?4,?6,?27] -> [?4]
[?4,?6,?28] -> [?4]
[?4,?7] -> [?2,?3,?30,?31,?32,?33]
[?4,?7,?31] -> [?4]
[?4,?7,?32] -> [?4]
[?4,?7,?33] -> [?4]
[?6] -> [?3,?19,?24,?25]
[?6,?26] -> [?4]
[?7] -> [?3,?19,?23,?29]
[?7,?30] -> [?4]
[?11] -> [?4]
[?15] -> [?4]
[?16] -> [?4]
[?23] -> [?7]
[?24] -> [?6]

### Solution ###

[?3,?5,?6,?7,?8,?9,?10,?13,?14,?19,?20,?21,?22,?23,?24,?25,?29,!R]

### Annotated ###

postulate N :E: Type

postulate Z :E: N

postulate S :R: (_ :E: N) -> N

plus :R: (_ :R: N) -> (_ :R: N) -> N 
  pat (n :R: N).
    plus -R- Z -R- n = n
  pat (m :E: N) (n :E: N).
    plus -R- (S -E- m) -R- n = S -E- (plus -E- m -E- n)

main :R: N = 
  let id :R: (_ :R: N) -> N 
    pat (x :R: N).
      id -R- x = x
  in plus -R- (id -R- 3) -R- (id -R- 4)

### Specialised ###

postulate N :!E: Type

postulate Z :!E: N

postulate S :!R: (_ :!E: N) -> N

plus :!R: (_ :!R: N) -> (_ :!R: N) -> N 
  pat (n :!R: N).
    plus -!R- Z -!R- n = n
  pat (m :!E: N) (n :!E: N).
    plus -!R- (S -!E- m) -!R- n = S -!E- (plus -!E- m -!E- n)

main :!R: N = 
  let id :!R: (_ :!R: N) -> N 
    pat (x :!R: N).
      id -!R- x = x
  in plus -!R- (id -!R- 3) -!R- (id -!R- 4)

### Final annotation ###

postulate N :E: Type

postulate Z :E: N

postulate S :R: (_ :E: N) -> N

plus :R: (_ :R: N) -> (_ :R: N) -> N 
  pat (n :R: N).
    plus -R- Z -R- n = n
  pat (m :E: N) (n :E: N).
    plus -R- (S -E- m) -R- n = S -E- (plus -E- m -E- n)

main :R: N = 
  let id :R: (_ :R: N) -> N 
    pat (x :R: N).
      id -R- x = x
  in plus -R- (id -R- 3) -R- (id -R- 4)

### Verification ###

Verification successful.

### Pruned ###

postulate S

plus 
  plus S _ = S

main = 
  let id 
    pat x.
      id x = x
  in plus (id S) (id S)

### Normal forms ###

unerased:
  7
erased:
  S
