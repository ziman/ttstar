-- vim: ft=agda

### Desugared ###

postulate N : Type

postulate Z : N

postulate S : (_ : N) -> N

plus : (m : N) -> (n : N) -> N = (\m : N. (\n : N. 
  let f : (_ : N) -> N 
    f Z = n
    pat (m : N).
      f (S m) = S (plus m n)
  in f m))

main  -R-  N = 
  let id : (_ : N) -> N 
    pat (x : N).
      id x = x
  in plus (id 3) (id 4)

### Metaified ###

postulate N :?1: Type

postulate Z :?2: N

postulate S :?3: (_ :?4: N) -> N

plus :?5: (m :?6: N) -> (n :?7: N) -> N = (\m :?8: N. (\n :?9: N. 
  let f :?10: (_ :?11: N) -> N 
    f -?12- Z = n
    pat (m :?13: N).
      f -?14- (S -?15- m) = S -?16- (plus -?18- m -?17- n)
  in f -?19- m))

main :!R: N = 
  let id :?20: (_ :?21: N) -> N 
    pat (x :?22: N).
      id -?23- x = x
  in plus -?25- (id -?26- 3) -?24- (id -?30- 4)

### Inferred definitions ###

postulate N :?1: Type

postulate S :?3: (_ :?4: N) -> N

postulate Type :!R: Type

postulate Z :?2: N

main :!R: N = 
  let id :?20: (_ :?21: N) -> N 
    pat (x :?22: N).
      id -?23- x = x
  in plus -?25- (id -?26- 3) -?24- (id -?30- 4)
  [] -> [?5,?21,?22,?23,!R]
  [?4,?6] -> [?2,?3,?27,?28,?29]
  [?4,?6,?28] -> [?4]
  [?4,?6,?29] -> [?4]
  [?4,?7] -> [?2,?3,?31,?32,?33,?34]
  [?4,?7,?32] -> [?4]
  [?4,?7,?33] -> [?4]
  [?4,?7,?34] -> [?4]
  [?6] -> [?3,?20,?25,?26]
  [?6,?27] -> [?4]
  [?7] -> [?3,?20,?24,?30]
  [?7,?31] -> [?4]
  [?24] -> [?7]
  [?25] -> [?6]

plus :?5: (m :?6: N) -> (n :?7: N) -> N = (\m :?8: N. (\n :?9: N. 
  let f :?10: (_ :?11: N) -> N 
    f -?12- Z = n
    pat (m :?13: N).
      f -?14- (S -?15- m) = S -?16- (plus -?18- m -?17- n)
  in f -?19- m))
  [] -> [?3,?6,?7,?8,?9,?10,?11,?12,?14,?19,!R]
  [?4] -> [?5,?13,?15,?16,?17,?18]
  [?13] -> [?4]
  [?15] -> [?4]
  [?16] -> [?4]


### Constraints ###

[] -> [?3,?5,?6,?7,?8,?9,?10,?11,?12,?14,?19,?21,?22,?23,!R]
[?4] -> [?5,?13,?15,?16,?17,?18]
[?4,?6] -> [?2,?3,?27,?28,?29]
[?4,?6,?28] -> [?4]
[?4,?6,?29] -> [?4]
[?4,?7] -> [?2,?3,?31,?32,?33,?34]
[?4,?7,?32] -> [?4]
[?4,?7,?33] -> [?4]
[?4,?7,?34] -> [?4]
[?6] -> [?3,?20,?25,?26]
[?6,?27] -> [?4]
[?7] -> [?3,?20,?24,?30]
[?7,?31] -> [?4]
[?13] -> [?4]
[?15] -> [?4]
[?16] -> [?4]
[?24] -> [?7]
[?25] -> [?6]

### Solution ###

[?3,?5,?6,?7,?8,?9,?10,?11,?12,?14,?19,?20,?21,?22,?23,?24,?25,?26,?30,!R]

### Annotated ###

postulate N :E: Type

postulate Z :E: N

postulate S :R: (_ :E: N) -> N

plus :R: (m :R: N) -> (n :R: N) -> N = (\m :R: N. (\n :R: N. 
  let f :R: (_ :R: N) -> N 
    f -R- Z = n
    pat (m :E: N).
      f -R- (S -E- m) = S -E- (plus -E- m -E- n)
  in f -R- m))

main :R: N = 
  let id :R: (_ :R: N) -> N 
    pat (x :R: N).
      id -R- x = x
  in plus -R- (id -R- 3) -R- (id -R- 4)

### Specialised ###

postulate N :!E: Type

postulate Z :!E: N

postulate S :!R: (_ :!E: N) -> N

plus :!R: (m :!R: N) -> (n :!R: N) -> N = (\m :!R: N. (\n :!R: N. 
  let f :!R: (_ :!R: N) -> N 
    f -!R- Z = n
    pat (m :!E: N).
      f -!R- (S -!E- m) = S -!E- (plus -!E- m -!E- n)
  in f -!R- m))

main :!R: N = 
  let id :!R: (_ :!R: N) -> N 
    pat (x :!R: N).
      id -!R- x = x
  in plus -!R- (id -!R- 3) -!R- (id -!R- 4)

### Final annotation ###

postulate N :E: Type

postulate Z :E: N

postulate S :R: (_ :E: N) -> N

plus :R: (m :R: N) -> (n :R: N) -> N = (\m :R: N. (\n :R: N. 
  let f :R: (_ :R: N) -> N 
    f -R- Z = n
    pat (m :E: N).
      f -R- (S -E- m) = S -E- (plus -E- m -E- n)
  in f -R- m))

main :R: N = 
  let id :R: (_ :R: N) -> N 
    pat (x :R: N).
      id -R- x = x
  in plus -R- (id -R- 3) -R- (id -R- 4)

### Verification ###

Verification successful.

### Pruned ###

postulate S

plus = (\m. (\n. 
  let f 
    f S = S
  in f m))

main = 
  let id 
    pat x.
      id x = x
  in plus (id S) (id S)

### Normal forms ###

unerased:
