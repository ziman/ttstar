-- vim: ft=agda

### Desugared ###

postulate Bool : Type

postulate True : Bool

postulate False : Bool

postulate Nat : Type

postulate Z : Nat

postulate S : (n :R: Nat) -> Nat

postulate Vec : (_ : Nat) -> (_ : Type) -> Type

postulate VNil : (a : Type) -> Vec Z a

postulate VCons : (a : Type) -> (n : Nat) -> (x : a) -> (xs : Vec n a) -> Vec (S n) a

vlen : (a : Type) -> (n : Nat) -> (xs : Vec n a) -> Nat = \(a : Type) (n : Nat) (xs : Vec n a).
  case xs of
    VNil (a' : Type)
      | a = a'
      | n = Z
      => Z
    VCons (a' : Type) (n' : Nat) (x' : a) (xs' : Vec n' a)
      | a = a'
      | n = S n'
      => S (vlen a n' xs')

testVec : Vec 2 Bool = VCons Bool 1 True (VCons Bool Z False (VNil Bool))

main :R: Nat = vlen Bool 2 testVec

### Metaified ###

postulate Bool :1: Type

postulate True :2: Bool

postulate False :3: Bool

postulate Nat :4: Type

postulate Z :5: Nat

postulate S :6: (n :R: Nat) -> Nat

postulate Vec :7: (_ :8: Nat) -> (_ :9: Type) -> Type

postulate VNil :10: (a :11: Type) -> Vec -13- Z -12- a

postulate VCons :14: (a :15: Type) -> (n :16: Nat) -> (x :17: a) -> (xs :18: Vec -20- n -19- a) -> Vec -22- (S -23- n) -21- a

vlen :24: (a :25: Type) -> (n :26: Nat) -> (xs :27: Vec -29- n -28- a) -> Nat = \(a :30: Type) (n :31: Nat) (xs :32: Vec -34- n -33- a).
  case -35- xs of
    VNil (a' :36: Type)
      | a = a'
      | n = Z
      => Z
    VCons (a' :37: Type) (n' :38: Nat) (x' :39: a) (xs' :40: Vec -42- n' -41- a)
      | a = a'
      | n = S -43- n'
      => S -44- (vlen -47- a -46- n' -45- xs')

testVec :48: Vec -50- 2 -49- Bool = VCons -56- Bool -55- 1 -54- True -53- (VCons -61- Bool -60- Z -59- False -58- (VNil -62- Bool))

main :R: Nat = vlen -65- Bool -64- 2 -63- testVec

### Inferred definitions ###

postulate Bool :1: Type

postulate False :3: Bool

postulate Nat :4: Type

postulate S :6: (n :R: Nat) -> Nat

postulate True :2: Bool

postulate Type :R: Type

postulate VCons :14: (a :15: Type) -> (n :16: Nat) -> (x :17: a) -> (xs :18: Vec -20- n -19- a) -> Vec -22- (S -23- n) -21- a

postulate VNil :10: (a :11: Type) -> Vec -13- Z -12- a

postulate Vec :7: (_ :8: Nat) -> (_ :9: Type) -> Type

postulate Z :5: Nat

main :R: Nat = vlen -65- Bool -64- 2 -63- testVec
  [] -> [24,R]
  [25] -> [1,65]
  [26] -> [5,6,64,66,67]
  [27] -> [48,63]
  [28] -> [49]
  [29] -> [50]
  [49] -> [28]
  [50] -> [29]
  [51] -> [66]
  [52] -> [67]
  [63] -> [27]
  [64] -> [26]
  [65] -> [25]
  [66] -> [51]
  [67] -> [52]

testVec :48: Vec -50- 2 -49- Bool = VCons -56- Bool -55- 1 -54- True -53- (VCons -61- Bool -60- Z -59- False -58- (VNil -62- Bool))
  [11,18,48] -> [1,62]
  [12,18,48] -> [19]
  [13,18,48] -> [20]
  [15,18,48] -> [1,61]
  [15,48] -> [1,56]
  [16,18,48] -> [5,60]
  [16,48] -> [5,6,55,57]
  [17,18,48] -> [3,59]
  [17,48] -> [2,54]
  [18,19,48] -> [12]
  [18,20,48] -> [13]
  [18,48] -> [10,14,53,58]
  [18,48,58] -> [18]
  [18,48,59] -> [17]
  [18,48,60] -> [16]
  [18,48,61] -> [15]
  [18,48,62] -> [11]
  [19,48] -> [21]
  [20,48] -> [22]
  [21,48] -> [19,49]
  [22,48] -> [20,50]
  [23,48] -> [51,57]
  [48] -> [14]
  [48,49] -> [21]
  [48,50] -> [22]
  [48,51] -> [23]
  [48,52] -> [57]
  [48,53] -> [18]
  [48,54] -> [17]
  [48,55] -> [16]
  [48,56] -> [15]
  [48,57] -> [23,52]

vlen :24: (a :25: Type) -> (n :26: Nat) -> (xs :27: Vec -29- n -28- a) -> Nat = \(a :30: Type) (n :31: Nat) (xs :32: Vec -34- n -33- a).
  case -35- xs of
    VNil (a' :36: Type)
      | a = a'
      | n = Z
      => Z
    VCons (a' :37: Type) (n' :38: Nat) (x' :39: a) (xs' :40: Vec -42- n' -41- a)
      | a = a'
      | n = S -43- n'
      => S -44- (vlen -47- a -46- n' -45- xs')
  [10,24] -> [27]
  [11,24] -> [27,36]
  [12,24] -> [28]
  [13,24] -> [29]
  [14,24] -> [27]
  [15,24] -> [27,37]
  [16,24] -> [27,38]
  [17,24] -> [27,39]
  [18,24] -> [27,40]
  [19,24] -> [27,41]
  [20,24] -> [27,42]
  [21,24] -> [28]
  [22,24] -> [29]
  [23,24] -> [43]
  [24] -> [5,6,24,35,44]
  [24,25] -> [30,47]
  [24,26] -> [31,38,46]
  [24,27] -> [32,40,45]
  [24,28] -> [12,21,41]
  [24,29] -> [13,22,42]
  [24,30] -> [25]
  [24,31] -> [26]
  [24,32] -> [27]
  [24,35] -> [32]
  [24,36] -> [11,27,35]
  [24,37] -> [15,27,35]
  [24,38] -> [16,27,35]
  [24,39] -> [17,27,35]
  [24,40] -> [18,27,35]
  [24,41] -> [19,27,28]
  [24,42] -> [20,27,29]
  [24,43] -> [23]
  [24,45] -> [27]
  [24,46] -> [26]
  [24,47] -> [25]


### Constraints ###

[] -> [24,R]
[10,24] -> [27]
[11,18,48] -> [1,62]
[11,24] -> [27,36]
[12,18,48] -> [19]
[12,24] -> [28]
[13,18,48] -> [20]
[13,24] -> [29]
[14,24] -> [27]
[15,18,48] -> [1,61]
[15,24] -> [27,37]
[15,48] -> [1,56]
[16,18,48] -> [5,60]
[16,24] -> [27,38]
[16,48] -> [5,6,55,57]
[17,18,48] -> [3,59]
[17,24] -> [27,39]
[17,48] -> [2,54]
[18,19,48] -> [12]
[18,20,48] -> [13]
[18,24] -> [27,40]
[18,48] -> [10,14,53,58]
[18,48,58] -> [18]
[18,48,59] -> [17]
[18,48,60] -> [16]
[18,48,61] -> [15]
[18,48,62] -> [11]
[19,24] -> [27,41]
[19,48] -> [21]
[20,24] -> [27,42]
[20,48] -> [22]
[21,24] -> [28]
[21,48] -> [19,49]
[22,24] -> [29]
[22,48] -> [20,50]
[23,24] -> [43]
[23,48] -> [51,57]
[24] -> [5,6,24,35,44]
[24,25] -> [30,47]
[24,26] -> [31,38,46]
[24,27] -> [32,40,45]
[24,28] -> [12,21,41]
[24,29] -> [13,22,42]
[24,30] -> [25]
[24,31] -> [26]
[24,32] -> [27]
[24,35] -> [32]
[24,36] -> [11,27,35]
[24,37] -> [15,27,35]
[24,38] -> [16,27,35]
[24,39] -> [17,27,35]
[24,40] -> [18,27,35]
[24,41] -> [19,27,28]
[24,42] -> [20,27,29]
[24,43] -> [23]
[24,45] -> [27]
[24,46] -> [26]
[24,47] -> [25]
[25] -> [1,65]
[26] -> [5,6,64,66,67]
[27] -> [48,63]
[28] -> [49]
[29] -> [50]
[48] -> [14]
[48,49] -> [21]
[48,50] -> [22]
[48,51] -> [23]
[48,52] -> [57]
[48,53] -> [18]
[48,54] -> [17]
[48,55] -> [16]
[48,56] -> [15]
[48,57] -> [23,52]
[49] -> [28]
[50] -> [29]
[51] -> [66]
[52] -> [67]
[63] -> [27]
[64] -> [26]
[65] -> [25]
[66] -> [51]
[67] -> [52]

### Solution ###

[5,6,10,14,18,24,27,32,35,40,44,45,48,53,58,63,R]

### Annotated ###

postulate Bool :E: Type

postulate True :E: Bool

postulate False :E: Bool

postulate Nat :E: Type

postulate Z :R: Nat

postulate S :R: (n :R: Nat) -> Nat

postulate Vec :E: (_ :E: Nat) -> (_ :E: Type) -> Type

postulate VNil :R: (a :E: Type) -> Vec -E- Z -E- a

postulate VCons :R: (a :E: Type) -> (n :E: Nat) -> (x :E: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a

vlen :R: (a :E: Type) -> (n :E: Nat) -> (xs :R: Vec -E- n -E- a) -> Nat = \(a :E: Type) (n :E: Nat) (xs :R: Vec -E- n -E- a).
  case -R- xs of
    VNil (a' :E: Type)
      | a = a'
      | n = Z
      => Z
    VCons (a' :E: Type) (n' :E: Nat) (x' :E: a) (xs' :R: Vec -E- n' -E- a)
      | a = a'
      | n = S -E- n'
      => S -R- (vlen -E- a -E- n' -R- xs')

testVec :R: Vec -E- 2 -E- Bool = VCons -E- Bool -E- 1 -E- True -R- (VCons -E- Bool -E- Z -E- False -R- (VNil -E- Bool))

main :R: Nat = vlen -E- Bool -E- 2 -R- testVec

### Specialised ###

postulate Bool :E: Type

postulate True :E: Bool

postulate False :E: Bool

postulate Nat :E: Type

postulate Z :R: Nat

postulate S :R: (n :R: Nat) -> Nat

postulate Vec :E: (_ :E: Nat) -> (_ :E: Type) -> Type

postulate VNil :R: (a :E: Type) -> Vec -E- Z -E- a

postulate VCons :R: (a :E: Type) -> (n :E: Nat) -> (x :E: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a

vlen :R: (a :E: Type) -> (n :E: Nat) -> (xs :R: Vec -E- n -E- a) -> Nat = \(a :E: Type) (n :E: Nat) (xs :R: Vec -E- n -E- a).
  case -R- xs of
    VNil (a' :E: Type)
      | a = a'
      | n = Z
      => Z
    VCons (a' :E: Type) (n' :E: Nat) (x' :E: a) (xs' :R: Vec -E- n' -E- a)
      | a = a'
      | n = S -E- n'
      => S -R- (vlen -E- a -E- n' -R- xs')

testVec :R: Vec -E- 2 -E- Bool = VCons -E- Bool -E- 1 -E- True -R- (VCons -E- Bool -E- Z -E- False -R- (VNil -E- Bool))

main :R: Nat = vlen -E- Bool -E- 2 -R- testVec

### Final annotation ###

postulate Bool :E: Type

postulate True :E: Bool

postulate False :E: Bool

postulate Nat :E: Type

postulate Z :R: Nat

postulate S :R: (n :R: Nat) -> Nat

postulate Vec :E: (_ :E: Nat) -> (_ :E: Type) -> Type

postulate VNil :R: (a :E: Type) -> Vec -E- Z -E- a

postulate VCons :R: (a :E: Type) -> (n :E: Nat) -> (x :E: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a

vlen :R: (a :E: Type) -> (n :E: Nat) -> (xs :R: Vec -E- n -E- a) -> Nat = \(a :E: Type) (n :E: Nat) (xs :R: Vec -E- n -E- a).
  case -R- xs of
    VNil (a' :E: Type)
      | a = a'
      | n = Z
      => Z
    VCons (a' :E: Type) (n' :E: Nat) (x' :E: a) (xs' :R: Vec -E- n' -E- a)
      | a = a'
      | n = S -E- n'
      => S -R- (vlen -E- a -E- n' -R- xs')

testVec :R: Vec -E- 2 -E- Bool = VCons -E- Bool -E- 1 -E- True -R- (VCons -E- Bool -E- Z -E- False -R- (VNil -E- Bool))

main :R: Nat = vlen -E- Bool -E- 2 -R- testVec

### Verification ###

Verification successful.

### Pruned ###

postulate Z

postulate S

postulate VNil

postulate VCons

vlen = \xs.
  case xs of
    VNil
      => Z
    VCons xs'
      => S (vlen xs')

testVec = VCons (VCons VNil)

main = vlen testVec

### Normal forms ###

unerased:
  2
erased:
  2
