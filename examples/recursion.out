-- vim: ft=agda

### Desugared ###

Bool : *

True : Bool

False : Bool

Nat : *

Z : Nat

S : (n  -R-  Nat) -> Nat

Vec : (_ : Nat) -> (_ : *) -> *

VNil : (a : *) -> (Vec Z a)

VCons : (a : *) -> (n : Nat) -> (x : a) -> (xs : (Vec n a)) -> (Vec (S n) a)

vlen : (a : *) -> (n : Nat) -> (xs : (Vec n a)) -> Nat
vlen = (\a : *. (\n : Nat. (\xs : (Vec n a). 
  case xs of
    VNil (a : *) -> Z
    VCons (a : *) (n : Nat) (x : a) (xs : (Vec n a)) -> (S (vlen a n xs)))))

testVec : (Vec 2 Bool)
testVec = (VCons Bool 1 True (VCons Bool Z False (VNil Bool)))

main  -R-  Nat
main = (vlen Bool 2 testVec)

### Metaified ###

Bool :?1: *

True :?2: Bool

False :?3: Bool

Nat :?4: *

Z :?5: Nat

S :?6: (n :!R: Nat) -> Nat

Vec :?7: (_ :?8: Nat) -> (_ :?9: *) -> *

VNil :?10: (a :?11: *) -> (Vec -?13- Z -?12- a)

VCons :?14: (a :?15: *) -> (n :?16: Nat) -> (x :?17: a) -> (xs :?18: (Vec -?20- n -?19- a)) -> (Vec -?22- (S -?23- n) -?21- a)

vlen :?24: (a :?25: *) -> (n :?26: Nat) -> (xs :?27: (Vec -?29- n -?28- a)) -> Nat
vlen = (\a :?30: *. (\n :?31: Nat. (\xs :?32: (Vec -?34- n -?33- a). 
  case xs of
    VNil (a :?35: *) -> Z
    VCons (a :?36: *) (n :?37: Nat) (x :?38: a) (xs :?39: (Vec -?41- n -?40- a)) -> (S -?42- (vlen -?45- a -?44- n -?43- xs)))))

testVec :?46: (Vec -?48- 2 -?47- Bool)
testVec = (VCons -?54- Bool -?53- 1 -?52- True -?51- (VCons -?59- Bool -?58- Z -?57- False -?56- (VNil -?60- Bool)))

main :!R: Nat
main = (vlen -?63- Bool -?62- 2 -?61- testVec)

### Final annotation ###

### Inferred definitions ###

Bool :?1: *
False :?3: Bool
Nat :?4: *
S :?6: (n :!R: Nat) -> Nat
True :?2: Bool
VCons :?14: (a :?15: *) -> (n :?16: Nat) -> (x :?17: a) -> (xs :?18: (Vec -?20- n -?19- a)) -> (Vec -?22- (S -?23- n) -?21- a)
VNil :?10: (a :?11: *) -> (Vec -?13- Z -?12- a)
Vec :?7: (_ :?8: Nat) -> (_ :?9: *) -> *
Z :?5: Nat
main :!R: Nat
  [] -> [?24,!R]
  [?25] -> [?1,?63]
  [?26] -> [?5,?6,?62,?64,?65]
  [?27] -> [?46,?61]
  [?28] -> [?47]
  [?29] -> [?48]
  [?47] -> [?28]
  [?48] -> [?29]
  [?49] -> [?64]
  [?50] -> [?65]
  [?61] -> [?27]
  [?62] -> [?26]
  [?63] -> [?25]
  [?64] -> [?49]
  [?65] -> [?50]

testVec :?46: (Vec -?48- 2 -?47- Bool)
  [] -> [?14,!R]
  [?11,?18] -> [?1,?60]
  [?12,?18] -> [?19]
  [?13,?18] -> [?20]
  [?15] -> [?1,?54]
  [?15,?18] -> [?1,?59]
  [?16] -> [?5,?6,?53,?55]
  [?16,?18] -> [?5,?58]
  [?17] -> [?2,?52]
  [?17,?18] -> [?3,?57]
  [?18] -> [?10,?51,?56]
  [?18,?19] -> [?12]
  [?18,?20] -> [?13]
  [?18,?56] -> [?18]
  [?18,?57] -> [?17]
  [?18,?58] -> [?16]
  [?18,?59] -> [?15]
  [?18,?60] -> [?11]
  [?19] -> [?21]
  [?20] -> [?22]
  [?21] -> [?19,?47]
  [?22] -> [?20,?48]
  [?23] -> [?49,?55]
  [?47] -> [?21]
  [?48] -> [?22]
  [?49] -> [?23]
  [?50] -> [?55]
  [?51] -> [?18]
  [?52] -> [?17]
  [?53] -> [?16]
  [?54] -> [?15]
  [?55] -> [?23,?50]

vlen :?24: (a :?25: *) -> (n :?26: Nat) -> (xs :?27: (Vec -?29- n -?28- a)) -> Nat
  [] -> [?5,?6,?18,?24,?27,?32,?39,?42,?43,!R]
  [?19] -> [?40]
  [?20] -> [?41]
  [?25] -> [?30,?36,?45]
  [?26] -> [?31,?37,?44]
  [?28] -> [?33,?40]
  [?29] -> [?34,?41]
  [?30] -> [?25]
  [?31] -> [?26]
  [?33] -> [?28]
  [?34] -> [?29]
  [?35] -> [?11]
  [?36] -> [?15]
  [?37] -> [?16]
  [?38] -> [?17]
  [?40] -> [?19,?28]
  [?41] -> [?20,?29]
  [?44] -> [?26]
  [?45] -> [?25]


### Constraints ###

[] -> [?5,?6,?14,?18,?24,?27,?32,?39,?42,?43,!R]
[?11,?18] -> [?1,?60]
[?12,?18] -> [?19]
[?13,?18] -> [?20]
[?15] -> [?1,?54]
[?15,?18] -> [?1,?59]
[?16] -> [?5,?6,?53,?55]
[?16,?18] -> [?5,?58]
[?17] -> [?2,?52]
[?17,?18] -> [?3,?57]
[?18] -> [?10,?51,?56]
[?18,?19] -> [?12]
[?18,?20] -> [?13]
[?18,?56] -> [?18]
[?18,?57] -> [?17]
[?18,?58] -> [?16]
[?18,?59] -> [?15]
[?18,?60] -> [?11]
[?19] -> [?21,?40]
[?20] -> [?22,?41]
[?21] -> [?19,?47]
[?22] -> [?20,?48]
[?23] -> [?49,?55]
[?25] -> [?1,?30,?36,?45,?63]
[?26] -> [?5,?6,?31,?37,?44,?62,?64,?65]
[?27] -> [?46,?61]
[?28] -> [?33,?40,?47]
[?29] -> [?34,?41,?48]
[?30] -> [?25]
[?31] -> [?26]
[?33] -> [?28]
[?34] -> [?29]
[?35] -> [?11]
[?36] -> [?15]
[?37] -> [?16]
[?38] -> [?17]
[?40] -> [?19,?28]
[?41] -> [?20,?29]
[?44] -> [?26]
[?45] -> [?25]
[?47] -> [?21,?28]
[?48] -> [?22,?29]
[?49] -> [?23,?64]
[?50] -> [?55,?65]
[?51] -> [?18]
[?52] -> [?17]
[?53] -> [?16]
[?54] -> [?15]
[?55] -> [?23,?50]
[?61] -> [?27]
[?62] -> [?26]
[?63] -> [?25]
[?64] -> [?49]
[?65] -> [?50]

### Solution ###

[?5,?6,?10,?14,?18,?24,?27,?32,?39,?42,?43,?46,?51,?56,?61,!R]

### Annotated ###

Bool :E: *

True :E: Bool

False :E: Bool

Nat :E: *

Z :R: Nat

S :R: (n :R: Nat) -> Nat

Vec :E: (_ :E: Nat) -> (_ :E: *) -> *

VNil :R: (a :E: *) -> (Vec -E- Z -E- a)

VCons :R: (a :E: *) -> (n :E: Nat) -> (x :E: a) -> (xs :R: (Vec -E- n -E- a)) -> (Vec -E- (S -E- n) -E- a)

vlen :R: (a :E: *) -> (n :E: Nat) -> (xs :R: (Vec -E- n -E- a)) -> Nat
vlen = (\a :E: *. (\n :E: Nat. (\xs :R: (Vec -E- n -E- a). 
  case xs of
    VNil (a :E: *) -> Z
    VCons (a :E: *) (n :E: Nat) (x :E: a) (xs :R: (Vec -E- n -E- a)) -> (S -R- (vlen -E- a -E- n -R- xs)))))

testVec :R: (Vec -E- 2 -E- Bool)
testVec = (VCons -E- Bool -E- 1 -E- True -R- (VCons -E- Bool -E- Z -E- False -R- (VNil -E- Bool)))

main :R: Nat
main = (vlen -E- Bool -E- 2 -R- testVec)

### Specialised ###

Bool :!E: *

True :!E: Bool

False :!E: Bool

Nat :!E: *

Z :!R: Nat

S :!R: (n :!R: Nat) -> Nat

Vec :!E: (_ :!E: Nat) -> (_ :!E: *) -> *

VNil :!R: (a :!E: *) -> (Vec -!E- Z -!E- a)

VCons :!R: (a :!E: *) -> (n :!E: Nat) -> (x :!E: a) -> (xs :!R: (Vec -!E- n -!E- a)) -> (Vec -!E- (S -!E- n) -!E- a)

vlen :!R: (a :!E: *) -> (n :!E: Nat) -> (xs :!R: (Vec -!E- n -!E- a)) -> Nat
vlen = (\a :!E: *. (\n :!E: Nat. (\xs :!R: (Vec -!E- n -!E- a). 
  case xs of
    VNil (a :!E: *) -> Z
    VCons (a :!E: *) (n :!E: Nat) (x :!E: a) (xs :!R: (Vec -!E- n -!E- a)) -> (S -!R- (vlen -!E- a -!E- n -!R- xs)))))

testVec :!R: (Vec -!E- 2 -!E- Bool)
testVec = (VCons -!E- Bool -!E- 1 -!E- True -!R- (VCons -!E- Bool -!E- Z -!E- False -!R- (VNil -!E- Bool)))

main :!R: Nat
main = (vlen -!E- Bool -!E- 2 -!R- testVec)

Bool :E: *

True :E: Bool

False :E: Bool

Nat :E: *

Z :R: Nat

S :R: (n :R: Nat) -> Nat

Vec :E: (_ :E: Nat) -> (_ :E: *) -> *

VNil :R: (a :E: *) -> (Vec -E- Z -E- a)

VCons :R: (a :E: *) -> (n :E: Nat) -> (x :E: a) -> (xs :R: (Vec -E- n -E- a)) -> (Vec -E- (S -E- n) -E- a)

vlen :R: (a :E: *) -> (n :E: Nat) -> (xs :R: (Vec -E- n -E- a)) -> Nat
vlen = (\a :E: *. (\n :E: Nat. (\xs :R: (Vec -E- n -E- a). 
  case xs of
    VNil (a :E: *) -> Z
    VCons (a :E: *) (n :E: Nat) (x :E: a) (xs :R: (Vec -E- n -E- a)) -> (S -R- (vlen -E- a -E- n -R- xs)))))

testVec :R: (Vec -E- 2 -E- Bool)
testVec = (VCons -E- Bool -E- 1 -E- True -R- (VCons -E- Bool -E- Z -E- False -R- (VNil -E- Bool)))

main :R: Nat
main = (vlen -E- Bool -E- 2 -R- testVec)

### Pruned ###

vlen = (\xs. 
  case xs of
    VNil -> Z
    VCons xs -> (S (vlen xs)))

testVec = (VCons (VCons VNil))

main = (vlen testVec)

### Normal forms ###

unerased:
  2
erased:
  2
