-- vim: ft=idris

### Desugared ###

  let
    postulate Bool : Type
    postulate True : Bool
    postulate False : Bool
    postulate Nat : Type
    postulate Z : Nat
    postulate S : (n :R: Nat) -> Nat
    postulate Vec : (_x0 : Nat) -> (_x1 : Type) -> Type
    postulate VNil : (a : Type) -> Vec Z a
    postulate VCons : (a : Type) -> (n : Nat) -> (x : a) -> (xs : Vec n a) -> Vec (S n) a
    vlen : (a : Type) -> (n : Nat) -> (xs : Vec n a) -> Nat = \(a : Type) (n : Nat) (xs : Vec n a).
      case xs of
        VNil (a' : Type) =>
          case a' of [a] =>
            case n of [Z] =>
              Z
        VCons (a' : Type) (n' : Nat) (x' : a) (xs' : Vec n' a) =>
          case a' of [a] =>
            case n of [S n'] =>
              S (vlen a n' xs')
    testVec : Vec 2 Bool = VCons Bool 1 True (VCons Bool Z False (VNil Bool))
    main : Nat = vlen Bool 2 testVec
  in main

### Metaified ###

  let
    postulate Bool :1: Type
    postulate True :2: Bool
    postulate False :3: Bool
    postulate Nat :4: Type
    postulate Z :5: Nat
    postulate S :6: (n :R: Nat) -> Nat
    postulate Vec :7: (_x0 :8: Nat) -> (_x1 :9: Type) -> Type
    postulate VNil :10: (a :11: Type) -> Vec -13- Z -12- a
    postulate VCons :14: (a :15: Type) -> (n :16: Nat) -> (x :17: a) -> (xs :18: Vec -20- n -19- a) -> Vec -22- (S -23- n) -21- a
    vlen :24: (a :25: Type) -> (n :26: Nat) -> (xs :27: Vec -29- n -28- a) -> Nat = \(a :30: Type) (n :31: Nat) (xs :32: Vec -34- n -33- a).
      case -35- xs of
        VNil/36 (a' :37: Type) =>
          case -38- a' of [a] =>
            case -39- n of [Z] =>
              Z
        VCons/40 (a' :41: Type) (n' :42: Nat) (x' :43: a) (xs' :44: Vec -46- n' -45- a) =>
          case -47- a' of [a] =>
            case -48- n of [S -49- n'] =>
              S -50- (vlen -53- a -52- n' -51- xs')
    testVec :54: Vec -56- 2 -55- Bool = VCons -62- Bool -61- 1 -60- True -59- (VCons -67- Bool -66- Z -65- False -64- (VNil -68- Bool))
    main :69: Nat = vlen -72- Bool -71- 2 -70- testVec
  in main

### Constraints ###

[] -> [5,6,10,14,18,24,27,32,35,36,40,44,50,51,54,59,64,70,R]
[11] -> [1,37,68]
[12] -> [19,28]
[13] -> [20,29]
[15] -> [1,41,62,67]
[16] -> [42,61,63,66]
[17] -> [2,3,43,60,65]
[19] -> [12,21,45]
[20] -> [13,22,46]
[21] -> [19,28,55]
[22] -> [20,29,56]
[23] -> [49,57,63]
[25] -> [1,30,53,72]
[26] -> [31,42,52,71,73,74]
[28] -> [12,21,45,55]
[29] -> [13,22,46,56]
[30] -> [25]
[31] -> [26]
[37] -> [11]
[38] -> [37]
[39] -> [31]
[41] -> [15]
[42] -> [16]
[43] -> [17]
[45] -> [19,28]
[46] -> [20,29]
[47] -> [41]
[48] -> [31]
[49] -> [23]
[52] -> [26]
[53] -> [25]
[55] -> [21,28]
[56] -> [22,29]
[57] -> [23,73]
[58] -> [63,74]
[60] -> [17]
[61] -> [16]
[62] -> [15]
[63] -> [23,58]
[65] -> [17]
[66] -> [16]
[67] -> [15]
[68] -> [11]
[71] -> [26]
[72] -> [25]
[73] -> [57]
[74] -> [58]
[R] -> [69]

### Solution ###

[5,6,10,14,18,24,27,32,35,36,40,44,50,51,54,59,64,69,70,R]

### Annotated ###

  let
    postulate Bool :E: Type
    postulate True :E: Bool
    postulate False :E: Bool
    postulate Nat :E: Type
    postulate Z :R: Nat
    postulate S :R: (n :R: Nat) -> Nat
    postulate Vec :E: (_x0 :E: Nat) -> (_x1 :E: Type) -> Type
    postulate VNil :R: (a :E: Type) -> Vec -E- Z -E- a
    postulate VCons :R: (a :E: Type) -> (n :E: Nat) -> (x :E: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    vlen :R: (a :E: Type) -> (n :E: Nat) -> (xs :R: Vec -E- n -E- a) -> Nat = \(a :E: Type) (n :E: Nat) (xs :R: Vec -E- n -E- a).
      case -R- xs of
        VNil/R (a' :E: Type) =>
          case -E- a' of [a] =>
            case -E- n of [Z] =>
              Z
        VCons/R (a' :E: Type) (n' :E: Nat) (x' :E: a) (xs' :R: Vec -E- n' -E- a) =>
          case -E- a' of [a] =>
            case -E- n of [S -E- n'] =>
              S -R- (vlen -E- a -E- n' -R- xs')
    testVec :R: Vec -E- 2 -E- Bool = VCons -E- Bool -E- 1 -E- True -R- (VCons -E- Bool -E- Z -E- False -R- (VNil -E- Bool))
    main :R: Nat = vlen -E- Bool -E- 2 -R- testVec
  in main

### Specialised ###

  let
    postulate Bool :E: Type
    postulate True :E: Bool
    postulate False :E: Bool
    postulate Nat :E: Type
    postulate Z :R: Nat
    postulate S :R: (n :R: Nat) -> Nat
    postulate Vec :E: (_x0 :E: Nat) -> (_x1 :E: Type) -> Type
    postulate VNil :R: (a :E: Type) -> Vec -E- Z -E- a
    postulate VCons :R: (a :E: Type) -> (n :E: Nat) -> (x :E: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    vlen :R: (a :E: Type) -> (n :E: Nat) -> (xs :R: Vec -E- n -E- a) -> Nat = \(a :E: Type) (n :E: Nat) (xs :R: Vec -E- n -E- a).
      case -R- xs of
        VNil/R (a' :E: Type) =>
          case -E- a' of [a] =>
            case -E- n of [Z] =>
              Z
        VCons/R (a' :E: Type) (n' :E: Nat) (x' :E: a) (xs' :R: Vec -E- n' -E- a) =>
          case -E- a' of [a] =>
            case -E- n of [S -E- n'] =>
              S -R- (vlen -E- a -E- n' -R- xs')
    testVec :R: Vec -E- 2 -E- Bool = VCons -E- Bool -E- 1 -E- True -R- (VCons -E- Bool -E- Z -E- False -R- (VNil -E- Bool))
    main :R: Nat = vlen -E- Bool -E- 2 -R- testVec
  in main

### Final annotation ###

  let
    postulate Bool :E: Type
    postulate True :E: Bool
    postulate False :E: Bool
    postulate Nat :E: Type
    postulate Z :R: Nat
    postulate S :R: (n :R: Nat) -> Nat
    postulate Vec :E: (_x0 :E: Nat) -> (_x1 :E: Type) -> Type
    postulate VNil :R: (a :E: Type) -> Vec -E- Z -E- a
    postulate VCons :R: (a :E: Type) -> (n :E: Nat) -> (x :E: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    vlen :R: (a :E: Type) -> (n :E: Nat) -> (xs :R: Vec -E- n -E- a) -> Nat = \(a :E: Type) (n :E: Nat) (xs :R: Vec -E- n -E- a).
      case -R- xs of
        VNil/R (a' :E: Type) =>
          case -E- a' of [a] =>
            case -E- n of [Z] =>
              Z
        VCons/R (a' :E: Type) (n' :E: Nat) (x' :E: a) (xs' :R: Vec -E- n' -E- a) =>
          case -E- a' of [a] =>
            case -E- n of [S -E- n'] =>
              S -R- (vlen -E- a -E- n' -R- xs')
    testVec :R: Vec -E- 2 -E- Bool = VCons -E- Bool -E- 1 -E- True -R- (VCons -E- Bool -E- Z -E- False -R- (VNil -E- Bool))
    main :R: Nat = vlen -E- Bool -E- 2 -R- testVec
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    postulate Z : Nat
    postulate S : (n) -> Nat
    postulate VNil : Vec
    postulate VCons : (xs) -> Vec
    vlen = \xs.
      case xs of
        VNil =>
          Z
        VCons xs' =>
          S (vlen xs')
    testVec = VCons (VCons VNil)
    main = vlen testVec
  in main

### Normal forms ###

unerased:
  
  let
    postulate Z : Nat
    postulate S : (n :R: Nat) -> Nat
  in 2

erased:
  
  let
    postulate Z : Nat
    postulate S : (n) -> Nat
  in 2

