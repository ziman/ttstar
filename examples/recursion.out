-- vim: ft=agda

### Desugared ###

postulate Bool : *

postulate True : Bool

postulate False : Bool

postulate Nat : *

postulate Z : Nat

postulate S : (n  -R-  Nat) -> Nat

postulate Vec : (_ : Nat) -> (_ : *) -> *

postulate VNil : (a : *) -> Vec Z a

postulate VCons : (a : *) -> (n : Nat) -> (x : a) -> (xs : Vec n a) -> Vec (S n) a

vlen : (a : *) -> (n : Nat) -> (_ : Vec n a) -> Nat
  pat (a : *).
    vlen [a] [Z] (VNil a)  =  Z
  pat (a : *) (n : Nat) (x : a) (xs : Vec n a).
    vlen [a] [S n] (VCons a n x xs)  =  S (vlen a n xs)

testVec : Vec 2 Bool
  = VCons Bool 1 True (VCons Bool Z False (VNil Bool))

main  -R-  Nat
  = vlen Bool 2 testVec

### Metaified ###

postulate Bool :?1: *

postulate True :?2: Bool

postulate False :?3: Bool

postulate Nat :?4: *

postulate Z :?5: Nat

postulate S :?6: (n :!R: Nat) -> Nat

postulate Vec :?7: (_ :?8: Nat) -> (_ :?9: *) -> *

postulate VNil :?10: (a :?11: *) -> Vec -?13- Z -?12- a

postulate VCons :?14: (a :?15: *) -> (n :?16: Nat) -> (x :?17: a) -> (xs :?18: Vec -?20- n -?19- a) -> Vec -?22- (S -?23- n) -?21- a

vlen :?24: (a :?25: *) -> (n :?26: Nat) -> (_ :?27: Vec -?29- n -?28- a) -> Nat
  pat (a :?30: *).
    vlen -?33- [a] -?32- [Z] -?31- (VNil -?34- a)  =  Z
  pat (a :?35: *) (n :?36: Nat) (x :?37: a) (xs :?38: Vec -?40- n -?39- a).
    vlen -?43- [a] -?42- [S -?44- n] -?41- (VCons -?48- a -?47- n -?46- x -?45- xs)  =  S -?49- (vlen -?52- a -?51- n -?50- xs)

testVec :?53: Vec -?55- 2 -?54- Bool
  = VCons -?61- Bool -?60- 1 -?59- True -?58- (VCons -?66- Bool -?65- Z -?64- False -?63- (VNil -?67- Bool))

main :!R: Nat
  = vlen -?70- Bool -?69- 2 -?68- testVec

### Inferred definitions ###

Bool :?1: *

False :?3: Bool

Nat :?4: *

S :?6: (n :!R: Nat) -> Nat

True :?2: Bool

VCons :?14: (a :?15: *) -> (n :?16: Nat) -> (x :?17: a) -> (xs :?18: Vec -?20- n -?19- a) -> Vec -?22- (S -?23- n) -?21- a

VNil :?10: (a :?11: *) -> Vec -?13- Z -?12- a

Vec :?7: (_ :?8: Nat) -> (_ :?9: *) -> *

Z :?5: Nat

main :!R: Nat = vlen -?70- Bool -?69- 2 -?68- testVec
  [] -> [?24,!R]
  [?25] -> [?1,?70]
  [?26] -> [?5,?6,?69,?71,?72]
  [?27] -> [?53,?68]
  [?28] -> [?54]
  [?29] -> [?55]
  [?54] -> [?28]
  [?55] -> [?29]
  [?56] -> [?71]
  [?57] -> [?72]
  [?68] -> [?27]
  [?69] -> [?26]
  [?70] -> [?25]
  [?71] -> [?56]
  [?72] -> [?57]

testVec :?53: Vec -?55- 2 -?54- Bool = VCons -?61- Bool -?60- 1 -?59- True -?58- (VCons -?66- Bool -?65- Z -?64- False -?63- (VNil -?67- Bool))
  [] -> [?14,!R]
  [?11,?18] -> [?1,?67]
  [?12,?18] -> [?19]
  [?13,?18] -> [?20]
  [?15] -> [?1,?61]
  [?15,?18] -> [?1,?66]
  [?16] -> [?5,?6,?60,?62]
  [?16,?18] -> [?5,?65]
  [?17] -> [?2,?59]
  [?17,?18] -> [?3,?64]
  [?18] -> [?10,?58,?63]
  [?18,?19] -> [?12]
  [?18,?20] -> [?13]
  [?18,?63] -> [?18]
  [?18,?64] -> [?17]
  [?18,?65] -> [?16]
  [?18,?66] -> [?15]
  [?18,?67] -> [?11]
  [?19] -> [?21]
  [?20] -> [?22]
  [?21] -> [?19,?54]
  [?22] -> [?20,?55]
  [?23] -> [?56,?62]
  [?54] -> [?21]
  [?55] -> [?22]
  [?56] -> [?23]
  [?57] -> [?62]
  [?58] -> [?18]
  [?59] -> [?17]
  [?60] -> [?16]
  [?61] -> [?15]
  [?62] -> [?23,?57]

vlen :?24: (a :?25: *) -> (n :?26: Nat) -> (_ :?27: Vec -?29- n -?28- a) -> Nat 
  pat (a :?30: *).
    vlen -?33- [a] -?32- [Z] -?31- (VNil -?34- a)  =  Z
  pat (a :?35: *) (n :?36: Nat) (x :?37: a) (xs :?38: Vec -?40- n -?39- a).
    vlen -?43- [a] -?42- [S -?44- n] -?41- (VCons -?48- a -?47- n -?46- x -?45- xs)  =  S -?49- (vlen -?52- a -?51- n -?50- xs)
  [] -> [?5,?6,?24,?49,!R]
  [?10] -> [?27]
  [?11] -> [?27,?34]
  [?12] -> [?28]
  [?13] -> [?29]
  [?14] -> [?27]
  [?15] -> [?27,?48]
  [?16] -> [?27,?47]
  [?17] -> [?27,?46]
  [?18] -> [?27,?45]
  [?19] -> [?27,?39]
  [?20] -> [?27,?40]
  [?21] -> [?28]
  [?22] -> [?29]
  [?23] -> [?44]
  [?25] -> [?33,?35,?43,?52]
  [?26] -> [?32,?36,?42,?51]
  [?27] -> [?31,?38,?41,?50]
  [?28] -> [?12,?21,?39]
  [?29] -> [?13,?22,?40]
  [?30] -> [?11,?27]
  [?31] -> [?27]
  [?32] -> [?26]
  [?33] -> [?25]
  [?34] -> [?11,?27]
  [?35] -> [?15,?27]
  [?36] -> [?16,?27]
  [?37] -> [?17,?27]
  [?38] -> [?18,?27]
  [?39] -> [?19,?27,?28]
  [?40] -> [?20,?27,?29]
  [?41] -> [?27]
  [?42] -> [?26]
  [?43] -> [?25]
  [?44] -> [?23]
  [?45] -> [?18,?27]
  [?46] -> [?17,?27]
  [?47] -> [?16,?27]
  [?48] -> [?15,?27]
  [?50] -> [?27]
  [?51] -> [?26]
  [?52] -> [?25]


### Constraints ###

[] -> [?5,?6,?14,?24,?49,!R]
[?10] -> [?27]
[?11] -> [?27,?34]
[?11,?18] -> [?1,?67]
[?12] -> [?28]
[?12,?18] -> [?19]
[?13] -> [?29]
[?13,?18] -> [?20]
[?14] -> [?27]
[?15] -> [?1,?27,?48,?61]
[?15,?18] -> [?1,?66]
[?16] -> [?5,?6,?27,?47,?60,?62]
[?16,?18] -> [?5,?65]
[?17] -> [?2,?27,?46,?59]
[?17,?18] -> [?3,?64]
[?18] -> [?10,?27,?45,?58,?63]
[?18,?19] -> [?12]
[?18,?20] -> [?13]
[?18,?63] -> [?18]
[?18,?64] -> [?17]
[?18,?65] -> [?16]
[?18,?66] -> [?15]
[?18,?67] -> [?11]
[?19] -> [?21,?27,?39]
[?20] -> [?22,?27,?40]
[?21] -> [?19,?28,?54]
[?22] -> [?20,?29,?55]
[?23] -> [?44,?56,?62]
[?25] -> [?1,?33,?35,?43,?52,?70]
[?26] -> [?5,?6,?32,?36,?42,?51,?69,?71,?72]
[?27] -> [?31,?38,?41,?50,?53,?68]
[?28] -> [?12,?21,?39,?54]
[?29] -> [?13,?22,?40,?55]
[?30] -> [?11,?27]
[?31] -> [?27]
[?32] -> [?26]
[?33] -> [?25]
[?34] -> [?11,?27]
[?35] -> [?15,?27]
[?36] -> [?16,?27]
[?37] -> [?17,?27]
[?38] -> [?18,?27]
[?39] -> [?19,?27,?28]
[?40] -> [?20,?27,?29]
[?41] -> [?27]
[?42] -> [?26]
[?43] -> [?25]
[?44] -> [?23]
[?45] -> [?18,?27]
[?46] -> [?17,?27]
[?47] -> [?16,?27]
[?48] -> [?15,?27]
[?50] -> [?27]
[?51] -> [?26]
[?52] -> [?25]
[?54] -> [?21,?28]
[?55] -> [?22,?29]
[?56] -> [?23,?71]
[?57] -> [?62,?72]
[?58] -> [?18]
[?59] -> [?17]
[?60] -> [?16]
[?61] -> [?15]
[?62] -> [?23,?57]
[?68] -> [?27]
[?69] -> [?26]
[?70] -> [?25]
[?71] -> [?56]
[?72] -> [?57]

### Solution ###

[?5,?6,?10,?14,?18,?24,?27,?31,?38,?41,?45,?49,?50,?53,?58,?63,?68,!R]

### Annotated ###

postulate Bool :E: *

postulate True :E: Bool

postulate False :E: Bool

postulate Nat :E: *

postulate Z :R: Nat

postulate S :R: (n :R: Nat) -> Nat

postulate Vec :E: (_ :E: Nat) -> (_ :E: *) -> *

postulate VNil :R: (a :E: *) -> Vec -E- Z -E- a

postulate VCons :R: (a :E: *) -> (n :E: Nat) -> (x :E: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a

vlen :R: (a :E: *) -> (n :E: Nat) -> (_ :R: Vec -E- n -E- a) -> Nat
  pat (a :E: *).
    vlen -E- [a] -E- [Z] -R- (VNil -E- a)  =  Z
  pat (a :E: *) (n :E: Nat) (x :E: a) (xs :R: Vec -E- n -E- a).
    vlen -E- [a] -E- [S -E- n] -R- (VCons -E- a -E- n -E- x -R- xs)  =  S -R- (vlen -E- a -E- n -R- xs)

testVec :R: Vec -E- 2 -E- Bool
  = VCons -E- Bool -E- 1 -E- True -R- (VCons -E- Bool -E- Z -E- False -R- (VNil -E- Bool))

main :R: Nat
  = vlen -E- Bool -E- 2 -R- testVec

### Specialised ###

postulate Bool :!E: *

postulate True :!E: Bool

postulate False :!E: Bool

postulate Nat :!E: *

postulate Z :!R: Nat

postulate S :!R: (n :!R: Nat) -> Nat

postulate Vec :!E: (_ :!E: Nat) -> (_ :!E: *) -> *

postulate VNil :!R: (a :!E: *) -> Vec -!E- Z -!E- a

postulate VCons :!R: (a :!E: *) -> (n :!E: Nat) -> (x :!E: a) -> (xs :!R: Vec -!E- n -!E- a) -> Vec -!E- (S -!E- n) -!E- a

vlen :!R: (a :!E: *) -> (n :!E: Nat) -> (_ :!R: Vec -!E- n -!E- a) -> Nat
  pat (a :!E: *).
    vlen -!E- [a] -!E- [Z] -!R- (VNil -!E- a)  =  Z
  pat (a :!E: *) (n :!E: Nat) (x :!E: a) (xs :!R: Vec -!E- n -!E- a).
    vlen -!E- [a] -!E- [S -!E- n] -!R- (VCons -!E- a -!E- n -!E- x -!R- xs)  =  S -!R- (vlen -!E- a -!E- n -!R- xs)

testVec :!R: Vec -!E- 2 -!E- Bool
  = VCons -!E- Bool -!E- 1 -!E- True -!R- (VCons -!E- Bool -!E- Z -!E- False -!R- (VNil -!E- Bool))

main :!R: Nat
  = vlen -!E- Bool -!E- 2 -!R- testVec

### Final annotation ###

postulate Bool :E: *

postulate True :E: Bool

postulate False :E: Bool

postulate Nat :E: *

postulate Z :R: Nat

postulate S :R: (n :R: Nat) -> Nat

postulate Vec :E: (_ :E: Nat) -> (_ :E: *) -> *

postulate VNil :R: (a :E: *) -> Vec -E- Z -E- a

postulate VCons :R: (a :E: *) -> (n :E: Nat) -> (x :E: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a

vlen :R: (a :E: *) -> (n :E: Nat) -> (_ :R: Vec -E- n -E- a) -> Nat
  pat (a :E: *).
    vlen -E- [a] -E- [Z] -R- (VNil -E- a)  =  Z
  pat (a :E: *) (n :E: Nat) (x :E: a) (xs :R: Vec -E- n -E- a).
    vlen -E- [a] -E- [S -E- n] -R- (VCons -E- a -E- n -E- x -R- xs)  =  S -R- (vlen -E- a -E- n -R- xs)

testVec :R: Vec -E- 2 -E- Bool
  = VCons -E- Bool -E- 1 -E- True -R- (VCons -E- Bool -E- Z -E- False -R- (VNil -E- Bool))

main :R: Nat
  = vlen -E- Bool -E- 2 -R- testVec

### Verification ###

Verification successful.

### Pruned ###

postulate Z

postulate S

postulate VNil

postulate VCons

  vlen VNil  =  Z
  pat (xs).
    vlen (VCons xs)  =  S (vlen xs)

  = VCons (VCons VNil)

  = vlen testVec

### Normal forms ###

unerased:
  2
erased:
  2
