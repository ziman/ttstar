-- vim: ft=agda

### Desugared ###

Bool : *

True : Bool

False : Bool

Nat : *

Z : Nat

S : (n  -R-  Nat) -> Nat

Vec : (_ : Nat) -> (_ : *) -> *

VNil : (a : *) -> (Vec Z a)

VCons : (a : *) -> (n : Nat) -> (x : a) -> (xs : (Vec n a)) -> (Vec (S n) a)

vlen : (a : *) -> (n : Nat) -> (xs : (Vec n a)) -> Nat
vlen = \a : *. \n : Nat. \xs : (Vec n a). 
  case xs of
    VNil (a : *) -> Z
    VCons (a : *) (n : Nat) (x : a) (xs : (Vec n a)) -> (S (vlen a n xs))

testVec : (Vec 2 Bool)
testVec = (VCons Bool 1 True (VCons Bool Z False (VNil Bool)))

main  -R-  Nat
main = (vlen Bool 2 testVec)

### Metaified ###

Bool :?1: *

True :?2: Bool

False :?3: Bool

Nat :?4: *

Z :?5: Nat

S :?6: (n :!R: Nat) -> Nat

Vec :?7: (_ :?8: Nat) -> (_ :?9: *) -> *

VNil :?10: (a :?11: *) -> (Vec -?13- Z -?12- a)

VCons :?14: (a :?15: *) -> (n :?16: Nat) -> (x :?17: a) -> (xs :?18: (Vec -?20- n -?19- a)) -> (Vec -?22- (S -?23- n) -?21- a)

vlen :?24: (a :?25: *) -> (n :?26: Nat) -> (xs :?27: (Vec -?29- n -?28- a)) -> Nat
vlen = \a :?30: *. \n :?31: Nat. \xs :?32: (Vec -?34- n -?33- a). 
  case xs of
    VNil (a :?35: *) -> Z
    VCons (a :?36: *) (n :?37: Nat) (x :?38: a) (xs :?39: (Vec -?41- n -?40- a)) -> (S -?42- (vlen -?45- a -?44- n -?43- xs))

testVec :?46: (Vec -?48- 2 -?47- Bool)
testVec = (VCons -?54- Bool -?53- 1 -?52- True -?51- (VCons -?59- Bool -?58- Z -?57- False -?56- (VNil -?60- Bool)))

main :!R: Nat
main = (vlen -?63- Bool -?62- 2 -?61- testVec)

### Inferred definitions ###

Bool :?1: *
False :?3: Bool
Nat :?4: *
S :?6: (n :!R: Nat) -> Nat
True :?2: Bool
VCons :?14: (a :?15: *) -> (n :?16: Nat) -> (x :?17: a) -> (xs :?18: (Vec -?20- n -?19- a)) -> (Vec -?22- (S -?23- n) -?21- a)
VNil :?10: (a :?11: *) -> (Vec -?13- Z -?12- a)
Vec :?7: (_ :?8: Nat) -> (_ :?9: *) -> *
Z :?5: Nat
main :!R: Nat
  [] -> [?5_1,?6_1,?14_2,?18_1,?24,?24_1,?27,?27_1,?32_1,?39_1,?42_1,?43_1,?46,?61,!R]+[?27_1]
  [?11_2,?18_2] -> [?1_2,?60_2]+[]
  [?12_2,?18_2] -> [?19_2]+[]
  [?13_2,?18_2] -> [?20_2]+[]
  [?15_2] -> [?1_2,?54_2]+[]
  [?15_2,?18_2] -> [?1_2,?59_2]+[]
  [?16_2] -> [?5_2,?6_2,?53_2,?55_2]+[]
  [?16_2,?18_2] -> [?5_2,?58_2]+[]
  [?17_2] -> [?2_2,?52_2]+[]
  [?17_2,?18_2] -> [?3_2,?57_2]+[]
  [?18_2] -> [?10_2,?14_2,?51_2,?56_2]+[]
  [?18_2,?19_2] -> [?12_2]+[]
  [?18_2,?20_2] -> [?13_2]+[]
  [?19_1] -> [?40_1]+[]
  [?19_2] -> [?21_2]+[]
  [?20_1] -> [?41_1]+[]
  [?20_2] -> [?22_2]+[]
  [?21_2] -> [?19_2,?47_2]+[]
  [?22_2] -> [?20_2,?48_2]+[]
  [?23_2] -> [?49_2,?55_2]+[]
  [?25] -> []+[?25_1]
  [?25_1] -> [?1,?25,?30_1,?36_1,?45_1,?63]+[]
  [?26] -> []+[?26_1]
  [?26_1] -> [?5,?6,?26,?31_1,?37_1,?44_1,?62,?64,?65]+[]
  [?28] -> []+[?28_1]
  [?28_1] -> [?28,?33_1,?40_1,?47_2]+[]
  [?29] -> []+[?29_1]
  [?29_1] -> [?29,?34_1,?41_1,?48_2]+[]
  [?30_1] -> [?25_1]+[]
  [?31_1] -> [?26_1]+[]
  [?33_1] -> [?28_1]+[]
  [?34_1] -> [?29_1]+[]
  [?35_1] -> [?11_1]+[]
  [?36_1] -> [?15_1]+[]
  [?37_1] -> [?16_1]+[]
  [?38_1] -> [?17_1]+[]
  [?40_1] -> [?19_1,?28_1]+[]
  [?41_1] -> [?20_1,?29_1]+[]
  [?47] -> []+[?47_2]
  [?47_2] -> [?21_2,?28_1,?47]+[]
  [?48] -> []+[?48_2]
  [?48_2] -> [?22_2,?29_1,?48]+[]
  [?49] -> []+[?49_2]
  [?49_2] -> [?23_2,?49,?64]+[]
  [?50] -> []+[?50_2]
  [?50_2] -> [?50,?55_2,?65]+[]
  [?55_2] -> [?23_2,?50_2]+[]
  [?64] -> [?49_2]+[]
  [?65] -> [?50_2]+[]

testVec :?46: (Vec -?48- 2 -?47- Bool)
  [] -> [?14,!R]+[]
  [?11,?18] -> [?1,?60]+[]
  [?12,?18] -> [?19]+[]
  [?13,?18] -> [?20]+[]
  [?15] -> [?1,?54]+[]
  [?15,?18] -> [?1,?59]+[]
  [?16] -> [?5,?6,?53,?55]+[]
  [?16,?18] -> [?5,?58]+[]
  [?17] -> [?2,?52]+[]
  [?17,?18] -> [?3,?57]+[]
  [?18] -> [?10,?14,?51,?56]+[]
  [?18,?19] -> [?12]+[]
  [?18,?20] -> [?13]+[]
  [?19] -> [?21]+[]
  [?20] -> [?22]+[]
  [?21] -> [?19,?47]+[]
  [?22] -> [?20,?48]+[]
  [?23] -> [?49,?55]+[]
  [?47] -> [?21]+[]
  [?48] -> [?22]+[]
  [?49] -> [?23]+[]
  [?50] -> [?55]+[]
  [?55] -> [?23,?50]+[]

vlen :?24: (a :?25: *) -> (n :?26: Nat) -> (xs :?27: (Vec -?29- n -?28- a)) -> Nat
  [] -> [?5,?6,?18,?24,?27,?32,?39,?42,?43,!R]+[]
  [?19] -> [?40]+[]
  [?20] -> [?41]+[]
  [?25] -> [?30,?36,?45]+[]
  [?26] -> [?31,?37,?44]+[]
  [?28] -> [?33,?40]+[]
  [?29] -> [?34,?41]+[]
  [?30] -> [?25]+[]
  [?31] -> [?26]+[]
  [?33] -> [?28]+[]
  [?34] -> [?29]+[]
  [?35] -> [?11]+[]
  [?36] -> [?15]+[]
  [?37] -> [?16]+[]
  [?38] -> [?17]+[]
  [?40] -> [?19,?28]+[]
  [?41] -> [?20,?29]+[]


### Constraints ###

[] -> [?5,?5_1,?6,?6_1,?14,?14_2,?18,?18_1,?24,?24_1,?27,?27_1,?32,?32_1,?39,?39_1,?42,?42_1,?43,?43_1,?46,?61,!R]+[?27_1]
[?11,?18] -> [?1,?60]+[]
[?11_2,?18_2] -> [?1_2,?60_2]+[]
[?12,?18] -> [?19]+[]
[?12_2,?18_2] -> [?19_2]+[]
[?13,?18] -> [?20]+[]
[?13_2,?18_2] -> [?20_2]+[]
[?15] -> [?1,?54]+[]
[?15,?18] -> [?1,?59]+[]
[?15_2] -> [?1_2,?54_2]+[]
[?15_2,?18_2] -> [?1_2,?59_2]+[]
[?16] -> [?5,?6,?53,?55]+[]
[?16,?18] -> [?5,?58]+[]
[?16_2] -> [?5_2,?6_2,?53_2,?55_2]+[]
[?16_2,?18_2] -> [?5_2,?58_2]+[]
[?17] -> [?2,?52]+[]
[?17,?18] -> [?3,?57]+[]
[?17_2] -> [?2_2,?52_2]+[]
[?17_2,?18_2] -> [?3_2,?57_2]+[]
[?18] -> [?10,?14,?51,?56]+[]
[?18,?19] -> [?12]+[]
[?18,?20] -> [?13]+[]
[?18_2] -> [?10_2,?14_2,?51_2,?56_2]+[]
[?18_2,?19_2] -> [?12_2]+[]
[?18_2,?20_2] -> [?13_2]+[]
[?19] -> [?21,?40]+[]
[?19_1] -> [?40_1]+[]
[?19_2] -> [?21_2]+[]
[?20] -> [?22,?41]+[]
[?20_1] -> [?41_1]+[]
[?20_2] -> [?22_2]+[]
[?21] -> [?19,?47]+[]
[?21_2] -> [?19_2,?47_2]+[]
[?22] -> [?20,?48]+[]
[?22_2] -> [?20_2,?48_2]+[]
[?23] -> [?49,?55]+[]
[?23_2] -> [?49_2,?55_2]+[]
[?25] -> [?30,?36,?45]+[?25_1]
[?25_1] -> [?1,?25,?30_1,?36_1,?45_1,?63]+[]
[?26] -> [?31,?37,?44]+[?26_1]
[?26_1] -> [?5,?6,?26,?31_1,?37_1,?44_1,?62,?64,?65]+[]
[?28] -> [?33,?40]+[?28_1]
[?28_1] -> [?28,?33_1,?40_1,?47_2]+[]
[?29] -> [?34,?41]+[?29_1]
[?29_1] -> [?29,?34_1,?41_1,?48_2]+[]
[?30] -> [?25]+[]
[?30_1] -> [?25_1]+[]
[?31] -> [?26]+[]
[?31_1] -> [?26_1]+[]
[?33] -> [?28]+[]
[?33_1] -> [?28_1]+[]
[?34] -> [?29]+[]
[?34_1] -> [?29_1]+[]
[?35] -> [?11]+[]
[?35_1] -> [?11_1]+[]
[?36] -> [?15]+[]
[?36_1] -> [?15_1]+[]
[?37] -> [?16]+[]
[?37_1] -> [?16_1]+[]
[?38] -> [?17]+[]
[?38_1] -> [?17_1]+[]
[?40] -> [?19,?28]+[]
[?40_1] -> [?19_1,?28_1]+[]
[?41] -> [?20,?29]+[]
[?41_1] -> [?20_1,?29_1]+[]
[?47] -> [?21]+[?47_2]
[?47_2] -> [?21_2,?28_1,?47]+[]
[?48] -> [?22]+[?48_2]
[?48_2] -> [?22_2,?29_1,?48]+[]
[?49] -> [?23]+[?49_2]
[?49_2] -> [?23_2,?49,?64]+[]
[?50] -> [?55]+[?50_2]
[?50_2] -> [?50,?55_2,?65]+[]
[?55] -> [?23,?50]+[]
[?55_2] -> [?23_2,?50_2]+[]
[?64] -> [?49_2]+[]
[?65] -> [?50_2]+[]

### Solution ###

N = [?27_1]

R = [?5,?5_1,?6,?6_1,?10,?14,?14_2,?18,?18_1,?24,?24_1,?27,?27_1,?32,?32_1,?39,?39_1,?42,?42_1,?43,?43_1,?46,?51,?56,?61,!R]

### Annotated ###

Bool :E: *

True :E: Bool

False :E: Bool

Nat :E: *

Z :R: Nat

S :R: (n :R: Nat) -> Nat

Vec :E: (_ :E: Nat) -> (_ :E: *) -> *

VNil :R: (a :E: *) -> (Vec -E- Z -E- a)

VCons :R: (a :E: *) -> (n :E: Nat) -> (x :E: a) -> (xs :R: (Vec -E- n -E- a)) -> (Vec -E- (S -E- n) -E- a)

vlen :R: (a :E: *) -> (n :E: Nat) -> (xs :R: (Vec -E- n -E- a)) -> Nat
vlen = \a :E: *. \n :E: Nat. \xs :R: (Vec -E- n -E- a). 
  case xs of
    VNil (a :E: *) -> Z
    VCons (a :E: *) (n :E: Nat) (x :E: a) (xs :R: (Vec -E- n -E- a)) -> (S -R- (vlen -E- a -E- n -R- xs))

testVec :R: (Vec -E- 2 -E- Bool)
testVec = (VCons -E- Bool -E- 1 -E- True -R- (VCons -E- Bool -E- Z -E- False -R- (VNil -E- Bool)))

main :R: Nat
main = (vlen -E- Bool -E- 2 -R- testVec)

### Pruned ###

vlen = \xs. 
  case xs of
    VNil -> Z
    VCons xs -> (S (vlen xs))

testVec = (VCons (VCons VNil))

main = (vlen testVec)

