-- vim: ft=agda

### Desugared ###

postulate Bool : Type

postulate True : Bool

postulate False : Bool

postulate Nat : Type

postulate Z : Nat

postulate S : (n :R: Nat) -> Nat

postulate Vec : (_ : Nat) -> (_ : Type) -> Type

postulate VNil : (a : Type) -> Vec Z a

postulate VCons : (a : Type) -> (n : Nat) -> (x : a) -> (xs : Vec n a) -> Vec (S n) a

vlen : (a : Type) -> (n : Nat) -> (xs : Vec n a) -> Nat = \(a : Type) (n : Nat) (xs : Vec n a).
  case xs of
    VNil (a' : Type)
      | a = a'
      | n = Z
      => Z
    VCons (a' : Type) (n' : Nat) (x' : a) (xs' : Vec n' a)
      | a = a'
      | n = S n'
      => S (vlen a n' xs')

testVec : Vec 2 Bool = VCons Bool 1 True (VCons Bool Z False (VNil Bool))

main :R: Nat = vlen Bool 2 testVec

### Metaified ###

postulate Bool :1: Type

postulate True :2: Bool

postulate False :3: Bool

postulate Nat :4: Type

postulate Z :5: Nat

postulate S :6: (n :R: Nat) -> Nat

postulate Vec :7: (_ :8: Nat) -> (_ :9: Type) -> Type

postulate VNil :10: (a :11: Type) -> Vec -13- Z -12- a

postulate VCons :14: (a :15: Type) -> (n :16: Nat) -> (x :17: a) -> (xs :18: Vec -20- n -19- a) -> Vec -22- (S -23- n) -21- a

vlen :24: (a :25: Type) -> (n :26: Nat) -> (xs :27: Vec -29- n -28- a) -> Nat = \(a :30: Type) (n :31: Nat) (xs :32: Vec -34- n -33- a).
  case -35- xs of
    VNil (a' :36: Type)
      | a = a'
      | n = Z
      => Z
    VCons (a' :37: Type) (n' :38: Nat) (x' :39: a) (xs' :40: Vec -42- n' -41- a)
      | a = a'
      | n = S -43- n'
      => S -44- (vlen -47- a -46- n' -45- xs')

testVec :48: Vec -50- 2 -49- Bool = VCons -56- Bool -55- 1 -54- True -53- (VCons -61- Bool -60- Z -59- False -58- (VNil -62- Bool))

main :R: Nat = vlen -65- Bool -64- 2 -63- testVec

### Inferred definitions ###

postulate Bool :1: Type {- constraints apply -}
  [1] -> [1]

postulate False :3: Bool {- constraints apply -}
  [1,3] -> [1]
  [3] -> [3]

postulate Nat :4: Type {- constraints apply -}
  [4] -> [4]

postulate S :6: (n :R: Nat) -> Nat {- constraints apply -}
  [4,6] -> [4]
  [6] -> [6]

postulate True :2: Bool {- constraints apply -}
  [1,2] -> [1]
  [2] -> [2]

postulate Type :R: Type

postulate VCons :14: (a :15: Type) -> (n :16: Nat) -> (x :17: a) -> (xs :18: Vec -20- n -19- a) -> Vec -22- (S -23- n) -21- a {- constraints apply -}
  [4,6,8,14] -> [4]
  [4,8,14,16] -> [4]
  [6,8,14] -> [6]
  [7,14] -> [7]
  [8,14] -> [22,23]
  [8,14,16] -> [16]
  [9,14] -> [21]
  [9,14,15] -> [15]
  [14] -> [14]
  [14,21] -> [9]
  [14,22] -> [8]

postulate VNil :10: (a :11: Type) -> Vec -13- Z -12- a {- constraints apply -}
  [4,5,8,10] -> [4]
  [5,8,10] -> [5]
  [7,10] -> [7]
  [8,10] -> [13]
  [9,10] -> [12]
  [9,10,11] -> [11]
  [10] -> [10]
  [10,12] -> [9]
  [10,13] -> [8]

postulate Vec :7: (_ :8: Nat) -> (_ :9: Type) -> Type {- constraints apply -}
  [7] -> [7]

postulate Z :5: Nat {- constraints apply -}
  [4,5] -> [4]
  [5] -> [5]

main :R: Nat = vlen -65- Bool -64- 2 -63- testVec {- constraints apply -}
  [1,2,17,27,48] -> [1]
  [1,3,17,18,27,48] -> [1]
  [1,9,27,48] -> [1]
  [1,11,18,27,48] -> [1]
  [1,15,18,27,48] -> [1]
  [1,15,27,48] -> [1]
  [1,25] -> [1]
  [2,17,27,48] -> [2]
  [3,17,18,27,48] -> [3]
  [4] -> [4]
  [4,5,8,10,18,27,48] -> [4]
  [4,5,8,27,48] -> [4]
  [4,5,16,18,27,48] -> [4]
  [4,5,16,27,48] -> [4]
  [4,5,24] -> [4]
  [4,5,26] -> [4]
  [4,6,8,14,18,27,48] -> [4]
  [4,6,8,14,27,48] -> [4]
  [4,6,8,27,48] -> [4]
  [4,6,16,27,48] -> [4]
  [4,6,24] -> [4]
  [4,6,26] -> [4]
  [4,8,14,16,18,27,48] -> [4]
  [4,8,14,16,27,48] -> [4]
  [4,8,24,27,38,40] -> [4]
  [4,24] -> [4,5,6,8,10,14,16,18,27,38,40]
  [4,24,26,38] -> [4]
  [5,8,10,18,27,48] -> [5]
  [5,8,27,48] -> [5]
  [5,16,18,27,48] -> [5]
  [5,16,27,48] -> [5]
  [5,24] -> [5,8,10,27]
  [5,26] -> [5]
  [6,8,14,18,27,48] -> [6]
  [6,8,14,27,48] -> [6]
  [6,8,27,48] -> [6]
  [6,16,27,48] -> [6]
  [6,24] -> [6,8,14,27]
  [6,26] -> [6]
  [7,10,18,27,48] -> [7]
  [7,14,18,27,48] -> [7]
  [7,14,27,48] -> [7]
  [7,24] -> [7,10,14,18,27,40]
  [7,24,27,40] -> [7]
  [7,27,48] -> [7]
  [8,10,18,27,48] -> [13]
  [8,14,16,18,27,48] -> [16]
  [8,14,16,27,48] -> [16]
  [8,14,18,27,48] -> [22,23]
  [8,14,27,48] -> [22,23]
  [8,24] -> [10,13,14,18,22,27,40,42]
  [8,24,27,38,40] -> [38]
  [8,24,27,40] -> [42]
  [8,27,48] -> [50,51,52]
  [9,10,11,18,27,48] -> [11]
  [9,10,18,27,48] -> [12]
  [9,14,15,18,27,48] -> [15]
  [9,14,15,27,48] -> [15]
  [9,14,18,27,48] -> [21]
  [9,14,27,48] -> [21]
  [9,24] -> [10,12,14,18,21,27,40,41]
  [9,24,27,30,40] -> [30]
  [9,24,27,40] -> [41]
  [9,27,48] -> [49]
  [10,12,18,27,48] -> [9]
  [10,13,18,27,48] -> [8]
  [10,18,27,48] -> [10]
  [10,24] -> [10,27]
  [11,18,27,48] -> [62]
  [11,24] -> [9,10,11,27,36]
  [12,18,27,48] -> [19]
  [12,24] -> [9,10,27,28]
  [13,18,27,48] -> [20]
  [13,24] -> [8,10,27,29]
  [14,18,21,27,48] -> [9]
  [14,18,22,27,48] -> [8]
  [14,18,27,48] -> [14]
  [14,21,27,48] -> [9]
  [14,22,27,48] -> [8]
  [14,24] -> [14,27]
  [14,27,48] -> [14]
  [15,18,27,48] -> [61]
  [15,24] -> [9,14,15,27,37]
  [15,27,48] -> [56]
  [16,18,27,48] -> [60]
  [16,24] -> [8,14,16,27,38]
  [16,27,48] -> [55,57]
  [17,18,27,48] -> [59]
  [17,24] -> [27,39]
  [17,27,48] -> [54]
  [18,19,27,48] -> [12]
  [18,20,27,48] -> [13]
  [18,24] -> [27,40]
  [18,27,48] -> [53,58]
  [18,27,48,58] -> [18]
  [18,27,48,59] -> [17]
  [18,27,48,60] -> [16]
  [18,27,48,61] -> [15]
  [18,27,48,62] -> [11]
  [19,24] -> [27,41]
  [19,27,48] -> [21]
  [20,24] -> [27,42]
  [20,27,48] -> [22]
  [21,24] -> [9,14,27,28]
  [21,27,48] -> [19,49]
  [22,24] -> [8,14,27,29]
  [22,27,48] -> [20,50]
  [23,24] -> [8,14,27,43]
  [23,27,48] -> [51,57]
  [24] -> [24,35,44]
  [24,25] -> [30,47]
  [24,26] -> [31,46]
  [24,26,38] -> [38]
  [24,27] -> [32,45]
  [24,27,40] -> [40]
  [24,27,40,41] -> [9]
  [24,27,40,42] -> [8]
  [24,28] -> [12,21,41]
  [24,29] -> [13,22,42]
  [24,30] -> [9,17,18,25,27,30,39,40]
  [24,31] -> [26]
  [24,32] -> [27]
  [24,35] -> [32]
  [24,36] -> [11,27,35,36]
  [24,37] -> [15,27,35,37]
  [24,38] -> [8,16,18,27,35,38,40]
  [24,39] -> [17,27,35,39]
  [24,40] -> [18,27,35,40]
  [24,41] -> [9,18,19,27,28,40]
  [24,42] -> [8,18,20,27,29,40]
  [24,43] -> [23]
  [24,45] -> [27]
  [24,46] -> [26]
  [24,47] -> [25]
  [25] -> [65]
  [26] -> [64,66,67]
  [27] -> [63]
  [27,48] -> [48]
  [27,48,49] -> [9,21]
  [27,48,50] -> [8,22]
  [27,48,51] -> [23]
  [27,48,52] -> [57]
  [27,48,53] -> [18]
  [27,48,54] -> [17]
  [27,48,55] -> [16]
  [27,48,56] -> [15]
  [27,48,57] -> [23,52]
  [28] -> [49]
  [29] -> [50]
  [49] -> [28]
  [50] -> [29]
  [51] -> [66]
  [52] -> [67]
  [63] -> [27]
  [64] -> [26]
  [65] -> [25]
  [66] -> [51]
  [67] -> [52]

testVec :48: Vec -50- 2 -49- Bool = VCons -56- Bool -55- 1 -54- True -53- (VCons -61- Bool -60- Z -59- False -58- (VNil -62- Bool)) {- constraints apply -}
  [1,2,17,48] -> [1]
  [1,3,17,18,48] -> [1]
  [1,9,48] -> [1]
  [1,11,18,48] -> [1]
  [1,15,18,48] -> [1]
  [1,15,48] -> [1]
  [2,17,48] -> [2]
  [3,17,18,48] -> [3]
  [4,5,8,10,18,48] -> [4]
  [4,5,8,48] -> [4]
  [4,5,16,18,48] -> [4]
  [4,5,16,48] -> [4]
  [4,6,8,14,18,48] -> [4]
  [4,6,8,14,48] -> [4]
  [4,6,8,48] -> [4]
  [4,6,16,48] -> [4]
  [4,8,14,16,18,48] -> [4]
  [4,8,14,16,48] -> [4]
  [5,8,10,18,48] -> [5]
  [5,8,48] -> [5]
  [5,16,18,48] -> [5]
  [5,16,48] -> [5]
  [6,8,14,18,48] -> [6]
  [6,8,14,48] -> [6]
  [6,8,48] -> [6]
  [6,16,48] -> [6]
  [7,10,18,48] -> [7]
  [7,14,18,48] -> [7]
  [7,14,48] -> [7]
  [7,48] -> [7]
  [8,10,18,48] -> [13]
  [8,14,16,18,48] -> [16]
  [8,14,16,48] -> [16]
  [8,14,18,48] -> [22,23]
  [8,14,48] -> [22,23]
  [8,48] -> [50,51,52]
  [9,10,11,18,48] -> [11]
  [9,10,18,48] -> [12]
  [9,14,15,18,48] -> [15]
  [9,14,15,48] -> [15]
  [9,14,18,48] -> [21]
  [9,14,48] -> [21]
  [9,48] -> [49]
  [10,12,18,48] -> [9]
  [10,13,18,48] -> [8]
  [10,18,48] -> [10]
  [11,18,48] -> [62]
  [12,18,48] -> [19]
  [13,18,48] -> [20]
  [14,18,21,48] -> [9]
  [14,18,22,48] -> [8]
  [14,18,48] -> [14]
  [14,21,48] -> [9]
  [14,22,48] -> [8]
  [14,48] -> [14]
  [15,18,48] -> [61]
  [15,48] -> [56]
  [16,18,48] -> [60]
  [16,48] -> [55,57]
  [17,18,48] -> [59]
  [17,48] -> [54]
  [18,19,48] -> [12]
  [18,20,48] -> [13]
  [18,48] -> [53,58]
  [18,48,58] -> [18]
  [18,48,59] -> [17]
  [18,48,60] -> [16]
  [18,48,61] -> [15]
  [18,48,62] -> [11]
  [19,48] -> [21]
  [20,48] -> [22]
  [21,48] -> [19,49]
  [22,48] -> [20,50]
  [23,48] -> [51,57]
  [48] -> [48]
  [48,49] -> [9,21]
  [48,50] -> [8,22]
  [48,51] -> [23]
  [48,52] -> [57]
  [48,53] -> [18]
  [48,54] -> [17]
  [48,55] -> [16]
  [48,56] -> [15]
  [48,57] -> [23,52]

vlen :24: (a :25: Type) -> (n :26: Nat) -> (xs :27: Vec -29- n -28- a) -> Nat = \(a :30: Type) (n :31: Nat) (xs :32: Vec -34- n -33- a).
  case -35- xs of
    VNil (a' :36: Type)
      | a = a'
      | n = Z
      => Z
    VCons (a' :37: Type) (n' :38: Nat) (x' :39: a) (xs' :40: Vec -42- n' -41- a)
      | a = a'
      | n = S -43- n'
      => S -44- (vlen -47- a -46- n' -45- xs') {- constraints apply -}
  [4,5,24] -> [4]
  [4,6,24] -> [4]
  [4,8,24,27,38,40] -> [4]
  [4,24] -> [4,5,6,8,10,14,16,18,27,38,40]
  [4,24,26,38] -> [4]
  [5,24] -> [5,8,10,27]
  [6,24] -> [6,8,14,27]
  [7,24] -> [7,10,14,18,27,40]
  [7,24,27,40] -> [7]
  [8,24] -> [10,13,14,18,22,27,40,42]
  [8,24,27,38,40] -> [38]
  [8,24,27,40] -> [42]
  [9,24] -> [10,12,14,18,21,27,40,41]
  [9,24,27,30,40] -> [30]
  [9,24,27,40] -> [41]
  [10,24] -> [10,27]
  [11,24] -> [9,10,11,27,36]
  [12,24] -> [9,10,27,28]
  [13,24] -> [8,10,27,29]
  [14,24] -> [14,27]
  [15,24] -> [9,14,15,27,37]
  [16,24] -> [8,14,16,27,38]
  [17,24] -> [27,39]
  [18,24] -> [27,40]
  [19,24] -> [27,41]
  [20,24] -> [27,42]
  [21,24] -> [9,14,27,28]
  [22,24] -> [8,14,27,29]
  [23,24] -> [8,14,27,43]
  [24] -> [24,35,44]
  [24,25] -> [30,47]
  [24,26] -> [31,46]
  [24,26,38] -> [38]
  [24,27] -> [32,45]
  [24,27,40] -> [40]
  [24,27,40,41] -> [9]
  [24,27,40,42] -> [8]
  [24,28] -> [12,21,41]
  [24,29] -> [13,22,42]
  [24,30] -> [9,17,18,25,27,30,39,40]
  [24,31] -> [26]
  [24,32] -> [27]
  [24,35] -> [32]
  [24,36] -> [11,27,35,36]
  [24,37] -> [15,27,35,37]
  [24,38] -> [8,16,18,27,35,38,40]
  [24,39] -> [17,27,35,39]
  [24,40] -> [18,27,35,40]
  [24,41] -> [9,18,19,27,28,40]
  [24,42] -> [8,18,20,27,29,40]
  [24,43] -> [23]
  [24,45] -> [27]
  [24,46] -> [26]
  [24,47] -> [25]


### Constraints ###

[1,2,17,27,48] -> [1]
[1,3,17,18,27,48] -> [1]
[1,9,27,48] -> [1]
[1,11,18,27,48] -> [1]
[1,15,18,27,48] -> [1]
[1,15,27,48] -> [1]
[1,25] -> [1]
[2,17,27,48] -> [2]
[3,17,18,27,48] -> [3]
[4] -> [4]
[4,5,8,10,18,27,48] -> [4]
[4,5,8,27,48] -> [4]
[4,5,16,18,27,48] -> [4]
[4,5,16,27,48] -> [4]
[4,5,24] -> [4]
[4,5,26] -> [4]
[4,6,8,14,18,27,48] -> [4]
[4,6,8,14,27,48] -> [4]
[4,6,8,27,48] -> [4]
[4,6,16,27,48] -> [4]
[4,6,24] -> [4]
[4,6,26] -> [4]
[4,8,14,16,18,27,48] -> [4]
[4,8,14,16,27,48] -> [4]
[4,8,24,27,38,40] -> [4]
[4,24] -> [4,5,6,8,10,14,16,18,27,38,40]
[4,24,26,38] -> [4]
[5,8,10,18,27,48] -> [5]
[5,8,27,48] -> [5]
[5,16,18,27,48] -> [5]
[5,16,27,48] -> [5]
[5,24] -> [5,8,10,27]
[5,26] -> [5]
[6,8,14,18,27,48] -> [6]
[6,8,14,27,48] -> [6]
[6,8,27,48] -> [6]
[6,16,27,48] -> [6]
[6,24] -> [6,8,14,27]
[6,26] -> [6]
[7,10,18,27,48] -> [7]
[7,14,18,27,48] -> [7]
[7,14,27,48] -> [7]
[7,24] -> [7,10,14,18,27,40]
[7,24,27,40] -> [7]
[7,27,48] -> [7]
[8,10,18,27,48] -> [13]
[8,14,16,18,27,48] -> [16]
[8,14,16,27,48] -> [16]
[8,14,18,27,48] -> [22,23]
[8,14,27,48] -> [22,23]
[8,24] -> [10,13,14,18,22,27,40,42]
[8,24,27,38,40] -> [38]
[8,24,27,40] -> [42]
[8,27,48] -> [50,51,52]
[9,10,11,18,27,48] -> [11]
[9,10,18,27,48] -> [12]
[9,14,15,18,27,48] -> [15]
[9,14,15,27,48] -> [15]
[9,14,18,27,48] -> [21]
[9,14,27,48] -> [21]
[9,24] -> [10,12,14,18,21,27,40,41]
[9,24,27,30,40] -> [30]
[9,24,27,40] -> [41]
[9,27,48] -> [49]
[10,12,18,27,48] -> [9]
[10,13,18,27,48] -> [8]
[10,18,27,48] -> [10]
[10,24] -> [10,27]
[11,18,27,48] -> [62]
[11,24] -> [9,10,11,27,36]
[12,18,27,48] -> [19]
[12,24] -> [9,10,27,28]
[13,18,27,48] -> [20]
[13,24] -> [8,10,27,29]
[14,18,21,27,48] -> [9]
[14,18,22,27,48] -> [8]
[14,18,27,48] -> [14]
[14,21,27,48] -> [9]
[14,22,27,48] -> [8]
[14,24] -> [14,27]
[14,27,48] -> [14]
[15,18,27,48] -> [61]
[15,24] -> [9,14,15,27,37]
[15,27,48] -> [56]
[16,18,27,48] -> [60]
[16,24] -> [8,14,16,27,38]
[16,27,48] -> [55,57]
[17,18,27,48] -> [59]
[17,24] -> [27,39]
[17,27,48] -> [54]
[18,19,27,48] -> [12]
[18,20,27,48] -> [13]
[18,24] -> [27,40]
[18,27,48] -> [53,58]
[18,27,48,58] -> [18]
[18,27,48,59] -> [17]
[18,27,48,60] -> [16]
[18,27,48,61] -> [15]
[18,27,48,62] -> [11]
[19,24] -> [27,41]
[19,27,48] -> [21]
[20,24] -> [27,42]
[20,27,48] -> [22]
[21,24] -> [9,14,27,28]
[21,27,48] -> [19,49]
[22,24] -> [8,14,27,29]
[22,27,48] -> [20,50]
[23,24] -> [8,14,27,43]
[23,27,48] -> [51,57]
[24] -> [24,35,44]
[24,25] -> [30,47]
[24,26] -> [31,46]
[24,26,38] -> [38]
[24,27] -> [32,45]
[24,27,40] -> [40]
[24,27,40,41] -> [9]
[24,27,40,42] -> [8]
[24,28] -> [12,21,41]
[24,29] -> [13,22,42]
[24,30] -> [9,17,18,25,27,30,39,40]
[24,31] -> [26]
[24,32] -> [27]
[24,35] -> [32]
[24,36] -> [11,27,35,36]
[24,37] -> [15,27,35,37]
[24,38] -> [8,16,18,27,35,38,40]
[24,39] -> [17,27,35,39]
[24,40] -> [18,27,35,40]
[24,41] -> [9,18,19,27,28,40]
[24,42] -> [8,18,20,27,29,40]
[24,43] -> [23]
[24,45] -> [27]
[24,46] -> [26]
[24,47] -> [25]
[25] -> [65]
[26] -> [64,66,67]
[27] -> [63]
[27,48] -> [48]
[27,48,49] -> [9,21]
[27,48,50] -> [8,22]
[27,48,51] -> [23]
[27,48,52] -> [57]
[27,48,53] -> [18]
[27,48,54] -> [17]
[27,48,55] -> [16]
[27,48,56] -> [15]
[27,48,57] -> [23,52]
[28] -> [49]
[29] -> [50]
[49] -> [28]
[50] -> [29]
[51] -> [66]
[52] -> [67]
[63] -> [27]
[64] -> [26]
[65] -> [25]
[66] -> [51]
[67] -> [52]

### Solution ###

[R]

### Annotated ###

postulate Bool :E: Type

postulate True :E: Bool

postulate False :E: Bool

postulate Nat :E: Type

postulate Z :E: Nat

postulate S :E: (n :R: Nat) -> Nat

postulate Vec :E: (_ :E: Nat) -> (_ :E: Type) -> Type

postulate VNil :E: (a :E: Type) -> Vec -E- Z -E- a

postulate VCons :E: (a :E: Type) -> (n :E: Nat) -> (x :E: a) -> (xs :E: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a

vlen :E: (a :E: Type) -> (n :E: Nat) -> (xs :E: Vec -E- n -E- a) -> Nat = \(a :E: Type) (n :E: Nat) (xs :E: Vec -E- n -E- a).
  case -E- xs of
    VNil (a' :E: Type)
      | a = a'
      | n = Z
      => Z
    VCons (a' :E: Type) (n' :E: Nat) (x' :E: a) (xs' :E: Vec -E- n' -E- a)
      | a = a'
      | n = S -E- n'
      => S -E- (vlen -E- a -E- n' -E- xs')

testVec :E: Vec -E- 2 -E- Bool = VCons -E- Bool -E- 1 -E- True -E- (VCons -E- Bool -E- Z -E- False -E- (VNil -E- Bool))

main :R: Nat = vlen -E- Bool -E- 2 -E- testVec

### Specialised ###

postulate Bool :E: Type

postulate True :E: Bool

postulate False :E: Bool

postulate Nat :E: Type

postulate Z :E: Nat

postulate S :E: (n :R: Nat) -> Nat

postulate Vec :E: (_ :E: Nat) -> (_ :E: Type) -> Type

postulate VNil :E: (a :E: Type) -> Vec -E- Z -E- a

postulate VCons :E: (a :E: Type) -> (n :E: Nat) -> (x :E: a) -> (xs :E: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a

vlen :E: (a :E: Type) -> (n :E: Nat) -> (xs :E: Vec -E- n -E- a) -> Nat = \(a :E: Type) (n :E: Nat) (xs :E: Vec -E- n -E- a).
  case -E- xs of
    VNil (a' :E: Type)
      | a = a'
      | n = Z
      => Z
    VCons (a' :E: Type) (n' :E: Nat) (x' :E: a) (xs' :E: Vec -E- n' -E- a)
      | a = a'
      | n = S -E- n'
      => S -E- (vlen -E- a -E- n' -E- xs')

testVec :E: Vec -E- 2 -E- Bool = VCons -E- Bool -E- 1 -E- True -E- (VCons -E- Bool -E- Z -E- False -E- (VNil -E- Bool))

main :R: Nat = vlen -E- Bool -E- 2 -E- testVec

### Final annotation ###

postulate Bool :E: Type

postulate True :E: Bool

postulate False :E: Bool

postulate Nat :E: Type

postulate Z :E: Nat

postulate S :E: (n :R: Nat) -> Nat

postulate Vec :E: (_ :E: Nat) -> (_ :E: Type) -> Type

postulate VNil :E: (a :E: Type) -> Vec -E- Z -E- a

postulate VCons :E: (a :E: Type) -> (n :E: Nat) -> (x :E: a) -> (xs :E: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a

vlen :E: (a :E: Type) -> (n :E: Nat) -> (xs :E: Vec -E- n -E- a) -> Nat = \(a :E: Type) (n :E: Nat) (xs :E: Vec -E- n -E- a).
  case -E- xs of
    VNil (a' :E: Type)
      | a = a'
      | n = Z
      => Z
    VCons (a' :E: Type) (n' :E: Nat) (x' :E: a) (xs' :E: Vec -E- n' -E- a)
      | a = a'
      | n = S -E- n'
      => S -E- (vlen -E- a -E- n' -E- xs')

testVec :E: Vec -E- 2 -E- Bool = VCons -E- Bool -E- 1 -E- True -E- (VCons -E- Bool -E- Z -E- False -E- (VNil -E- Bool))

main :R: Nat = vlen -E- Bool -E- 2 -E- testVec

### Verification ###

Verification successful.

### Pruned ###

main = vlen

### Normal forms ###

unerased:
  2
erased:
