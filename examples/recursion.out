-- vim: ft=agda

### Desugared ###

Bool : *
Bool = (axiom)

True : Bool
True = (axiom)

False : Bool
False = (axiom)

Nat : *
Nat = (axiom)

Z : Nat
Z = (axiom)

S : (n  -R-  Nat) -> Nat
S = (axiom)

Vec : (_ : Nat) -> (_ : *) -> *
Vec = (axiom)

VNil : (a : *) -> (Vec Z a)
VNil = (axiom)

VCons : (a : *) -> (n : Nat) -> (x : a) -> (xs : (Vec n a)) -> (Vec (S n) a)
VCons = (axiom)

vlen : (a : *) -> (n : Nat) -> (xs : (Vec n a)) -> Nat
vlen = \a : *. \n : Nat. \xs : (Vec n a). 
  case xs of
    VNil (a : *) -> Z
    VCons (a : *) (n : Nat) (x : a) (xs : (Vec n a)) -> (S (vlen a n xs))

testVec : (Vec (S (S Z)) Bool)
testVec = (VCons Bool (S Z) True (VCons Bool Z False (VNil Bool)))

main  -R-  Nat
main = (vlen Bool (S (S Z)) testVec)

### Metaified ###

Bool :?1: *
Bool = (axiom)

True :?2: Bool
True = (axiom)

False :?3: Bool
False = (axiom)

Nat :?4: *
Nat = (axiom)

Z :?5: Nat
Z = (axiom)

S :?6: (n :!R: Nat) -> Nat
S = (axiom)

Vec :?7: (_ :?8: Nat) -> (_ :?9: *) -> *
Vec = (axiom)

VNil :?10: (a :?11: *) -> (Vec -?13- Z -?12- a)
VNil = (axiom)

VCons :?14: (a :?15: *) -> (n :?16: Nat) -> (x :?17: a) -> (xs :?18: (Vec -?20- n -?19- a)) -> (Vec -?22- (S -?23- n) -?21- a)
VCons = (axiom)

vlen :?24: (a :?25: *) -> (n :?26: Nat) -> (xs :?27: (Vec -?29- n -?28- a)) -> Nat
vlen = \a :?30: *. \n :?31: Nat. \xs :?32: (Vec -?34- n -?33- a). 
  case xs of
    VNil (a :?36: *) -> Z
    VCons (a :?38: *) (n :?39: Nat) (x :?40: a) (xs :?41: (Vec -?43- n -?42- a)) -> (S -?44- (vlen -?47- a -?46- n -?45- xs))

testVec :?48: (Vec -?50- (S -?51- (S -?52- Z)) -?49- Bool)
testVec = (VCons -?56- Bool -?55- (S -?57- Z) -?54- True -?53- (VCons -?61- Bool -?60- Z -?59- False -?58- (VNil -?62- Bool)))

main :!R: Nat
main = (vlen -?65- Bool -?64- (S -?66- (S -?67- Z)) -?63- testVec)

### Constraints ###

[?1] <- [?53,?58,?62,!R]
[?1] <- [?53,?61,!R]
[?1] <- [?56,!R]
[?1] <- [?65,!R]
[?2] <- [?54,!R]
[?3] <- [?53,?59,!R]
[?5] <- [?53,?60,!R]
[?5] <- [?55,?57,!R]
[?5] <- [?64,?66,?67,!R]
[?5] <- [!R]
[?6] <- [?55,!R]
[?6] <- [?64,?66,!R]
[?6] <- [?64,!R]
[?6] <- [!R]
[?10] <- [?35]
[?10] <- [?53,?58,!R]
[?11] <- [?36]
[?11] <- [?53,?58,?62]
[?12] <- [?19,?53]
[?13] <- [?20,?53]
[?14] <- [?37]
[?14] <- [?53,!R]
[?14] <- [!R]
[?15] <- [?38]
[?15] <- [?53,?61]
[?15] <- [?56]
[?16] <- [?39]
[?16] <- [?53,?60]
[?16] <- [?55]
[?17] <- [?40]
[?17] <- [?53,?59]
[?17] <- [?54]
[?18] <- [?41]
[?18] <- [?53]
[?18] <- [?53,?58]
[?19] <- [?12,?53]
[?19] <- [?21]
[?19] <- [?42]
[?20] <- [?13,?53]
[?20] <- [?22]
[?20] <- [?43]
[?21] <- [?19]
[?21] <- [?49]
[?22] <- [?20]
[?22] <- [?50]
[?23] <- [?51]
[?23] <- [?57]
[?24] <- [?44,!R]
[?24] <- [!R]
[?25] <- [?30]
[?25] <- [?44,?47]
[?25] <- [?65]
[?26] <- [?31]
[?26] <- [?44,?46]
[?26] <- [?64]
[?27] <- [?32]
[?27] <- [?44,?45]
[?27] <- [?63]
[?28] <- [?33]
[?28] <- [?42,?44]
[?28] <- [?49]
[?29] <- [?34]
[?29] <- [?43,?44]
[?29] <- [?50]
[?30] <- [?25]
[?31] <- [?26]
[?32] <- [?27]
[?32] <- [!R]
[?33] <- [?28]
[?34] <- [?29]
[?35] <- [?10]
[?36] <- [?11]
[?37] <- [?14]
[?38] <- [?15]
[?38] <- [?44,?47,!R]
[?39] <- [?16]
[?39] <- [?44,?46,!R]
[?40] <- [?17]
[?41] <- [?18]
[?41] <- [?44,?45,!R]
[?42] <- [?19]
[?42] <- [?28,?44]
[?43] <- [?20]
[?43] <- [?29,?44]
[?44] <- [!R]
[?45] <- [?27,?44]
[?46] <- [?26,?44]
[?47] <- [?25,?44]
[?48] <- [?63,!R]
[?49] <- [?21]
[?49] <- [?28]
[?50] <- [?22]
[?50] <- [?29]
[?51] <- [?23]
[?51] <- [?66]
[?52] <- [?57]
[?52] <- [?67]
[?53] <- [?18]
[?54] <- [?17]
[?55] <- [?16]
[?56] <- [?15]
[?57] <- [?23]
[?57] <- [?52]
[?57] <- [?55,!R]
[?58] <- [?18,?53]
[?59] <- [?17,?53]
[?60] <- [?16,?53]
[?61] <- [?15,?53]
[?62] <- [?11,?53,?58]
[?63] <- [?27]
[?64] <- [?26]
[?65] <- [?25]
[?66] <- [?51]
[?66] <- [?64,!R]
[?67] <- [?52]
[?67] <- [?64,?66,!R]
[!R] <- [?44]
[!R] <- [?55,?57]
[!R] <- [?64,?66]
[!R] <- [?64,?66,?67]

### Solution ###

[?5,?6,?10,?14,?18,?24,?27,?32,?35,?37,?41,?44,?45,?48,?53,?58,?63,!R]

### Annotated ###

Bool :I: *
Bool = (axiom)

True :I: Bool
True = (axiom)

False :I: Bool
False = (axiom)

Nat :I: *
Nat = (axiom)

Z :R: Nat
Z = (axiom)

S :R: (n :R: Nat) -> Nat
S = (axiom)

Vec :I: (_ :I: Nat) -> (_ :I: *) -> *
Vec = (axiom)

VNil :R: (a :I: *) -> (Vec -I- Z -I- a)
VNil = (axiom)

VCons :R: (a :I: *) -> (n :I: Nat) -> (x :I: a) -> (xs :R: (Vec -I- n -I- a)) -> (Vec -I- (S -I- n) -I- a)
VCons = (axiom)

vlen :R: (a :I: *) -> (n :I: Nat) -> (xs :R: (Vec -I- n -I- a)) -> Nat
vlen = \a :I: *. \n :I: Nat. \xs :R: (Vec -I- n -I- a). 
  case xs of
    VNil (a :I: *) -> Z
    VCons (a :I: *) (n :I: Nat) (x :I: a) (xs :R: (Vec -I- n -I- a)) -> (S -R- (vlen -I- a -I- n -R- xs))

testVec :R: (Vec -I- (S -I- (S -I- Z)) -I- Bool)
testVec = (VCons -I- Bool -I- (S -I- Z) -I- True -R- (VCons -I- Bool -I- Z -I- False -R- (VNil -I- Bool)))

main :R: Nat
main = (vlen -I- Bool -I- (S -I- (S -I- Z)) -R- testVec)

### Pruned ###

Z = (axiom)

S = (axiom)

VNil = (axiom)

VCons = (axiom)

vlen = \xs. 
  case xs of
    VNil -> Z
    VCons xs -> (S (vlen xs))

testVec = (VCons (VCons VNil))

main = (vlen testVec)

