-- vim: ft=agda

### Desugared ###

Bool : *

True : Bool

False : Bool

Nat : *

Z : Nat

S : (n  -R-  Nat) -> Nat

Vec : (_ : Nat) -> (_ : *) -> *

VNil : (a : *) -> (Vec Z a)

VCons : (a : *) -> (n : Nat) -> (x : a) -> (xs : (Vec n a)) -> (Vec (S n) a)

vlen : (a : *) -> (n : Nat) -> (xs : (Vec n a)) -> Nat
vlen = \a : *. \n : Nat. \xs : (Vec n a). 
  case xs of
    VNil (a : *) -> Z
    VCons (a : *) (n : Nat) (x : a) (xs : (Vec n a)) -> (S (vlen a n xs))

testVec : (Vec 2 Bool)
testVec = (VCons Bool 1 True (VCons Bool Z False (VNil Bool)))

main  -R-  Nat
main = (vlen Bool 2 testVec)

### Metaified ###

Bool :?1: *

True :?2: Bool

False :?3: Bool

Nat :?4: *

Z :?5: Nat

S :?6: (n :!R: Nat) -> Nat

Vec :?7: (_ :?8: Nat) -> (_ :?9: *) -> *

VNil :?10: (a :?11: *) -> (Vec -?13- Z -?12- a)

VCons :?14: (a :?15: *) -> (n :?16: Nat) -> (x :?17: a) -> (xs :?18: (Vec -?20- n -?19- a)) -> (Vec -?22- (S -?23- n) -?21- a)

vlen :?24: (a :?25: *) -> (n :?26: Nat) -> (xs :?27: (Vec -?29- n -?28- a)) -> Nat
vlen = \a :?30: *. \n :?31: Nat. \xs :?32: (Vec -?34- n -?33- a). 
  case xs of
    VNil (a :?35: *) -> Z
    VCons (a :?36: *) (n :?37: Nat) (x :?38: a) (xs :?39: (Vec -?41- n -?40- a)) -> (S -?42- (vlen -?45- a -?44- n -?43- xs))

testVec :?46: (Vec -?48- 2 -?47- Bool)
testVec = (VCons -?54- Bool -?53- 1 -?52- True -?51- (VCons -?59- Bool -?58- Z -?57- False -?56- (VNil -?60- Bool)))

main :!R: Nat
main = (vlen -?63- Bool -?62- 2 -?61- testVec)

### Inferred definitions ###

