-- vim: ft=agda

### Desugared ###

postulate Bool : Type

postulate True : Bool

postulate False : Bool

postulate Nat : Type

postulate Z : Nat

postulate S : (n :ᴿ Nat) -> Nat

postulate Vec : (_ : Nat) -> (_ : Type) -> Type

postulate VNil : (a : Type) -> Vec Z a

postulate VCons : (a : Type) -> (n : Nat) -> (x : a) -> (xs : Vec n a) -> Vec (S n) a

vlen : (a : Type) -> (n : Nat) -> (xs : Vec n a) -> Nat = \(a : Type) (n : Nat) (xs : Vec n a).
  case xs of
    VNil (a' : Type)
      | a = a'
      | n = Z
      => Z
    VCons (a' : Type) (n' : Nat) (x' : a) (xs' : Vec n' a)
      | a = a'
      | n = S n'
      => S (vlen a n' xs')

testVec : Vec 2 Bool = VCons Bool 1 True (VCons Bool Z False (VNil Bool))

main :ᴿ Nat = vlen Bool 2 testVec

### Metaified ###

postulate Bool :¹ Type

postulate True :² Bool

postulate False :³ Bool

postulate Nat :⁴ Type

postulate Z :⁵ Nat

postulate S :⁶ (n :ᴿ Nat) -> Nat

postulate Vec :⁷ (_ :⁸ Nat) -> (_ :⁹ Type) -> Type

postulate VNil :¹⁰ (a :¹¹ Type) -> Vec ¹³ Z ¹² a

postulate VCons :¹⁴ (a :¹⁵ Type) -> (n :¹⁶ Nat) -> (x :¹⁷ a) -> (xs :¹⁸ Vec ²⁰ n ¹⁹ a) -> Vec ²² (S ²³ n) ²¹ a

vlen :²⁴ (a :²⁵ Type) -> (n :²⁶ Nat) -> (xs :²⁷ Vec ²⁹ n ²⁸ a) -> Nat = \(a :³⁰ Type) (n :³¹ Nat) (xs :³² Vec ³⁴ n ³³ a).
  case ³⁵ xs of
    VNil (a' :³⁶ Type)
      | a = a'
      | n = Z
      => Z
    VCons (a' :³⁷ Type) (n' :³⁸ Nat) (x' :³⁹ a) (xs' :⁴⁰ Vec ⁴² n' ⁴¹ a)
      | a = a'
      | n = S ⁴³ n'
      => S ⁴⁴ (vlen ⁴⁷ a ⁴⁶ n' ⁴⁵ xs')

testVec :⁴⁸ Vec ⁵⁰ 2 ⁴⁹ Bool = VCons ⁵⁶ Bool ⁵⁵ 1 ⁵⁴ True ⁵³ (VCons ⁶¹ Bool ⁶⁰ Z ⁵⁹ False ⁵⁸ (VNil ⁶² Bool))

main :ᴿ Nat = vlen ⁶⁵ Bool ⁶⁴ 2 ⁶³ testVec

### Inferred definitions ###

postulate Bool :¹ Type

postulate False :³ Bool

postulate Nat :⁴ Type

postulate S :⁶ (n :ᴿ Nat) -> Nat

postulate True :² Bool

postulate Type :ᴿ Type

postulate VCons :¹⁴ (a :¹⁵ Type) -> (n :¹⁶ Nat) -> (x :¹⁷ a) -> (xs :¹⁸ Vec ²⁰ n ¹⁹ a) -> Vec ²² (S ²³ n) ²¹ a

postulate VNil :¹⁰ (a :¹¹ Type) -> Vec ¹³ Z ¹² a

postulate Vec :⁷ (_ :⁸ Nat) -> (_ :⁹ Type) -> Type

postulate Z :⁵ Nat

main :ᴿ Nat = vlen ⁶⁵ Bool ⁶⁴ 2 ⁶³ testVec
  [] -> [24,R]
  [25] -> [1,65]
  [26] -> [5,6,64,66,67]
  [27] -> [48,63]
  [28] -> [49]
  [29] -> [50]
  [49] -> [28]
  [50] -> [29]
  [51] -> [66]
  [52] -> [67]
  [63] -> [27]
  [64] -> [26]
  [65] -> [25]
  [66] -> [51]
  [67] -> [52]

testVec :⁴⁸ Vec ⁵⁰ 2 ⁴⁹ Bool = VCons ⁵⁶ Bool ⁵⁵ 1 ⁵⁴ True ⁵³ (VCons ⁶¹ Bool ⁶⁰ Z ⁵⁹ False ⁵⁸ (VNil ⁶² Bool))
  [11,18,48] -> [1,62]
  [12,18,48] -> [19]
  [13,18,48] -> [20]
  [15,18,48] -> [1,61]
  [15,48] -> [1,56]
  [16,18,48] -> [5,60]
  [16,48] -> [5,6,55,57]
  [17,18,48] -> [3,59]
  [17,48] -> [2,54]
  [18,19,48] -> [12]
  [18,20,48] -> [13]
  [18,48] -> [10,14,53,58]
  [18,48,58] -> [18]
  [18,48,59] -> [17]
  [18,48,60] -> [16]
  [18,48,61] -> [15]
  [18,48,62] -> [11]
  [19,48] -> [21]
  [20,48] -> [22]
  [21,48] -> [19,49]
  [22,48] -> [20,50]
  [23,48] -> [51,57]
  [48] -> [14]
  [48,49] -> [21]
  [48,50] -> [22]
  [48,51] -> [23]
  [48,52] -> [57]
  [48,53] -> [18]
  [48,54] -> [17]
  [48,55] -> [16]
  [48,56] -> [15]
  [48,57] -> [23,52]

vlen :²⁴ (a :²⁵ Type) -> (n :²⁶ Nat) -> (xs :²⁷ Vec ²⁹ n ²⁸ a) -> Nat = \(a :³⁰ Type) (n :³¹ Nat) (xs :³² Vec ³⁴ n ³³ a).
  case ³⁵ xs of
    VNil (a' :³⁶ Type)
      | a = a'
      | n = Z
      => Z
    VCons (a' :³⁷ Type) (n' :³⁸ Nat) (x' :³⁹ a) (xs' :⁴⁰ Vec ⁴² n' ⁴¹ a)
      | a = a'
      | n = S ⁴³ n'
      => S ⁴⁴ (vlen ⁴⁷ a ⁴⁶ n' ⁴⁵ xs')
  [10,24] -> [27]
  [11,24] -> [27,36]
  [12,24] -> [28]
  [13,24] -> [29]
  [14,24] -> [27]
  [15,24] -> [27,37]
  [16,24] -> [27,38]
  [17,24] -> [27,39]
  [18,24] -> [27,40]
  [19,24] -> [27,41]
  [20,24] -> [27,42]
  [21,24] -> [28]
  [22,24] -> [29]
  [23,24] -> [43]
  [24] -> [5,6,24,35,44]
  [24,25] -> [30,47]
  [24,26] -> [31,38,46]
  [24,27] -> [32,40,45]
  [24,28] -> [12,21,41]
  [24,29] -> [13,22,42]
  [24,30] -> [25]
  [24,31] -> [26]
  [24,32] -> [27]
  [24,35] -> [32]
  [24,36] -> [11,27,35]
  [24,37] -> [15,27,35]
  [24,38] -> [16,27,35]
  [24,39] -> [17,27,35]
  [24,40] -> [18,27,35]
  [24,41] -> [19,27,28]
  [24,42] -> [20,27,29]
  [24,43] -> [23]
  [24,45] -> [27]
  [24,46] -> [26]
  [24,47] -> [25]


### Constraints ###

[] -> [24,R]
[10,24] -> [27]
[11,18,48] -> [1,62]
[11,24] -> [27,36]
[12,18,48] -> [19]
[12,24] -> [28]
[13,18,48] -> [20]
[13,24] -> [29]
[14,24] -> [27]
[15,18,48] -> [1,61]
[15,24] -> [27,37]
[15,48] -> [1,56]
[16,18,48] -> [5,60]
[16,24] -> [27,38]
[16,48] -> [5,6,55,57]
[17,18,48] -> [3,59]
[17,24] -> [27,39]
[17,48] -> [2,54]
[18,19,48] -> [12]
[18,20,48] -> [13]
[18,24] -> [27,40]
[18,48] -> [10,14,53,58]
[18,48,58] -> [18]
[18,48,59] -> [17]
[18,48,60] -> [16]
[18,48,61] -> [15]
[18,48,62] -> [11]
[19,24] -> [27,41]
[19,48] -> [21]
[20,24] -> [27,42]
[20,48] -> [22]
[21,24] -> [28]
[21,48] -> [19,49]
[22,24] -> [29]
[22,48] -> [20,50]
[23,24] -> [43]
[23,48] -> [51,57]
[24] -> [5,6,24,35,44]
[24,25] -> [30,47]
[24,26] -> [31,38,46]
[24,27] -> [32,40,45]
[24,28] -> [12,21,41]
[24,29] -> [13,22,42]
[24,30] -> [25]
[24,31] -> [26]
[24,32] -> [27]
[24,35] -> [32]
[24,36] -> [11,27,35]
[24,37] -> [15,27,35]
[24,38] -> [16,27,35]
[24,39] -> [17,27,35]
[24,40] -> [18,27,35]
[24,41] -> [19,27,28]
[24,42] -> [20,27,29]
[24,43] -> [23]
[24,45] -> [27]
[24,46] -> [26]
[24,47] -> [25]
[25] -> [1,65]
[26] -> [5,6,64,66,67]
[27] -> [48,63]
[28] -> [49]
[29] -> [50]
[48] -> [14]
[48,49] -> [21]
[48,50] -> [22]
[48,51] -> [23]
[48,52] -> [57]
[48,53] -> [18]
[48,54] -> [17]
[48,55] -> [16]
[48,56] -> [15]
[48,57] -> [23,52]
[49] -> [28]
[50] -> [29]
[51] -> [66]
[52] -> [67]
[63] -> [27]
[64] -> [26]
[65] -> [25]
[66] -> [51]
[67] -> [52]

### Solution ###

[5,6,10,14,18,24,27,32,35,40,44,45,48,53,58,63,R]

### Annotated ###

postulate Bool :ᴱ Type

postulate True :ᴱ Bool

postulate False :ᴱ Bool

postulate Nat :ᴱ Type

postulate Z :ᴿ Nat

postulate S :ᴿ (n :ᴿ Nat) -> Nat

postulate Vec :ᴱ (_ :ᴱ Nat) -> (_ :ᴱ Type) -> Type

postulate VNil :ᴿ (a :ᴱ Type) -> Vec ᴱ Z ᴱ a

postulate VCons :ᴿ (a :ᴱ Type) -> (n :ᴱ Nat) -> (x :ᴱ a) -> (xs :ᴿ Vec ᴱ n ᴱ a) -> Vec ᴱ (S ᴱ n) ᴱ a

vlen :ᴿ (a :ᴱ Type) -> (n :ᴱ Nat) -> (xs :ᴿ Vec ᴱ n ᴱ a) -> Nat = \(a :ᴱ Type) (n :ᴱ Nat) (xs :ᴿ Vec ᴱ n ᴱ a).
  case ᴿ xs of
    VNil (a' :ᴱ Type)
      | a = a'
      | n = Z
      => Z
    VCons (a' :ᴱ Type) (n' :ᴱ Nat) (x' :ᴱ a) (xs' :ᴿ Vec ᴱ n' ᴱ a)
      | a = a'
      | n = S ᴱ n'
      => S ᴿ (vlen ᴱ a ᴱ n' ᴿ xs')

testVec :ᴿ Vec ᴱ 2 ᴱ Bool = VCons ᴱ Bool ᴱ 1 ᴱ True ᴿ (VCons ᴱ Bool ᴱ Z ᴱ False ᴿ (VNil ᴱ Bool))

main :ᴿ Nat = vlen ᴱ Bool ᴱ 2 ᴿ testVec

### Specialised ###

postulate Bool :ᴱ Type

postulate True :ᴱ Bool

postulate False :ᴱ Bool

postulate Nat :ᴱ Type

postulate Z :ᴿ Nat

postulate S :ᴿ (n :ᴿ Nat) -> Nat

postulate Vec :ᴱ (_ :ᴱ Nat) -> (_ :ᴱ Type) -> Type

postulate VNil :ᴿ (a :ᴱ Type) -> Vec ᴱ Z ᴱ a

postulate VCons :ᴿ (a :ᴱ Type) -> (n :ᴱ Nat) -> (x :ᴱ a) -> (xs :ᴿ Vec ᴱ n ᴱ a) -> Vec ᴱ (S ᴱ n) ᴱ a

vlen :ᴿ (a :ᴱ Type) -> (n :ᴱ Nat) -> (xs :ᴿ Vec ᴱ n ᴱ a) -> Nat = \(a :ᴱ Type) (n :ᴱ Nat) (xs :ᴿ Vec ᴱ n ᴱ a).
  case ᴿ xs of
    VNil (a' :ᴱ Type)
      | a = a'
      | n = Z
      => Z
    VCons (a' :ᴱ Type) (n' :ᴱ Nat) (x' :ᴱ a) (xs' :ᴿ Vec ᴱ n' ᴱ a)
      | a = a'
      | n = S ᴱ n'
      => S ᴿ (vlen ᴱ a ᴱ n' ᴿ xs')

testVec :ᴿ Vec ᴱ 2 ᴱ Bool = VCons ᴱ Bool ᴱ 1 ᴱ True ᴿ (VCons ᴱ Bool ᴱ Z ᴱ False ᴿ (VNil ᴱ Bool))

main :ᴿ Nat = vlen ᴱ Bool ᴱ 2 ᴿ testVec

### Final annotation ###

postulate Bool :ᴱ Type

postulate True :ᴱ Bool

postulate False :ᴱ Bool

postulate Nat :ᴱ Type

postulate Z :ᴿ Nat

postulate S :ᴿ (n :ᴿ Nat) -> Nat

postulate Vec :ᴱ (_ :ᴱ Nat) -> (_ :ᴱ Type) -> Type

postulate VNil :ᴿ (a :ᴱ Type) -> Vec ᴱ Z ᴱ a

postulate VCons :ᴿ (a :ᴱ Type) -> (n :ᴱ Nat) -> (x :ᴱ a) -> (xs :ᴿ Vec ᴱ n ᴱ a) -> Vec ᴱ (S ᴱ n) ᴱ a

vlen :ᴿ (a :ᴱ Type) -> (n :ᴱ Nat) -> (xs :ᴿ Vec ᴱ n ᴱ a) -> Nat = \(a :ᴱ Type) (n :ᴱ Nat) (xs :ᴿ Vec ᴱ n ᴱ a).
  case ᴿ xs of
    VNil (a' :ᴱ Type)
      | a = a'
      | n = Z
      => Z
    VCons (a' :ᴱ Type) (n' :ᴱ Nat) (x' :ᴱ a) (xs' :ᴿ Vec ᴱ n' ᴱ a)
      | a = a'
      | n = S ᴱ n'
      => S ᴿ (vlen ᴱ a ᴱ n' ᴿ xs')

testVec :ᴿ Vec ᴱ 2 ᴱ Bool = VCons ᴱ Bool ᴱ 1 ᴱ True ᴿ (VCons ᴱ Bool ᴱ Z ᴱ False ᴿ (VNil ᴱ Bool))

main :ᴿ Nat = vlen ᴱ Bool ᴱ 2 ᴿ testVec

### Verification ###

Verification successful.

### Pruned ###

postulate Z

postulate S

postulate VNil

postulate VCons

vlen = \xs.
  case xs of
    VNil
      => Z
    VCons xs'
      => S (vlen xs')

testVec = VCons (VCons VNil)

main = vlen testVec

### Normal forms ###

unerased:
  2
erased:
  2
