-- vim: ft=idris

data Nat : Type.
  Z : Nat,
  S : (_ :R: Nat) -> Nat.

plus (n : Nat) (m : Nat) : Nat
  = case n of
      Z => m,
      S (n' : Nat) => S (plus n' m).

id (x : Nat) : Nat = x.

const (x : Nat) (y : Nat) : Nat = x.

main :R: Nat
    = let
        apply (f : Nat -> Nat) (x : Nat) : Nat
          = case x of
              Z => f Z,
              S (x' : Nat) => f (S x').
      in let postulate Q : Nat.
      in let three : Nat = 3.
      in plus (apply id 2) (apply (const Q) three).
      -- it's okay that this does not erasure-specialise!
      -- we did not request specialisation using [square brackets]
