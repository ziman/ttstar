-- vim: ft=agda

postulate Nat : *.
postulate Z : Nat.
postulate S : (n :R: Nat) -> Nat.

-- no case-expressions supported yet
postulate Plus : (x :R: Nat) -> (y :R: Nat) -> Nat.

id : Nat -> Nat = \y : Nat. y.
const (x : Nat) : Nat -> Nat = \_ : Nat. x.

main :R: Nat
    = let apply (f : Nat -> Nat) (x : Nat) : Nat = f x.
   in let postulate Q : Nat.
   in let three : Nat = 3.
   in Plus (apply id 2) (apply (const Q) three).
