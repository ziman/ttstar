-- vim: ft=agda

postulate Nat : *.
postulate Z : Nat.
postulate S : Nat -> Nat.

plus (x : Nat) (y : Nat) : Nat
    = case (x) of
        Z -> y,
        S (xx : Nat) -> plus xx y.

id : Nat -> Nat = \y : Nat. y.
const (x : Nat) : Nat -> Nat = \_ : Nat. x.

main :R: Nat
    = let apply (f : Nat -> Nat) (x : Nat) : Nat = f x.
   in let postulate Q : Nat.
   in let three : Nat = 3.
   in plus (apply id 2) (apply (const Q) three).
