-- vim: ft=idris

postulate Id : (A : Type) -> A -> A -> Type.
postulate Refl : (A : Type) -> (x : A) -> Id A x x.

subst : (A : Type) -> (P : A -> Type) -> (x : A) -> (y : A) -> (eq : Id A x y) -> (px : P x) -> P y.
  pat (A : Type) (P : A -> Type) (x : A) (px : P x).
    subst A P x [x] (Refl A [x]) px = px.

postulate Bool : Type.
postulate True : Bool.
postulate False : Bool.

postulate Maybe : Type -> Type.
postulate Just : (a : Type) -> a -> Type.
postulate Nothing : (a : Type) -> Type.

postulate Nat : Type.
postulate Z : Nat.
postulate S : (n :R: Nat) -> Nat.

postulate Plus : (x :R: Nat) -> (y :R: Nat) -> Nat.

id : Nat -> Nat.
  id Z = Z,
  pat (x : Nat).
    id (S x) = let (result : Nat = S x) in result.

const_3 : Nat -> Nat.
  pat (x : Nat).
    const_3 x = 3.

two : Nat.
  two = S (S Z).

f : (g : Nat -> Nat) -> (z : Nat) -> (h : Nat -> Nat) -> (w : Nat) -> Nat.
  pat (g : Nat -> Nat) (z : Nat) (h : Nat -> Nat) (w : Nat).
    f g z h w = Plus (g z) (h w).

{-
apply : (f : Nat -> Nat) -> Nat -> Nat.
  pat (f : Nat -> Nat) (x : Nat).
    apply f x = f x.

test_1 : Nat.
  test_1 = Plus (apply id 2) (apply const_3 two).

-}
test_2 : Nat.
  test_2 = f id 2 const_3 1.

main :R: Nat.
  main = {- Plus test_1 -} test_2.

{-
not : Bool -> Bool.
  not True  = False,
  not False = True.

plus : Nat -> Nat -> Nat.
  pat (n : Nat).
    plus Z n = n,
  pat (m : Nat) (n : Nat).
    plus (S m) n = S (plus m n).

main :R: Nat.
  main = plus 3 4.

---------

postulate T : Type.
postulate A : T.
postulate B : T.

const_A : T -> T.
pat (t : T).
  const_A t = A.

apply : (f : T -> T) -> T -> T.
  pat (f : T -> T) (x : T).
    apply f x = f x.

main :R: T.
main = apply const_A B.
-}
