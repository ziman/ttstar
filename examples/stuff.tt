-- vim: ft=idris

postulate Id : (A : *) -> A -> A -> *.
postulate Refl : (A : *) -> (x : A) -> Id A x x.

subst : (A : *) -> (P : A -> *) -> (x : A) -> (y : A) -> (eq : Id A x y) -> (px : P x) -> P y.
  pat (A : *) (P : A -> *) (x : A) (px : P x).
    subst A P x [x] (Refl A [x]) px = px.

postulate Bool : *.
postulate True : Bool.
postulate False : Bool.

postulate Maybe : * -> *.
postulate Just : (a : *) -> a -> *.
postulate Nothing : (a : *) -> *.

postulate Nat : *.
postulate Z : Nat.
postulate S : (n :R: Nat) -> Nat.

postulate Plus : (x :R: Nat) -> (y :R: Nat) -> Nat.

id : Nat -> Nat.
  id Z = Z,
  pat (x : Nat).
    id (S x) = let (result : Nat = S x) in result.

const_3 : Nat -> Nat.
  pat (x : Nat).
    const_3 x = 3.

two : Nat.
  two = S (S Z).

f : (g : Nat -> Nat) -> (z : Nat) -> (h : Nat -> Nat) -> (w : Nat) -> Nat.
  pat (g : Nat -> Nat) (z : Nat) (h : Nat -> Nat) (w : Nat).
    f g z h w = Plus (g z) (h w).

apply : (f : Nat -> Nat) -> Nat -> Nat.
  pat (f : Nat -> Nat) (x : Nat).
    apply f x = f x.

test_1 : Nat.
  test_1 = Plus (apply id 2) (apply const_3 two).

test_2 : Nat.
  test_2 = f id 2 const_3 1.

main :R: Nat.
  main = Plus test_1 test_2.
