-- vim: ft=agda

### Desugared ###

Nat : *

Z : Nat

S : (n  -R-  Nat) -> Nat

plus : (x : Nat) -> (y : Nat) -> Nat
plus = \x : Nat. \y : Nat. 
  case x of
    Z -> y
    S (xx : Nat) -> (S (plus xx y))

id : (_ : Nat) -> Nat
id = \y : Nat. y

const : (x : Nat) -> (_ : Nat) -> Nat
const = \x : Nat. \_ : Nat. x

main  -R-  Nat
main = 
  let apply : (f : (_ : Nat) -> Nat) -> (x : Nat) -> Nat
    = \f : (_ : Nat) -> Nat. \x : Nat. (f x)
  in 
    let postulate Q : Nat
    in 
      let three : Nat
        = 3
      in (plus (apply id 2) (apply (const Q) three))

### Metaified ###

Nat :?1: *

Z :?2: Nat

S :?3: (n :!R: Nat) -> Nat

plus :?4: (x :?5: Nat) -> (y :?6: Nat) -> Nat
plus = \x :?7: Nat. \y :?8: Nat. 
  case x of
    Z -> y
    S (xx :?9: Nat) -> (S -?11- (plus -?15- xx -?13- y))

id :?16: (_ :?17: Nat) -> Nat
id = \y :?18: Nat. y

const :?19: (x :?20: Nat) -> (_ :?21: Nat) -> Nat
const = \x :?22: Nat. \_ :?23: Nat. x

main :!R: Nat
main = 
  let apply :?24: (f :?25: (_ :?26: Nat) -> Nat) -> (x :?27: Nat) -> Nat
    = \f :?28: (_ :?29: Nat) -> Nat. \x :?30: Nat. (f -?32- x)
  in 
    let postulate Q :?33: Nat
    in 
      let three :?34: Nat
        = 3
      in (plus -?44- (apply -?48- id -?46- 2) -?42- (apply -?56- (const -?58- Q) -?54- three))

### Inferred definitions ###

Nat :?1: *
S :?3: (n :!R: Nat) -> Nat
Z :?2: Nat
const :?19: (x :?20: Nat) -> (_ :?21: Nat) -> Nat
  [] -> [?20,?22,!R]
  [?21] -> [?23]
  [?23] -> [?21]

id :?16: (_ :?17: Nat) -> Nat
  [] -> [?17,?18,!R]

main :!R: Nat
  [] -> [?2,?3,?3_1,?4,?4_1,?5,?5_1,?6,?6_1,?7_1,?8_1,?9_1,?10_1,?11_1,?12_1,?13_1,?14_1,?15_1,?16,?17,?17_3,?18_3,?19,?20,?20_5,?22_5,?24,?25,?25_2,?25_4,?26,?26_2,?27,?27_2,?28,?28_2,?28_4,?29,?29_2,?30,?30_2,?31,?31_2,?32,?32_2,?33,?35,?36,?37,?38,?39,?40,?41,?42,?43,?44,?45,?46,?47,?48,?49,?50,?51,?52,?53,?55,?56,?57,?58,!R]
  [?21_5] -> [?21,?23_5,?26_4]
  [?23_5] -> [?21_5]
  [?26_4] -> [?21_5,?29_4]
  [?27_4] -> [?2_6,?3_6,?30_4,?34,?35_6,?36_6,?37_6,?38_6,?39_6,?40_6,?54]
  [?29_4] -> [?26_4,?30_4,?31_4,?32_4]
  [?30_4] -> [?27_4]

plus :?4: (x :?5: Nat) -> (y :?6: Nat) -> Nat
  [] -> [?3,?4,?5,?6,?7,?8,?9,?10,?11,?12,?13,?14,?15,!R]


### Constraints ###

[] -> [?2,?3,?3_1,?4,?4_1,?5,?5_1,?6,?6_1,?7,?7_1,?8,?8_1,?9,?9_1,?10,?10_1,?11,?11_1,?12,?12_1,?13,?13_1,?14,?14_1,?15,?15_1,?16,?17,?17_3,?18,?18_3,?19,?20,?20_5,?22,?22_5,?24,?25,?25_2,?25_4,?26,?26_2,?27,?27_2,?28,?28_2,?28_4,?29,?29_2,?30,?30_2,?31,?31_2,?32,?32_2,?33,?35,?36,?37,?38,?39,?40,?41,?42,?43,?44,?45,?46,?47,?48,?49,?50,?51,?52,?53,?55,?56,?57,?58,!R]
[?21] -> [?23]
[?21_5] -> [?21,?23_5,?26_4]
[?23] -> [?21]
[?23_5] -> [?21_5]
[?26_4] -> [?21_5,?29_4]
[?27_4] -> [?2_6,?3_6,?30_4,?34,?35_6,?36_6,?37_6,?38_6,?39_6,?40_6,?54]
[?29_4] -> [?26_4,?30_4,?31_4,?32_4]
[?30_4] -> [?27_4]

### Solution ###

[?2,?3,?3_1,?4,?4_1,?5,?5_1,?6,?6_1,?7,?7_1,?8,?8_1,?9,?9_1,?10,?10_1,?11,?11_1,?12,?12_1,?13,?13_1,?14,?14_1,?15,?15_1,?16,?17,?17_3,?18,?18_3,?19,?20,?20_5,?22,?22_5,?24,?25,?25_2,?25_4,?26,?26_2,?27,?27_2,?28,?28_2,?28_4,?29,?29_2,?30,?30_2,?31,?31_2,?32,?32_2,?33,?35,?36,?37,?38,?39,?40,?41,?42,?43,?44,?45,?46,?47,?48,?49,?50,?51,?52,?53,?55,?56,?57,?58,!R]

### Annotated ###

Nat :E: *

Z :R: Nat

S :R: (n :R: Nat) -> Nat

plus :R: (x :R: Nat) -> (y :R: Nat) -> Nat
plus = \x :R: Nat. \y :R: Nat. 
  case x of
    Z -> y
    S (xx :R: Nat) -> (S -R- (plus -R- xx -R- y))

id :R: (_ :R: Nat) -> Nat
id = \y :R: Nat. y

const :R: (x :R: Nat) -> (_ :E: Nat) -> Nat
const = \x :R: Nat. \_ :E: Nat. x

main :R: Nat
main = 
  let apply :R: (f :R: (_ :R: Nat) -> Nat) -> (x :R: Nat) -> Nat
    = \f :R: (_ :R: Nat) -> Nat. \x :R: Nat. (f -R- x)
  in 
    let postulate Q :R: Nat
    in 
      let three :E: Nat
        = 3
      in (plus -R- (apply -R- id -R- 2) -R- (apply -R- (const -R- Q) -E- three))

### Pruned ###

plus = \x. \y. 
  case x of
    Z -> y
    S xx -> (S (plus xx y))

id = \y. y

const = \x. x

main = 
  let apply
    = \f. \x. (f x)
  in 
    let postulate Q
    in (plus (apply id 2) (apply (const Q) ____))

### Normal forms ###

unerased:
  (S (S Q))
erased:
  (S (S (Q ____)))
