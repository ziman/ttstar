-- vim: ft=agda

### Desugared ###

Nat : *

Z : Nat

S : (n  -R-  Nat) -> Nat

plus : (x : Nat) -> (y : Nat) -> Nat
plus = \x : Nat. \y : Nat. 
  case x of
    Z -> y
    S (xx : Nat) -> (plus xx y)

id : (_ : Nat) -> Nat
id = \y : Nat. y

const : (x : Nat) -> (_ : Nat) -> Nat
const = \x : Nat. \_ : Nat. x

main  -R-  Nat
main = 
  let apply : (f : (_ : Nat) -> Nat) -> (x : Nat) -> Nat
    = \f : (_ : Nat) -> Nat. \x : Nat. (f x)
  in 
    let postulate Q : Nat
    in 
      let three : Nat
        = 3
      in (plus (apply id 2) (apply (const Q) three))

### Metaified ###

Nat :?1: *

Z :?2: Nat

S :?3: (n :!R: Nat) -> Nat

plus :?4: (x :?5: Nat) -> (y :?6: Nat) -> Nat
plus = \x :?7: Nat. \y :?8: Nat. 
  case x of
    Z -> y
    S (xx :?9: Nat) -> (plus -?13- xx -?11- y)

id :?14: (_ :?15: Nat) -> Nat
id = \y :?16: Nat. y

const :?17: (x :?18: Nat) -> (_ :?19: Nat) -> Nat
const = \x :?20: Nat. \_ :?21: Nat. x

main :!R: Nat
main = 
  let apply :?22: (f :?23: (_ :?24: Nat) -> Nat) -> (x :?25: Nat) -> Nat
    = \f :?26: (_ :?27: Nat) -> Nat. \x :?28: Nat. (f -?30- x)
  in 
    let postulate Q :?31: Nat
    in 
      let three :?32: Nat
        = 3
      in (plus -?42- (apply -?46- id -?44- 2) -?40- (apply -?54- (const -?56- Q) -?52- three))

### Inferred definitions ###

Nat :?1: *
S :?3: (n :!R: Nat) -> Nat
Z :?2: Nat
const :?17: (x :?18: Nat) -> (_ :?19: Nat) -> Nat
  [] -> [?18,?20,!R]
  [?19] -> [?21]
  [?21] -> [?19]

id :?14: (_ :?15: Nat) -> Nat
  [] -> [?15,?16,!R]

main :!R: Nat
  [] -> [?2,?3,?4,?4_1,?5,?5_1,?6,?6_1,?7_1,?8_1,?9_1,?10_1,?11_1,?12_1,?13_1,?14,?15,?15_3,?16_3,?17,?18,?18_5,?20_5,?22,?23,?23_2,?23_4,?24,?24_2,?25,?25_2,?26,?26_2,?26_4,?27,?27_2,?28,?28_2,?29,?29_2,?30,?30_2,?31,?33,?34,?35,?36,?37,?38,?39,?40,?41,?42,?43,?44,?45,?46,?47,?48,?49,?50,?51,?53,?54,?55,?56,!R]
  [?19_5] -> [?19,?21_5,?24_4]
  [?21_5] -> [?19_5]
  [?24_4] -> [?19_5,?27_4]
  [?25_4] -> [?2_6,?3_6,?28_4,?32,?33_6,?34_6,?35_6,?36_6,?37_6,?38_6,?52]
  [?27_4] -> [?24_4,?28_4,?29_4,?30_4]
  [?28_4] -> [?25_4]

plus :?4: (x :?5: Nat) -> (y :?6: Nat) -> Nat
  [] -> [?4,?5,?6,?7,?8,?9,?10,?11,?12,?13,!R]


### Constraints ###

[] -> [?2,?3,?4,?4_1,?5,?5_1,?6,?6_1,?7,?7_1,?8,?8_1,?9,?9_1,?10,?10_1,?11,?11_1,?12,?12_1,?13,?13_1,?14,?15,?15_3,?16,?16_3,?17,?18,?18_5,?20,?20_5,?22,?23,?23_2,?23_4,?24,?24_2,?25,?25_2,?26,?26_2,?26_4,?27,?27_2,?28,?28_2,?29,?29_2,?30,?30_2,?31,?33,?34,?35,?36,?37,?38,?39,?40,?41,?42,?43,?44,?45,?46,?47,?48,?49,?50,?51,?53,?54,?55,?56,!R]
[?19] -> [?21]
[?19_5] -> [?19,?21_5,?24_4]
[?21] -> [?19]
[?21_5] -> [?19_5]
[?24_4] -> [?19_5,?27_4]
[?25_4] -> [?2_6,?3_6,?28_4,?32,?33_6,?34_6,?35_6,?36_6,?37_6,?38_6,?52]
[?27_4] -> [?24_4,?28_4,?29_4,?30_4]
[?28_4] -> [?25_4]

### Solution ###

[?2,?3,?4,?4_1,?5,?5_1,?6,?6_1,?7,?7_1,?8,?8_1,?9,?9_1,?10,?10_1,?11,?11_1,?12,?12_1,?13,?13_1,?14,?15,?15_3,?16,?16_3,?17,?18,?18_5,?20,?20_5,?22,?23,?23_2,?23_4,?24,?24_2,?25,?25_2,?26,?26_2,?26_4,?27,?27_2,?28,?28_2,?29,?29_2,?30,?30_2,?31,?33,?34,?35,?36,?37,?38,?39,?40,?41,?42,?43,?44,?45,?46,?47,?48,?49,?50,?51,?53,?54,?55,?56,!R]

### Annotated ###

Nat :E: *

Z :R: Nat

S :R: (n :R: Nat) -> Nat

plus :R: (x :R: Nat) -> (y :R: Nat) -> Nat
plus = \x :R: Nat. \y :R: Nat. 
  case x of
    Z -> y
    S (xx :R: Nat) -> (plus -R- xx -R- y)

id :R: (_ :R: Nat) -> Nat
id = \y :R: Nat. y

const :R: (x :R: Nat) -> (_ :E: Nat) -> Nat
const = \x :R: Nat. \_ :E: Nat. x

main :R: Nat
main = 
  let apply :R: (f :R: (_ :R: Nat) -> Nat) -> (x :R: Nat) -> Nat
    = \f :R: (_ :R: Nat) -> Nat. \x :R: Nat. (f -R- x)
  in 
    let postulate Q :R: Nat
    in 
      let three :E: Nat
        = 3
      in (plus -R- (apply -R- id -R- 2) -R- (apply -R- (const -R- Q) -E- three))

### Pruned ###

plus = \x. \y. 
  case x of
    Z -> y
    S xx -> (plus xx y)

id = \y. y

const = \x. x

main = 
  let apply
    = \f. \x. (f x)
  in 
    let postulate Q
    in (plus (apply id 2) (apply (const Q) ____))

