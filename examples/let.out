-- vim: ft=agda

### Desugared ###

Nat : *

Z : Nat

S : (n  -R-  Nat) -> Nat

Plus : (x  -R-  Nat) -> (y  -R-  Nat) -> Nat

id : (_ : Nat) -> Nat
id = \y : Nat. y

const_3 : (_ : Nat) -> Nat
const_3 = \_ : Nat. 3

two : Nat
two = 2

main  -R-  Nat
main = 
  let apply : (f : (_ : Nat) -> Nat) -> (_ : Nat) -> Nat
    = \f : (_ : Nat) -> Nat. \x : Nat. (f x)
  in 
    let unused : Nat
      = 3
    in (Plus (apply id 2) (apply const_3 two))

### Metaified ###

Nat :?1: *

Z :?2: Nat

S :?3: (n :!R: Nat) -> Nat

Plus :?4: (x :!R: Nat) -> (y :!R: Nat) -> Nat

id :?5: (_ :?6: Nat) -> Nat
id = \y :?7: Nat. y

const_3 :?8: (_ :?9: Nat) -> Nat
const_3 = \_ :?10: Nat. 3

two :?17: Nat
two = 2

main :!R: Nat
main = 
  let apply :?22: (f :?23: (_ :?24: Nat) -> Nat) -> (_ :?25: Nat) -> Nat
    = \f :?26: (_ :?27: Nat) -> Nat. \x :?28: Nat. (f -?30- x)
  in 
    let unused :?31: Nat
      = 3
    in (Plus -?41- (apply -?45- id -?43- 2) -?39- (apply -?53- const_3 -?51- two))

### Inferred definitions ###

Nat :?1: *
Plus :?4: (x :!R: Nat) -> (y :!R: Nat) -> Nat
S :?3: (n :!R: Nat) -> Nat
Z :?2: Nat
const_3 :?8: (_ :?9: Nat) -> Nat
  [] -> [?2,?3,?11,?12,?13,?14,?15,?16,!R]
  [?9] -> [?10]
  [?10] -> [?9]

id :?5: (_ :?6: Nat) -> Nat
  [] -> [?6,?7,!R]

main :!R: Nat
  [] -> [?2,?2_4,?3,?3_4,?4,?5,?6,?6_2,?7_2,?8,?11_4,?12_4,?13_4,?14_4,?15_4,?16_4,?22,?23,?23_1,?23_3,?24,?24_1,?25,?25_1,?26,?26_1,?26_3,?27,?27_1,?28,?28_1,?29,?29_1,?30,?30_1,?32,?33,?34,?35,?36,?37,?38,?39,?40,?41,?42,?43,?44,?45,?46,?47,?48,?49,?50,?52,?53,!R]
  [?9_4] -> [?9,?10_4,?24_3]
  [?10_4] -> [?9_4]
  [?24_3] -> [?9_4,?27_3]
  [?25_3] -> [?2_5,?3_5,?17,?18_5,?19_5,?20_5,?21_5,?28_3,?51]
  [?27_3] -> [?24_3,?28_3,?29_3,?30_3]
  [?28_3] -> [?25_3]

two :?17: Nat
  [] -> [?2,?3,?18,?19,?20,?21,!R]


### Constraints ###

[] -> [?2,?2_4,?3,?3_4,?4,?5,?6,?6_2,?7,?7_2,?8,?11,?11_4,?12,?12_4,?13,?13_4,?14,?14_4,?15,?15_4,?16,?16_4,?18,?19,?20,?21,?22,?23,?23_1,?23_3,?24,?24_1,?25,?25_1,?26,?26_1,?26_3,?27,?27_1,?28,?28_1,?29,?29_1,?30,?30_1,?32,?33,?34,?35,?36,?37,?38,?39,?40,?41,?42,?43,?44,?45,?46,?47,?48,?49,?50,?52,?53,!R]
[?9] -> [?10]
[?9_4] -> [?9,?10_4,?24_3]
[?10] -> [?9]
[?10_4] -> [?9_4]
[?24_3] -> [?9_4,?27_3]
[?25_3] -> [?2_5,?3_5,?17,?18_5,?19_5,?20_5,?21_5,?28_3,?51]
[?27_3] -> [?24_3,?28_3,?29_3,?30_3]
[?28_3] -> [?25_3]

### Solution ###

[?2,?2_4,?3,?3_4,?4,?5,?6,?6_2,?7,?7_2,?8,?11,?11_4,?12,?12_4,?13,?13_4,?14,?14_4,?15,?15_4,?16,?16_4,?18,?19,?20,?21,?22,?23,?23_1,?23_3,?24,?24_1,?25,?25_1,?26,?26_1,?26_3,?27,?27_1,?28,?28_1,?29,?29_1,?30,?30_1,?32,?33,?34,?35,?36,?37,?38,?39,?40,?41,?42,?43,?44,?45,?46,?47,?48,?49,?50,?52,?53,!R]

### Annotated ###

Nat :E: *

Z :R: Nat

S :R: (n :R: Nat) -> Nat

Plus :R: (x :R: Nat) -> (y :R: Nat) -> Nat

id :R: (_ :R: Nat) -> Nat
id = \y :R: Nat. y

const_3 :R: (_ :E: Nat) -> Nat
const_3 = \_ :E: Nat. 3

two :E: Nat
two = 2

main :R: Nat
main = 
  let apply :R: (f :R: (_ :R: Nat) -> Nat) -> (_ :R: Nat) -> Nat
    = \f :R: (_ :R: Nat) -> Nat. \x :R: Nat. (f -R- x)
  in 
    let unused :E: Nat
      = 3
    in (Plus -R- (apply -R- id -R- 2) -R- (apply -R- const_3 -E- two))

### Pruned ###

id = \y. y

const_3 = 3

main = 
  let apply
    = \f. \x. (f x)
  in (Plus (apply id 2) (apply const_3 ____))

