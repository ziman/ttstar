-- vim: ft=agda

### Desugared ###

Nat : *

Z : Nat

S : (_ : Nat) -> Nat

plus : (x : Nat) -> (y : Nat) -> Nat
plus = \x : Nat. \y : Nat. 
  case x of
    Z -> y
    S (xx : Nat) -> (plus xx y)

id : (_ : Nat) -> Nat
id = \y : Nat. y

const : (x : Nat) -> (_ : Nat) -> Nat
const = \x : Nat. \_ : Nat. x

main  -R-  Nat
main = 
  let apply : (f : (_ : Nat) -> Nat) -> (x : Nat) -> Nat
    = \f : (_ : Nat) -> Nat. \x : Nat. (f x)
  in 
    let postulate Q : Nat
    in 
      let three : Nat
        = 3
      in (plus (apply id 2) (apply (const Q) three))

### Metaified ###

Nat :?1: *

Z :?2: Nat

S :?3: (_ :?4: Nat) -> Nat

plus :?5: (x :?6: Nat) -> (y :?7: Nat) -> Nat
plus = \x :?8: Nat. \y :?9: Nat. 
  case x of
    Z -> y
    S (xx :?10: Nat) -> (plus -?14- xx -?12- y)

id :?15: (_ :?16: Nat) -> Nat
id = \y :?17: Nat. y

const :?18: (x :?19: Nat) -> (_ :?20: Nat) -> Nat
const = \x :?21: Nat. \_ :?22: Nat. x

main :!R: Nat
main = 
  let apply :?23: (f :?24: (_ :?25: Nat) -> Nat) -> (x :?26: Nat) -> Nat
    = \f :?27: (_ :?28: Nat) -> Nat. \x :?29: Nat. (f -?31- x)
  in 
    let postulate Q :?32: Nat
    in 
      let three :?33: Nat
        = 3
      in (plus -?43- (apply -?47- id -?45- 2) -?41- (apply -?55- (const -?57- Q) -?53- three))

### Inferred definitions ###

Nat :?1: *
S :?3: (_ :?4: Nat) -> Nat
Z :?2: Nat
const :?18: (x :?19: Nat) -> (_ :?20: Nat) -> Nat
  [] -> [?19,?21,!R]
  [?20] -> [?22]
  [?22] -> [?20]

id :?15: (_ :?16: Nat) -> Nat
  [] -> [?16,?17,!R]

main :!R: Nat
  [] -> [?3,?4_1,?5,?5_1,?6,?6_1,?7,?7_1,?8_1,?9_1,?10_1,?11_1,?12_1,?13_1,?14_1,?15,?16,?16_3,?17_3,?18,?19,?19_5,?21_5,?23,?24,?24_2,?24_4,?25,?25_2,?26,?26_2,?27,?27_2,?27_4,?28,?28_2,?29,?29_2,?30,?30_2,?31,?31_2,?32,?40,?41,?42,?43,?44,?45,?46,?47,?52,?54,?55,?56,?57,!R]
  [?4] -> [?2,?34,?35,?36,?37,?38,?39,?48,?49,?50,?51]
  [?4_6,?26_4] -> [?2_6,?3_6,?34_6,?35_6,?36_6,?37_6,?38_6,?39_6]
  [?20_5] -> [?20,?22_5,?25_4]
  [?22_5] -> [?20_5]
  [?25_4] -> [?20_5,?28_4]
  [?26_4] -> [?3_6,?29_4,?33,?53]
  [?28_4] -> [?25_4,?29_4,?30_4,?31_4]
  [?29_4] -> [?26_4]

plus :?5: (x :?6: Nat) -> (y :?7: Nat) -> Nat
  [] -> [?4,?5,?6,?7,?8,?9,?10,?11,?12,?13,?14,!R]


### Constraints ###

[] -> [?3,?4,?4_1,?5,?5_1,?6,?6_1,?7,?7_1,?8,?8_1,?9,?9_1,?10,?10_1,?11,?11_1,?12,?12_1,?13,?13_1,?14,?14_1,?15,?16,?16_3,?17,?17_3,?18,?19,?19_5,?21,?21_5,?23,?24,?24_2,?24_4,?25,?25_2,?26,?26_2,?27,?27_2,?27_4,?28,?28_2,?29,?29_2,?30,?30_2,?31,?31_2,?32,?40,?41,?42,?43,?44,?45,?46,?47,?52,?54,?55,?56,?57,!R]
[?4] -> [?2,?34,?35,?36,?37,?38,?39,?48,?49,?50,?51]
[?4_6,?26_4] -> [?2_6,?3_6,?34_6,?35_6,?36_6,?37_6,?38_6,?39_6]
[?20] -> [?22]
[?20_5] -> [?20,?22_5,?25_4]
[?22] -> [?20]
[?22_5] -> [?20_5]
[?25_4] -> [?20_5,?28_4]
[?26_4] -> [?3_6,?29_4,?33,?53]
[?28_4] -> [?25_4,?29_4,?30_4,?31_4]
[?29_4] -> [?26_4]

### Solution ###

[?2,?3,?4,?4_1,?5,?5_1,?6,?6_1,?7,?7_1,?8,?8_1,?9,?9_1,?10,?10_1,?11,?11_1,?12,?12_1,?13,?13_1,?14,?14_1,?15,?16,?16_3,?17,?17_3,?18,?19,?19_5,?21,?21_5,?23,?24,?24_2,?24_4,?25,?25_2,?26,?26_2,?27,?27_2,?27_4,?28,?28_2,?29,?29_2,?30,?30_2,?31,?31_2,?32,?34,?35,?36,?37,?38,?39,?40,?41,?42,?43,?44,?45,?46,?47,?48,?49,?50,?51,?52,?54,?55,?56,?57,!R]

### Annotated ###

Nat :E: *

Z :R: Nat

S :R: (_ :R: Nat) -> Nat

plus :R: (x :R: Nat) -> (y :R: Nat) -> Nat
plus = \x :R: Nat. \y :R: Nat. 
  case x of
    Z -> y
    S (xx :R: Nat) -> (plus -R- xx -R- y)

id :R: (_ :R: Nat) -> Nat
id = \y :R: Nat. y

const :R: (x :R: Nat) -> (_ :E: Nat) -> Nat
const = \x :R: Nat. \_ :E: Nat. x

main :R: Nat
main = 
  let apply :R: (f :R: (_ :R: Nat) -> Nat) -> (x :R: Nat) -> Nat
    = \f :R: (_ :R: Nat) -> Nat. \x :R: Nat. (f -R- x)
  in 
    let postulate Q :R: Nat
    in 
      let three :E: Nat
        = 3
      in (plus -R- (apply -R- id -R- 2) -R- (apply -R- (const -R- Q) -E- three))

### Pruned ###

plus = \x. \y. 
  case x of
    Z -> y
    S xx -> (plus xx y)

id = \y. y

const = \x. x

main = 
  let apply
    = \f. \x. (f x)
  in 
    let postulate Q
    in (plus (apply id 2) (apply (const Q) ____))

