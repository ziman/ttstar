-- vim: ft=agda

### Desugared ###

Nat : *

Z : Nat

S : (n  -R-  Nat) -> Nat

plus : (x : Nat) -> (y : Nat) -> Nat
plus = \x : Nat. \y : Nat. 
  case x of
    Z -> y
    S (xx : Nat) -> (S (plus xx y))

id : (_ : Nat) -> Nat
id = \y : Nat. y

const : (x : Nat) -> (_ : Nat) -> Nat
const = \x : Nat. \_ : Nat. x

main  -R-  Nat
main = 
  let apply : (f : (_ : Nat) -> Nat) -> (x : Nat) -> Nat
    = \f : (_ : Nat) -> Nat. \x : Nat. (f x)
  in 
    let postulate Q : Nat
    in 
      let three : Nat
        = 3
      in (plus (apply id 2) (apply (const Q) three))

### Metaified ###

Nat :?1: *

Z :?2: Nat

S :?3: (n :!R: Nat) -> Nat

plus :?4: (x :?5: Nat) -> (y :?6: Nat) -> Nat
plus = \x :?7: Nat. \y :?8: Nat. 
  case x of
    Z -> y
    S (xx :?9: Nat) -> (S -?10- (plus -?12- xx -?11- y))

id :?13: (_ :?14: Nat) -> Nat
id = \y :?15: Nat. y

const :?16: (x :?17: Nat) -> (_ :?18: Nat) -> Nat
const = \x :?19: Nat. \_ :?20: Nat. x

main :!R: Nat
main = 
  let apply :?21: (f :?22: (_ :?23: Nat) -> Nat) -> (x :?24: Nat) -> Nat
    = \f :?25: (_ :?26: Nat) -> Nat. \x :?27: Nat. (f -?28- x)
  in 
    let postulate Q :?29: Nat
    in 
      let three :?30: Nat
        = 3
      in (plus -?35- (apply -?37- id -?36- 2) -?34- (apply -?41- (const -?42- Q) -?40- three))

### Inferred definitions ###

Nat :?1: *
S :?3: (n :!R: Nat) -> Nat
Z :?2: Nat
const :?16: (x :?17: Nat) -> (_ :?18: Nat) -> Nat
  [] -> [?17,?19,!R]
  [?18] -> [?20]
  [?20] -> [?18]

id :?13: (_ :?14: Nat) -> Nat
  [] -> [?14,?15,!R]

main :!R: Nat
  [] -> [?2,?3,?4,?22,?25,?31,?32,?33,!R]
  [?5] -> [?13,?21,?35,?37]
  [?5,?14] -> [?23]
  [?5,?23] -> [?14]
  [?5,?24] -> [?36,?38,?39]
  [?5,?36] -> [?24]
  [?6] -> [?16,?21,?34,?41]
  [?6,?17] -> [?29,?42]
  [?6,?18] -> [?23]
  [?6,?23] -> [?18]
  [?6,?24] -> [?30,?40]
  [?6,?40] -> [?24]
  [?6,?42] -> [?17]
  [?23] -> [?26]
  [?24] -> [?27]
  [?26] -> [?23,?27,?28]
  [?27] -> [?24]
  [?28] -> [?26]
  [?34] -> [?6]
  [?35] -> [?5]

plus :?4: (x :?5: Nat) -> (y :?6: Nat) -> Nat
  [] -> [?3,?4,?5,?6,?7,?8,?9,?10,?11,?12,!R]


### Constraints ###

[] -> [?2,?3,?4,?5,?6,?7,?8,?9,?10,?11,?12,?14,?15,?17,?19,?22,?25,?31,?32,?33,!R]
[?5] -> [?13,?21,?35,?37]
[?5,?14] -> [?23]
[?5,?23] -> [?14]
[?5,?24] -> [?36,?38,?39]
[?5,?36] -> [?24]
[?6] -> [?16,?21,?34,?41]
[?6,?17] -> [?29,?42]
[?6,?18] -> [?23]
[?6,?23] -> [?18]
[?6,?24] -> [?30,?40]
[?6,?40] -> [?24]
[?6,?42] -> [?17]
[?18] -> [?20]
[?20] -> [?18]
[?23] -> [?26]
[?24] -> [?27]
[?26] -> [?23,?27,?28]
[?27] -> [?24]
[?28] -> [?26]
[?34] -> [?6]
[?35] -> [?5]

### Solution ###

[?2,?3,?4,?5,?6,?7,?8,?9,?10,?11,?12,?13,?14,?15,?16,?17,?18,?19,?20,?21,?22,?23,?24,?25,?26,?27,?28,?29,?30,?31,?32,?33,?34,?35,?36,?37,?38,?39,?40,?41,?42,!R]

### Annotated ###

Nat :E: *

Z :R: Nat

S :R: (n :R: Nat) -> Nat

plus :R: (x :R: Nat) -> (y :R: Nat) -> Nat
plus = \x :R: Nat. \y :R: Nat. 
  case x of
    Z -> y
    S (xx :R: Nat) -> (S -R- (plus -R- xx -R- y))

id :R: (_ :R: Nat) -> Nat
id = \y :R: Nat. y

const :R: (x :R: Nat) -> (_ :R: Nat) -> Nat
const = \x :R: Nat. \_ :R: Nat. x

main :R: Nat
main = 
  let apply :R: (f :R: (_ :R: Nat) -> Nat) -> (x :R: Nat) -> Nat
    = \f :R: (_ :R: Nat) -> Nat. \x :R: Nat. (f -R- x)
  in 
    let postulate Q :R: Nat
    in 
      let three :R: Nat
        = 3
      in (plus -R- (apply -R- id -R- 2) -R- (apply -R- (const -R- Q) -R- three))

### Pruned ###

plus = \x. \y. 
  case x of
    Z -> y
    S xx -> (S (plus xx y))

id = \y. y

const = \x. \_. x

main = 
  let apply
    = \f. \x. (f x)
  in 
    let postulate Q
    in 
      let three
        = 3
      in (plus (apply id 2) (apply (const Q) three))

### Normal forms ###

unerased:
  (S (S Q))
erased:
  (S (S Q))
