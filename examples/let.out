-- vim: ft=agda

### Desugared ###

Nat : *

Z : Nat

S : (n : -R-  Nat) -> Nat

plus : (x :: Nat) -> (y :: Nat) -> Nat
plus = \x :: Nat. \y :: Nat. 
  case x of
    Z -> y
    S (xx : Nat) -> (S  (plus  xx  y))

id : (_ :: Nat) -> Nat
id = \y :: Nat. y

const : (x :: Nat) -> (_ :: Nat) -> Nat
const = \x :: Nat. \_ :: Nat. x

main  -R-  Nat
main = 
  let apply : (f :: (_ :: Nat) -> Nat) -> (x :: Nat) -> Nat
    = \f :: (_ :: Nat) -> Nat. \x :: Nat. (f  x)
  in 
    let postulate Q : Nat
    in 
      let three : Nat
        = 3
      in (plus  (apply  id  2)  (apply  (const  Q)  three))

### Metaified ###

Nat :?1: *

Z :?2: Nat

S :?3: (n :?4::!R: Nat) -> Nat

plus :?5: (x :?7::?6: Nat) -> (y :?9::?8: Nat) -> Nat
plus = \x :?11::?10: Nat. \y :?13::?12: Nat. 
  case x of
    Z -> y
    S (xx :?14: Nat) -> (S -?16-  -?17- (plus -?20-  -?21- xx -?18-  -?19- y))

id :?22: (_ :?24::?23: Nat) -> Nat
id = \y :?26::?25: Nat. y

const :?27: (x :?29::?28: Nat) -> (_ :?31::?30: Nat) -> Nat
const = \x :?33::?32: Nat. \_ :?35::?34: Nat. x

main :!R: Nat
main = 
  let apply :?36: (f :?40::?37: (_ :?39::?38: Nat) -> Nat) -> (x :?42::?41: Nat) -> Nat
    = \f :?46::?43: (_ :?45::?44: Nat) -> Nat. \x :?48::?47: Nat. (f -?49-  -?50- x)
  in 
    let postulate Q :?51: Nat
    in 
      let three :?52: Nat
        = 3
      in (plus -?61-  -?62- (apply -?65-  -?66- id -?63-  -?64- 2) -?59-  -?60- (apply -?73-  -?74- (const -?75-  -?76- Q) -?71-  -?72- three))

### Inferred definitions ###

Nat :?1: *
S :?3: (n :?4::!R: Nat) -> Nat
Z :?2: Nat
const :?27: (x :?29::?28: Nat) -> (_ :?31::?30: Nat) -> Nat
  [] -> [?28,?32,!R]
  [?29] -> [?33]
  [?30] -> [?34]
  [?31] -> [?35]
  [?33] -> [?29]
  [?34] -> [?30]
  [?35] -> [?31]

id :?22: (_ :?24::?23: Nat) -> Nat
  [] -> [?23,?25,!R]
  [?24] -> [?26]
  [?26] -> [?24]

