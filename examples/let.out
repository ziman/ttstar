-- vim: ft=agda

### Desugared ###

Nat : *

Z : Nat

S : (n  -R-  Nat) -> Nat

Plus : (x  -R-  Nat) -> (y  -R-  Nat) -> Nat

id : (_ : Nat) -> Nat
id = \y : Nat. y

const : (x : Nat) -> (_ : Nat) -> Nat
const = \x : Nat. \_ : Nat. x

main  -R-  Nat
main = 
  let apply : (f : (_ : Nat) -> Nat) -> (x : Nat) -> Nat
    = \f : (_ : Nat) -> Nat. \x : Nat. (f x)
  in 
    let postulate Q : Nat
    in 
      let three : Nat
        = 3
      in (Plus (apply id 2) (apply (const Q) three))

### Metaified ###

Nat :?1: *

Z :?2: Nat

S :?3: (n :!R: Nat) -> Nat

Plus :?4: (x :!R: Nat) -> (y :!R: Nat) -> Nat

id :?5: (_ :?6: Nat) -> Nat
id = \y :?7: Nat. y

const :?8: (x :?9: Nat) -> (_ :?10: Nat) -> Nat
const = \x :?11: Nat. \_ :?12: Nat. x

main :!R: Nat
main = 
  let apply :?13: (f :?14: (_ :?15: Nat) -> Nat) -> (x :?16: Nat) -> Nat
    = \f :?17: (_ :?18: Nat) -> Nat. \x :?19: Nat. (f -?21- x)
  in 
    let postulate Q :?22: Nat
    in 
      let three :?23: Nat
        = 3
      in (Plus -?33- (apply -?37- id -?35- 2) -?31- (apply -?45- (const -?47- Q) -?43- three))

### Inferred definitions ###

Nat :?1: *
Plus :?4: (x :!R: Nat) -> (y :!R: Nat) -> Nat
S :?3: (n :!R: Nat) -> Nat
Z :?2: Nat
const :?8: (x :?9: Nat) -> (_ :?10: Nat) -> Nat
  [] -> [?9,?11,!R]
  [?10] -> [?12]
  [?12] -> [?10]

id :?5: (_ :?6: Nat) -> Nat
  [] -> [?6,?7,!R]

main :!R: Nat
  [] -> [?2,?3,?4,?5,?6,?6_2,?7_2,?8,?9,?9_4,?11_4,?13,?14,?14_1,?14_3,?15,?15_1,?16,?16_1,?17,?17_1,?17_3,?18,?18_1,?19,?19_1,?20,?20_1,?21,?21_1,?22,?24,?25,?26,?27,?28,?29,?30,?31,?32,?33,?34,?35,?36,?37,?38,?39,?40,?41,?42,?44,?45,?46,?47,!R]
  [?10_4] -> [?10,?12_4,?15_3]
  [?12_4] -> [?10_4]
  [?15_3] -> [?10_4,?18_3]
  [?16_3] -> [?2_5,?3_5,?19_3,?23,?24_5,?25_5,?26_5,?27_5,?28_5,?29_5,?43]
  [?18_3] -> [?15_3,?19_3,?20_3,?21_3]
  [?19_3] -> [?16_3]


### Constraints ###

[] -> [?2,?3,?4,?5,?6,?6_2,?7,?7_2,?8,?9,?9_4,?11,?11_4,?13,?14,?14_1,?14_3,?15,?15_1,?16,?16_1,?17,?17_1,?17_3,?18,?18_1,?19,?19_1,?20,?20_1,?21,?21_1,?22,?24,?25,?26,?27,?28,?29,?30,?31,?32,?33,?34,?35,?36,?37,?38,?39,?40,?41,?42,?44,?45,?46,?47,!R]
[?10] -> [?12]
[?10_4] -> [?10,?12_4,?15_3]
[?12] -> [?10]
[?12_4] -> [?10_4]
[?15_3] -> [?10_4,?18_3]
[?16_3] -> [?2_5,?3_5,?19_3,?23,?24_5,?25_5,?26_5,?27_5,?28_5,?29_5,?43]
[?18_3] -> [?15_3,?19_3,?20_3,?21_3]
[?19_3] -> [?16_3]

### Solution ###

[?2,?3,?4,?5,?6,?6_2,?7,?7_2,?8,?9,?9_4,?11,?11_4,?13,?14,?14_1,?14_3,?15,?15_1,?16,?16_1,?17,?17_1,?17_3,?18,?18_1,?19,?19_1,?20,?20_1,?21,?21_1,?22,?24,?25,?26,?27,?28,?29,?30,?31,?32,?33,?34,?35,?36,?37,?38,?39,?40,?41,?42,?44,?45,?46,?47,!R]

### Annotated ###

Nat :E: *

Z :R: Nat

S :R: (n :R: Nat) -> Nat

Plus :R: (x :R: Nat) -> (y :R: Nat) -> Nat

id :R: (_ :R: Nat) -> Nat
id = \y :R: Nat. y

const :R: (x :R: Nat) -> (_ :E: Nat) -> Nat
const = \x :R: Nat. \_ :E: Nat. x

main :R: Nat
main = 
  let apply :R: (f :R: (_ :R: Nat) -> Nat) -> (x :R: Nat) -> Nat
    = \f :R: (_ :R: Nat) -> Nat. \x :R: Nat. (f -R- x)
  in 
    let postulate Q :R: Nat
    in 
      let three :E: Nat
        = 3
      in (Plus -R- (apply -R- id -R- 2) -R- (apply -R- (const -R- Q) -E- three))

### Pruned ###

id = \y. y

const = \x. x

main = 
  let apply
    = \f. \x. (f x)
  in 
    let postulate Q
    in (Plus (apply id 2) (apply (const Q) ____))

