-- vim: ft=agda

### Desugared ###

Nat : *

Z : Nat

S : (n : -R-  Nat) -> Nat

plus : (x :: Nat) -> (y :: Nat) -> Nat
plus = \x :: Nat. \y :: Nat. 
  case x of
    Z -> y
    S (xx : Nat) -> (S  (plus  xx  y))

id : (_ :: Nat) -> Nat
id = \y :: Nat. y

const : (x :: Nat) -> (_ :: Nat) -> Nat
const = \x :: Nat. \_ :: Nat. x

main  -R-  Nat
main = 
  let apply : (f :: (_ :: Nat) -> Nat) -> (x :: Nat) -> Nat
    = \f :: (_ :: Nat) -> Nat. \x :: Nat. (f  x)
  in 
    let postulate Q : Nat
    in 
      let three : Nat
        = 3
      in (plus  (apply  id  2)  (apply  (const  Q)  three))

### Metaified ###

Nat :?1: *

Z :?2: Nat

S :?3: (n :?4::!R: Nat) -> Nat

plus :?5: (x :?7::?6: Nat) -> (y :?9::?8: Nat) -> Nat
plus = \x :?11::?10: Nat. \y :?13::?12: Nat. 
  case x of
    Z -> y
    S (xx :?14: Nat) -> (S -?16-  -?17- (plus -?20-  -?21- xx -?18-  -?19- y))

id :?22: (_ :?24::?23: Nat) -> Nat
id = \y :?26::?25: Nat. y

const :?27: (x :?29::?28: Nat) -> (_ :?31::?30: Nat) -> Nat
const = \x :?33::?32: Nat. \_ :?35::?34: Nat. x

main :!R: Nat
main = 
  let apply :?36: (f :?40::?37: (_ :?39::?38: Nat) -> Nat) -> (x :?42::?41: Nat) -> Nat
    = \f :?46::?43: (_ :?45::?44: Nat) -> Nat. \x :?48::?47: Nat. (f -?49-  -?50- x)
  in 
    let postulate Q :?51: Nat
    in 
      let three :?52: Nat
        = 3
      in (plus -?61-  -?62- (apply -?65-  -?66- id -?63-  -?64- 2) -?59-  -?60- (apply -?73-  -?74- (const -?75-  -?76- Q) -?71-  -?72- three))

### Inferred definitions ###

Nat :?1: *
S :?3: (n :?4::!R: Nat) -> Nat
Z :?2: Nat
const :?27: (x :?29::?28: Nat) -> (_ :?31::?30: Nat) -> Nat
  [] -> [?28,?32,!R]
  [?29] -> [?33]
  [?30] -> [?34]
  [?31] -> [?35]
  [?33] -> [?29]
  [?34] -> [?30]
  [?35] -> [?31]

id :?22: (_ :?24::?23: Nat) -> Nat
  [] -> [?23,?25,!R]
  [?24] -> [?26]
  [?26] -> [?24]

main :!R: Nat
  [] -> [?2,?3,?3_1,?4,?4_1,?5,?5_1,?6_1,?7,?7_1,?8_1,?9,?9_1,?10_1,?11_1,?12_1,?13_1,?14_1,?16_1,?17_1,?18_1,?19_1,?20_1,?21_1,?22,?23_3,?24,?24_3,?25_3,?26_3,?27,?28_5,?29,?32_5,?36,?37,?37_2,?37_4,?38_2,?39,?39_2,?40,?41_2,?42,?43,?43_2,?43_4,?44_2,?45,?45_2,?46,?47_2,?48,?49,?49_2,?50_2,?51,?53,?54,?55,?56,?57,?58,?59,?60,?61,?62,?63,?64,?65,?66,?67,?68,?69,?70,?71,?73,?74,?75,?76,!R]
  [?4_6,?41_4] -> [?53_6,?55_6,?57_6]
  [?29_5] -> [?33_5]
  [?30_5] -> [?31,?34_5,?38_4]
  [?31_5] -> [?35_5,?39_4]
  [?33_5] -> [?29_5]
  [?34_5] -> [?30_5]
  [?35_5] -> [?31_5]
  [?38] -> [?44]
  [?38_4] -> [?30_5,?44_4]
  [?39_4] -> [?31_5,?45_4]
  [?40_2] -> [?46_2]
  [?40_4] -> [?46_4]
  [?41] -> [?47]
  [?41_4] -> [?2_6,?3_6,?47_4,?52,?54_6,?56_6,?58_6,?72]
  [?41_4,?54_6] -> [?4_6]
  [?41_4,?56_6] -> [?4_6]
  [?41_4,?58_6] -> [?4_6]
  [?42_2] -> [?48_2]
  [?42_4] -> [?48_4]
  [?44] -> [?38,?47,?50]
  [?44_4] -> [?38_4,?47_4,?50_4]
  [?45_4] -> [?39_4,?49_4]
  [?46_2] -> [?40_2]
  [?46_4] -> [?40_4]
  [?47] -> [?41]
  [?47_4] -> [?41_4]
  [?48_2] -> [?42_2]
  [?48_4] -> [?42_4]
  [?50] -> [?44]
  [?50_4] -> [?44_4,?45_4]
  [?72] -> [?41_4]

plus :?5: (x :?7::?6: Nat) -> (y :?9::?8: Nat) -> Nat
  [] -> [?3,?4,?5,?6,?7,?8,?9,?10,?11,?12,?13,?14,?16,?17,?18,?19,?20,?21,!R]


### Constraints ###

[] -> [?2,?3,?3_1,?4,?4_1,?5,?5_1,?6,?6_1,?7,?7_1,?8,?8_1,?9,?9_1,?10,?10_1,?11,?11_1,?12,?12_1,?13,?13_1,?14,?14_1,?16,?16_1,?17,?17_1,?18,?18_1,?19,?19_1,?20,?20_1,?21,?21_1,?22,?23,?23_3,?24,?24_3,?25,?25_3,?26_3,?27,?28,?28_5,?29,?32,?32_5,?36,?37,?37_2,?37_4,?38_2,?39,?39_2,?40,?41_2,?42,?43,?43_2,?43_4,?44_2,?45,?45_2,?46,?47_2,?48,?49,?49_2,?50_2,?51,?53,?54,?55,?56,?57,?58,?59,?60,?61,?62,?63,?64,?65,?66,?67,?68,?69,?70,?71,?73,?74,?75,?76,!R]
[?4_6,?41_4] -> [?53_6,?55_6,?57_6]
[?24] -> [?26]
[?26] -> [?24]
[?29] -> [?33]
[?29_5] -> [?33_5]
[?30] -> [?34]
[?30_5] -> [?31,?34_5,?38_4]
[?31] -> [?35]
[?31_5] -> [?35_5,?39_4]
[?33] -> [?29]
[?33_5] -> [?29_5]
[?34] -> [?30]
[?34_5] -> [?30_5]
[?35] -> [?31]
[?35_5] -> [?31_5]
[?38] -> [?44]
[?38_4] -> [?30_5,?44_4]
[?39_4] -> [?31_5,?45_4]
[?40_2] -> [?46_2]
[?40_4] -> [?46_4]
[?41] -> [?47]
[?41_4] -> [?2_6,?3_6,?47_4,?52,?54_6,?56_6,?58_6,?72]
[?41_4,?54_6] -> [?4_6]
[?41_4,?56_6] -> [?4_6]
[?41_4,?58_6] -> [?4_6]
[?42_2] -> [?48_2]
[?42_4] -> [?48_4]
[?44] -> [?38,?47,?50]
[?44_4] -> [?38_4,?47_4,?50_4]
[?45_4] -> [?39_4,?49_4]
[?46_2] -> [?40_2]
[?46_4] -> [?40_4]
[?47] -> [?41]
[?47_4] -> [?41_4]
[?48_2] -> [?42_2]
[?48_4] -> [?42_4]
[?50] -> [?44]
[?50_4] -> [?44_4,?45_4]
[?72] -> [?41_4]

### Solution ###

[?2,?3,?3_1,?4,?4_1,?5,?5_1,?6,?6_1,?7,?7_1,?8,?8_1,?9,?9_1,?10,?10_1,?11,?11_1,?12,?12_1,?13,?13_1,?14,?14_1,?16,?16_1,?17,?17_1,?18,?18_1,?19,?19_1,?20,?20_1,?21,?21_1,?22,?23,?23_3,?24,?24_3,?25,?25_3,?26,?26_3,?27,?28,?28_5,?29,?32,?32_5,?33,?36,?37,?37_2,?37_4,?38_2,?39,?39_2,?40,?41_2,?42,?43,?43_2,?43_4,?44_2,?45,?45_2,?46,?47_2,?48,?49,?49_2,?50_2,?51,?53,?54,?55,?56,?57,?58,?59,?60,?61,?62,?63,?64,?65,?66,?67,?68,?69,?70,?71,?73,?74,?75,?76,!R]

### Annotated ###

Nat :E: *

Z :R: Nat

S :R: (n :R::R: Nat) -> Nat

plus :R: (x :R::R: Nat) -> (y :R::R: Nat) -> Nat
plus = \x :R::R: Nat. \y :R::R: Nat. 
  case x of
    Z -> y
    S (xx :R: Nat) -> (S -R-  -R- (plus -R-  -R- xx -R-  -R- y))

id :R: (_ :R::R: Nat) -> Nat
id = \y :R::R: Nat. y

const :R: (x :R::R: Nat) -> (_ :E::E: Nat) -> Nat
const = \x :R::R: Nat. \_ :E::E: Nat. x

main :R: Nat
main = 
  let apply :R: (f :R::R: (_ :R::E: Nat) -> Nat) -> (x :R::E: Nat) -> Nat
    = \f :R::R: (_ :R::E: Nat) -> Nat. \x :R::E: Nat. (f -R-  -E- x)
  in 
    let postulate Q :R: Nat
    in 
      let three :E: Nat
        = 3
      in (plus -R-  -R- (apply -R-  -R- id -R-  -R- 2) -R-  -R- (apply -R-  -R- (const -R-  -R- Q) -R-  -E- three))

### Pruned ###

plus = \x. \y. 
  case x of
    Z -> y
    S xx -> (S  (plus  xx  y))

id = \y. y

const = \x. x

main = 
  let apply
    = \f. \x. (f  ____)
  in 
    let postulate Q
    in (plus  (apply  id  2)  (apply  (const  Q)  ____))

### Normal forms ###

unerased:
  (S  (S  Q))
erased:
  
  case ____ of
    Z -> (Q  ____)
    S xx -> (S  (plus  xx  (Q  ____)))
