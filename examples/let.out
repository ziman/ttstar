-- vim: ft=agda

### Desugared ###

Nat : *

Z : Nat

S : (n  -R- : Nat) -> Nat

plus : (x :: Nat) -> (y :: Nat) -> Nat
plus = \x :: Nat. \y :: Nat. 
  case x of
    Z -> y
    S (xx : Nat) -> (S (plus xx y))

id : (_ :: Nat) -> Nat
id = \y :: Nat. y

const : (x :: Nat) -> (_ :: Nat) -> Nat
const = \x :: Nat. \_ :: Nat. x

main  -R-  Nat
main = 
  let apply : (f :: (_ :: Nat) -> Nat) -> (x :: Nat) -> Nat
    = \f :: (_ :: Nat) -> Nat. \x :: Nat. (f x)
  in 
    let postulate Q : Nat
    in 
      let three : Nat
        = 3
      in (plus (apply id 2) (apply (const Q) three))

### Metaified ###

Nat :?1: *

Z :?2: Nat

S :?3: (n :!R::?4: Nat) -> Nat

plus :?5: (x :?6::?7: Nat) -> (y :?8::?9: Nat) -> Nat
plus = \x :?10::?11: Nat. \y :?12::?13: Nat. 
  case x of
    Z -> y
    S (xx :?14: Nat) -> (S -?17- (plus -?21- xx -?19- y))

id :?22: (_ :?23::?24: Nat) -> Nat
id = \y :?25::?26: Nat. y

const :?27: (x :?28::?29: Nat) -> (_ :?30::?31: Nat) -> Nat
const = \x :?32::?33: Nat. \_ :?34::?35: Nat. x

main :!R: Nat
main = 
  let apply :?36: (f :?37::?40: (_ :?38::?39: Nat) -> Nat) -> (x :?41::?42: Nat) -> Nat
    = \f :?43::?46: (_ :?44::?45: Nat) -> Nat. \x :?47::?48: Nat. (f -?50- x)
  in 
    let postulate Q :?51: Nat
    in 
      let three :?52: Nat
        = 3
      in (plus -?62- (apply -?66- id -?64- 2) -?60- (apply -?74- (const -?76- Q) -?72- three))

### Inferred definitions ###

Nat :?1: *
S :?3: (n :!R::?4: Nat) -> Nat
Z :?2: Nat
const :?27: (x :?28::?29: Nat) -> (_ :?30::?31: Nat) -> Nat
  [] -> [?28,?32,!R]
  [?29] -> [?33]
  [?30] -> [?34]
  [?31] -> [?35]
  [?33] -> [?29]
  [?34] -> [?30]
  [?35] -> [?31]

id :?22: (_ :?23::?24: Nat) -> Nat
  [] -> [?23,?25,!R]
  [?24] -> [?26]
  [?26] -> [?24]

main :!R: Nat
  [] -> [?2,?3,?3_1,?4,?4_1,?5,?5_1,?6,?6_1,?7_1,?8,?8_1,?9_1,?10_1,?11_1,?12_1,?13_1,?14_1,?16_1,?17_1,?18_1,?19_1,?20_1,?21_1,?22,?23,?23_3,?24_3,?25_3,?26_3,?27,?28,?28_5,?29_5,?32_5,?33_5,?36,?37,?37_2,?37_4,?38,?38_2,?39,?39_2,?40_2,?40_4,?41,?41_2,?42_2,?43,?43_2,?43_4,?44,?44_2,?45,?45_2,?46_2,?46_4,?47,?47_2,?48_2,?49,?49_2,?50,?50_2,?51,?53,?54,?55,?56,?57,?58,?59,?60,?61,?62,?63,?64,?65,?66,?67,?68,?69,?70,?71,?73,?74,?75,?76,!R]
  [?30_5] -> [?30,?34_5,?38_4]
  [?31_5] -> [?35_5,?39_4]
  [?34_5] -> [?30_5]
  [?35_5] -> [?31_5]
  [?38_4] -> [?30_5,?44_4]
  [?39_4] -> [?31_5,?45_4]
  [?40] -> [?46]
  [?41_4] -> [?2_6,?3_6,?47_4,?52,?53_6,?54_6,?55_6,?56_6,?57_6,?58_6,?72]
  [?41_4,?54_6] -> [?4_6]
  [?41_4,?56_6] -> [?4_6]
  [?41_4,?58_6] -> [?4_6]
  [?42] -> [?48]
  [?42_4] -> [?48_4]
  [?44_4] -> [?38_4,?47_4,?49_4,?50_4]
  [?45_4] -> [?39_4]
  [?46] -> [?40]
  [?47_4] -> [?41_4]
  [?48] -> [?42]
  [?48_4] -> [?42_4]
  [?50_4] -> [?45_4]
  [?72] -> [?42_4]

plus :?5: (x :?6::?7: Nat) -> (y :?8::?9: Nat) -> Nat
  [] -> [?3,?4,?5,?6,?7,?8,?9,?10,?11,?12,?13,?14,?16,?17,?18,?19,?20,?21,!R]


### Constraints ###

[] -> [?2,?3,?3_1,?4,?4_1,?5,?5_1,?6,?6_1,?7,?7_1,?8,?8_1,?9,?9_1,?10,?10_1,?11,?11_1,?12,?12_1,?13,?13_1,?14,?14_1,?16,?16_1,?17,?17_1,?18,?18_1,?19,?19_1,?20,?20_1,?21,?21_1,?22,?23,?23_3,?24_3,?25,?25_3,?26_3,?27,?28,?28_5,?29_5,?32,?32_5,?33_5,?36,?37,?37_2,?37_4,?38,?38_2,?39,?39_2,?40_2,?40_4,?41,?41_2,?42_2,?43,?43_2,?43_4,?44,?44_2,?45,?45_2,?46_2,?46_4,?47,?47_2,?48_2,?49,?49_2,?50,?50_2,?51,?53,?54,?55,?56,?57,?58,?59,?60,?61,?62,?63,?64,?65,?66,?67,?68,?69,?70,?71,?73,?74,?75,?76,!R]
[?24] -> [?26]
[?26] -> [?24]
[?29] -> [?33]
[?30] -> [?34]
[?30_5] -> [?30,?34_5,?38_4]
[?31] -> [?35]
[?31_5] -> [?35_5,?39_4]
[?33] -> [?29]
[?34] -> [?30]
[?34_5] -> [?30_5]
[?35] -> [?31]
[?35_5] -> [?31_5]
[?38_4] -> [?30_5,?44_4]
[?39_4] -> [?31_5,?45_4]
[?40] -> [?46]
[?41_4] -> [?2_6,?3_6,?47_4,?52,?53_6,?54_6,?55_6,?56_6,?57_6,?58_6,?72]
[?41_4,?54_6] -> [?4_6]
[?41_4,?56_6] -> [?4_6]
[?41_4,?58_6] -> [?4_6]
[?42] -> [?48]
[?42_4] -> [?48_4]
[?44_4] -> [?38_4,?47_4,?49_4,?50_4]
[?45_4] -> [?39_4]
[?46] -> [?40]
[?47_4] -> [?41_4]
[?48] -> [?42]
[?48_4] -> [?42_4]
[?50_4] -> [?45_4]
[?72] -> [?42_4]

### Solution ###

[?2,?3,?3_1,?4,?4_1,?5,?5_1,?6,?6_1,?7,?7_1,?8,?8_1,?9,?9_1,?10,?10_1,?11,?11_1,?12,?12_1,?13,?13_1,?14,?14_1,?16,?16_1,?17,?17_1,?18,?18_1,?19,?19_1,?20,?20_1,?21,?21_1,?22,?23,?23_3,?24_3,?25,?25_3,?26_3,?27,?28,?28_5,?29_5,?32,?32_5,?33_5,?36,?37,?37_2,?37_4,?38,?38_2,?39,?39_2,?40_2,?40_4,?41,?41_2,?42_2,?43,?43_2,?43_4,?44,?44_2,?45,?45_2,?46_2,?46_4,?47,?47_2,?48_2,?49,?49_2,?50,?50_2,?51,?53,?54,?55,?56,?57,?58,?59,?60,?61,?62,?63,?64,?65,?66,?67,?68,?69,?70,?71,?73,?74,?75,?76,!R]

### Annotated ###

Nat :E: *

Z :R: Nat

S :R: (n :R::R: Nat) -> Nat

plus :R: (x :R::R: Nat) -> (y :R::R: Nat) -> Nat
plus = \x :R::R: Nat. \y :R::R: Nat. 
  case x of
    Z -> y
    S (xx :R: Nat) -> (S -R- (plus -R- xx -R- y))

id :R: (_ :R::E: Nat) -> Nat
id = \y :R::E: Nat. y

const :R: (x :R::E: Nat) -> (_ :E::E: Nat) -> Nat
const = \x :R::E: Nat. \_ :E::E: Nat. x

main :R: Nat
main = 
  let apply :R: (f :R::E: (_ :R::R: Nat) -> Nat) -> (x :R::E: Nat) -> Nat
    = \f :R::E: (_ :R::R: Nat) -> Nat. \x :R::E: Nat. (f -R- x)
  in 
    let postulate Q :R: Nat
    in 
      let three :E: Nat
        = 3
      in (plus -R- (apply -R- id -R- 2) -R- (apply -R- (const -R- Q) -E- three))

### Pruned ###

plus = \x. \y. 
  case x of
    Z -> y
    S xx -> (S (plus xx y))

id = \y. y

const = \x. x

main = 
  let apply
    = \f. \x. (f x)
  in 
    let postulate Q
    in (plus (apply id 2) (apply (const Q) ____))

### Normal forms ###

unerased:
  (S (S Q))
erased:
  (S (S (Q ____)))
