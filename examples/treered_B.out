-- vim: ft=agda

### Desugared ###

postulate N : Type

postulate Z : N

postulate S : (x :R: N) -> N

postulate Vec : (_ : N) -> (_ : Type) -> Type

postulate Nil : (a : Type) -> Vec Z a

postulate Cons : (a : Type) -> (n : N) -> (x : a) -> (xs : Vec n a) -> Vec (S n) a

vlen : (n : N) -> (xs : Vec n N) -> N = \(n : N) (xs : Vec n N).
  case xs of
    Nil (a : Type)
      | a = N
      | n = Z
      => n
    Cons (a : Type) (m : N) (y : N) (ys : Vec m N)
      | a = N
      | n = S m
      => S (vlen m ys)

main :R: N = vlen 1 (Cons N Z 3 (Nil N))

### Metaified ###

postulate N :1: Type

postulate Z :2: N

postulate S :3: (x :R: N) -> N

postulate Vec :4: (_ :5: N) -> (_ :6: Type) -> Type

postulate Nil :7: (a :8: Type) -> Vec -10- Z -9- a

postulate Cons :11: (a :12: Type) -> (n :13: N) -> (x :14: a) -> (xs :15: Vec -17- n -16- a) -> Vec -19- (S -20- n) -18- a

vlen :21: (n :22: N) -> (xs :23: Vec -25- n -24- N) -> N = \(n :26: N) (xs :27: Vec -29- n -28- N).
  case -30- xs of
    Nil/31 (a :32: Type)
      | a = N
      | n = Z
      => n
    Cons/33 (a :34: Type) (m :35: N) (y :36: N) (ys :37: Vec -39- m -38- N)
      | a = N
      | n = S -40- m
      => S -41- (vlen -43- m -42- ys)

main :R: N = vlen -45- 1 -44- (Cons -50- N -49- Z -48- 3 -47- (Nil -54- N))

### Inferred definitions ###

