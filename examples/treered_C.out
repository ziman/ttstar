-- vim: ft=agda

### Desugared ###

postulate N : Type

postulate Z :R: N

postulate S : (x :R: N) -> N

postulate Vec : (_ : N) -> (_ : Type) -> Type

postulate Nil : (a : Type) -> Vec Z a

postulate Cons : (a : Type) -> (n : N) -> (x : a) -> (xs : Vec n a) -> Vec (S n) a

vlen : (n : N) -> (xs : Vec n N) -> N = \(n : N) (xs : Vec n N).
  case xs of
    Nil (a : Type)
      | a = N
      | n = Z
      => n
    Cons (a : Type) (m : N) (y : N) (ys : Vec m N)
      | a = N
      | n = S m
      => S (vlen m ys)

main :R: N = vlen 1 (Cons N Z 3 (Nil N))

### Metaified ###

postulate N :1: Type

postulate Z :R: N

postulate S :2: (x :R: N) -> N

postulate Vec :3: (_ :4: N) -> (_ :5: Type) -> Type

postulate Nil :6: (a :7: Type) -> Vec -9- Z -8- a

postulate Cons :10: (a :11: Type) -> (n :12: N) -> (x :13: a) -> (xs :14: Vec -16- n -15- a) -> Vec -18- (S -19- n) -17- a

vlen :20: (n :21: N) -> (xs :22: Vec -24- n -23- N) -> N = \(n :25: N) (xs :26: Vec -28- n -27- N).
  case -29- xs of
    Nil/30 (a :31: Type)
      | a = N
      | n = Z
      => n
    Cons/32 (a :33: Type) (m :34: N) (y :35: N) (ys :36: Vec -38- m -37- N)
      | a = N
      | n = S -39- m
      => S -40- (vlen -42- m -41- ys)

main :R: N = vlen -44- 1 -43- (Cons -49- N -48- Z -47- 3 -46- (Nil -53- N))

### Inferred definitions ###

