(print
  (letrec (
    (Z (list 'Z))
    (S (lambda (x)
      (list 'S x)))
    (plus (lambda (n)
      (lambda (m)
        (case (car n)
          ((Z) m)
          ((S) (let* (
            (_args-n_ (cdr n))
            (n_ (car _args-n_))
          )
            (S ((plus n_) m))))))))
    (id (lambda (x)
      x))
    (const (lambda (x)
      (lambda (y)
        x)))
    (main (letrec ((apply_TT (lambda (f)
      (lambda (x)
        (case (car x)
          ((Z) (f Z))
          ((S) (let* (
            (_args-x_ (cdr x))
            (x_ (car _args-x_))
          )
            (f (S x_)))))))))
      (letrec (
        (Q (list 'Q))
        (three (S (S (S Z))))
      )
        ((plus ((apply_TT id) (S (S Z)))) ((apply_TT (const Q)) three)))))
  )
    main))
(newline)
