-- vim: ft=idris

data Id : (a : Type) -> (x : a) -> (y : a) -> Type.
  Refl : (a : Type) -> (x : a) -> Id a x x.

id (a : Type) : a -> a = \x : a. x.

subst : (a : Type) -> (P : a -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (P x) -> (P y).
  pat (a : Type) (P : a -> Type) (x : a) (eq : Id a x x).
    subst a P x [x] (Refl [a] [x]) = \y : P x. y.

cong : (a : Type) -> (b : Type) -> (f : a -> b) -> (x : a) -> (y : a) -> (eq : Id a x y) -> Id b (f x) (f y).
  pat (a : Type) (b : Type) (f : a -> b) (x : a).
    cong a b f x [x] (Refl a [x]) = Refl b (f x).

data Bool : Type.
  T : Bool,
  F : Bool.

-- We annotate this type manually to emulate usage caused by I/O actions.
data List : Type.
  Nil : List,
  Cons : (x :R: Bool) -> (xs :R: List) -> List.

one (x : Bool) : List
  = Cons x Nil.

app : List -> List -> List.
  pat (ys : List).
    app Nil ys = ys,
  pat (x : Bool) (xs : List) (ys : List).
    app (Cons x xs) ys = Cons x (app xs ys).

appRightNeutral : (ys : List) -> Id List ys (app ys Nil).
  appRightNeutral Nil = Refl List Nil,
  pat (x : Bool) (xs : List).
    appRightNeutral (Cons x xs)
      = cong List List (Cons x) xs (app xs Nil) (appRightNeutral xs).

postulate appAssoc : (xs : List) -> (ys : List) -> (zs : List)
  -> Id List (app (app xs ys) zs) (app xs (app ys zs)).

data Rev : List -> Type.
  RNil : Rev Nil,
  RSnoc : (xs : List) -> (x : Bool) -> (rxs : Rev xs)
    -> Rev (app xs (one x)).

rev' : (xs : List) -> (Rev xs) -> (ys : List) -> Rev (app xs ys).
  pat (xs : List) (rxs : Rev xs).
    rev' xs rxs Nil
      = subst List Rev xs (app xs Nil) (appRightNeutral xs) rxs,
  pat (xs : List) (rxs : Rev xs) (y : Bool) (ys : List).
    rev' xs rxs (Cons y ys)
      = subst List Rev
          (app (app xs (one y)) ys)
          (app xs (Cons y ys))
          (appAssoc xs (one y) ys)
          (rev' (app xs (one y)) (RSnoc xs y rxs) ys).

rev (xs : List) : Rev xs
  = rev' Nil RNil xs.

reverse' : (xs : List) -> (rxs : Rev xs) -> List.
  reverse' Nil RNil = Nil,
  pat (x : Bool) (xs : List) (rxs : Rev xs).
    reverse' [app xs (one x)] (RSnoc xs x rxs)
      = Cons x (reverse' xs rxs).

reverse (xs : List) : List
  = reverse' xs (rev xs).

main :R: List
  = reverse (Cons T (Cons F (Cons T (Cons F Nil)))).
