-- vim: ft=idris

data Bool : Type where
  True : Bool,
  False : Bool.

data Nat : Type where
  Z : Nat,
  S : (n :R: Nat) -> Nat.

data Vec : Nat -> Type -> Type where
  VNil : (a : Type) -> Vec Z a,
  VCons : (a : Type) -> (n : Nat) -> (x : a) -> (xs : Vec n a) -> Vec (S n) a.

vlen : (a : Type) -> (n : Nat) -> (xs : Vec n a) -> Nat.
  (a : Type)
    vlen a [Z] (VNil [a]) = Z,
  (a : Type) (n : Nat) (x : a) (xs : Vec n a)
    vlen a (S n) (VCons [a] [n] x xs) = S (vlen a n xs).

testVec : Vec (S (S Z)) Bool
    = VCons Bool (S Z) True (VCons Bool Z False (VNil Bool)).

main : Nat
    = vlen Bool (S (S Z)) testVec.
