-- vim: ft=idris

data Bool : Type where
  True : Bool,
  False : Bool.

data Nat : Type where
  Z : Nat,
  S : (n :R: Nat) -> Nat.

data Vec : Nat -> Type -> Type where
  VNil : (a : Type) -> Vec Z a,
  VCons : (a : Type) -> (n : Nat) -> (x : a) -> (xs : Vec n a) -> Vec (S n) a.

vlen (a : Type) (n : Nat) (xs : Vec n a) : Nat
  = case xs of {
      VNil (a' : Type) =>
        case a' of [a] =>
          case n of [Z] =>
            Z,

      VCons (a' : Type) (n' : Nat) (x' : a) (xs' : Vec n' a) =>
        case a' of [a] =>
          case n of [S n'] =>
            S (vlen a n' xs')
    }

testVec : Vec (S (S Z)) Bool
    = VCons Bool (S Z) True (VCons Bool Z False (VNil Bool)).

main : Nat
    = vlen Bool (S (S Z)) testVec.
