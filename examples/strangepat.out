-- vim: ft=idris

### Desugared ###

  let
    postulate Bool : Type
    postulate T : Bool
    postulate F : Bool
    postulate Pair : Type
    postulate P : (_x0 : Bool) -> (_x1 : Bool) -> Pair
    fst : (x : (y : Bool) -> Pair) -> Bool = \(x : (y : Bool) -> Pair).
      case x of P (y : Bool) =>
        y
    main : Bool = fst (P T)
  in main

### Metaified ###

  let
    postulate Bool :1: Type
    postulate T :2: Bool
    postulate F :3: Bool
    postulate Pair :4: Type
    postulate P :5: (_x0 :6: Bool) -> (_x1 :7: Bool) -> Pair
    fst :8: (x :9: (y :10: Bool) -> Pair) -> Bool = \(x :11: (y :12: Bool) -> Pair).
      case -13- x of P/14 (y :15: Bool) =>
        y
    main :16: Bool = fst -17- (P -18- T)
  in main

### Constraints ###

[] -> [2,5,6,8,9,11,13,14,15,17,18,R]
[7] -> [10]
[10] -> [7]
[R] -> [16]

### Solution ###

[2,5,6,8,9,11,13,14,15,16,17,18,R]

### Annotated ###

  let
    postulate Bool :E: Type
    postulate T :R: Bool
    postulate F :E: Bool
    postulate Pair :E: Type
    postulate P :R: (_x0 :R: Bool) -> (_x1 :E: Bool) -> Pair
    fst :R: (x :R: (y :E: Bool) -> Pair) -> Bool = \(x :R: (y :E: Bool) -> Pair).
      case -R- x of P/R (y :R: Bool) =>
        y
    main :R: Bool = fst -R- (P -R- T)
  in main

### Specialised ###

  let
    postulate Bool :E: Type
    postulate T :R: Bool
    postulate F :E: Bool
    postulate Pair :E: Type
    postulate P :R: (_x0 :R: Bool) -> (_x1 :E: Bool) -> Pair
    fst :R: (x :R: (y :E: Bool) -> Pair) -> Bool = \(x :R: (y :E: Bool) -> Pair).
      case -R- x of P/R (y :R: Bool) =>
        y
    main :R: Bool = fst -R- (P -R- T)
  in main

### Final annotation ###

  let
    postulate Bool :E: Type
    postulate T :R: Bool
    postulate F :E: Bool
    postulate Pair :E: Type
    postulate P :R: (_x0 :R: Bool) -> (_x1 :E: Bool) -> Pair
    fst :R: (x :R: (y :E: Bool) -> Pair) -> Bool = \(x :R: (y :E: Bool) -> Pair).
      case -R- x of P/R (y :R: Bool) =>
        y
    main :R: Bool = fst -R- (P -R- T)
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    postulate T : Bool
    postulate P : (_x0) -> Pair
    fst = \x.
      case x of P y =>
        y
    main = fst (P T)
  in main

### Normal forms ###

unerased:
  
  let postulate T : Bool
  in T

erased:
  
  let postulate T : Bool
  in T

