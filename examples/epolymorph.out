-- vim: ft=agda

### Desugared ###

postulate Bool : Type

postulate True : Bool

postulate False : Bool

postulate Maybe : (_ : Type) -> Type

postulate Just : (a : Type) -> (_ : a) -> Type

postulate Nothing : (a : Type) -> Type

postulate Nat : Type

postulate Z : Nat

postulate S : (n :R: Nat) -> Nat

postulate Plus : (x :R: Nat) -> (y :R: Nat) -> Nat

id : (x : Nat) -> Nat = \(x : Nat).
  case x of
    Z
      => Z
    S (y : Nat)
      => 
        let result : Nat = S y
        in result

const_3 : (_ : Nat) -> Nat = (\_ : Nat. 3)

two : Nat = 2

f : (g : (_ : Nat) -> Nat) -> (z : Nat) -> (h : (_ : Nat) -> Nat) -> (w : Nat) -> Nat = (\g : (_ : Nat) -> Nat. (\z : Nat. (\h : (_ : Nat) -> Nat. (\w : Nat. Plus (g z) (h w)))))

apply : (f : (_ : Nat) -> Nat) -> (x : Nat) -> Nat = (\f : (_ : Nat) -> Nat. (\x : Nat. f x))

test_1 : Nat = Plus (apply id 2) (apply const_3 two)

test_2 : Nat = f id 2 const_3 1

main :R: Nat = Plus test_1 test_2

### Metaified ###

postulate Bool :1: Type

postulate True :2: Bool

postulate False :3: Bool

postulate Maybe :4: (_ :5: Type) -> Type

postulate Just :6: (a :7: Type) -> (_ :8: a) -> Type

postulate Nothing :9: (a :10: Type) -> Type

postulate Nat :11: Type

postulate Z :12: Nat

postulate S :13: (n :R: Nat) -> Nat

postulate Plus :14: (x :R: Nat) -> (y :R: Nat) -> Nat

id :15: (x :16: Nat) -> Nat = \(x :17: Nat).
  case -18- x of
    Z
      => Z
    S (y :19: Nat)
      => 
        let result :20: Nat = S -21- y
        in result

const_3 :22: (_ :23: Nat) -> Nat = (\_ :24: Nat. 3)

two :28: Nat = 2

f :31: (g :32: (_ :33: Nat) -> Nat) -> (z :34: Nat) -> (h :35: (_ :36: Nat) -> Nat) -> (w :37: Nat) -> Nat = (\g :38: (_ :39: Nat) -> Nat. (\z :40: Nat. (\h :41: (_ :42: Nat) -> Nat. (\w :43: Nat. Plus -45- (g -46- z) -44- (h -47- w)))))

apply :48: (f :49: (_ :50: Nat) -> Nat) -> (x :51: Nat) -> Nat = (\f :52: (_ :53: Nat) -> Nat. (\x :54: Nat. f -55- x))

test_1 :56: Nat = Plus -58- (apply -60- id -59- 2) -57- (apply -64- const_3 -63- two)

test_2 :65: Nat = f -69- id -68- 2 -67- const_3 -66- 1

main :R: Nat = Plus -74- test_1 -73- test_2

### Inferred definitions ###

postulate Bool :1: Type {- constraints apply -}
  [1] -> [1]

postulate False :3: Bool {- constraints apply -}
  [1,3] -> [1]
  [3] -> [3]

postulate Just :6: (a :7: Type) -> (_ :8: a) -> Type {- constraints apply -}
  [6] -> [6]

postulate Maybe :4: (_ :5: Type) -> Type {- constraints apply -}
  [4] -> [4]

postulate Nat :11: Type {- constraints apply -}
  [11] -> [11]

postulate Nothing :9: (a :10: Type) -> Type {- constraints apply -}
  [9] -> [9]

postulate Plus :14: (x :R: Nat) -> (y :R: Nat) -> Nat {- constraints apply -}
  [11,14] -> [11]
  [14] -> [14]

postulate S :13: (n :R: Nat) -> Nat {- constraints apply -}
  [11,13] -> [11]
  [13] -> [13]

postulate True :2: Bool {- constraints apply -}
  [1,2] -> [1]
  [2] -> [2]

postulate Type :R: Type

postulate Z :12: Nat {- constraints apply -}
  [11,12] -> [11]
  [12] -> [12]

apply :48: (f :49: (_ :50: Nat) -> Nat) -> (x :51: Nat) -> Nat = (\f :52: (_ :53: Nat) -> Nat. (\x :54: Nat. f -55- x)) {- constraints apply -}
  [11,48] -> [11]
  [11,48,52] -> [11]
  [11,48,53,54] -> [11]
  [48] -> [48]
  [48,49] -> [52]
  [48,50] -> [53]
  [48,51] -> [54]
  [48,52] -> [49,52]
  [48,53] -> [50,55]
  [48,53,54] -> [54]
  [48,54] -> [51]
  [48,55] -> [53]

const_3 :22: (_ :23: Nat) -> Nat = (\_ :24: Nat. 3) {- constraints apply -}
  [11,12,22] -> [11]
  [11,13,22] -> [11]
  [11,22] -> [11]
  [12,22] -> [12]
  [13,22] -> [13]
  [22] -> [22,25,26,27]
  [22,23] -> [24]
  [22,24] -> [23]

f :31: (g :32: (_ :33: Nat) -> Nat) -> (z :34: Nat) -> (h :35: (_ :36: Nat) -> Nat) -> (w :37: Nat) -> Nat = (\g :38: (_ :39: Nat) -> Nat. (\z :40: Nat. (\h :41: (_ :42: Nat) -> Nat. (\w :43: Nat. Plus -45- (g -46- z) -44- (h -47- w))))) {- constraints apply -}
  [11,14,31] -> [11]
  [11,31] -> [11]
  [11,31,38] -> [11]
  [11,31,39,40] -> [11]
  [11,31,41] -> [11]
  [11,31,42,43] -> [11]
  [14,31] -> [14]
  [31] -> [31,44,45]
  [31,32] -> [38]
  [31,33] -> [39]
  [31,34] -> [40]
  [31,35] -> [41]
  [31,36] -> [42]
  [31,37] -> [43]
  [31,38] -> [32,38]
  [31,39] -> [33,46]
  [31,39,40] -> [40]
  [31,40] -> [34]
  [31,41] -> [35,41]
  [31,42] -> [36,47]
  [31,42,43] -> [43]
  [31,43] -> [37]
  [31,46] -> [39]
  [31,47] -> [42]

id :15: (x :16: Nat) -> Nat = \(x :17: Nat).
  case -18- x of
    Z
      => Z
    S (y :19: Nat)
      => 
        let result :20: Nat = S -21- y
        in result {- constraints apply -}
  [11,12,15] -> [11]
  [11,13,15,20] -> [11]
  [11,15] -> [11,12,13,16,19]
  [11,15,19,20] -> [11]
  [11,15,20] -> [11]
  [12,15] -> [12,16]
  [13,15] -> [13,16]
  [13,15,20] -> [13]
  [15] -> [15,16,18,19]
  [15,16] -> [17]
  [15,17] -> [16]
  [15,18] -> [17]
  [15,19] -> [16,18,19]
  [15,19,20] -> [19]
  [15,20] -> [20,21]

main :R: Nat = Plus -74- test_1 -73- test_2 {- constraints apply -}
  [] -> [73,74,R]
  [11] -> [11]
  [11,12,15,32,65] -> [11]
  [11,12,15,49,56] -> [11]
  [11,12,22,35,65] -> [11]
  [11,12,22,49,56] -> [11]
  [11,12,28,51,56] -> [11]
  [11,12,34,65] -> [11]
  [11,12,37,65] -> [11]
  [11,12,51,56] -> [11]
  [11,13,15,20,32,65] -> [11]
  [11,13,15,20,49,56] -> [11]
  [11,13,22,35,65] -> [11]
  [11,13,22,49,56] -> [11]
  [11,13,28,51,56] -> [11]
  [11,13,34,65] -> [11]
  [11,13,37,65] -> [11]
  [11,13,51,56] -> [11]
  [11,14] -> [11]
  [11,14,31,65] -> [11]
  [11,14,56] -> [11]
  [11,15,19,20,32,65] -> [11]
  [11,15,19,20,49,56] -> [11]
  [11,15,20,32,65] -> [11]
  [11,15,20,49,56] -> [11]
  [11,15,32,65] -> [11,12,13,16,19]
  [11,15,49,56] -> [11,12,13,16,19]
  [11,22,35,65] -> [11]
  [11,22,49,56] -> [11]
  [11,28,51,56] -> [11]
  [11,31,38,65] -> [11]
  [11,31,39,40,65] -> [11]
  [11,31,41,65] -> [11]
  [11,31,42,43,65] -> [11]
  [11,31,65] -> [11]
  [11,48,52,56] -> [11]
  [11,48,53,54,56] -> [11]
  [11,48,56] -> [11]
  [11,56] -> [11]
  [11,65] -> [11]
  [12,15,32,65] -> [12,16]
  [12,15,49,56] -> [12,16]
  [12,22,35,65] -> [12]
  [12,22,49,56] -> [12]
  [12,28,51,56] -> [12]
  [12,34,65] -> [12]
  [12,37,65] -> [12]
  [12,51,56] -> [12]
  [13,15,20,32,65] -> [13]
  [13,15,20,49,56] -> [13]
  [13,15,32,65] -> [13,16]
  [13,15,49,56] -> [13,16]
  [13,22,35,65] -> [13]
  [13,22,49,56] -> [13]
  [13,28,51,56] -> [13]
  [13,34,65] -> [13]
  [13,37,65] -> [13]
  [13,51,56] -> [13]
  [14] -> [14]
  [14,31,65] -> [14]
  [14,56] -> [14]
  [15,16,32,65] -> [17]
  [15,16,49,56] -> [17]
  [15,17,32,65] -> [16]
  [15,17,49,56] -> [16]
  [15,18,32,65] -> [17]
  [15,18,49,56] -> [17]
  [15,19,20,32,65] -> [19]
  [15,19,20,49,56] -> [19]
  [15,19,32,65] -> [16,18,19]
  [15,19,49,56] -> [16,18,19]
  [15,20,32,65] -> [20,21]
  [15,20,49,56] -> [20,21]
  [15,32,65] -> [15,16,18,19]
  [15,49,56] -> [15,16,18,19]
  [16,56] -> [50]
  [16,65] -> [33]
  [22,23,35,65] -> [24]
  [22,23,49,56] -> [24]
  [22,24,35,65] -> [23]
  [22,24,49,56] -> [23]
  [22,35,65] -> [22,25,26,27]
  [22,49,56] -> [22,25,26,27]
  [23,56] -> [50]
  [23,65] -> [36]
  [28,51,56] -> [28,29,30]
  [31,32,65] -> [38]
  [31,33,65] -> [39]
  [31,34,65] -> [40]
  [31,35,65] -> [41]
  [31,36,65] -> [42]
  [31,37,65] -> [43]
  [31,38,65] -> [32,38]
  [31,39,40,65] -> [40]
  [31,39,65] -> [33,46]
  [31,40,65] -> [34]
  [31,41,65] -> [35,41]
  [31,42,43,65] -> [43]
  [31,42,65] -> [36,47]
  [31,43,65] -> [37]
  [31,46,65] -> [39]
  [31,47,65] -> [42]
  [31,65] -> [31,44,45]
  [32,65] -> [69]
  [33,65] -> [16]
  [34,65] -> [68,70,71]
  [35,65] -> [67]
  [36,65] -> [23]
  [37,65] -> [66,72]
  [48,49,56] -> [52]
  [48,50,56] -> [53]
  [48,51,56] -> [54]
  [48,52,56] -> [49,52]
  [48,53,54,56] -> [54]
  [48,53,56] -> [50,55]
  [48,54,56] -> [51]
  [48,55,56] -> [53]
  [48,56] -> [48]
  [49,56] -> [60,64]
  [50,56] -> [16,23]
  [51,56] -> [59,61,62,63]
  [56] -> [56,57,58]
  [56,59] -> [51]
  [56,60] -> [49]
  [56,63] -> [51]
  [56,64] -> [49]
  [65] -> [65]
  [65,66] -> [37]
  [65,67] -> [35]
  [65,68] -> [34]
  [65,69] -> [32]

test_1 :56: Nat = Plus -58- (apply -60- id -59- 2) -57- (apply -64- const_3 -63- two) {- constraints apply -}
  [11,12,15,49,56] -> [11]
  [11,12,22,49,56] -> [11]
  [11,12,28,51,56] -> [11]
  [11,12,51,56] -> [11]
  [11,13,15,20,49,56] -> [11]
  [11,13,22,49,56] -> [11]
  [11,13,28,51,56] -> [11]
  [11,13,51,56] -> [11]
  [11,14,56] -> [11]
  [11,15,19,20,49,56] -> [11]
  [11,15,20,49,56] -> [11]
  [11,15,49,56] -> [11,12,13,16,19]
  [11,22,49,56] -> [11]
  [11,28,51,56] -> [11]
  [11,48,52,56] -> [11]
  [11,48,53,54,56] -> [11]
  [11,48,56] -> [11]
  [11,56] -> [11]
  [12,15,49,56] -> [12,16]
  [12,22,49,56] -> [12]
  [12,28,51,56] -> [12]
  [12,51,56] -> [12]
  [13,15,20,49,56] -> [13]
  [13,15,49,56] -> [13,16]
  [13,22,49,56] -> [13]
  [13,28,51,56] -> [13]
  [13,51,56] -> [13]
  [14,56] -> [14]
  [15,16,49,56] -> [17]
  [15,17,49,56] -> [16]
  [15,18,49,56] -> [17]
  [15,19,20,49,56] -> [19]
  [15,19,49,56] -> [16,18,19]
  [15,20,49,56] -> [20,21]
  [15,49,56] -> [15,16,18,19]
  [16,56] -> [50]
  [22,23,49,56] -> [24]
  [22,24,49,56] -> [23]
  [22,49,56] -> [22,25,26,27]
  [23,56] -> [50]
  [28,51,56] -> [28,29,30]
  [48,49,56] -> [52]
  [48,50,56] -> [53]
  [48,51,56] -> [54]
  [48,52,56] -> [49,52]
  [48,53,54,56] -> [54]
  [48,53,56] -> [50,55]
  [48,54,56] -> [51]
  [48,55,56] -> [53]
  [48,56] -> [48]
  [49,56] -> [60,64]
  [50,56] -> [16,23]
  [51,56] -> [59,61,62,63]
  [56] -> [56,57,58]
  [56,59] -> [51]
  [56,60] -> [49]
  [56,63] -> [51]
  [56,64] -> [49]

test_2 :65: Nat = f -69- id -68- 2 -67- const_3 -66- 1 {- constraints apply -}
  [11,12,15,32,65] -> [11]
  [11,12,22,35,65] -> [11]
  [11,12,34,65] -> [11]
  [11,12,37,65] -> [11]
  [11,13,15,20,32,65] -> [11]
  [11,13,22,35,65] -> [11]
  [11,13,34,65] -> [11]
  [11,13,37,65] -> [11]
  [11,14,31,65] -> [11]
  [11,15,19,20,32,65] -> [11]
  [11,15,20,32,65] -> [11]
  [11,15,32,65] -> [11,12,13,16,19]
  [11,22,35,65] -> [11]
  [11,31,38,65] -> [11]
  [11,31,39,40,65] -> [11]
  [11,31,41,65] -> [11]
  [11,31,42,43,65] -> [11]
  [11,31,65] -> [11]
  [11,65] -> [11]
  [12,15,32,65] -> [12,16]
  [12,22,35,65] -> [12]
  [12,34,65] -> [12]
  [12,37,65] -> [12]
  [13,15,20,32,65] -> [13]
  [13,15,32,65] -> [13,16]
  [13,22,35,65] -> [13]
  [13,34,65] -> [13]
  [13,37,65] -> [13]
  [14,31,65] -> [14]
  [15,16,32,65] -> [17]
  [15,17,32,65] -> [16]
  [15,18,32,65] -> [17]
  [15,19,20,32,65] -> [19]
  [15,19,32,65] -> [16,18,19]
  [15,20,32,65] -> [20,21]
  [15,32,65] -> [15,16,18,19]
  [16,65] -> [33]
  [22,23,35,65] -> [24]
  [22,24,35,65] -> [23]
  [22,35,65] -> [22,25,26,27]
  [23,65] -> [36]
  [31,32,65] -> [38]
  [31,33,65] -> [39]
  [31,34,65] -> [40]
  [31,35,65] -> [41]
  [31,36,65] -> [42]
  [31,37,65] -> [43]
  [31,38,65] -> [32,38]
  [31,39,40,65] -> [40]
  [31,39,65] -> [33,46]
  [31,40,65] -> [34]
  [31,41,65] -> [35,41]
  [31,42,43,65] -> [43]
  [31,42,65] -> [36,47]
  [31,43,65] -> [37]
  [31,46,65] -> [39]
  [31,47,65] -> [42]
  [31,65] -> [31,44,45]
  [32,65] -> [69]
  [33,65] -> [16]
  [34,65] -> [68,70,71]
  [35,65] -> [67]
  [36,65] -> [23]
  [37,65] -> [66,72]
  [65] -> [65]
  [65,66] -> [37]
  [65,67] -> [35]
  [65,68] -> [34]
  [65,69] -> [32]

two :28: Nat = 2 {- constraints apply -}
  [11,12,28] -> [11]
  [11,13,28] -> [11]
  [11,28] -> [11]
  [12,28] -> [12]
  [13,28] -> [13]
  [28] -> [28,29,30]


### Constraints ###

[] -> [73,74,R]
[11] -> [11]
[11,12,15,32,65] -> [11]
[11,12,15,49,56] -> [11]
[11,12,22,35,65] -> [11]
[11,12,22,49,56] -> [11]
[11,12,28,51,56] -> [11]
[11,12,34,65] -> [11]
[11,12,37,65] -> [11]
[11,12,51,56] -> [11]
[11,13,15,20,32,65] -> [11]
[11,13,15,20,49,56] -> [11]
[11,13,22,35,65] -> [11]
[11,13,22,49,56] -> [11]
[11,13,28,51,56] -> [11]
[11,13,34,65] -> [11]
[11,13,37,65] -> [11]
[11,13,51,56] -> [11]
[11,14] -> [11]
[11,14,31,65] -> [11]
[11,14,56] -> [11]
[11,15,19,20,32,65] -> [11]
[11,15,19,20,49,56] -> [11]
[11,15,20,32,65] -> [11]
[11,15,20,49,56] -> [11]
[11,15,32,65] -> [11,12,13,16,19]
[11,15,49,56] -> [11,12,13,16,19]
[11,22,35,65] -> [11]
[11,22,49,56] -> [11]
[11,28,51,56] -> [11]
[11,31,38,65] -> [11]
[11,31,39,40,65] -> [11]
[11,31,41,65] -> [11]
[11,31,42,43,65] -> [11]
[11,31,65] -> [11]
[11,48,52,56] -> [11]
[11,48,53,54,56] -> [11]
[11,48,56] -> [11]
[11,56] -> [11]
[11,65] -> [11]
[12,15,32,65] -> [12,16]
[12,15,49,56] -> [12,16]
[12,22,35,65] -> [12]
[12,22,49,56] -> [12]
[12,28,51,56] -> [12]
[12,34,65] -> [12]
[12,37,65] -> [12]
[12,51,56] -> [12]
[13,15,20,32,65] -> [13]
[13,15,20,49,56] -> [13]
[13,15,32,65] -> [13,16]
[13,15,49,56] -> [13,16]
[13,22,35,65] -> [13]
[13,22,49,56] -> [13]
[13,28,51,56] -> [13]
[13,34,65] -> [13]
[13,37,65] -> [13]
[13,51,56] -> [13]
[14] -> [14]
[14,31,65] -> [14]
[14,56] -> [14]
[15,16,32,65] -> [17]
[15,16,49,56] -> [17]
[15,17,32,65] -> [16]
[15,17,49,56] -> [16]
[15,18,32,65] -> [17]
[15,18,49,56] -> [17]
[15,19,20,32,65] -> [19]
[15,19,20,49,56] -> [19]
[15,19,32,65] -> [16,18,19]
[15,19,49,56] -> [16,18,19]
[15,20,32,65] -> [20,21]
[15,20,49,56] -> [20,21]
[15,32,65] -> [15,16,18,19]
[15,49,56] -> [15,16,18,19]
[16,56] -> [50]
[16,65] -> [33]
[22,23,35,65] -> [24]
[22,23,49,56] -> [24]
[22,24,35,65] -> [23]
[22,24,49,56] -> [23]
[22,35,65] -> [22,25,26,27]
[22,49,56] -> [22,25,26,27]
[23,56] -> [50]
[23,65] -> [36]
[28,51,56] -> [28,29,30]
[31,32,65] -> [38]
[31,33,65] -> [39]
[31,34,65] -> [40]
[31,35,65] -> [41]
[31,36,65] -> [42]
[31,37,65] -> [43]
[31,38,65] -> [32,38]
[31,39,40,65] -> [40]
[31,39,65] -> [33,46]
[31,40,65] -> [34]
[31,41,65] -> [35,41]
[31,42,43,65] -> [43]
[31,42,65] -> [36,47]
[31,43,65] -> [37]
[31,46,65] -> [39]
[31,47,65] -> [42]
[31,65] -> [31,44,45]
[32,65] -> [69]
[33,65] -> [16]
[34,65] -> [68,70,71]
[35,65] -> [67]
[36,65] -> [23]
[37,65] -> [66,72]
[48,49,56] -> [52]
[48,50,56] -> [53]
[48,51,56] -> [54]
[48,52,56] -> [49,52]
[48,53,54,56] -> [54]
[48,53,56] -> [50,55]
[48,54,56] -> [51]
[48,55,56] -> [53]
[48,56] -> [48]
[49,56] -> [60,64]
[50,56] -> [16,23]
[51,56] -> [59,61,62,63]
[56] -> [56,57,58]
[56,59] -> [51]
[56,60] -> [49]
[56,63] -> [51]
[56,64] -> [49]
[65] -> [65]
[65,66] -> [37]
[65,67] -> [35]
[65,68] -> [34]
[65,69] -> [32]

### Solution ###

[73,74,R]

### Annotated ###

postulate Bool :E: Type

postulate True :E: Bool

postulate False :E: Bool

postulate Maybe :E: (_ :E: Type) -> Type

postulate Just :E: (a :E: Type) -> (_ :E: a) -> Type

postulate Nothing :E: (a :E: Type) -> Type

postulate Nat :E: Type

postulate Z :E: Nat

postulate S :E: (n :R: Nat) -> Nat

postulate Plus :E: (x :R: Nat) -> (y :R: Nat) -> Nat

id :E: (x :E: Nat) -> Nat = \(x :E: Nat).
  case -E- x of
    Z
      => Z
    S (y :E: Nat)
      => 
        let result :E: Nat = S -E- y
        in result

const_3 :E: (_ :E: Nat) -> Nat = (\_ :E: Nat. 3)

two :E: Nat = 2

f :E: (g :E: (_ :E: Nat) -> Nat) -> (z :E: Nat) -> (h :E: (_ :E: Nat) -> Nat) -> (w :E: Nat) -> Nat = (\g :E: (_ :E: Nat) -> Nat. (\z :E: Nat. (\h :E: (_ :E: Nat) -> Nat. (\w :E: Nat. Plus -E- (g -E- z) -E- (h -E- w)))))

apply :E: (f :E: (_ :E: Nat) -> Nat) -> (x :E: Nat) -> Nat = (\f :E: (_ :E: Nat) -> Nat. (\x :E: Nat. f -E- x))

test_1 :E: Nat = Plus -E- (apply -E- id -E- 2) -E- (apply -E- const_3 -E- two)

test_2 :E: Nat = f -E- id -E- 2 -E- const_3 -E- 1

main :R: Nat = Plus -R- test_1 -R- test_2

### Specialised ###

postulate Bool :E: Type

postulate True :E: Bool

postulate False :E: Bool

postulate Maybe :E: (_ :E: Type) -> Type

postulate Just :E: (a :E: Type) -> (_ :E: a) -> Type

postulate Nothing :E: (a :E: Type) -> Type

postulate Nat :E: Type

postulate Z :E: Nat

postulate S :E: (n :R: Nat) -> Nat

postulate Plus :E: (x :R: Nat) -> (y :R: Nat) -> Nat

id :E: (x :E: Nat) -> Nat = \(x :E: Nat).
  case -E- x of
    Z
      => Z
    S (y :E: Nat)
      => 
        let result :E: Nat = S -E- y
        in result

const_3 :E: (_ :E: Nat) -> Nat = (\_ :E: Nat. 3)

two :E: Nat = 2

f :E: (g :E: (_ :E: Nat) -> Nat) -> (z :E: Nat) -> (h :E: (_ :E: Nat) -> Nat) -> (w :E: Nat) -> Nat = (\g :E: (_ :E: Nat) -> Nat. (\z :E: Nat. (\h :E: (_ :E: Nat) -> Nat. (\w :E: Nat. Plus -E- (g -E- z) -E- (h -E- w)))))

apply :E: (f :E: (_ :E: Nat) -> Nat) -> (x :E: Nat) -> Nat = (\f :E: (_ :E: Nat) -> Nat. (\x :E: Nat. f -E- x))

test_1 :E: Nat = Plus -E- (apply -E- id -E- 2) -E- (apply -E- const_3 -E- two)

test_2 :E: Nat = f -E- id -E- 2 -E- const_3 -E- 1

main :R: Nat = Plus -R- test_1 -R- test_2

### Final annotation ###

postulate Bool :E: Type

postulate True :E: Bool

postulate False :E: Bool

postulate Maybe :E: (_ :E: Type) -> Type

postulate Just :E: (a :E: Type) -> (_ :E: a) -> Type

postulate Nothing :E: (a :E: Type) -> Type

postulate Nat :E: Type

postulate Z :E: Nat

postulate S :E: (n :R: Nat) -> Nat

postulate Plus :E: (x :R: Nat) -> (y :R: Nat) -> Nat

id :E: (x :E: Nat) -> Nat = \(x :E: Nat).
  case -E- x of
    Z
      => Z
    S (y :E: Nat)
      => 
        let result :E: Nat = S -E- y
        in result

const_3 :E: (_ :E: Nat) -> Nat = (\_ :E: Nat. 3)

two :E: Nat = 2

f :E: (g :E: (_ :E: Nat) -> Nat) -> (z :E: Nat) -> (h :E: (_ :E: Nat) -> Nat) -> (w :E: Nat) -> Nat = (\g :E: (_ :E: Nat) -> Nat. (\z :E: Nat. (\h :E: (_ :E: Nat) -> Nat. (\w :E: Nat. Plus -E- (g -E- z) -E- (h -E- w)))))

apply :E: (f :E: (_ :E: Nat) -> Nat) -> (x :E: Nat) -> Nat = (\f :E: (_ :E: Nat) -> Nat. (\x :E: Nat. f -E- x))

test_1 :E: Nat = Plus -E- (apply -E- id -E- 2) -E- (apply -E- const_3 -E- two)

test_2 :E: Nat = f -E- id -E- 2 -E- const_3 -E- 1

main :R: Nat = Plus -R- test_1 -R- test_2

### Verification ###

Verification successful.

### Pruned ###

main = Plus test_1 test_2

### Normal forms ###

unerased:
  Plus (Plus 2 3) (Plus 2 3)
erased:
