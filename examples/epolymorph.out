-- vim: ft=agda

### Desugared ###

postulate Bool : *

postulate True : Bool

postulate False : Bool

postulate Maybe : (_ : *) -> *

postulate Just : (a : *) -> (_ : a) -> *

postulate Nothing : (a : *) -> *

postulate Nat : *

postulate Z : Nat

postulate S : (n  -R-  Nat) -> Nat

postulate Plus : (x  -R-  Nat) -> (y  -R-  Nat) -> Nat

id : (_ : Nat) -> Nat 
  id Z = Z
  pat (x : Nat).
    id (S x) = 
      let result : Nat = S x
      in result

const_3 : (_ : Nat) -> Nat 
  pat (x : Nat).
    const_3 x = 3

two : Nat 
  two = 2

f : (g : (_ : Nat) -> Nat) -> (z : Nat) -> (h : (_ : Nat) -> Nat) -> (w : Nat) -> Nat 
  pat (g : (_ : Nat) -> Nat) (z : Nat) (h : (_ : Nat) -> Nat) (w : Nat).
    f g z h w = Plus (g z) (h w)

apply : (f : (_ : Nat) -> Nat) -> (_ : Nat) -> Nat 
  pat (f : (_ : Nat) -> Nat) (x : Nat).
    apply f x = f x

test_1 : Nat 
  test_1 = Plus (apply id 2) (apply const_3 two)

test_2 : Nat 
  test_2 = f id 2 const_3 1

main  -R-  Nat 
  main = Plus test_1 test_2

### Metaified ###

postulate Bool :?1: *

postulate True :?2: Bool

postulate False :?3: Bool

postulate Maybe :?4: (_ :?5: *) -> *

postulate Just :?6: (a :?7: *) -> (_ :?8: a) -> *

postulate Nothing :?9: (a :?10: *) -> *

postulate Nat :?11: *

postulate Z :?12: Nat

postulate S :?13: (n :!R: Nat) -> Nat

postulate Plus :?14: (x :!R: Nat) -> (y :!R: Nat) -> Nat

id :?15: (_ :?16: Nat) -> Nat 
  id -?17- Z = Z
  pat (x :?18: Nat).
    id -?19- (S -?20- x) = 
      let result :?21: Nat = S -?22- x
      in result

const_3 :?23: (_ :?24: Nat) -> Nat 
  pat (x :?25: Nat).
    const_3 -?26- x = 3

two :?30: Nat 
  two = 2

f :?33: (g :?34: (_ :?35: Nat) -> Nat) -> (z :?36: Nat) -> (h :?37: (_ :?38: Nat) -> Nat) -> (w :?39: Nat) -> Nat 
  pat (g :?40: (_ :?41: Nat) -> Nat) (z :?42: Nat) (h :?43: (_ :?44: Nat) -> Nat) (w :?45: Nat).
    f -?49- g -?48- z -?47- h -?46- w = Plus -?51- (g -?52- z) -?50- (h -?53- w)

apply :?54: (f :?55: (_ :?56: Nat) -> Nat) -> (_ :?57: Nat) -> Nat 
  pat (f :?58: (_ :?59: Nat) -> Nat) (x :?60: Nat).
    apply -?62- f -?61- x = f -?63- x

test_1 :?64: Nat 
  test_1 = Plus -?66- (apply -?68- id -?67- 2) -?65- (apply -?72- const_3 -?71- two)

test_2 :?73: Nat 
  test_2 = f -?77- id -?76- 2 -?75- const_3 -?74- 1

main :!R: Nat 
  main = Plus -?82- test_1 -?81- test_2

### Inferred definitions ###

postulate Bool :?1: *

postulate False :?3: Bool

postulate Just :?6: (a :?7: *) -> (_ :?8: a) -> *

postulate Maybe :?4: (_ :?5: *) -> *

postulate Nat :?11: *

postulate Nothing :?9: (a :?10: *) -> *

postulate Plus :?14: (x :!R: Nat) -> (y :!R: Nat) -> Nat

postulate S :?13: (n :!R: Nat) -> Nat

postulate True :?2: Bool

postulate Z :?12: Nat

apply :?54: (f :?55: (_ :?56: Nat) -> Nat) -> (_ :?57: Nat) -> Nat 
  pat (f :?58: (_ :?59: Nat) -> Nat) (x :?60: Nat).
    apply -?62- f -?61- x = f -?63- x
  [] -> [?55,?58,?62,!R]
  [?56] -> [?59]
  [?57] -> [?61]
  [?59] -> [?56,?60,?63]
  [?60] -> [?57]
  [?61] -> [?57]
  [?63] -> [?59]

const_3 :?23: (_ :?24: Nat) -> Nat 
  pat (x :?25: Nat).
    const_3 -?26- x = 3
  [] -> [?12,?13,?27,?28,?29,!R]
  [?24] -> [?26]
  [?25] -> [?24]
  [?26] -> [?24]

f :?33: (g :?34: (_ :?35: Nat) -> Nat) -> (z :?36: Nat) -> (h :?37: (_ :?38: Nat) -> Nat) -> (w :?39: Nat) -> Nat 
  pat (g :?40: (_ :?41: Nat) -> Nat) (z :?42: Nat) (h :?43: (_ :?44: Nat) -> Nat) (w :?45: Nat).
    f -?49- g -?48- z -?47- h -?46- w = Plus -?51- (g -?52- z) -?50- (h -?53- w)
  [] -> [?14,?34,?37,?40,?43,?47,?49,?50,?51,!R]
  [?35] -> [?41]
  [?36] -> [?48]
  [?38] -> [?44]
  [?39] -> [?46]
  [?41] -> [?35,?42,?52]
  [?42] -> [?36]
  [?44] -> [?38,?45,?53]
  [?45] -> [?39]
  [?46] -> [?39]
  [?48] -> [?36]
  [?52] -> [?41]
  [?53] -> [?44]

id :?15: (_ :?16: Nat) -> Nat 
  id -?17- Z = Z
  pat (x :?18: Nat).
    id -?19- (S -?20- x) = 
      let result :?21: Nat = S -?22- x
      in result
  [] -> [?12,?13,?16,?17,?18,?19,?20,?21,?22,!R]

main :!R: Nat 
  main = Plus -?82- test_1 -?81- test_2
  [] -> [?14,?64,?73,?81,?82,!R]

test_1 :?64: Nat 
  test_1 = Plus -?66- (apply -?68- id -?67- 2) -?65- (apply -?72- const_3 -?71- two)
  [] -> [?14,?54,?65,?66,!R]
  [?16] -> [?56]
  [?24] -> [?56]
  [?55] -> [?15,?23,?68,?72]
  [?56] -> [?16,?24]
  [?57] -> [?12,?13,?30,?67,?69,?70,?71]
  [?67] -> [?57]
  [?68] -> [?55]
  [?71] -> [?57]
  [?72] -> [?55]

test_2 :?73: Nat 
  test_2 = f -?77- id -?76- 2 -?75- const_3 -?74- 1
  [] -> [?33,!R]
  [?16] -> [?35]
  [?24] -> [?38]
  [?34] -> [?15,?77]
  [?35] -> [?16]
  [?36] -> [?12,?13,?76,?78,?79]
  [?37] -> [?23,?75]
  [?38] -> [?24]
  [?39] -> [?12,?13,?74,?80]
  [?74] -> [?39]
  [?75] -> [?37]
  [?76] -> [?36]
  [?77] -> [?34]

two :?30: Nat 
  two = 2
  [] -> [?12,?13,?31,?32,!R]


### Constraints ###

[] -> [?12,?13,?14,?16,?17,?18,?19,?20,?21,?22,?27,?28,?29,?31,?32,?33,?34,?37,?40,?43,?47,?49,?50,?51,?54,?55,?58,?62,?64,?65,?66,?73,?81,?82,!R]
[?16] -> [?35,?56]
[?24] -> [?26,?38,?56]
[?25] -> [?24]
[?26] -> [?24]
[?34] -> [?15,?77]
[?35] -> [?16,?41]
[?36] -> [?12,?13,?48,?76,?78,?79]
[?37] -> [?23,?75]
[?38] -> [?24,?44]
[?39] -> [?12,?13,?46,?74,?80]
[?41] -> [?35,?42,?52]
[?42] -> [?36]
[?44] -> [?38,?45,?53]
[?45] -> [?39]
[?46] -> [?39]
[?48] -> [?36]
[?52] -> [?41]
[?53] -> [?44]
[?55] -> [?15,?23,?68,?72]
[?56] -> [?16,?24,?59]
[?57] -> [?12,?13,?30,?61,?67,?69,?70,?71]
[?59] -> [?56,?60,?63]
[?60] -> [?57]
[?61] -> [?57]
[?63] -> [?59]
[?67] -> [?57]
[?68] -> [?55]
[?71] -> [?57]
[?72] -> [?55]
[?74] -> [?39]
[?75] -> [?37]
[?76] -> [?36]
[?77] -> [?34]

### Solution ###

[?12,?13,?14,?15,?16,?17,?18,?19,?20,?21,?22,?23,?24,?26,?27,?28,?29,?30,?31,?32,?33,?34,?35,?36,?37,?38,?39,?40,?41,?42,?43,?44,?45,?46,?47,?48,?49,?50,?51,?52,?53,?54,?55,?56,?57,?58,?59,?60,?61,?62,?63,?64,?65,?66,?67,?68,?69,?70,?71,?72,?73,?74,?75,?76,?77,?78,?79,?80,?81,?82,!R]

### Annotated ###

postulate Bool :E: *

postulate True :E: Bool

postulate False :E: Bool

postulate Maybe :E: (_ :E: *) -> *

postulate Just :E: (a :E: *) -> (_ :E: a) -> *

postulate Nothing :E: (a :E: *) -> *

postulate Nat :E: *

postulate Z :R: Nat

postulate S :R: (n :R: Nat) -> Nat

postulate Plus :R: (x :R: Nat) -> (y :R: Nat) -> Nat

id :R: (_ :R: Nat) -> Nat 
  id -R- Z = Z
  pat (x :R: Nat).
    id -R- (S -R- x) = 
      let result :R: Nat = S -R- x
      in result

const_3 :R: (_ :R: Nat) -> Nat 
  pat (x :E: Nat).
    const_3 -R- x = 3

two :R: Nat 
  two = 2

f :R: (g :R: (_ :R: Nat) -> Nat) -> (z :R: Nat) -> (h :R: (_ :R: Nat) -> Nat) -> (w :R: Nat) -> Nat 
  pat (g :R: (_ :R: Nat) -> Nat) (z :R: Nat) (h :R: (_ :R: Nat) -> Nat) (w :R: Nat).
    f -R- g -R- z -R- h -R- w = Plus -R- (g -R- z) -R- (h -R- w)

apply :R: (f :R: (_ :R: Nat) -> Nat) -> (_ :R: Nat) -> Nat 
  pat (f :R: (_ :R: Nat) -> Nat) (x :R: Nat).
    apply -R- f -R- x = f -R- x

test_1 :R: Nat 
  test_1 = Plus -R- (apply -R- id -R- 2) -R- (apply -R- const_3 -R- two)

test_2 :R: Nat 
  test_2 = f -R- id -R- 2 -R- const_3 -R- 1

main :R: Nat 
  main = Plus -R- test_1 -R- test_2

### Specialised ###

postulate Bool :!E: *

postulate True :!E: Bool

postulate False :!E: Bool

postulate Maybe :!E: (_ :!E: *) -> *

postulate Just :!E: (a :!E: *) -> (_ :!E: a) -> *

postulate Nothing :!E: (a :!E: *) -> *

postulate Nat :!E: *

postulate Z :!R: Nat

postulate S :!R: (n :!R: Nat) -> Nat

postulate Plus :!R: (x :!R: Nat) -> (y :!R: Nat) -> Nat

id :!R: (_ :!R: Nat) -> Nat 
  id -!R- Z = Z
  pat (x :!R: Nat).
    id -!R- (S -!R- x) = 
      let result :!R: Nat = S -!R- x
      in result

const_3 :!R: (_ :!R: Nat) -> Nat 
  pat (x :!E: Nat).
    const_3 -!R- x = 3

two :!R: Nat 
  two = 2

f :!R: (g :!R: (_ :!R: Nat) -> Nat) -> (z :!R: Nat) -> (h :!R: (_ :!R: Nat) -> Nat) -> (w :!R: Nat) -> Nat 
  pat (g :!R: (_ :!R: Nat) -> Nat) (z :!R: Nat) (h :!R: (_ :!R: Nat) -> Nat) (w :!R: Nat).
    f -!R- g -!R- z -!R- h -!R- w = Plus -!R- (g -!R- z) -!R- (h -!R- w)

apply :!R: (f :!R: (_ :!R: Nat) -> Nat) -> (_ :!R: Nat) -> Nat 
  pat (f :!R: (_ :!R: Nat) -> Nat) (x :!R: Nat).
    apply -!R- f -!R- x = f -!R- x

test_1 :!R: Nat 
  test_1 = Plus -!R- (apply -!R- id -!R- 2) -!R- (apply -!R- const_3 -!R- two)

test_2 :!R: Nat 
  test_2 = f -!R- id -!R- 2 -!R- const_3 -!R- 1

main :!R: Nat 
  main = Plus -!R- test_1 -!R- test_2

### Final annotation ###

postulate Bool :E: *

postulate True :E: Bool

postulate False :E: Bool

postulate Maybe :E: (_ :E: *) -> *

postulate Just :E: (a :E: *) -> (_ :E: a) -> *

postulate Nothing :E: (a :E: *) -> *

postulate Nat :E: *

postulate Z :R: Nat

postulate S :R: (n :R: Nat) -> Nat

postulate Plus :R: (x :R: Nat) -> (y :R: Nat) -> Nat

id :R: (_ :R: Nat) -> Nat 
  id -R- Z = Z
  pat (x :R: Nat).
    id -R- (S -R- x) = 
      let result :R: Nat = S -R- x
      in result

const_3 :R: (_ :R: Nat) -> Nat 
  pat (x :E: Nat).
    const_3 -R- x = 3

two :R: Nat 
  two = 2

f :R: (g :R: (_ :R: Nat) -> Nat) -> (z :R: Nat) -> (h :R: (_ :R: Nat) -> Nat) -> (w :R: Nat) -> Nat 
  pat (g :R: (_ :R: Nat) -> Nat) (z :R: Nat) (h :R: (_ :R: Nat) -> Nat) (w :R: Nat).
    f -R- g -R- z -R- h -R- w = Plus -R- (g -R- z) -R- (h -R- w)

apply :R: (f :R: (_ :R: Nat) -> Nat) -> (_ :R: Nat) -> Nat 
  pat (f :R: (_ :R: Nat) -> Nat) (x :R: Nat).
    apply -R- f -R- x = f -R- x

test_1 :R: Nat 
  test_1 = Plus -R- (apply -R- id -R- 2) -R- (apply -R- const_3 -R- two)

test_2 :R: Nat 
  test_2 = f -R- id -R- 2 -R- const_3 -R- 1

main :R: Nat 
  main = Plus -R- test_1 -R- test_2

### Verification ###

Verification successful.

### Pruned ###

postulate Z

postulate S

postulate Plus

id 
  id Z = Z
  pat x.
    id (S x) = 
      let result = S x
      in result

const_3 
  const_3 _ = 3

two 
  two = 2

f 
  pat g z h w.
    f g z h w = Plus (g z) (h w)

apply 
  pat f x.
    apply f x = f x

test_1 
  test_1 = Plus (apply id 2) (apply const_3 two)

test_2 
  test_2 = f id 2 const_3 1

main 
  main = Plus test_1 test_2

### Normal forms ###

unerased:
  Plus (Plus 2 3) (Plus 2 3)
erased:
  Plus (Plus 2 3) (Plus 2 3)
