(require-extension matchable)
(define Type '(Type))
(print
  (letrec* (
    (Void `(Void))
    (Maybe (lambda (_x0)
      `(Maybe ,_x0)))
    (Just (lambda (a)
      (lambda (x)
        `(Just ,a ,x))))
    (Nothing (lambda (a)
      `(Nothing ,a)))
    (Bool `(Bool))
    (True `(True))
    (False `(False))
    (retTy (lambda (_e0)
      (match (list _e0)
        [(('Just _ t))
          Bool]
        [(('Nothing _))
          Type])))
    (f (lambda (_e0)
      (match (list _e0)
        [(('Just _ b))
          b]
        [(('Nothing _))
          Bool])))
    (main (f ((Just Bool) False)))
  )
    main))
