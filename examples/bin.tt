-- vim: ft=idris

import "../stdlib/prelude.tt"
import "../stdlib/equality.tt"

data Bit : Nat -> Type where
  I : Bit 1,
  O : Bit 0.

double : Nat -> Nat.
  double Z = Z,
  (n : Nat)
    double (S n) = S (S (double n)).

data Bin : (width : Nat) -> (value : Nat) -> Type where
  N : Bin Z Z,
  C : (width : Nat)
    -> (lsbVal : Nat) -> (lsb : Bit lsbVal)
    -> (restVal : Nat) -> (rest : Bin width restVal)
    -> Bin (S width) (plus lsbVal (double restVal)).

-- TwoBits is a pair of bits (highBit, lowBit)
-- which is provably equivalent to the sum (c + x + y).
-- However, c, x, and y live on the type level,
-- while only lowBit and highBit are meant to be relevant.
data TwoBits : Nat -> Nat -> Nat -> Type where
  TB :
    (c : Nat) -> (x : Nat) -> (y : Nat)
    -> (highBit : Nat) -> (lowBit : Nat)
    -> (pf : Id Nat (plus c (plus x y)) (plus lowBit (double highBit)))
    -> TwoBits c x y.

adb : (c : Nat) -> (x : Nat) -> (y : Nat)
    -> (Bit c) -> (Bit x) -> (Bit y) -> TwoBits c x y.
adb [0] [0] [0] O O O = TB  0 0 0  0 0  (Refl Nat 0),
adb [1] [0] [0] I O O = TB  1 0 0  0 1  (Refl Nat 1),
adb [0] [1] [0] O I O = TB  0 1 0  0 1  (Refl Nat 1),
adb [0] [0] [1] O O I = TB  0 0 1  0 1  (Refl Nat 1),
adb [1] [1] [0] I I O = TB  1 1 0  1 0  (Refl Nat 2),
adb [1] [0] [1] I O I = TB  1 0 1  1 0  (Refl Nat 2),
adb [0] [1] [1] O I I = TB  0 1 1  1 0  (Refl Nat 2),
adb [1] [1] [1] I I I = TB  1 1 1  1 1  (Refl Nat 3).

postulate HOLE : (a : Type) -> a.

add' : (w : Nat)
    -> (c : Nat) -> (x : Nat) -> (y : Nat)
    -> (Bit c)  -> (Bin w x) -> (Bin w y)
    -> Bin (S w) (plus c (plus x y)).

  (c : Nat) (cb : Bit c)
    add' [Z] c [Z] [Z] cb N N = C Z c cb Z N,

  (w : Nat)
  (c : Nat) (cb : Bit c)
  (xb' : Nat) (xb : Bit xb')
  (xn' : Nat) (xn : Bin w xn')
  (yb' : Nat) (yb : Bit yb')
  (yn' : Nat) (yn : Bin w yn')
    add' ([S] w) c [plus xb' (double xn')] [plus yb' (double yn')] cb
      (C [w] xb' xb xn' xn) (C [w] yb' yb yn' yn)
        = HOLE (Bin (S (S w)) (plus c (plus (plus xb' (double xn')) (plus yb' (double yn'))))).

main \: Nat = double 4.
