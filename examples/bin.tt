-- vim: ft=idris

import "../stdlib/prelude.tt"
import "../stdlib/equality.tt"

data Bit : Nat -> Type where
  I : Bit 1,
  O : Bit 0.

double : Nat -> Nat.
  double Z = Z,
  (n : Nat)
    double (S n) = S (S (double n)).

data Bin : Nat -> Type where
  N : Bin Z,
  C : (bit' : Nat) -> (bit : Bit bit')
    -> (num' : Nat) -> (num : Bin num')
    -> Bin (plus bit' (double num')).

-- TwoBits is a pair of bits (highBit, lowBit)
-- which is provably equivalent to the sum (c + x + y).
-- However, c, x, and y live on the type level,
-- while only lowBit and highBit are meant to be relevant.
data TwoBits : Nat -> Nat -> Nat -> Type where
  TB :
    (c : Nat) -> (x : Nat) -> (y : Nat)
    -> (highBit : Nat) -> (lowBit : Nat)
    -> (pf : Id Nat (plus c (plus x y)) (plus lowBit (double highBit)))
    -> TwoBits c x y.

adb : (c : Nat) -> (x : Nat) -> (y : Nat) -> (Bit c) -> (Bit x) -> (Bit y) -> TwoBits c x y.
adb [0] [0] [0] O O O = TB 0 0 0 0 0 (Refl Nat 0).

main \: Nat = double 4.
