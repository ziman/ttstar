-- vim: ft=idris

### Desugared ###

  let
    postulate Bool : Type
    postulate T : Bool
    postulate F : Bool
    postulate Pair : Type
    postulate P : (x : Bool) -> (y : Bool) -> Pair
    fst : (x : Pair) -> Bool = \(x : Pair).
      case x of
        P (l : Bool) (r : Bool) =>
          l
    snd : (x : Pair) -> Bool = \(x : Pair).
      case x of
        P (l : Bool) (r : Bool) =>
          r
    and : (x : Bool) -> (y : Bool) -> Bool = \(x : Bool) (y : Bool).
      case x of
        T =>
          y
        F =>
          F
    main : Bool = and (fst (P T F)) (snd (P F T))
  in main

### Metaified ###

  let
    postulate Bool :1: Type
    postulate T :2: Bool
    postulate F :3: Bool
    postulate Pair :4: Type
    postulate P :5: (x :6: Bool) -> (y :7: Bool) -> Pair
    fst :8: (x :9: Pair) -> Bool = \(x :10: Pair).
      case -11- x of
        P/12 (l :13: Bool) (r :14: Bool) =>
          l
    snd :15: (x :16: Pair) -> Bool = \(x :17: Pair).
      case -18- x of
        P/19 (l :20: Bool) (r :21: Bool) =>
          r
    and :22: (x :23: Bool) -> (y :24: Bool) -> Bool = \(x :25: Bool) (y :26: Bool).
      case -27- x of
        T/28 =>
          y
        F/29 =>
          F
    main :30: Bool = and -32- (fst -33- (P -35- T -34- F)) -31- (snd -36- (P -38- F -37- T))
  in main

### Constraints ###

[] -> [2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,R]
[R] -> [30]

### Solution ###

[2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,R]

### Annotated ###

  let
    postulate Bool :E: Type
    postulate T :R: Bool
    postulate F :R: Bool
    postulate Pair :E: Type
    postulate P :R: (x :R: Bool) -> (y :R: Bool) -> Pair
    fst :R: (x :R: Pair) -> Bool = \(x :R: Pair).
      case -R- x of
        P/R (l :R: Bool) (r :R: Bool) =>
          l
    snd :R: (x :R: Pair) -> Bool = \(x :R: Pair).
      case -R- x of
        P/R (l :R: Bool) (r :R: Bool) =>
          r
    and :R: (x :R: Bool) -> (y :R: Bool) -> Bool = \(x :R: Bool) (y :R: Bool).
      case -R- x of
        T/R =>
          y
        F/R =>
          F
    main :R: Bool = and -R- (fst -R- (P -R- T -R- F)) -R- (snd -R- (P -R- F -R- T))
  in main

### Specialised ###

  let
    postulate Bool :E: Type
    postulate T :R: Bool
    postulate F :R: Bool
    postulate Pair :E: Type
    postulate P :R: (x :R: Bool) -> (y :R: Bool) -> Pair
    fst :R: (x :R: Pair) -> Bool = \(x :R: Pair).
      case -R- x of
        P/R (l :R: Bool) (r :R: Bool) =>
          l
    snd :R: (x :R: Pair) -> Bool = \(x :R: Pair).
      case -R- x of
        P/R (l :R: Bool) (r :R: Bool) =>
          r
    and :R: (x :R: Bool) -> (y :R: Bool) -> Bool = \(x :R: Bool) (y :R: Bool).
      case -R- x of
        T/R =>
          y
        F/R =>
          F
    main :R: Bool = and -R- (fst -R- (P -R- T -R- F)) -R- (snd -R- (P -R- F -R- T))
  in main

### Final annotation ###

  let
    postulate Bool :E: Type
    postulate T :R: Bool
    postulate F :R: Bool
    postulate Pair :E: Type
    postulate P :R: (x :R: Bool) -> (y :R: Bool) -> Pair
    fst :R: (x :R: Pair) -> Bool = \(x :R: Pair).
      case -R- x of
        P/R (l :R: Bool) (r :R: Bool) =>
          l
    snd :R: (x :R: Pair) -> Bool = \(x :R: Pair).
      case -R- x of
        P/R (l :R: Bool) (r :R: Bool) =>
          r
    and :R: (x :R: Bool) -> (y :R: Bool) -> Bool = \(x :R: Bool) (y :R: Bool).
      case -R- x of
        T/R =>
          y
        F/R =>
          F
    main :R: Bool = and -R- (fst -R- (P -R- T -R- F)) -R- (snd -R- (P -R- F -R- T))
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    postulate T : Bool
    postulate F : Bool
    postulate P : (x) -> (y) -> Pair
    fst = \x.
      case x of
        P l r =>
          l
    snd = \x.
      case x of
        P l r =>
          r
    and = \x y.
      case x of
        T =>
          y
        F =>
          F
    main = and (fst (P T F)) (snd (P F T))
  in main

### Normal forms ###

unerased:
  
  let postulate T : Bool
  in T

erased:
  
  let postulate T : Bool
  in T

