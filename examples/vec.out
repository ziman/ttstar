-- vim: ft=agda

### Desugared ###

postulate N : Type

postulate Z : N

postulate S : (x :R: N) -> N

postulate Vec : (_ : N) -> (_ : Type) -> Type

postulate Nil : (a : Type) -> Vec Z a

postulate Cons : (a : Type) -> (n : N) -> (x :R: a) -> (xs :R: Vec n a) -> Vec (S n) a

plus : (m : N) -> (n : N) -> N = \(m : N) (n : N).
  case m of
    Z
      => n
    S (m' : N)
      => S (plus m' n)

append : (a : Type) -> (m : N) -> (n : N) -> (xs : Vec m a) -> (ys : Vec n a) -> Vec (plus m n) a = \(a : Type) (m : N) (n : N) (xs : Vec m a) (ys : Vec n a).
  case xs of
    Nil (a' : Type)
      | a = a'
      | m = Z
      => ys
    Cons (a' : Type) (m' : N) (x : a') (xs' : Vec m' a')
      | a = a'
      | m = S m'
      => Cons a (plus m' n) x (append a m' n xs' ys)

main :R: Vec 1 N = append N Z 1 (Nil N) (Cons N Z 42 (Nil N))

### Metaified ###

postulate N :1: Type

postulate Z :2: N

postulate S :3: (x :R: N) -> N

postulate Vec :4: (_ :5: N) -> (_ :6: Type) -> Type

postulate Nil :7: (a :8: Type) -> Vec -10- Z -9- a

postulate Cons :11: (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a

plus :19: (m :20: N) -> (n :21: N) -> N = \(m :22: N) (n :23: N).
  case -24- m of
    Z
      => n
    S (m' :25: N)
      => S -26- (plus -28- m' -27- n)

append :29: (a :30: Type) -> (m :31: N) -> (n :32: N) -> (xs :33: Vec -35- m -34- a) -> (ys :36: Vec -38- n -37- a) -> Vec -40- (plus -42- m -41- n) -39- a = \(a :43: Type) (m :44: N) (n :45: N) (xs :46: Vec -48- m -47- a) (ys :49: Vec -51- n -50- a).
  case -52- xs of
    Nil (a' :53: Type)
      | a = a'
      | m = Z
      => ys
    Cons (a' :54: Type) (m' :55: N) (x :56: a') (xs' :57: Vec -59- m' -58- a')
      | a = a'
      | m = S -60- m'
      => Cons -64- a -63- (plus -66- m' -65- n) -62- x -61- (append -71- a -70- m' -69- n -68- xs' -67- ys)

main :R: Vec -73- 1 -72- N = append -79- N -78- Z -77- 1 -76- (Nil -81- N) -75- (Cons -85- N -84- Z -83- 42 -82- (Nil -128- N))

### Inferred definitions ###

postulate Cons :11: (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a {- constraints apply -}
  [] -> [4,11,R]
  [5] -> [1,3,13,17,18]
  [6] -> [12,16]
  [16] -> [6]
  [17] -> [5]

postulate N :1: Type {- constraints apply -}
  [] -> [1,R]

postulate Nil :7: (a :8: Type) -> Vec -10- Z -9- a {- constraints apply -}
  [] -> [4,7,R]
  [5] -> [1,2,10]
  [6] -> [8,9]
  [9] -> [6]
  [10] -> [5]

postulate S :3: (x :R: N) -> N {- constraints apply -}
  [] -> [1,3,R]

postulate Type :R: Type

postulate Vec :4: (_ :5: N) -> (_ :6: Type) -> Type {- constraints apply -}
  [] -> [4,R]

postulate Z :2: N {- constraints apply -}
  [] -> [1,2,R]

append :29: (a :30: Type) -> (m :31: N) -> (n :32: N) -> (xs :33: Vec -35- m -34- a) -> (ys :36: Vec -38- n -37- a) -> Vec -40- (plus -42- m -41- n) -39- a = \(a :43: Type) (m :44: N) (n :45: N) (xs :46: Vec -48- m -47- a) (ys :49: Vec -51- n -50- a).
  case -52- xs of
    Nil (a' :53: Type)
      | a = a'
      | m = Z
      => ys
    Cons (a' :54: Type) (m' :55: N) (x :56: a') (xs' :57: Vec -59- m' -58- a')
      | a = a'
      | m = S -60- m'
      => Cons -64- a -63- (plus -66- m' -65- n) -62- x -61- (append -71- a -70- m' -69- n -68- xs' -67- ys) {- constraints apply -}
  [] -> [1,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,R]

main :R: Vec -73- 1 -72- N = append -79- N -78- Z -77- 1 -76- (Nil -81- N) -75- (Cons -85- N -84- Z -83- 42 -82- (Nil -128- N)) {- constraints apply -}
  [] -> [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,R]

plus :19: (m :20: N) -> (n :21: N) -> N = \(m :22: N) (n :23: N).
  case -24- m of
    Z
      => n
    S (m' :25: N)
      => S -26- (plus -28- m' -27- n) {- constraints apply -}
  [] -> [1,3,19,20,21,22,23,24,25,26,27,28,R]


### Constraints ###

[] -> [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,R]

### Solution ###

[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,R]

### Annotated ###

postulate N :R: Type

postulate Z :R: N

postulate S :R: (x :R: N) -> N

postulate Vec :R: (_ :R: N) -> (_ :R: Type) -> Type

postulate Nil :R: (a :R: Type) -> Vec -R- Z -R- a

postulate Cons :R: (a :R: Type) -> (n :R: N) -> (x :R: a) -> (xs :R: Vec -R- n -R- a) -> Vec -R- (S -R- n) -R- a

plus :R: (m :R: N) -> (n :R: N) -> N = \(m :R: N) (n :R: N).
  case -R- m of
    Z
      => n
    S (m' :R: N)
      => S -R- (plus -R- m' -R- n)

append :R: (a :R: Type) -> (m :R: N) -> (n :R: N) -> (xs :R: Vec -R- m -R- a) -> (ys :R: Vec -R- n -R- a) -> Vec -R- (plus -R- m -R- n) -R- a = \(a :R: Type) (m :R: N) (n :R: N) (xs :R: Vec -E- m -E- a) (ys :R: Vec -R- n -R- a).
  case -R- xs of
    Nil (a' :R: Type)
      | a = a'
      | m = Z
      => ys
    Cons (a' :R: Type) (m' :R: N) (x :R: a') (xs' :R: Vec -R- m' -R- a')
      | a = a'
      | m = S -R- m'
      => Cons -R- a -R- (plus -R- m' -R- n) -R- x -R- (append -R- a -R- m' -R- n -R- xs' -R- ys)

main :R: Vec -R- 1 -R- N = append -R- N -R- Z -R- 1 -R- (Nil -R- N) -R- (Cons -R- N -R- Z -R- 42 -R- (Nil -R- N))

### Specialised ###

postulate N :R: Type

postulate Z :R: N

postulate S :R: (x :R: N) -> N

postulate Vec :R: (_ :R: N) -> (_ :R: Type) -> Type

postulate Nil :R: (a :R: Type) -> Vec -R- Z -R- a

postulate Cons :R: (a :R: Type) -> (n :R: N) -> (x :R: a) -> (xs :R: Vec -R- n -R- a) -> Vec -R- (S -R- n) -R- a

plus :R: (m :R: N) -> (n :R: N) -> N = \(m :R: N) (n :R: N).
  case -R- m of
    Z
      => n
    S (m' :R: N)
      => S -R- (plus -R- m' -R- n)

append :R: (a :R: Type) -> (m :R: N) -> (n :R: N) -> (xs :R: Vec -R- m -R- a) -> (ys :R: Vec -R- n -R- a) -> Vec -R- (plus -R- m -R- n) -R- a = \(a :R: Type) (m :R: N) (n :R: N) (xs :R: Vec -E- m -E- a) (ys :R: Vec -R- n -R- a).
  case -R- xs of
    Nil (a' :R: Type)
      | a = a'
      | m = Z
      => ys
    Cons (a' :R: Type) (m' :R: N) (x :R: a') (xs' :R: Vec -R- m' -R- a')
      | a = a'
      | m = S -R- m'
      => Cons -R- a -R- (plus -R- m' -R- n) -R- x -R- (append -R- a -R- m' -R- n -R- xs' -R- ys)

main :R: Vec -R- 1 -R- N = append -R- N -R- Z -R- 1 -R- (Nil -R- N) -R- (Cons -R- N -R- Z -R- 42 -R- (Nil -R- N))

### Final annotation ###

postulate N :R: Type

postulate Z :R: N

postulate S :R: (x :R: N) -> N

postulate Vec :R: (_ :R: N) -> (_ :R: Type) -> Type

postulate Nil :R: (a :R: Type) -> Vec -R- Z -R- a

postulate Cons :R: (a :R: Type) -> (n :R: N) -> (x :R: a) -> (xs :R: Vec -R- n -R- a) -> Vec -R- (S -R- n) -R- a

plus :R: (m :R: N) -> (n :R: N) -> N = \(m :R: N) (n :R: N).
  case -R- m of
    Z
      => n
    S (m' :R: N)
      => S -R- (plus -R- m' -R- n)

append :R: (a :R: Type) -> (m :R: N) -> (n :R: N) -> (xs :R: Vec -R- m -R- a) -> (ys :R: Vec -R- n -R- a) -> Vec -R- (plus -R- m -R- n) -R- a = \(a :R: Type) (m :R: N) (n :R: N) (xs :R: Vec -E- m -E- a) (ys :R: Vec -R- n -R- a).
  case -R- xs of
    Nil (a' :R: Type)
      | a = a'
      | m = Z
      => ys
    Cons (a' :R: Type) (m' :R: N) (x :R: a') (xs' :R: Vec -R- m' -R- a')
      | a = a'
      | m = S -R- m'
      => Cons -R- a -R- (plus -R- m' -R- n) -R- x -R- (append -R- a -R- m' -R- n -R- xs' -R- ys)

main :R: Vec -R- 1 -R- N = append -R- N -R- Z -R- 1 -R- (Nil -R- N) -R- (Cons -R- N -R- Z -R- 42 -R- (Nil -R- N))

### Verification ###

Verification successful.

### Pruned ###

postulate N

postulate Z

postulate S

postulate Vec

postulate Nil

postulate Cons

plus = \m n.
  case m of
    Z
      => n
    S m'
      => S (plus m' n)

append = \a m n xs ys.
  case xs of
    Nil a'
      => ys
    Cons a' m' x xs'
      => Cons a (plus m' n) x (append a m' n xs' ys)

main = append N Z 1 (Nil N) (Cons N Z 42 (Nil N))

### Normal forms ###

unerased:
  Cons N Z 42 (Nil N)
erased:
  Cons N Z 42 (Nil N)
