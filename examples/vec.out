-- vim: ft=agda

### Desugared ###

postulate N : Type

postulate Z : N

postulate S : (x :R: N) -> N

postulate Vec : (_ : N) -> (_ : Type) -> Type

postulate Nil : (a : Type) -> Vec Z a

postulate Cons : (a : Type) -> (n : N) -> (x :R: a) -> (xs :R: Vec n a) -> Vec (S n) a

plus : (m : N) -> (n : N) -> N = \(m : N) (n : N).
  case m of
    Z
      => n
    S (m' : N)
      => S (plus m' n)

append : (a : Type) -> (m : N) -> (n : N) -> (xs : Vec m a) -> (ys : Vec n a) -> Vec (plus m n) a = \(a : Type) (m : N) (n : N) (xs : Vec m a) (ys : Vec n a).
  case xs of
    Nil (a' : Type)
      | a = a'
      | m = Z
      => ys
    Cons (a' : Type) (m' : N) (x : a') (xs' : Vec m' a')
      | a = a'
      | m = S m'
      => Cons a (plus m' n) x (append a m' n xs' ys)

main :R: Vec 1 N = append N Z 1 (Nil N) (Cons N Z 42 (Nil N))

### Metaified ###

postulate N :1: Type

postulate Z :2: N

postulate S :3: (x :R: N) -> N

postulate Vec :4: (_ :5: N) -> (_ :6: Type) -> Type

postulate Nil :7: (a :8: Type) -> Vec -10- Z -9- a

postulate Cons :11: (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a

plus :19: (m :20: N) -> (n :21: N) -> N = \(m :22: N) (n :23: N).
  case -24- m of
    Z/25
      => n
    S/26 (m' :27: N)
      => S -28- (plus -30- m' -29- n)

append :31: (a :32: Type) -> (m :33: N) -> (n :34: N) -> (xs :35: Vec -37- m -36- a) -> (ys :38: Vec -40- n -39- a) -> Vec -42- (plus -44- m -43- n) -41- a = \(a :45: Type) (m :46: N) (n :47: N) (xs :48: Vec -50- m -49- a) (ys :51: Vec -53- n -52- a).
  case -54- xs of
    Nil/55 (a' :56: Type)
      | a = a'
      | m = Z
      => ys
    Cons/57 (a' :58: Type) (m' :59: N) (x :60: a') (xs' :61: Vec -63- m' -62- a')
      | a = a'
      | m = S -64- m'
      => Cons -68- a -67- (plus -70- m' -69- n) -66- x -65- (append -75- a -74- m' -73- n -72- xs' -71- ys)

main :R: Vec -77- 1 -76- N = append -83- N -82- Z -81- 1 -80- (Nil -85- N) -79- (Cons -89- N -88- Z -87- 42 -86- (Nil -132- N))

### Inferred definitions ###

postulate Cons :11: (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a {- constraints apply -}
  [] -> [11,R]

postulate N :1: Type {- constraints apply -}
  [] -> [1,R]

postulate Nil :7: (a :8: Type) -> Vec -10- Z -9- a {- constraints apply -}
  [] -> [7,R]

postulate S :3: (x :R: N) -> N {- constraints apply -}
  [] -> [3,R]

postulate Type :E: Type

postulate Vec :4: (_ :5: N) -> (_ :6: Type) -> Type {- constraints apply -}
  [] -> [4,R]

postulate Z :2: N {- constraints apply -}
  [] -> [2,R]

append :31: (a :32: Type) -> (m :33: N) -> (n :34: N) -> (xs :35: Vec -37- m -36- a) -> (ys :38: Vec -40- n -39- a) -> Vec -42- (plus -44- m -43- n) -41- a = \(a :45: Type) (m :46: N) (n :47: N) (xs :48: Vec -50- m -49- a) (ys :51: Vec -53- n -52- a).
  case -54- xs of
    Nil/55 (a' :56: Type)
      | a = a'
      | m = Z
      => ys
    Cons/57 (a' :58: Type) (m' :59: N) (x :60: a') (xs' :61: Vec -63- m' -62- a')
      | a = a'
      | m = S -64- m'
      => Cons -68- a -67- (plus -70- m' -69- n) -66- x -65- (append -75- a -74- m' -73- n -72- xs' -71- ys) {- constraints apply -}
  [] -> [3,8,11,12,13,18,19,20,21,22,23,24,26,27,28,29,30,31,34,35,38,43,44,47,48,51,54,56,57,58,59,60,61,64,65,66,67,68,69,70,71,72,73,R]
  [2] -> [25]
  [7] -> [55]
  [9] -> [36]
  [10] -> [37]
  [14] -> [41,62]
  [15] -> [42,63]
  [16] -> [36,41]
  [17] -> [37,42]
  [25] -> [2]
  [32] -> [45,75]
  [33] -> [46,74]
  [36] -> [9,16,62]
  [37] -> [10,17,63]
  [39] -> [52]
  [40] -> [53]
  [41] -> [14,16,52]
  [42] -> [15,17,53]
  [45] -> [32]
  [46] -> [33]
  [52] -> [39,41]
  [53] -> [40,42]
  [55] -> [7]
  [62] -> [14,36]
  [63] -> [15,37]
  [74] -> [33]
  [75] -> [32]

main :R: Vec -77- 1 -76- N = append -83- N -82- Z -81- 1 -80- (Nil -85- N) -79- (Cons -89- N -88- Z -87- 42 -86- (Nil -132- N)) {- constraints apply -}
  [] -> [1,2,3,7,8,11,12,13,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,35,38,43,44,47,48,51,54,55,56,57,58,59,60,61,64,65,66,67,68,69,70,71,72,73,78,79,80,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,R]
  [9] -> [14,36]
  [10] -> [15,37]
  [14] -> [9,41,62]
  [15] -> [10,42,63]
  [16] -> [36,39,41]
  [17] -> [37,40,42]
  [32] -> [45,75,83]
  [33] -> [46,74,82]
  [36] -> [9,16,62]
  [37] -> [10,17,63]
  [39] -> [16,52]
  [40] -> [17,53]
  [41] -> [14,16,52,76]
  [42] -> [15,17,53,77]
  [45] -> [32]
  [46] -> [33]
  [52] -> [39,41]
  [53] -> [40,42]
  [62] -> [14,36]
  [63] -> [15,37]
  [74] -> [33]
  [75] -> [32]
  [76] -> [41]
  [77] -> [42]
  [82] -> [33]
  [83] -> [32]

plus :19: (m :20: N) -> (n :21: N) -> N = \(m :22: N) (n :23: N).
  case -24- m of
    Z/25
      => n
    S/26 (m' :27: N)
      => S -28- (plus -30- m' -29- n) {- constraints apply -}
  [] -> [3,19,20,21,22,23,24,26,27,28,29,30,R]
  [2] -> [25]
  [25] -> [2]


### Constraints ###

[] -> [1,2,3,7,8,11,12,13,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,35,38,43,44,47,48,51,54,55,56,57,58,59,60,61,64,65,66,67,68,69,70,71,72,73,78,79,80,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,R]
[9] -> [14,36]
[10] -> [15,37]
[14] -> [9,41,62]
[15] -> [10,42,63]
[16] -> [36,39,41]
[17] -> [37,40,42]
[32] -> [45,75,83]
[33] -> [46,74,82]
[36] -> [9,16,62]
[37] -> [10,17,63]
[39] -> [16,52]
[40] -> [17,53]
[41] -> [14,16,52,76]
[42] -> [15,17,53,77]
[45] -> [32]
[46] -> [33]
[52] -> [39,41]
[53] -> [40,42]
[62] -> [14,36]
[63] -> [15,37]
[74] -> [33]
[75] -> [32]
[76] -> [41]
[77] -> [42]
[82] -> [33]
[83] -> [32]

### Solution ###

[1,2,3,7,8,11,12,13,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,35,38,43,44,47,48,51,54,55,56,57,58,59,60,61,64,65,66,67,68,69,70,71,72,73,78,79,80,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,R]

### Annotated ###

postulate N :R: Type

postulate Z :R: N

postulate S :R: (x :R: N) -> N

postulate Vec :E: (_ :E: N) -> (_ :E: Type) -> Type

postulate Nil :R: (a :R: Type) -> Vec -E- Z -E- a

postulate Cons :R: (a :R: Type) -> (n :R: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -R- n) -E- a

plus :R: (m :R: N) -> (n :R: N) -> N = \(m :R: N) (n :R: N).
  case -R- m of
    Z/R
      => n
    S/R (m' :R: N)
      => S -R- (plus -R- m' -R- n)

append :R: (a :E: Type) -> (m :E: N) -> (n :R: N) -> (xs :R: Vec -E- m -E- a) -> (ys :R: Vec -E- n -E- a) -> Vec -E- (plus -R- m -R- n) -E- a = \(a :E: Type) (m :E: N) (n :R: N) (xs :R: Vec -E- m -E- a) (ys :R: Vec -E- n -E- a).
  case -R- xs of
    Nil/R (a' :R: Type)
      | a = a'
      | m = Z
      => ys
    Cons/R (a' :R: Type) (m' :R: N) (x :R: a') (xs' :R: Vec -E- m' -E- a')
      | a = a'
      | m = S -R- m'
      => Cons -R- a -R- (plus -R- m' -R- n) -R- x -R- (append -E- a -E- m' -R- n -R- xs' -R- ys)

main :R: Vec -E- 1 -E- N = append -E- N -E- Z -R- 1 -R- (Nil -R- N) -R- (Cons -R- N -R- Z -R- 42 -R- (Nil -R- N))

### Specialised ###

postulate N :R: Type

postulate Z :R: N

postulate S :R: (x :R: N) -> N

postulate Vec :E: (_ :E: N) -> (_ :E: Type) -> Type

postulate Nil :R: (a :R: Type) -> Vec -E- Z -E- a

postulate Cons :R: (a :R: Type) -> (n :R: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -R- n) -E- a

plus :R: (m :R: N) -> (n :R: N) -> N = \(m :R: N) (n :R: N).
  case -R- m of
    Z/R
      => n
    S/R (m' :R: N)
      => S -R- (plus -R- m' -R- n)

append :R: (a :E: Type) -> (m :E: N) -> (n :R: N) -> (xs :R: Vec -E- m -E- a) -> (ys :R: Vec -E- n -E- a) -> Vec -E- (plus -R- m -R- n) -E- a = \(a :E: Type) (m :E: N) (n :R: N) (xs :R: Vec -E- m -E- a) (ys :R: Vec -E- n -E- a).
  case -R- xs of
    Nil/R (a' :R: Type)
      | a = a'
      | m = Z
      => ys
    Cons/R (a' :R: Type) (m' :R: N) (x :R: a') (xs' :R: Vec -E- m' -E- a')
      | a = a'
      | m = S -R- m'
      => Cons -R- a -R- (plus -R- m' -R- n) -R- x -R- (append -E- a -E- m' -R- n -R- xs' -R- ys)

main :R: Vec -E- 1 -E- N = append -E- N -E- Z -R- 1 -R- (Nil -R- N) -R- (Cons -R- N -R- Z -R- 42 -R- (Nil -R- N))

### Final annotation ###

postulate N :R: Type

postulate Z :R: N

postulate S :R: (x :R: N) -> N

postulate Vec :E: (_ :E: N) -> (_ :E: Type) -> Type

postulate Nil :R: (a :R: Type) -> Vec -E- Z -E- a

postulate Cons :R: (a :R: Type) -> (n :R: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -R- n) -E- a

plus :R: (m :R: N) -> (n :R: N) -> N = \(m :R: N) (n :R: N).
  case -R- m of
    Z/R
      => n
    S/R (m' :R: N)
      => S -R- (plus -R- m' -R- n)

append :R: (a :E: Type) -> (m :E: N) -> (n :R: N) -> (xs :R: Vec -E- m -E- a) -> (ys :R: Vec -E- n -E- a) -> Vec -E- (plus -R- m -R- n) -E- a = \(a :E: Type) (m :E: N) (n :R: N) (xs :R: Vec -E- m -E- a) (ys :R: Vec -E- n -E- a).
  case -R- xs of
    Nil/R (a' :R: Type)
      | a = a'
      | m = Z
      => ys
    Cons/R (a' :R: Type) (m' :R: N) (x :R: a') (xs' :R: Vec -E- m' -E- a')
      | a = a'
      | m = S -R- m'
      => Cons -R- a -R- (plus -R- m' -R- n) -R- x -R- (append -E- a -E- m' -R- n -R- xs' -R- ys)

main :R: Vec -E- 1 -E- N = append -E- N -E- Z -R- 1 -R- (Nil -R- N) -R- (Cons -R- N -R- Z -R- 42 -R- (Nil -R- N))

### Verification ###

Verification successful.

### Pruned ###

postulate N

postulate Z

postulate S

postulate Nil

postulate Cons

plus = \m n.
  case m of
    Z
      => n
    S m'
      => S (plus m' n)

append = \n xs ys.
  case xs of
    Nil a'
      => ys
    Cons a' m' x xs'
      => Cons a (plus m' n) x (append n xs' ys)

main = append 1 (Nil N) (Cons N Z 42 (Nil N))

### Normal forms ###

unerased:
  Cons N Z 42 (Nil N)
erased:
  Cons N Z 42 (Nil N)
