-- vim: ft=agda

### Desugared ###

postulate N : Type

postulate Z : N

postulate S : (x  -R-  N) -> N

postulate Vec : (_ : N) -> (_ : Type) -> Type

postulate Nil : (a : Type) -> Vec Z a

postulate Cons : (a : Type) -> (n : N) -> (x  -R-  a) -> (xs  -R-  Vec n a) -> Vec (S n) a

plus : (m : N) -> (n : N) -> N = \(m : N) (n : N).
  case m of
    Z
      => n
    S (m' : N)
      => S (plus m' n)

append : (a : Type) -> (m : N) -> (n : N) -> (xs : Vec m a) -> (ys : Vec n a) -> Vec (plus m n) a = \(a : Type) (m : N) (n : N) (xs : Vec m a) (ys : Vec n a).
  case xs of
    Nil (a' : Type)
      | a = a'
      | m = Z
      => ys
    Cons (a' : Type) (m' : N) (x : a') (xs' : Vec m' a')
      | a = a'
      | m = S m'
      => Cons a (plus m' n) x (append a m' n xs' ys)

main  -R-  Vec 1 N = append N Z 1 (Nil N) (Cons N Z 42 (Nil N))

### Metaified ###

postulate N :?1: Type

postulate Z :?2: N

postulate S :?3: (x :!R: N) -> N

postulate Vec :?4: (_ :?5: N) -> (_ :?6: Type) -> Type

postulate Nil :?7: (a :?8: Type) -> Vec -?10- Z -?9- a

postulate Cons :?11: (a :?12: Type) -> (n :?13: N) -> (x :!R: a) -> (xs :!R: Vec -?15- n -?14- a) -> Vec -?17- (S -?18- n) -?16- a

plus :?19: (m :?20: N) -> (n :?21: N) -> N = \(m :?22: N) (n :?23: N).
  case -?24- m of
    Z
      => n
    S (m' :?25: N)
      => S -?26- (plus -?28- m' -?27- n)

append :?29: (a :?30: Type) -> (m :?31: N) -> (n :?32: N) -> (xs :?33: Vec -?35- m -?34- a) -> (ys :?36: Vec -?38- n -?37- a) -> Vec -?40- (plus -?42- m -?41- n) -?39- a = \(a :?43: Type) (m :?44: N) (n :?45: N) (xs :?46: Vec -?48- m -?47- a) (ys :?49: Vec -?51- n -?50- a).
  case -?52- xs of
    Nil (a' :?53: Type)
      | a = a'
      | m = Z
      => ys
    Cons (a' :?54: Type) (m' :?55: N) (x :?56: a') (xs' :?57: Vec -?59- m' -?58- a')
      | a = a'
      | m = S -?60- m'
      => Cons -?64- a -?63- (plus -?66- m' -?65- n) -?62- x -?61- (append -?71- a -?70- m' -?69- n -?68- xs' -?67- ys)

main :!R: Vec -?73- 1 -?72- N = append -?79- N -?78- Z -?77- 1 -?76- (Nil -?81- N) -?75- (Cons -?85- N -?84- Z -?83- 42 -?82- (Nil -?128- N))

### Inferred definitions ###

postulate Cons :?11: (a :?12: Type) -> (n :?13: N) -> (x :!R: a) -> (xs :!R: Vec -?15- n -?14- a) -> Vec -?17- (S -?18- n) -?16- a

postulate N :?1: Type

postulate Nil :?7: (a :?8: Type) -> Vec -?10- Z -?9- a

postulate S :?3: (x :!R: N) -> N

postulate Type :!R: Type

postulate Vec :?4: (_ :?5: N) -> (_ :?6: Type) -> Type

postulate Z :?2: N

append :?29: (a :?30: Type) -> (m :?31: N) -> (n :?32: N) -> (xs :?33: Vec -?35- m -?34- a) -> (ys :?36: Vec -?38- n -?37- a) -> Vec -?40- (plus -?42- m -?41- n) -?39- a = \(a :?43: Type) (m :?44: N) (n :?45: N) (xs :?46: Vec -?48- m -?47- a) (ys :?49: Vec -?51- n -?50- a).
  case -?52- xs of
    Nil (a' :?53: Type)
      | a = a'
      | m = Z
      => ys
    Cons (a' :?54: Type) (m' :?55: N) (x :?56: a') (xs' :?57: Vec -?59- m' -?58- a')
      | a = a'
      | m = S -?60- m'
      => Cons -?64- a -?63- (plus -?66- m' -?65- n) -?62- x -?61- (append -?71- a -?70- m' -?69- n -?68- xs' -?67- ys)
  [] -> [?11,?29,?33,?36,?46,?49,?52,?56,?57,?61,?62,?67,?68,!R]
  [?8] -> [?53]
  [?9] -> [?34]
  [?10] -> [?35]
  [?12] -> [?54,?64]
  [?13] -> [?19,?55,?63]
  [?13,?20] -> [?55,?66]
  [?13,?21] -> [?45,?65]
  [?13,?65] -> [?21]
  [?13,?66] -> [?20]
  [?14] -> [?39,?58]
  [?15] -> [?40,?59]
  [?16] -> [?34,?39]
  [?17] -> [?35,?40]
  [?18] -> [?26,?60]
  [?26] -> [?18]
  [?27] -> [?65]
  [?28] -> [?66]
  [?30] -> [?43,?71]
  [?31] -> [?44,?55,?70]
  [?32] -> [?45,?69]
  [?34] -> [?9,?16,?58]
  [?35] -> [?10,?17,?59]
  [?37] -> [?50]
  [?38] -> [?51]
  [?39] -> [?14,?16,?50]
  [?40] -> [?15,?17,?51]
  [?41] -> [?65]
  [?42] -> [?66]
  [?43] -> [?30]
  [?44] -> [?31]
  [?45] -> [?32]
  [?50] -> [?37,?39]
  [?51] -> [?38,?40]
  [?53] -> [?8]
  [?54] -> [?12]
  [?55] -> [?13]
  [?58] -> [?14,?34]
  [?59] -> [?15,?35]
  [?60] -> [?18]
  [?63] -> [?13]
  [?64] -> [?12]
  [?65] -> [?27,?41]
  [?66] -> [?28,?42]
  [?69] -> [?32]
  [?70] -> [?31]
  [?71] -> [?30]

main :!R: Vec -?73- 1 -?72- N = append -?79- N -?78- Z -?77- 1 -?76- (Nil -?81- N) -?75- (Cons -?85- N -?84- Z -?83- 42 -?82- (Nil -?128- N))
  [] -> [?29,!R]
  [?8,?33] -> [?1,?81]
  [?8,?36] -> [?1,?128]
  [?9] -> [?34]
  [?9,?36] -> [?14]
  [?10] -> [?35]
  [?10,?36] -> [?15]
  [?12,?36] -> [?1,?85]
  [?13,?36] -> [?2,?84]
  [?14,?36] -> [?9]
  [?15,?36] -> [?10]
  [?16] -> [?37]
  [?17] -> [?38]
  [?18] -> [?80]
  [?30] -> [?1,?79]
  [?31] -> [?2,?78]
  [?32] -> [?2,?3,?77,?80]
  [?33] -> [?7,?76]
  [?33,?81] -> [?8]
  [?34] -> [?9]
  [?35] -> [?10]
  [?36] -> [?2,?3,?7,?11,?75,?82,?83,?86,?87,?88,?89,?90,?91,?92,?93,?94,?95,?96,?97,?98,?99,?100,?101,?102,?103,?104,?105,?106,?107,?108,?109,?110,?111,?112,?113,?114,?115,?116,?117,?118,?119,?120,?121,?122,?123,?124,?125,?126,?127]
  [?36,?84] -> [?13]
  [?36,?85] -> [?12]
  [?36,?128] -> [?8]
  [?37] -> [?16]
  [?38] -> [?17]
  [?39] -> [?72]
  [?40] -> [?73]
  [?72] -> [?39]
  [?73] -> [?40]
  [?74] -> [?80]
  [?75] -> [?36]
  [?76] -> [?33]
  [?77] -> [?32]
  [?78] -> [?31]
  [?79] -> [?30]
  [?80] -> [?18,?74]

plus :?19: (m :?20: N) -> (n :?21: N) -> N = \(m :?22: N) (n :?23: N).
  case -?24- m of
    Z
      => n
    S (m' :?25: N)
      => S -?26- (plus -?28- m' -?27- n)
  [] -> [?3,?19,?20,?21,?22,?23,?24,?25,?26,?27,?28,!R]


### Constraints ###

[] -> [?3,?11,?19,?20,?21,?22,?23,?24,?25,?26,?27,?28,?29,?33,?36,?46,?49,?52,?56,?57,?61,?62,?67,?68,!R]
[?8] -> [?53]
[?8,?33] -> [?1,?81]
[?8,?36] -> [?1,?128]
[?9] -> [?34]
[?9,?36] -> [?14]
[?10] -> [?35]
[?10,?36] -> [?15]
[?12] -> [?54,?64]
[?12,?36] -> [?1,?85]
[?13] -> [?19,?55,?63]
[?13,?20] -> [?55,?66]
[?13,?21] -> [?45,?65]
[?13,?36] -> [?2,?84]
[?13,?65] -> [?21]
[?13,?66] -> [?20]
[?14] -> [?39,?58]
[?14,?36] -> [?9]
[?15] -> [?40,?59]
[?15,?36] -> [?10]
[?16] -> [?34,?37,?39]
[?17] -> [?35,?38,?40]
[?18] -> [?26,?60,?80]
[?26] -> [?18]
[?27] -> [?65]
[?28] -> [?66]
[?30] -> [?1,?43,?71,?79]
[?31] -> [?2,?44,?55,?70,?78]
[?32] -> [?2,?3,?45,?69,?77,?80]
[?33] -> [?7,?76]
[?33,?81] -> [?8]
[?34] -> [?9,?16,?58]
[?35] -> [?10,?17,?59]
[?36] -> [?2,?3,?7,?11,?75,?82,?83,?86,?87,?88,?89,?90,?91,?92,?93,?94,?95,?96,?97,?98,?99,?100,?101,?102,?103,?104,?105,?106,?107,?108,?109,?110,?111,?112,?113,?114,?115,?116,?117,?118,?119,?120,?121,?122,?123,?124,?125,?126,?127]
[?36,?84] -> [?13]
[?36,?85] -> [?12]
[?36,?128] -> [?8]
[?37] -> [?16,?50]
[?38] -> [?17,?51]
[?39] -> [?14,?16,?50,?72]
[?40] -> [?15,?17,?51,?73]
[?41] -> [?65]
[?42] -> [?66]
[?43] -> [?30]
[?44] -> [?31]
[?45] -> [?32]
[?50] -> [?37,?39]
[?51] -> [?38,?40]
[?53] -> [?8]
[?54] -> [?12]
[?55] -> [?13]
[?58] -> [?14,?34]
[?59] -> [?15,?35]
[?60] -> [?18]
[?63] -> [?13]
[?64] -> [?12]
[?65] -> [?27,?41]
[?66] -> [?28,?42]
[?69] -> [?32]
[?70] -> [?31]
[?71] -> [?30]
[?72] -> [?39]
[?73] -> [?40]
[?74] -> [?80]
[?75] -> [?36]
[?76] -> [?33]
[?77] -> [?32]
[?78] -> [?31]
[?79] -> [?30]
[?80] -> [?18,?74]

### Solution ###

[?2,?3,?7,?11,?18,?19,?20,?21,?22,?23,?24,?25,?26,?27,?28,?29,?33,?36,?41,?42,?46,?49,?52,?56,?57,?60,?61,?62,?65,?66,?67,?68,?74,?75,?76,?80,?82,?83,?86,?87,?88,?89,?90,?91,?92,?93,?94,?95,?96,?97,?98,?99,?100,?101,?102,?103,?104,?105,?106,?107,?108,?109,?110,?111,?112,?113,?114,?115,?116,?117,?118,?119,?120,?121,?122,?123,?124,?125,?126,?127,!R]

### Annotated ###

postulate N :E: Type

postulate Z :R: N

postulate S :R: (x :R: N) -> N

postulate Vec :E: (_ :E: N) -> (_ :E: Type) -> Type

postulate Nil :R: (a :E: Type) -> Vec -E- Z -E- a

postulate Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -R- n) -E- a

plus :R: (m :R: N) -> (n :R: N) -> N = \(m :R: N) (n :R: N).
  case -R- m of
    Z
      => n
    S (m' :R: N)
      => S -R- (plus -R- m' -R- n)

append :R: (a :E: Type) -> (m :E: N) -> (n :E: N) -> (xs :R: Vec -E- m -E- a) -> (ys :R: Vec -E- n -E- a) -> Vec -E- (plus -R- m -R- n) -E- a = \(a :E: Type) (m :E: N) (n :E: N) (xs :R: Vec -E- m -E- a) (ys :R: Vec -E- n -E- a).
  case -R- xs of
    Nil (a' :E: Type)
      | a = a'
      | m = Z
      => ys
    Cons (a' :E: Type) (m' :E: N) (x :R: a') (xs' :R: Vec -E- m' -E- a')
      | a = a'
      | m = S -R- m'
      => Cons -E- a -E- (plus -R- m' -R- n) -R- x -R- (append -E- a -E- m' -E- n -R- xs' -R- ys)

main :R: Vec -E- 1 -E- N = append -E- N -E- Z -E- 1 -R- (Nil -E- N) -R- (Cons -E- N -E- Z -R- 42 -R- (Nil -E- N))

### Specialised ###

postulate N :!E: Type

postulate Z :!R: N

postulate S :!R: (x :!R: N) -> N

postulate Vec :!E: (_ :!E: N) -> (_ :!E: Type) -> Type

postulate Nil :!R: (a :!E: Type) -> Vec -!E- Z -!E- a

postulate Cons :!R: (a :!E: Type) -> (n :!E: N) -> (x :!R: a) -> (xs :!R: Vec -!E- n -!E- a) -> Vec -!E- (S -!R- n) -!E- a

plus :!R: (m :!R: N) -> (n :!R: N) -> N = \(m :!R: N) (n :!R: N).
  case -!R- m of
    Z
      => n
    S (m' :!R: N)
      => S -!R- (plus -!R- m' -!R- n)

append :!R: (a :!E: Type) -> (m :!E: N) -> (n :!E: N) -> (xs :!R: Vec -!E- m -!E- a) -> (ys :!R: Vec -!E- n -!E- a) -> Vec -!E- (plus -!R- m -!R- n) -!E- a = \(a :!E: Type) (m :!E: N) (n :!E: N) (xs :!R: Vec -!E- m -!E- a) (ys :!R: Vec -!E- n -!E- a).
  case -!R- xs of
    Nil (a' :!E: Type)
      | a = a'
      | m = Z
      => ys
    Cons (a' :!E: Type) (m' :!E: N) (x :!R: a') (xs' :!R: Vec -!E- m' -!E- a')
      | a = a'
      | m = S -!R- m'
      => Cons -!E- a -!E- (plus -!R- m' -!R- n) -!R- x -!R- (append -!E- a -!E- m' -!E- n -!R- xs' -!R- ys)

main :!R: Vec -!E- 1 -!E- N = append -!E- N -!E- Z -!E- 1 -!R- (Nil -!E- N) -!R- (Cons -!E- N -!E- Z -!R- 42 -!R- (Nil -!E- N))

### Final annotation ###

postulate N :E: Type

postulate Z :R: N

postulate S :R: (x :R: N) -> N

postulate Vec :E: (_ :E: N) -> (_ :E: Type) -> Type

postulate Nil :R: (a :E: Type) -> Vec -E- Z -E- a

postulate Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -R- n) -E- a

plus :R: (m :R: N) -> (n :R: N) -> N = \(m :R: N) (n :R: N).
  case -R- m of
    Z
      => n
    S (m' :R: N)
      => S -R- (plus -R- m' -R- n)

append :R: (a :E: Type) -> (m :E: N) -> (n :E: N) -> (xs :R: Vec -E- m -E- a) -> (ys :R: Vec -E- n -E- a) -> Vec -E- (plus -R- m -R- n) -E- a = \(a :E: Type) (m :E: N) (n :E: N) (xs :R: Vec -E- m -E- a) (ys :R: Vec -E- n -E- a).
  case -R- xs of
    Nil (a' :E: Type)
      | a = a'
      | m = Z
      => ys
    Cons (a' :E: Type) (m' :E: N) (x :R: a') (xs' :R: Vec -E- m' -E- a')
      | a = a'
      | m = S -R- m'
      => Cons -E- a -E- (plus -R- m' -R- n) -R- x -R- (append -E- a -E- m' -E- n -R- xs' -R- ys)

main :R: Vec -E- 1 -E- N = append -E- N -E- Z -E- 1 -R- (Nil -E- N) -R- (Cons -E- N -E- Z -R- 42 -R- (Nil -E- N))

### Verification ###

Verification successful.

### Pruned ###

postulate Z

postulate S

postulate Nil

postulate Cons

plus = \m n.
  case m of
    Z
      => n
    S m'
      => S (plus m' n)

append = \xs ys.
  case xs of
    Nil
      => ys
    Cons x xs'
      => Cons x (append xs' ys)

main = append Nil (Cons 42 Nil)

### Normal forms ###

unerased:
  Cons N Z 42 (Nil N)
erased:
  Cons 42 Nil
