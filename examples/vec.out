-- vim: ft=idris

### Desugared ###

  let
    postulate N : Type
    postulate Z : N
    postulate S : (x :R: N) -> N
    postulate Vec : (_x0 : N) -> (_x1 : Type) -> Type
    postulate Nil : (a : Type) -> Vec Z a
    postulate Cons : (a : Type) -> (n : N) -> (x :R: a) -> (xs :R: Vec n a) -> Vec (S n) a
    plus : (m : N) -> (n : N) -> N = \(m : N) (n : N).
      case m of
        Z =>
          n
        S (m' : N) =>
          S (plus m' n)
    append : (a : Type) -> (m : N) -> (n : N) -> (xs : Vec m a) -> (ys : Vec n a) -> Vec (plus m n) a = \(a : Type) (m : N) (n : N) (xs : Vec m a) (ys : Vec n a).
      case xs of
        Nil (a' : Type) =>
          case a of [a'] =>
            case m of [Z] =>
              ys
        Cons (a' : Type) (m' : N) (x : a') (xs' : Vec m' a') =>
          case a' of [a] =>
            case m of [S m'] =>
              Cons a (plus m' n) x (append a m' n xs' ys)
    main : Vec 1 N = append N Z 1 (Nil N) (Cons N Z 4 (Nil N))
  in main

### Metaified ###

  let
    postulate N :1: Type
    postulate Z :2: N
    postulate S :3: (x :R: N) -> N
    postulate Vec :4: (_x0 :5: N) -> (_x1 :6: Type) -> Type
    postulate Nil :7: (a :8: Type) -> Vec -10- Z -9- a
    postulate Cons :11: (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
    plus :19: (m :20: N) -> (n :21: N) -> N = \(m :22: N) (n :23: N).
      case -24- m of
        Z/25 =>
          n
        S/26 (m' :27: N) =>
          S -28- (plus -30- m' -29- n)
    append :31: (a :32: Type) -> (m :33: N) -> (n :34: N) -> (xs :35: Vec -37- m -36- a) -> (ys :38: Vec -40- n -39- a) -> Vec -42- (plus -44- m -43- n) -41- a = \(a :45: Type) (m :46: N) (n :47: N) (xs :48: Vec -50- m -49- a) (ys :51: Vec -53- n -52- a).
      case -54- xs of
        Nil/55 (a' :56: Type) =>
          case -57- a of [a'] =>
            case -58- m of [Z] =>
              ys
        Cons/59 (a' :60: Type) (m' :61: N) (x :62: a') (xs' :63: Vec -65- m' -64- a') =>
          case -66- a' of [a] =>
            case -67- m of [S -68- m'] =>
              Cons -72- a -71- (plus -74- m' -73- n) -70- x -69- (append -79- a -78- m' -77- n -76- xs' -75- ys)
    main :80: Vec -82- 1 -81- N = append -88- N -87- Z -86- 1 -85- (Nil -90- N) -84- (Cons -94- N -93- Z -92- 4 -91- (Nil -99- N))
  in main

### Constraints ###

ttstar: Traceback:
1. In context:
  Type : Type

("LET",
  let
    postulate N :1: Type
    postulate Z :2: N
    postulate S :3: (x :R: N) -> N
    postulate Vec :4: (_x0 :5: N) -> (_x1 :6: Type) -> Type
    postulate Nil :7: (a :8: Type) -> Vec -10- Z -9- a
    postulate Cons :11: (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
    plus :19: (m :20: N) -> (n :21: N) -> N = \(m :22: N) (n :23: N).
      case -24- m of
        Z/25 =>
          n
        S/26 (m' :27: N) =>
          S -28- (plus -30- m' -29- n)
    append :31: (a :32: Type) -> (m :33: N) -> (n :34: N) -> (xs :35: Vec -37- m -36- a) -> (ys :38: Vec -40- n -39- a) -> Vec -42- (plus -44- m -43- n) -41- a = \(a :45: Type) (m :46: N) (n :47: N) (xs :48: Vec -50- m -49- a) (ys :51: Vec -53- n -52- a).
      case -54- xs of
        Nil/55 (a' :56: Type) =>
          case -57- a of [a'] =>
            case -58- m of [Z] =>
              ys
        Cons/59 (a' :60: Type) (m' :61: N) (x :62: a') (xs' :63: Vec -65- m' -64- a') =>
          case -66- a' of [a] =>
            case -67- m of [S -68- m'] =>
              Cons -72- a -71- (plus -74- m' -73- n) -70- x -69- (append -79- a -78- m' -77- n -76- xs' -75- ys)
    main :80: Vec -82- 1 -81- N = append -88- N -87- Z -86- 1 -85- (Nil -90- N) -84- (Cons -94- N -93- Z -92- 4 -91- (Nil -99- N))
  in main)

2. In context:
  Cons : (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
  N : Type
  Nil : (a :8: Type) -> Vec -10- Z -9- a
  S : (x :R: N) -> N
  Type : Type
  Vec : (_x0 :5: N) -> (_x1 :6: Type) -> Type
  Z : N
  append : (a :32: Type) -> (m :33: N) -> (n :34: N) -> (xs :35: Vec -37- m -36- a) -> (ys :38: Vec -40- n -39- a) -> Vec -42- (plus -44- m -43- n) -41- a
  plus : (m :20: N) -> (n :21: N) -> N

("DEF-PATTERNS",append)

3. In context:
  Cons : (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
  N : Type
  Nil : (a :8: Type) -> Vec -10- Z -9- a
  S : (x :R: N) -> N
  Type : Type
  Vec : (_x0 :5: N) -> (_x1 :6: Type) -> Type
  Z : N
  append : (a :32: Type) -> (m :33: N) -> (n :34: N) -> (xs :35: Vec -37- m -36- a) -> (ys :38: Vec -40- n -39- a) -> Vec -42- (plus -44- m -43- n) -41- a
  plus : (m :20: N) -> (n :21: N) -> N

("CASE-FUN",append)

4. In context:
  Cons : (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
  N : Type
  Nil : (a :8: Type) -> Vec -10- Z -9- a
  S : (x :R: N) -> N
  Type : Type
  Vec : (_x0 :5: N) -> (_x1 :6: Type) -> Type
  Z : N
  append : (a :32: Type) -> (m :33: N) -> (n :34: N) -> (xs :35: Vec -37- m -36- a) -> (ys :38: Vec -40- n -39- a) -> Vec -42- (plus -44- m -43- n) -41- a
  plus : (m :20: N) -> (n :21: N) -> N

("CASE",append -45- a -46- m -47- n -48- xs -51- ys,case -54- xs of
  Nil/55 (a' :56: Type) =>
    case -57- a of [a'] =>
      case -58- m of [Z] =>
        ys
  Cons/59 (a' :60: Type) (m' :61: N) (x :62: a') (xs' :63: Vec -65- m' -64- a') =>
    case -66- a' of [a] =>
      case -67- m of [S -68- m'] =>
        Cons -72- a -71- (plus -74- m' -73- n) -70- x -69- (append -79- a -78- m' -77- n -76- xs' -75- ys))

5. In context:
  Cons : (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
  N : Type
  Nil : (a :8: Type) -> Vec -10- Z -9- a
  S : (x :R: N) -> N
  Type : Type
  Vec : (_x0 :5: N) -> (_x1 :6: Type) -> Type
  Z : N
  append : (a :32: Type) -> (m :33: N) -> (n :34: N) -> (xs :35: Vec -37- m -36- a) -> (ys :38: Vec -40- n -39- a) -> Vec -42- (plus -44- m -43- n) -41- a
  plus : (m :20: N) -> (n :21: N) -> N

("ALT-CTOR",Nil -56- a')

6. In context:
  Cons : (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
  N : Type
  Nil : (a :8: Type) -> Vec -10- Z -9- a
  S : (x :R: N) -> N
  Type : Type
  Vec : (_x0 :5: N) -> (_x1 :6: Type) -> Type
  Z : N
  append : (a :32: Type) -> (m :33: N) -> (n :34: N) -> (xs :35: Vec -37- m -36- a) -> (ys :38: Vec -40- n -39- a) -> Vec -42- (plus -44- m -43- n) -41- a
  plus : (m :20: N) -> (n :21: N) -> N

("CASE",append -45- a -46- m -47- n -48- (Nil -56- a') -51- ys,case -57- a of [a'] =>
  case -58- m of [Z] =>
    ys)

7. In context:
  Cons : (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
  N : Type
  Nil : (a :8: Type) -> Vec -10- Z -9- a
  S : (x :R: N) -> N
  Type : Type
  Vec : (_x0 :5: N) -> (_x1 :6: Type) -> Type
  Z : N
  append : (a :32: Type) -> (m :33: N) -> (n :34: N) -> (xs :35: Vec -37- m -36- a) -> (ys :38: Vec -40- n -39- a) -> Vec -42- (plus -44- m -43- n) -41- a
  plus : (m :20: N) -> (n :21: N) -> N

("ALT-FORCED",a')

8. In context:
  Cons : (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
  N : Type
  Nil : (a :8: Type) -> Vec -10- Z -9- a
  S : (x :R: N) -> N
  Type : Type
  Vec : (_x0 :5: N) -> (_x1 :6: Type) -> Type
  Z : N
  append : (a :32: Type) -> (m :33: N) -> (n :34: N) -> (xs :35: Vec -37- m -36- a) -> (ys :38: Vec -40- n -39- a) -> Vec -42- (plus -44- m -43- n) -41- a
  plus : (m :20: N) -> (n :21: N) -> N

("CASE",append -45- [a'] -46- m -47- n -48- (Nil -56- a') -51- ys,case -58- m of [Z] =>
  ys)

9. In context:
  Cons : (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
  N : Type
  Nil : (a :8: Type) -> Vec -10- Z -9- a
  S : (x :R: N) -> N
  Type : Type
  Vec : (_x0 :5: N) -> (_x1 :6: Type) -> Type
  Z : N
  append : (a :32: Type) -> (m :33: N) -> (n :34: N) -> (xs :35: Vec -37- m -36- a) -> (ys :38: Vec -40- n -39- a) -> Vec -42- (plus -44- m -43- n) -41- a
  plus : (m :20: N) -> (n :21: N) -> N

("ALT-FORCED",Z)

10. In context:
  Cons : (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
  N : Type
  Nil : (a :8: Type) -> Vec -10- Z -9- a
  S : (x :R: N) -> N
  Type : Type
  Vec : (_x0 :5: N) -> (_x1 :6: Type) -> Type
  Z : N
  append : (a :32: Type) -> (m :33: N) -> (n :34: N) -> (xs :35: Vec -37- m -36- a) -> (ys :38: Vec -40- n -39- a) -> Vec -42- (plus -44- m -43- n) -41- a
  plus : (m :20: N) -> (n :21: N) -> N

("PLAIN-TERM",append -45- [a'] -46- [Z] -47- n -48- (Nil -56- a') -51- ys,ys)

11. In context:
  Cons : (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
  N : Type
  Nil : (a :8: Type) -> Vec -10- Z -9- a
  S : (x :R: N) -> N
  Type : Type
  Vec : (_x0 :5: N) -> (_x1 :6: Type) -> Type
  Z : N
  append : (a :32: Type) -> (m :33: N) -> (n :34: N) -> (xs :35: Vec -37- m -36- a) -> (ys :38: Vec -40- n -39- a) -> Vec -42- (plus -44- m -43- n) -41- a
  n : N
  plus : (m :20: N) -> (n :21: N) -> N
  ys : Vec -53- n -52- [a']

("APP",Vec -53- n -52- [a'])

12. In context:
  Cons : (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
  N : Type
  Nil : (a :8: Type) -> Vec -10- Z -9- a
  S : (x :R: N) -> N
  Type : Type
  Vec : (_x0 :5: N) -> (_x1 :6: Type) -> Type
  Z : N
  append : (a :32: Type) -> (m :33: N) -> (n :34: N) -> (xs :35: Vec -37- m -36- a) -> (ys :38: Vec -40- n -39- a) -> Vec -42- (plus -44- m -43- n) -41- a
  n : N
  plus : (m :20: N) -> (n :21: N) -> N
  ys : Vec -53- n -52- [a']

("FORCED",a')

13. In context:
  Cons : (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
  N : Type
  Nil : (a :8: Type) -> Vec -10- Z -9- a
  S : (x :R: N) -> N
  Type : Type
  Vec : (_x0 :5: N) -> (_x1 :6: Type) -> Type
  Z : N
  append : (a :32: Type) -> (m :33: N) -> (n :34: N) -> (xs :35: Vec -37- m -36- a) -> (ys :38: Vec -40- n -39- a) -> Vec -42- (plus -44- m -43- n) -41- a
  n : N
  plus : (m :20: N) -> (n :21: N) -> N
  ys : Vec -53- n -52- [a']

("VAR",a')

Error: UnknownName a'

CallStack (from HasCallStack):
  error, called at Main.hs:130:38 in main:Main
