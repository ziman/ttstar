-- vim: ft=agda

### Desugared ###

  let
    postulate N : Type
    postulate Z : N
    postulate S : (x :R: N) -> N
    postulate Vec : (_ : N) -> (_ : Type) -> Type
    postulate Nil : (a : Type) -> Vec Z a
    postulate Cons : (a : Type) -> (n : N) -> (x :R: a) -> (xs :R: Vec n a) -> Vec (S n) a
    plus : (m : N) -> (n : N) -> N = \(m : N) (n : N).
      case m of
        Z
          => n
        S (m' : N)
          => S (plus m' n)
    append : (a : Type) -> (m : N) -> (n : N) -> (xs : Vec m a) -> (ys : Vec n a) -> Vec (plus m n) a = \(a : Type) (m : N) (n : N) (xs : Vec m a) (ys : Vec n a).
      case xs of
        Nil (a' : Type)
          | a = a'
          | m = Z
          => ys
        Cons (a' : Type) (m' : N) (x : a') (xs' : Vec m' a')
          | a' = a
          | m = S m'
          => Cons a (plus m' n) x (append a m' n xs' ys)
    main : Vec 1 N = append N Z 1 (Nil N) (Cons N Z 4 (Nil N))
  in main

### Metaified ###

  let
    postulate N :1: Type
    postulate Z :2: N
    postulate S :3: (x :R: N) -> N
    postulate Vec :4: (_ :5: N) -> (_ :6: Type) -> Type
    postulate Nil :7: (a :8: Type) -> Vec -10- Z -9- a
    postulate Cons :11: (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
    plus :19: (m :20: N) -> (n :21: N) -> N = \(m :22: N) (n :23: N).
      case -24- m of
        Z/25
          => n
        S/26 (m' :27: N)
          => S -28- (plus -30- m' -29- n)
    append :31: (a :32: Type) -> (m :33: N) -> (n :34: N) -> (xs :35: Vec -37- m -36- a) -> (ys :38: Vec -40- n -39- a) -> Vec -42- (plus -44- m -43- n) -41- a = \(a :45: Type) (m :46: N) (n :47: N) (xs :48: Vec -50- m -49- a) (ys :51: Vec -53- n -52- a).
      case -54- xs of
        Nil/55 (a' :56: Type)
          | a = a'
          | m = Z
          => ys
        Cons/57 (a' :58: Type) (m' :59: N) (x :60: a') (xs' :61: Vec -63- m' -62- a')
          | a' = a
          | m = S -64- m'
          => Cons -68- a -67- (plus -70- m' -69- n) -66- x -65- (append -75- a -74- m' -73- n -72- xs' -71- ys)
    main :76: Vec -78- 1 -77- N = append -84- N -83- Z -82- 1 -81- (Nil -86- N) -80- (Cons -90- N -89- Z -88- 4 -87- (Nil -95- N))
  in main

### Constraints ###

[] -> [2,3,7,11,31,35,38,48,51,54,55,57,60,61,65,66,71,72,80,81,87,88,91,92,93,94,R]
[8] -> [1,56,86,95]
[9] -> [14,36]
[10] -> [15,37]
[12] -> [1,45,58,68,90]
[13] -> [19,20,21,22,23,24,25,26,27,28,29,30,59,67,89]
[13,20] -> [59,70]
[13,21] -> [47,69]
[13,69] -> [21]
[13,70] -> [20]
[14] -> [9,41,62]
[15] -> [10,42,63]
[16] -> [36,39,41]
[17] -> [37,40,42]
[18] -> [28,64,85]
[28] -> [18]
[29] -> [69]
[30] -> [70]
[32] -> [1,45,75,84]
[33] -> [46,59,74,83]
[34] -> [47,73,82,85]
[36] -> [9,16,62]
[37] -> [10,17,63]
[39] -> [16,52]
[40] -> [17,53]
[41] -> [14,16,52,77]
[42] -> [15,17,53,78]
[43] -> [69]
[44] -> [70]
[45] -> [32]
[46] -> [33]
[47] -> [34]
[52] -> [39,41]
[53] -> [40,42]
[56] -> [8]
[58] -> [12]
[59] -> [13]
[62] -> [14,36]
[63] -> [15,37]
[64] -> [18]
[67] -> [13]
[68] -> [12]
[69] -> [29,43]
[70] -> [30,44]
[73] -> [34]
[74] -> [33]
[75] -> [32]
[77] -> [41]
[78] -> [42]
[79] -> [85]
[82] -> [34]
[83] -> [33]
[84] -> [32]
[85] -> [18,79]
[86] -> [8]
[89] -> [13]
[90] -> [12]
[95] -> [8]
[R] -> [76]

### Solution ###

[2,3,7,11,31,35,38,48,51,54,55,57,60,61,65,66,71,72,76,80,81,87,88,91,92,93,94,R]

### Annotated ###

  let
    postulate N :E: Type
    postulate Z :R: N
    postulate S :R: (x :R: N) -> N
    postulate Vec :E: (_ :E: N) -> (_ :E: Type) -> Type
    postulate Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    postulate Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    plus :E: (m :E: N) -> (n :E: N) -> N = \(m :E: N) (n :E: N).
      case -E- m of
        Z/E
          => n
        S/E (m' :E: N)
          => S -E- (plus -E- m' -E- n)
    append :R: (a :E: Type) -> (m :E: N) -> (n :E: N) -> (xs :R: Vec -E- m -E- a) -> (ys :R: Vec -E- n -E- a) -> Vec -E- (plus -E- m -E- n) -E- a = \(a :E: Type) (m :E: N) (n :E: N) (xs :R: Vec -E- m -E- a) (ys :R: Vec -E- n -E- a).
      case -R- xs of
        Nil/R (a' :E: Type)
          | a = a'
          | m = Z
          => ys
        Cons/R (a' :E: Type) (m' :E: N) (x :R: a') (xs' :R: Vec -E- m' -E- a')
          | a' = a
          | m = S -E- m'
          => Cons -E- a -E- (plus -E- m' -E- n) -R- x -R- (append -E- a -E- m' -E- n -R- xs' -R- ys)
    main :R: Vec -E- 1 -E- N = append -E- N -E- Z -E- 1 -R- (Nil -E- N) -R- (Cons -E- N -E- Z -R- 4 -R- (Nil -E- N))
  in main

### Specialised ###

  let
    postulate N :E: Type
    postulate Z :R: N
    postulate S :R: (x :R: N) -> N
    postulate Vec :E: (_ :E: N) -> (_ :E: Type) -> Type
    postulate Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    postulate Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    plus :E: (m :E: N) -> (n :E: N) -> N = \(m :E: N) (n :E: N).
      case -E- m of
        Z/E
          => n
        S/E (m' :E: N)
          => S -E- (plus -E- m' -E- n)
    append :R: (a :E: Type) -> (m :E: N) -> (n :E: N) -> (xs :R: Vec -E- m -E- a) -> (ys :R: Vec -E- n -E- a) -> Vec -E- (plus -E- m -E- n) -E- a = \(a :E: Type) (m :E: N) (n :E: N) (xs :R: Vec -E- m -E- a) (ys :R: Vec -E- n -E- a).
      case -R- xs of
        Nil/R (a' :E: Type)
          | a = a'
          | m = Z
          => ys
        Cons/R (a' :E: Type) (m' :E: N) (x :R: a') (xs' :R: Vec -E- m' -E- a')
          | a' = a
          | m = S -E- m'
          => Cons -E- a -E- (plus -E- m' -E- n) -R- x -R- (append -E- a -E- m' -E- n -R- xs' -R- ys)
    main :R: Vec -E- 1 -E- N = append -E- N -E- Z -E- 1 -R- (Nil -E- N) -R- (Cons -E- N -E- Z -R- 4 -R- (Nil -E- N))
  in main

### Constraints ###

[E] -> [E]
[R] -> [R]

### Solution ###

[R]

### Annotated ###

  let
    postulate N :E: Type
    postulate Z :R: N
    postulate S :R: (x :R: N) -> N
    postulate Vec :E: (_ :E: N) -> (_ :E: Type) -> Type
    postulate Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    postulate Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    plus :E: (m :E: N) -> (n :E: N) -> N = \(m :E: N) (n :E: N).
      case -E- m of
        Z/E
          => n
        S/E (m' :E: N)
          => S -E- (plus -E- m' -E- n)
    append :R: (a :E: Type) -> (m :E: N) -> (n :E: N) -> (xs :R: Vec -E- m -E- a) -> (ys :R: Vec -E- n -E- a) -> Vec -E- (plus -E- m -E- n) -E- a = \(a :E: Type) (m :E: N) (n :E: N) (xs :R: Vec -E- m -E- a) (ys :R: Vec -E- n -E- a).
      case -R- xs of
        Nil/R (a' :E: Type)
          | a = a'
          | m = Z
          => ys
        Cons/R (a' :E: Type) (m' :E: N) (x :R: a') (xs' :R: Vec -E- m' -E- a')
          | a' = a
          | m = S -E- m'
          => Cons -E- a -E- (plus -E- m' -E- n) -R- x -R- (append -E- a -E- m' -E- n -R- xs' -R- ys)
    main :R: Vec -E- 1 -E- N = append -E- N -E- Z -E- 1 -R- (Nil -E- N) -R- (Cons -E- N -E- Z -R- 4 -R- (Nil -E- N))
  in main

### Specialised ###

  let
    postulate N :E: Type
    postulate Z :R: N
    postulate S :R: (x :R: N) -> N
    postulate Vec :E: (_ :E: N) -> (_ :E: Type) -> Type
    postulate Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    postulate Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    plus :E: (m :E: N) -> (n :E: N) -> N = \(m :E: N) (n :E: N).
      case -E- m of
        Z/E
          => n
        S/E (m' :E: N)
          => S -E- (plus -E- m' -E- n)
    append :R: (a :E: Type) -> (m :E: N) -> (n :E: N) -> (xs :R: Vec -E- m -E- a) -> (ys :R: Vec -E- n -E- a) -> Vec -E- (plus -E- m -E- n) -E- a = \(a :E: Type) (m :E: N) (n :E: N) (xs :R: Vec -E- m -E- a) (ys :R: Vec -E- n -E- a).
      case -R- xs of
        Nil/R (a' :E: Type)
          | a = a'
          | m = Z
          => ys
        Cons/R (a' :E: Type) (m' :E: N) (x :R: a') (xs' :R: Vec -E- m' -E- a')
          | a' = a
          | m = S -E- m'
          => Cons -E- a -E- (plus -E- m' -E- n) -R- x -R- (append -E- a -E- m' -E- n -R- xs' -R- ys)
    main :R: Vec -E- 1 -E- N = append -E- N -E- Z -E- 1 -R- (Nil -E- N) -R- (Cons -E- N -E- Z -R- 4 -R- (Nil -E- N))
  in main

### Final annotation ###

  let
    postulate N :E: Type
    postulate Z :R: N
    postulate S :R: (x :R: N) -> N
    postulate Vec :E: (_ :E: N) -> (_ :E: Type) -> Type
    postulate Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    postulate Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    plus :E: (m :E: N) -> (n :E: N) -> N = \(m :E: N) (n :E: N).
      case -E- m of
        Z/E
          => n
        S/E (m' :E: N)
          => S -E- (plus -E- m' -E- n)
    append :R: (a :E: Type) -> (m :E: N) -> (n :E: N) -> (xs :R: Vec -E- m -E- a) -> (ys :R: Vec -E- n -E- a) -> Vec -E- (plus -E- m -E- n) -E- a = \(a :E: Type) (m :E: N) (n :E: N) (xs :R: Vec -E- m -E- a) (ys :R: Vec -E- n -E- a).
      case -R- xs of
        Nil/R (a' :E: Type)
          | a = a'
          | m = Z
          => ys
        Cons/R (a' :E: Type) (m' :E: N) (x :R: a') (xs' :R: Vec -E- m' -E- a')
          | a' = a
          | m = S -E- m'
          => Cons -E- a -E- (plus -E- m' -E- n) -R- x -R- (append -E- a -E- m' -E- n -R- xs' -R- ys)
    main :R: Vec -E- 1 -E- N = append -E- N -E- Z -E- 1 -R- (Nil -E- N) -R- (Cons -E- N -E- Z -R- 4 -R- (Nil -E- N))
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    postulate Z : N
    postulate S : (x) -> N
    postulate Nil : Vec
    postulate Cons : (x) -> (xs) -> Vec
    append = \xs ys.
      case xs of
        Nil
          => ys
        Cons x xs'
          => Cons x (append xs' ys)
    main = append Nil (Cons 4 Nil)
  in main

### Normal forms ###

unerased:
  
  let
    postulate N : Type
    postulate Z : N
    postulate S : (x :R: N) -> N
    postulate Nil : (a : Type) -> Vec Z a
    postulate Cons : (a : Type) -> (n : N) -> (x :R: a) -> (xs :R: Vec n a) -> Vec (S n) a
  in Cons N Z 4 (Nil N)

erased:
  
  let
    postulate Z : N
    postulate S : (x) -> N
    postulate Nil : Vec
    postulate Cons : (x) -> (xs) -> Vec
  in Cons 4 Nil

