(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Z `(Z))
    (S (lambda (x)
      `(S ,x)))
    (MkPair (lambda (_x5)
      (lambda (_x6)
        `(MkPair ,_x5 ,_x6))))
    (snd (lambda (_e0)
      (match (list _e0)
        (((_ _ y))
          y))))
    (MkSt (lambda (run)
      `(MkSt ,run)))
    (runState (lambda (_e0)
      (match (list _e0)
        (((_ run))
          run))))
    (stBind (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          (((_ f) g)
            (letrec* (
              (stBind3 (lambda (_e0)
                (lambda (_e1)
                  (match (list _e0 _e1)
                    ((s (_ f))
                      (f s))))))
              (stBind2 (lambda (_e0)
                (lambda (_e1)
                  (match (list _e0 _e1)
                    ((g (_ s x))
                      ((stBind3 s) (g x)))))))
            )
              (MkSt (lambda (s)
                ((stBind2 g) (f s))))))))))
    (intS (lambda (x) (+ x 1)))
    (intZ 0)
    (natToInt (lambda (_e0)
      (match (list _e0)
        ((('Z))
          intZ)
        ((('S n))
          (intS (natToInt n))))))
    (intToNat (lambda (x) (number->peano 'Z 'S x)))
  )
    (letrec* ((TheWorld `(TheWorld)))
      (snd ((runState ((stBind (MkSt (lambda (s)
        ((MkPair s) (S (S (S (S Z)))))))) (lambda (v)
        (letrec* ((nativePrint print))
          ((stBind (MkSt (lambda (w)
            ((MkPair w) (nativePrint (natToInt v)))))) (lambda (_0)
            (letrec* ((nativePrint print))
              (MkSt (lambda (w)
                ((MkPair w) (nativePrint (intToNat (intS (intS (intS intZ))))))))))))))) TheWorld)))))
