(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (MkIO (lambda (f)
      `(MkIO ,f)))
    (ioBind (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          (((_ f) g)
            (letrec* (
              (ioBind3 (lambda (_e0)
                (lambda (_e1)
                  (match (list _e0 _e1)
                    ((w (_ f))
                      (f w))))))
              (ioBind2 (lambda (_e0)
                (lambda (_e1)
                  (match (list _e0 _e1)
                    ((g (_ x w))
                      ((ioBind3 w) (g x)))))))
            )
              (MkIO (lambda (w)
                ((ioBind2 g) (f w))))))))))
    (intS (lambda (x) (+ x 1)))
    (intZ 0)
    (intToNat (lambda (x) (number->peano 'Z 'S x)))
    (runIO_prim (lambda (f) (f 'RealWorld)))
    (runIO (lambda (_e0)
      (match (list _e0)
        (((_ f))
          (letrec* ((runIO2 (lambda (_e0)
            (match (list _e0)
              (((_ x _))
                x)))))
            (runIO2 (runIO_prim f)))))))
  )
    (runIO ((ioBind (letrec* ((nativePrint (lambda (x) (lambda (w) (list 'MkIOR (print x) w)))))
      (MkIO (nativePrint (intS (intS (intS (intS intZ)))))))) (lambda (_0)
      (letrec* ((nativePrint (lambda (x) (lambda (w) (list 'MkIOR (print x) w)))))
        (MkIO (nativePrint (intToNat (intS (intS (intS intZ))))))))))))
