-- vim: ft=ttstar

### Desugared ###

  let
    postulate Void : Type
    postulate Maybe : (_x0 : Type) -> Type
    postulate Just : (a : Type) -> (x : a) -> Maybe a
    postulate Nothing : (a : Type) -> Maybe a
    postulate Bool : Type
    postulate True : Bool
    postulate False : Bool
    retTy : (x : Maybe Bool) -> Type 
      t : Bool
        [retTy] (Just [Bool] t) = Bool
      [retTy] (Nothing [Bool]) = Type
    f : (x : Maybe Bool) -> retTy x 
      b : Bool
        [f] (Just [Bool] b) = b
      [f] (Nothing [Bool]) = Bool
    main : Bool = f (Just Bool False)
  in main

### Evarified ###

  let
    postulate Void :1: Type
    postulate Maybe :2: (_x0 :3: Type) -> Type
    postulate Just :4: (a :5: Type) -> (x :6: a) -> Maybe -7- a
    postulate Nothing :8: (a :9: Type) -> Maybe -10- a
    postulate Bool :11: Type
    postulate True :12: Bool
    postulate False :13: Bool
    retTy :14: (x :15: Maybe -16- Bool) -> Type 
      t :17: Bool
        [retTy] -18- (Just -20- [Bool] -19- t) = Bool
      [retTy] -21- (Nothing -22- [Bool]) = Type
    f :23: (x :24: Maybe -25- Bool) -> retTy -26- x 
      b :27: Bool
        [f] -28- (Just -30- [Bool] -29- b) = b
      [f] -31- (Nothing -32- [Bool]) = Bool
    main :33: Bool = f -34- (Just -36- Bool -35- False)
  in main

### Constraints ###

[] -> [4,6,8,11,13,23,24,27,28,29,31,34,35,R]
[5] -> [30,36]
[7] -> [25]
[9] -> [32]
[10] -> [25]
[25] -> [7,10]
[30] -> [5]
[32] -> [9]
[36] -> [5]
[R] -> [33]

### Solution ###

[4,6,8,11,13,23,24,27,28,29,31,33,34,35,R]

### Annotated ###

  let
    postulate Void :E: Type
    postulate Maybe :E: (_x0 :E: Type) -> Type
    postulate Just :R: (a :E: Type) -> (x :R: a) -> Maybe -E- a
    postulate Nothing :R: (a :E: Type) -> Maybe -E- a
    postulate Bool :R: Type
    postulate True :E: Bool
    postulate False :R: Bool
    retTy :E: (x :E: Maybe -E- Bool) -> Type 
      t :E: Bool
        [retTy] -E- (Just -E- [Bool] -E- t) = Bool
      [retTy] -E- (Nothing -E- [Bool]) = Type
    f :R: (x :R: Maybe -E- Bool) -> retTy -E- x 
      b :R: Bool
        [f] -R- (Just -E- [Bool] -R- b) = b
      [f] -R- (Nothing -E- [Bool]) = Bool
    main :R: Bool = f -R- (Just -E- Bool -R- False)
  in main

### Specialised ###

  let
    postulate Void :E: Type
    postulate Maybe :E: (_x0 :E: Type) -> Type
    postulate Just :R: (a :E: Type) -> (x :R: a) -> Maybe -E- a
    postulate Nothing :R: (a :E: Type) -> Maybe -E- a
    postulate Bool :R: Type
    postulate True :E: Bool
    postulate False :R: Bool
    retTy :E: (x :E: Maybe -E- Bool) -> Type 
      t :E: Bool
        [retTy] -E- (Just -E- [Bool] -E- t) = Bool
      [retTy] -E- (Nothing -E- [Bool]) = Type
    f :R: (x :R: Maybe -E- Bool) -> retTy -E- x 
      b :R: Bool
        [f] -R- (Just -E- [Bool] -R- b) = b
      [f] -R- (Nothing -E- [Bool]) = Bool
    main :R: Bool = f -R- (Just -E- Bool -R- False)
  in main

### Final annotation ###

  let
    postulate Void :E: Type
    postulate Maybe :E: (_x0 :E: Type) -> Type
    postulate Just :R: (a :E: Type) -> (x :R: a) -> Maybe -E- a
    postulate Nothing :R: (a :E: Type) -> Maybe -E- a
    postulate Bool :R: Type
    postulate True :E: Bool
    postulate False :R: Bool
    retTy :E: (x :E: Maybe -E- Bool) -> Type 
      t :E: Bool
        [retTy] -E- (Just -E- [Bool] -E- t) = Bool
      [retTy] -E- (Nothing -E- [Bool]) = Type
    f :R: (x :R: Maybe -E- Bool) -> retTy -E- x 
      b :R: Bool
        [f] -R- (Just -E- [Bool] -R- b) = b
      [f] -R- (Nothing -E- [Bool]) = Bool
    main :R: Bool = f -R- (Just -E- Bool -R- False)
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    postulate Just : (x) -> Maybe
    postulate Nothing : Maybe
    postulate Bool : Type
    postulate False : Bool
    f 
      [_] (Just b) = b
      [_] Nothing = Bool
    main = f (Just False)
  in main

### Normal forms ###

unerased:
  
  let
    postulate Bool : Type
    postulate False : Bool
  in False

erased:
  
  let
    postulate Bool : Type
    postulate False : Bool
  in False

