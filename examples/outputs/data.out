-- vim: ft=ttstar

### Desugared ###

  let
    constructor N : Type
    constructor Z : N
    constructor S : (_x0 : N) -> N
    plus : (_x1 : N) -> (_x2 : N) -> N 
      m : N
        [plus] Z m = m
      m : N n : N
        [plus] (S n) m = S (plus n m)
    main : N = 
      let pred : (_x3 : N) -> N 
        [pred] Z = Z
        n : N
          [pred] (S n) = n
      in plus 2 3
  in main

### Evarified ###

  let
    constructor N :1: Type
    constructor Z :2: N
    constructor S :3: (_x0 :4: N) -> N
    plus :5: (_x1 :6: N) -> (_x2 :7: N) -> N 
      m :8: N
        [plus] -10- Z -9- m = m
      m :11: N n :12: N
        [plus] -14- (S -15- n) -13- m = S -16- (plus -18- n -17- m)
    main :19: N = 
      let pred :20: (_x3 :21: N) -> N 
        [pred] -22- Z = Z
        n :23: N
          [pred] -24- (S -25- n) = n
      in plus -27- 2 -26- 3
  in main

### Constraints ###

[4] -> [16]
[4,14] -> [15]
[4,26] -> [30]
[4,26,30] -> [31]
[4,26,30,31] -> [32]
[4,27] -> [28]
[4,27,28] -> [29]
[6] -> [27]
[6,16] -> [18]
[6,R] -> [10,14]
[7] -> [26]
[7,16] -> [17]
[7,R] -> [9,13]
[8] -> [9]
[9] -> [R]
[9,R] -> [7]
[10] -> [R]
[10,R] -> [6]
[11] -> [13]
[12] -> [15]
[13] -> [R]
[13,R] -> [7]
[14] -> [R]
[14,15] -> [4]
[14,R] -> [6]
[15] -> [14]
[16] -> [4]
[16,17] -> [7]
[16,17,R] -> [11]
[16,18] -> [6]
[16,18,R] -> [12]
[16,R] -> [5]
[26] -> [7]
[26,30] -> [4]
[26,30,31] -> [4]
[26,30,31,32] -> [4]
[26,30,31,32,R] -> [2]
[26,30,31,R] -> [3]
[26,30,R] -> [3]
[26,R] -> [3]
[27] -> [6]
[27,28] -> [4]
[27,28,29] -> [4]
[27,28,29,R] -> [2]
[27,28,R] -> [3]
[27,R] -> [3]
[R] -> [2,3,5,8,10,14,19]

### Solution ###

[2,3,5,6,7,8,9,10,13,14,19,26,27,R]

### Annotated ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (_x0 :E: N) -> N
    plus :R: (_x1 :R: N) -> (_x2 :R: N) -> N 
      m :R: N
        [plus] -R- Z -R- m = m
      m :E: N n :E: N
        [plus] -R- (S -E- n) -R- m = S -E- (plus -E- n -E- m)
    main :R: N = 
      let pred :E: (_x3 :E: N) -> N 
        [pred] -E- Z = Z
        n :E: N
          [pred] -E- (S -E- n) = n
      in plus -R- 2 -R- 3
  in main

### Specialised ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (_x0 :E: N) -> N
    plus :R: (_x1 :R: N) -> (_x2 :R: N) -> N 
      m :R: N
        [plus] -R- Z -R- m = m
      m :E: N n :E: N
        [plus] -R- (S -E- n) -R- m = S -E- (plus -E- n -E- m)
    main :R: N = 
      let pred :E: (_x3 :E: N) -> N 
        [pred] -E- Z = Z
        n :E: N
          [pred] -E- (S -E- n) = n
      in plus -R- 2 -R- 3
  in main

### Final annotation ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (_x0 :E: N) -> N
    plus :R: (_x1 :R: N) -> (_x2 :R: N) -> N 
      m :R: N
        [plus] -R- Z -R- m = m
      m :E: N n :E: N
        [plus] -R- (S -E- n) -R- m = S -E- (plus -E- n -E- m)
    main :R: N = 
      let pred :E: (_x3 :E: N) -> N 
        [pred] -E- Z = Z
        n :E: N
          [pred] -E- (S -E- n) = n
      in plus -R- 2 -R- 3
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor Z : N
    constructor S : N
    plus 
      [_] Z m = m
      [_] S _ = S
    main = plus S S
  in main

### Normal forms ###

unerased:
  
  let
    constructor N : Type
    constructor Z : N
    constructor S : (_x0 : N) -> N
  in 5

erased:
  
  let constructor S : N
  in S

