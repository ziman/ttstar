(require-extension matchable)
(define Type #(Type))
(define (number->peano z s i) (if (= i 0) (vector z) (vector s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Z (vector 'Z))
    (S (lambda (x)
      (vector 'S x)))
    (Nil (vector 'Nil))
    (Cons (lambda (x)
      (lambda (xs)
        (vector 'Cons x xs))))
    (vlen (lambda (_e0)
      (match (list _e0)
        ((#('Nil))
          Z)
        ((#('Cons _ ys))
          (S (vlen ys))))))
    (main (vlen ((Cons (S (S (S Z)))) Nil)))
  )
    main))
