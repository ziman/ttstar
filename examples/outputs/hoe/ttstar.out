-- vim: ft=ttstar

### Desugared ###

  let
    constructor T : Type
    constructor A : T
    constructor B : T
    postulate Op : (x :R: T) -> (y :R: T) -> T
    id : (x : T) -> T = (\x : T. x)
    const_A : (x : T) -> T = (\x : T. A)
    f : (g : (_x0 : T) -> T) -> (z : T) -> (h : (_x1 : T) -> T) -> (w : T) -> T = (\g : (_x0 : T) -> T. (\z : T. (\h : (_x1 : T) -> T. (\w : T. Op (g z) (h w)))))
    main : T = f id B const_A B
  in main

### Evarified ###

  let
    constructor T :1: Type
    constructor A :2: T
    constructor B :3: T
    postulate Op :4: (x :R: T) -> (y :R: T) -> T
    id :5: (x :6: T) -> T = (\x :7: T. x)
    const_A :8: (x :9: T) -> T = (\x :10: T. A)
    f :11: (g :12: (_x0 :13: T) -> T) -> (z :14: T) -> (h :15: (_x1 :16: T) -> T) -> (w :17: T) -> T = (\g :18: (_x0 :19: T) -> T. (\z :20: T. (\h :21: (_x1 :22: T) -> T. (\w :23: T. Op -25- (g -26- z) -24- (h -27- w)))))
    main :28: T = f -32- id -31- B -30- const_A -29- B
  in main

### Constraints ###

[] -> [2,3,4,5,6,7,8,11,12,13,14,15,18,19,20,21,24,25,26,30,31,32,R]
[9] -> [10,16]
[10] -> [9]
[16] -> [9,22]
[17] -> [23,29]
[22] -> [16,27]
[23] -> [17]
[27] -> [22,23]
[29] -> [3,17]
[R] -> [28]

### Solution ###

[2,3,4,5,6,7,8,11,12,13,14,15,18,19,20,21,24,25,26,28,30,31,32,R]

### Annotated ###

  let
    constructor T :E: Type
    constructor A :R: T
    constructor B :R: T
    postulate Op :R: (x :R: T) -> (y :R: T) -> T
    id :R: (x :R: T) -> T = (\x :R: T. x)
    const_A :R: (x :E: T) -> T = (\x :E: T. A)
    f :R: (g :R: (_x0 :R: T) -> T) -> (z :R: T) -> (h :R: (_x1 :E: T) -> T) -> (w :E: T) -> T = (\g :R: (_x0 :R: T) -> T. (\z :R: T. (\h :R: (_x1 :E: T) -> T. (\w :E: T. Op -R- (g -R- z) -R- (h -E- w)))))
    main :R: T = f -R- id -R- B -R- const_A -E- B
  in main

### Specialised ###

  let
    constructor T :E: Type
    constructor A :R: T
    constructor B :R: T
    postulate Op :R: (x :R: T) -> (y :R: T) -> T
    id :R: (x :R: T) -> T = (\x :R: T. x)
    const_A :R: (x :E: T) -> T = (\x :E: T. A)
    f :R: (g :R: (_x0 :R: T) -> T) -> (z :R: T) -> (h :R: (_x1 :E: T) -> T) -> (w :E: T) -> T = (\g :R: (_x0 :R: T) -> T. (\z :R: T. (\h :R: (_x1 :E: T) -> T. (\w :E: T. Op -R- (g -R- z) -R- (h -E- w)))))
    main :R: T = f -R- id -R- B -R- const_A -E- B
  in main

### Final annotation ###

  let
    constructor T :E: Type
    constructor A :R: T
    constructor B :R: T
    postulate Op :R: (x :R: T) -> (y :R: T) -> T
    id :R: (x :R: T) -> T = (\x :R: T. x)
    const_A :R: (x :E: T) -> T = (\x :E: T. A)
    f :R: (g :R: (_x0 :R: T) -> T) -> (z :R: T) -> (h :R: (_x1 :E: T) -> T) -> (w :E: T) -> T = (\g :R: (_x0 :R: T) -> T. (\z :R: T. (\h :R: (_x1 :E: T) -> T. (\w :E: T. Op -R- (g -R- z) -R- (h -E- w)))))
    main :R: T = f -R- id -R- B -R- const_A -E- B
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor A : T
    constructor B : T
    postulate Op : (x) -> (y) -> T
    id = (\x. x)
    const_A = A
    f = (\g. (\z. (\h. Op (g z) h)))
    main = f id B const_A
  in main

### Intermediate representation ###

let A = constructor 0
  in let B = constructor 0
    in let Op = constructor 2
      in let id = \x. x
        in let const_A = A
          in let f = \g. \z. \h. ((Op (g z)) h)
            in let main = (((f id) B) const_A)
              in main

### Normal forms ###

unerased:
  
  let
    constructor T : Type
    constructor A : T
    constructor B : T
    postulate Op : (x :R: T) -> (y :R: T) -> T
  in Op B A

erased:
  
  let
    constructor A : T
    constructor B : T
    postulate Op : (x) -> (y) -> T
  in Op B A

