-- vim: ft=ttstar
  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x) -> Nat
    plus 
      [_] Z n = n
      [_] (S m) n = S (plus m n)
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    not 
      [_] True = False
      [_] False = True
    constructor Unit : Type
    constructor MkUnit : Unit
    constructor Pair : (_x3) -> (_x4) -> Type
    constructor MkPair : (a) -> (b) -> (_x5) -> (_x6) -> Pair a b
    fst 
      [_] a b ([_] [_] [_] x y) = x
    snd 
      [_] a b ([_] [_] [_] x y) = y
    constructor Either : (_x9) -> (_x10) -> Type
    constructor Left : (a) -> (b) -> (_x11) -> Either a b
    constructor Right : (a) -> (b) -> (_x12) -> Either a b
    id = (\a. (\x. x))
    constructor Fin : (_x13) -> Type
    constructor FZ : (n) -> Fin (S n)
    constructor FS : (n) -> (_x14) -> Fin (S n)
    constructor Vect : (_x15) -> (_x16) -> Type
    constructor VN : (a) -> Vect Z a
    constructor VC : (n) -> (a) -> (x) -> (xs) -> Vect (S n) a
    constructor Id : (a) -> (x) -> (y) -> Type
    constructor Refl : (a) -> (x) -> Id a x x
    subst 
      [_] a P x [_] [_] = (\z. z)
    constructor Bit : (_x0) -> Type
    constructor I : Bit 1
    constructor O : Bit Z
    double 
      [_] Z = Z
      [_] (S n) = S (S (double n))
    constructor Bin : (width) -> (value) -> Type
    constructor N : Bin Z Z
    constructor C : (width) -> (lsbVal) -> (lsb) -> (restVal) -> (rest) -> Bin (S width) (plus lsbVal (double restVal))
    constructor TwoBits : (_x2) -> (_x3) -> (_x4) -> Type
    constructor TB : (c) -> (x) -> (y) -> (hi') -> (hi) -> (lo') -> (lo) -> (pf) -> TwoBits c x y
    adb 
      [_] [_] [_] [_] O O O = TB Z Z Z Z O Z O (Refl Nat Z)
      [_] [_] [_] [_] I O O = TB 1 Z Z Z O 1 I (Refl Nat 1)
      [_] [_] [_] [_] O I O = TB Z 1 Z Z O 1 I (Refl Nat 1)
      [_] [_] [_] [_] O O I = TB Z Z 1 Z O 1 I (Refl Nat 1)
      [_] [_] [_] [_] I I O = TB 1 1 Z 1 I Z O (Refl Nat 2)
      [_] [_] [_] [_] I O I = TB 1 Z 1 1 I Z O (Refl Nat 2)
      [_] [_] [_] [_] O I I = TB Z 1 1 1 I Z O (Refl Nat 2)
      [_] [_] [_] [_] I I I = TB 1 1 1 1 I 1 I (Refl Nat 3)
    add' 
      [_] [_] c [_] [_] cb N N = C Z c cb Z N
      [_] ([_] w) c [_] [_] cb (C [_] xb' xb xn' xn) (C [_] yb' yb yn' yn) = 
        let f 
          [_] ([_] [_] [_] [_] hi' hi lo' lo pf) = 
            let postulate eq : Id Nat (plus lo' (double (plus hi' (plus xn' yn')))) (plus c (plus (plus xb' (double xn')) (plus yb' (double yn'))))
            in subst Nat (Bin (S (S w))) (plus lo' (double (plus hi' (plus xn' yn')))) (plus c (plus (plus xb' (double xn')) (plus yb' (double yn')))) eq (C (S w) lo' lo (plus hi' (plus xn' yn')) (add' w hi' xn' yn' hi xn yn))
        in f (adb c xb' yb' cb xb yb)
    add = (\w. (\x. (\y. (\bx. (\by. add' w Z x y O bx by)))))
    foreign inputSize
    binVal 
      [_] b Z = Z
      [_] True (S n) = S (double (binVal False n))
      [_] False (S n) = double (binVal True n)
    mkBin 
      [_] b Z = N
      [_] True (S n) = C n 1 I (binVal False n) (mkBin False n)
      [_] False (S n) = C n Z O (binVal True n) (mkBin True n)
    main = 
      let
        x = mkBin True inputSize
        y = mkBin False inputSize
      in add inputSize (binVal True inputSize) (binVal False inputSize) x y
  in main
