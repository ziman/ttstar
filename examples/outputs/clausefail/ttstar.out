-- vim: ft=ttstar

### Desugared ###

  let
    constructor N : Type
    constructor Z : N
    constructor S : (_x0 : N) -> N
    constructor B : Type
    constructor T : B
    constructor F : B
    isSuc : (_x1 : N) -> B 
      n : N
        isSuc (S n) = T
      n : N
        isSuc n = F
    main : (_x2 : N) -> B = (\x : N. isSuc x)
  in main

### Evarified ###

  let
    constructor N :1: Type
    constructor Z :2: N
    constructor S :3: (_x0 :4: N) -> N
    constructor B :5: Type
    constructor T :6: B
    constructor F :7: B
    isSuc :8: (_x1 :9: N) -> B 
      n :10: N
        isSuc -11- (S -12- n) = T
      n :13: N
        isSuc -14- n = F
    main :15: (_x2 :16: N) -> B = (\x :17: N. isSuc -18- x)
  in main

### Constraints ###

[] -> [15]
[4] -> [12]
[8] -> [3,6,7,8,11]
[8,11,12] -> [10]
[8,14] -> [13]
[9] -> [11,14,18]
[10] -> [8,11,12]
[11] -> [9]
[12] -> [4]
[13] -> [8,14]
[14] -> [9]
[15] -> [8]
[15,18] -> [17]
[16] -> [17]
[17] -> [16]
[18] -> [9]

### Solution ###

[3,6,7,8,9,11,13,14,15,16,17,18,R]

### Annotated ###

  let
    constructor N :E: Type
    constructor Z :E: N
    constructor S :R: (_x0 :E: N) -> N
    constructor B :E: Type
    constructor T :R: B
    constructor F :R: B
    isSuc :R: (_x1 :R: N) -> B 
      n :E: N
        isSuc -R- (S -E- n) = T
      n :R: N
        isSuc -R- n = F
    main :R: (_x2 :R: N) -> B = (\x :R: N. isSuc -R- x)
  in main

### Specialised ###

  let
    constructor N :E: Type
    constructor Z :E: N
    constructor S :R: (_x0 :E: N) -> N
    constructor B :E: Type
    constructor T :R: B
    constructor F :R: B
    isSuc :R: (_x1 :R: N) -> B 
      n :E: N
        isSuc -R- (S -E- n) = T
      n :R: N
        isSuc -R- n = F
    main :R: (_x2 :R: N) -> B = (\x :R: N. isSuc -R- x)
  in main

### Final annotation ###

  let
    constructor N :E: Type
    constructor Z :E: N
    constructor S :R: (_x0 :E: N) -> N
    constructor B :E: Type
    constructor T :R: B
    constructor F :R: B
    isSuc :R: (_x1 :R: N) -> B 
      n :E: N
        isSuc -R- (S -E- n) = T
      n :R: N
        isSuc -R- n = F
    main :R: (_x2 :R: N) -> B = (\x :R: N. isSuc -R- x)
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor S : N
    constructor T : B
    constructor F : B
    isSuc 
      isSuc S = T
      isSuc n = F
    main = (\x. isSuc x)
  in main

### Intermediate representation ###

let S = constructor 0
  in let T = constructor 0
    in let F = constructor 0
      in let isSuc = \_pv0.
        case _pv0 of
          S => T
          _ => F
        in let main = \x. (isSuc x)
          in main

### Normal forms ###

unerased:
  
  let
    constructor N : Type
    constructor S : (_x0 : N) -> N
    constructor B : Type
    constructor T : B
    constructor F : B
    isSuc : (_x1 : N) -> B 
      n : N
        isSuc (S n) = T
      n : N
        isSuc n = F
  in (\x : N. isSuc x)

erased:
  
  let
    constructor S : N
    constructor T : B
    constructor F : B
    isSuc 
      isSuc S = T
      isSuc n = F
  in (\x. isSuc x)

