-- vim: ft=ttstar

### Desugared ###

  let
    postulate N : Type
    postulate Z : N
    postulate S : (_x0 : N) -> N
    postulate Fin : (_x1 : N) -> Type
    postulate FZ : (n : N) -> Fin (S n)
    postulate FS : (n : N) -> (x :R: Fin n) -> Fin (S n)
    embed : (n : N) -> (_x2 : Fin n) -> Fin (S n) 
      (n : N)
         [S n] (FZ n) = FZ (S n)
      (n : N) (x : Fin n)
         [S n] (FS n x) = FS (S n) (embed n x)
    fsuc : (n : N) -> (x : Fin n) -> Fin (S n) = FS
    postulate Pair : Type
    postulate P : (x :R: Fin 3) -> (y :R: Fin 4) -> Pair
    main : Pair = P (fsuc 2 (FS 1 (FZ Z))) (embed 3 (FS 2 (FS 1 (FZ Z))))
  in main

### Evarified ###

  let
    postulate N :1: Type
    postulate Z :2: N
    postulate S :3: (_x0 :4: N) -> N
    postulate Fin :5: (_x1 :6: N) -> Type
    postulate FZ :7: (n :8: N) -> Fin -9- (S -10- n)
    postulate FS :11: (n :12: N) -> (x :R: Fin -13- n) -> Fin -14- (S -15- n)
    embed :16: (n :17: N) -> (_x2 :18: Fin -19- n) -> Fin -20- (S -21- n) 
      (n :22: N)
         -23- [S -24- n] -25- (FZ -26- n) = FZ -27- (S -28- n)
      (n :29: N) (x :30: Fin -31- n)
         -32- [S -33- n] -34- (FS -35- n -36- x) = FS -38- (S -39- n) -37- (embed -41- n -40- x)
    fsuc :42: (n :43: N) -> (x :44: Fin -45- n) -> Fin -46- (S -47- n) = FS
    postulate Pair :48: Type
    postulate P :49: (x :R: Fin -50- 3) -> (y :R: Fin -54- 4) -> Pair
    main :59: Pair = P -61- (fsuc -63- 2 -62- (FS -67- 1 -66- (FZ -69- Z))) -60- (embed -71- 3 -70- (FS -76- 2 -75- (FS -80- 1 -79- (FZ -82- Z))))
  in main

### Constraints ###

[] -> [7,11,16,18,25,30,34,36,37,40,42,44,49,60,61,62,66,70,75,79,R]
[4,8] -> [22,28]
[4,12] -> [2,3,29,39,68,77,78,81]
[4,12,78] -> [4]
[4,17] -> [2,3,72,73,74]
[4,17,73] -> [4]
[4,17,74] -> [4]
[4,23] -> [22,24]
[4,32] -> [29,33]
[4,43] -> [2,3,64,65]
[4,43,65] -> [4]
[8] -> [2,3,26,27,69,82]
[8,28] -> [4]
[9] -> [13,19,20]
[10] -> [21,24,68,81]
[12] -> [3,35,38,43,67,76,80]
[12,39] -> [4]
[12,68] -> [4]
[12,77] -> [4]
[12,81] -> [4]
[13] -> [9,14,20,31,45]
[14] -> [13,19,20,45,46]
[15] -> [21,33,47,64,72,77]
[17] -> [3,23,29,32,41,71]
[17,72] -> [4]
[19] -> [9,14,31]
[20] -> [9,13,14,54]
[21] -> [10,15,39,55]
[22] -> [26]
[23] -> [3,17]
[23,24] -> [4]
[24] -> [10,28]
[26] -> [8]
[27] -> [8]
[28] -> [24]
[29] -> [35]
[31] -> [13,19]
[32] -> [3,17]
[32,33] -> [4]
[33] -> [15,39]
[35] -> [12]
[38] -> [12]
[39] -> [21,33]
[41] -> [17]
[43] -> [3,12,63]
[43,64] -> [4]
[45] -> [13,14]
[46] -> [14,50]
[47] -> [15,51]
[50] -> [46]
[51] -> [47]
[52] -> [64]
[53] -> [65]
[54] -> [20]
[55] -> [21]
[56] -> [72]
[57] -> [73]
[58] -> [74]
[63] -> [43]
[64] -> [15,52]
[65] -> [53,68]
[67] -> [12]
[68] -> [10,65]
[69] -> [8]
[71] -> [17]
[72] -> [15,56]
[73] -> [57,77]
[74] -> [58,78]
[76] -> [12]
[77] -> [15,73]
[78] -> [74,81]
[80] -> [12]
[81] -> [10,78]
[82] -> [8]
[R] -> [59]

### Solution ###

[7,11,16,18,25,30,34,36,37,40,42,44,49,59,60,61,62,66,70,75,79,R]

### Annotated ###

  let
    postulate N :E: Type
    postulate Z :E: N
    postulate S :E: (_x0 :E: N) -> N
    postulate Fin :E: (_x1 :E: N) -> Type
    postulate FZ :R: (n :E: N) -> Fin -E- (S -E- n)
    postulate FS :R: (n :E: N) -> (x :R: Fin -E- n) -> Fin -E- (S -E- n)
    embed :R: (n :E: N) -> (_x2 :R: Fin -E- n) -> Fin -E- (S -E- n) 
      (n :E: N)
         -E- [S -E- n] -R- (FZ -E- n) = FZ -E- (S -E- n)
      (n :E: N) (x :R: Fin -E- n)
         -E- [S -E- n] -R- (FS -E- n -R- x) = FS -E- (S -E- n) -R- (embed -E- n -R- x)
    fsuc :R: (n :E: N) -> (x :R: Fin -E- n) -> Fin -E- (S -E- n) = FS
    postulate Pair :E: Type
    postulate P :R: (x :R: Fin -E- 3) -> (y :R: Fin -E- 4) -> Pair
    main :R: Pair = P -R- (fsuc -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (embed -E- 3 -R- (FS -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))
  in main

### Specialised ###

  let
    postulate N :E: Type
    postulate Z :E: N
    postulate S :E: (_x0 :E: N) -> N
    postulate Fin :E: (_x1 :E: N) -> Type
    postulate FZ :R: (n :E: N) -> Fin -E- (S -E- n)
    postulate FS :R: (n :E: N) -> (x :R: Fin -E- n) -> Fin -E- (S -E- n)
    embed :R: (n :E: N) -> (_x2 :R: Fin -E- n) -> Fin -E- (S -E- n) 
      (n :E: N)
         -E- [S -E- n] -R- (FZ -E- n) = FZ -E- (S -E- n)
      (n :E: N) (x :R: Fin -E- n)
         -E- [S -E- n] -R- (FS -E- n -R- x) = FS -E- (S -E- n) -R- (embed -E- n -R- x)
    fsuc :R: (n :E: N) -> (x :R: Fin -E- n) -> Fin -E- (S -E- n) = FS
    postulate Pair :E: Type
    postulate P :R: (x :R: Fin -E- 3) -> (y :R: Fin -E- 4) -> Pair
    main :R: Pair = P -R- (fsuc -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (embed -E- 3 -R- (FS -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))
  in main

### Final annotation ###

  let
    postulate N :E: Type
    postulate Z :E: N
    postulate S :E: (_x0 :E: N) -> N
    postulate Fin :E: (_x1 :E: N) -> Type
    postulate FZ :R: (n :E: N) -> Fin -E- (S -E- n)
    postulate FS :R: (n :E: N) -> (x :R: Fin -E- n) -> Fin -E- (S -E- n)
    embed :R: (n :E: N) -> (_x2 :R: Fin -E- n) -> Fin -E- (S -E- n) 
      (n :E: N)
         -E- [S -E- n] -R- (FZ -E- n) = FZ -E- (S -E- n)
      (n :E: N) (x :R: Fin -E- n)
         -E- [S -E- n] -R- (FS -E- n -R- x) = FS -E- (S -E- n) -R- (embed -E- n -R- x)
    fsuc :R: (n :E: N) -> (x :R: Fin -E- n) -> Fin -E- (S -E- n) = FS
    postulate Pair :E: Type
    postulate P :R: (x :R: Fin -E- 3) -> (y :R: Fin -E- 4) -> Pair
    main :R: Pair = P -R- (fsuc -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (embed -E- 3 -R- (FS -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    postulate FZ : Fin
    postulate FS : (x) -> Fin
    embed 
       FZ = FZ
       (FS x) = FS (embed x)
    fsuc = FS
    postulate P : (x) -> (y) -> Pair
    main = P (fsuc (FS FZ)) (embed (FS (FS FZ)))
  in main

### Normal forms ###

unerased:
  
  let
    postulate N : Type
    postulate Z : N
    postulate S : (_x0 : N) -> N
    postulate Fin : (_x1 : N) -> Type
    postulate FZ : (n : N) -> Fin (S n)
    postulate FS : (n : N) -> (x :R: Fin n) -> Fin (S n)
    postulate Pair : Type
    postulate P : (x :R: Fin 3) -> (y :R: Fin 4) -> Pair
  in P (FS 2 (FS 1 (FZ Z))) (FS 3 (FS 2 (FZ 1)))

erased:
  
  let
    postulate FZ : Fin
    postulate FS : (x) -> Fin
    postulate P : (x) -> (y) -> Pair
  in P (FS (FS FZ)) (FS (FS FZ))

