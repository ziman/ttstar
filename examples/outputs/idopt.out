-- vim: ft=ttstar

### Desugared ###

  let
    constructor N : Type
    constructor Z : N
    constructor S : (_x0 : N) -> N
    constructor Fin : (_x1 : N) -> Type
    constructor FZ : (n : N) -> Fin (S n)
    constructor FS : (n : N) -> (x :R: Fin n) -> Fin (S n)
    embed : (n : N) -> (_x2 : Fin n) -> Fin (S n) 
      n : N
        [embed] [S n] (FZ n) = FZ (S n)
      n : N x : Fin n
        [embed] [S n] (FS n x) = FS (S n) (embed n x)
    fsuc : (n : N) -> (x : Fin n) -> Fin (S n) = FS
    constructor Pair : Type
    constructor P : (x :R: Fin 3) -> (y :R: Fin 4) -> Pair
    main : Pair = P (fsuc 2 (FS 1 (FZ Z))) (embed 3 (FS 2 (FS 1 (FZ Z))))
  in main

### Evarified ###

  let
    constructor N :1: Type
    constructor Z :2: N
    constructor S :3: (_x0 :4: N) -> N
    constructor Fin :5: (_x1 :6: N) -> Type
    constructor FZ :7: (n :8: N) -> Fin -9- (S -10- n)
    constructor FS :11: (n :12: N) -> (x :R: Fin -13- n) -> Fin -14- (S -15- n)
    embed :16: (n :17: N) -> (_x2 :18: Fin -19- n) -> Fin -20- (S -21- n) 
      n :22: N
        [embed] -24- [S -25- n] -23- (FZ -26- n) = FZ -27- (S -28- n)
      n :29: N x :30: Fin -31- n
        [embed] -33- [S -34- n] -32- (FS -36- n -35- x) = FS -38- (S -39- n) -37- (embed -41- n -40- x)
    fsuc :42: (n :43: N) -> (x :44: Fin -45- n) -> Fin -46- (S -47- n) = FS
    constructor Pair :48: Type
    constructor P :49: (x :R: Fin -50- 3) -> (y :R: Fin -54- 4) -> Pair
    main :59: Pair = P -61- (fsuc -63- 2 -62- (FS -67- 1 -66- (FZ -69- Z))) -60- (embed -71- 3 -70- (FS -76- 2 -75- (FS -80- 1 -79- (FZ -82- Z))))
  in main

### Constraints ###

[4,24,60] -> [25]
[4,27,60] -> [28]
[4,33,60] -> [34]
[4,38,60] -> [39]
[4,60,70,75,80] -> [81]
[4,60,70,76] -> [77]
[4,60,70,76,77] -> [78]
[4,60,71] -> [72]
[4,60,71,72] -> [73]
[4,60,71,72,73] -> [74]
[4,61,62,67] -> [68]
[4,61,63] -> [64]
[4,61,63,64] -> [65]
[8,23,60] -> [26]
[8,60] -> [27]
[8,60,70,75,79] -> [82]
[8,61,62,66] -> [69]
[9,10,23,60] -> [25]
[9,10,60,70,75,79] -> [81]
[9,10,61,62,66] -> [68]
[9,23,25,60] -> [10]
[9,23,60] -> [19]
[9,60] -> [20]
[9,60,70,75,79] -> [13]
[9,60,70,75,79,81] -> [10]
[9,61,62,66] -> [13]
[9,61,62,66,68] -> [10]
[10,20,60] -> [21]
[12,32,60] -> [36]
[12,60] -> [38]
[12,60,70] -> [76]
[12,60,70,75] -> [80]
[12,61] -> [43]
[12,61,62] -> [67]
[13,35,60] -> [31]
[13,37,60] -> [20]
[13,44,61] -> [45]
[13,60,70,75] -> [14]
[13,60,70,75,79] -> [9]
[13,61,62,66] -> [9]
[14,15,32,60] -> [34]
[14,15,60,70] -> [72]
[14,15,60,70,73] -> [77]
[14,15,60,70,74,77] -> [78]
[14,15,60,70,75] -> [77]
[14,15,60,70,75,78] -> [81]
[14,15,60,70,75,81] -> [78]
[14,15,60,70,77] -> [73]
[14,15,60,70,77,78] -> [74]
[14,15,61,62] -> [64]
[14,15,61,62,65] -> [68]
[14,15,61,62,68] -> [65]
[14,32,34,60] -> [15]
[14,32,60] -> [19]
[14,60] -> [20]
[14,60,70] -> [19]
[14,60,70,72] -> [15]
[14,60,70,75] -> [13]
[14,60,70,75,77] -> [15]
[14,61] -> [46]
[14,61,62] -> [45]
[14,61,62,64] -> [15]
[15,20,60] -> [21]
[15,46,61] -> [47]
[17,37,60] -> [41]
[17,60] -> [71]
[17,60,R] -> [24,33]
[18,37,60] -> [40]
[18,60] -> [70]
[18,60,R] -> [23,32]
[19,23,60] -> [9]
[19,32,60] -> [14]
[19,37,40,60] -> [31]
[19,60,70] -> [14]
[20,21,25,60] -> [28]
[20,21,28,60] -> [25]
[20,21,34,60] -> [39]
[20,21,37,60] -> [39]
[20,21,39,60] -> [34]
[20,21,56,60] -> [72]
[20,21,57,60,72] -> [73]
[20,21,58,60,72,73] -> [74]
[20,21,60] -> [10,15,55]
[20,21,60,72] -> [56]
[20,21,60,72,73] -> [57]
[20,21,60,72,73,74] -> [58]
[20,37,39,60] -> [21]
[20,37,60] -> [13]
[20,55,60] -> [21]
[20,60] -> [9,14,54]
[22,60] -> [26]
[23,26,60] -> [8]
[23,60] -> [R]
[23,60,R] -> [18]
[24,25,60] -> [4]
[24,25,60,R] -> [22]
[24,60] -> [R]
[24,60,R] -> [3,17]
[26,60] -> [23]
[27,28,60] -> [4]
[27,28,60,R] -> [22]
[27,60] -> [8]
[27,60,R] -> [3]
[29,60] -> [36]
[30,60] -> [35]
[31,35,60] -> [13]
[31,37,40,60] -> [19]
[32,35,60] -> [R]
[32,36,60] -> [12]
[32,60] -> [R]
[32,60,R] -> [18,35]
[33,34,60] -> [4]
[33,34,60,R] -> [29]
[33,60] -> [R]
[33,60,R] -> [3,17]
[35,60] -> [32]
[36,60] -> [32]
[37,40,60] -> [18]
[37,40,60,R] -> [30]
[37,41,60] -> [17]
[37,41,60,R] -> [29]
[37,60] -> [R]
[37,60,R] -> [16]
[38,39,60] -> [4]
[38,39,60,R] -> [29]
[38,60] -> [12]
[38,60,R] -> [3]
[43,61] -> [12,63]
[44,45,61] -> [13]
[44,61] -> [62,R]
[45,61,62] -> [14]
[46,47,52,61] -> [64]
[46,47,53,61,64] -> [65]
[46,47,61] -> [15,51]
[46,47,61,64] -> [52]
[46,47,61,64,65] -> [53]
[46,51,61] -> [47]
[46,61] -> [14,50]
[50,61] -> [46]
[54,60] -> [20]
[60] -> [R]
[60,70] -> [18]
[60,70,75] -> [R]
[60,70,75,79] -> [R]
[60,70,75,79,82] -> [8]
[60,70,75,79,82,R] -> [2]
[60,70,75,79,R] -> [7]
[60,70,75,80] -> [12]
[60,70,75,80,81] -> [4]
[60,70,75,80,81,R] -> [2]
[60,70,75,80,R] -> [3]
[60,70,75,R] -> [11,79]
[60,70,76] -> [12]
[60,70,76,77] -> [4]
[60,70,76,77,78] -> [4]
[60,70,76,77,78,R] -> [2]
[60,70,76,77,R] -> [3]
[60,70,76,R] -> [3]
[60,70,R] -> [11,75]
[60,71] -> [17]
[60,71,72] -> [4]
[60,71,72,73] -> [4]
[60,71,72,73,74] -> [4]
[60,71,72,73,74,R] -> [2]
[60,71,72,73,R] -> [3]
[60,71,72,R] -> [3]
[60,71,R] -> [3]
[60,R] -> [7,11,16,23,32,37]
[61] -> [R]
[61,62] -> [44]
[61,62,66] -> [R]
[61,62,66,69] -> [8]
[61,62,66,69,R] -> [2]
[61,62,66,R] -> [7]
[61,62,67] -> [12]
[61,62,67,68] -> [4]
[61,62,67,68,R] -> [2]
[61,62,67,R] -> [3]
[61,62,R] -> [11,66]
[61,63] -> [43]
[61,63,64] -> [4]
[61,63,64,65] -> [4]
[61,63,64,65,R] -> [2]
[61,63,64,R] -> [3]
[61,63,R] -> [3]
[61,R] -> [11,42,44]
[R] -> [49,59,60,61]

### Solution ###

[7,11,16,18,23,30,32,35,37,40,42,44,49,59,60,61,62,66,70,75,79,R]

### Annotated ###

  let
    constructor N :E: Type
    constructor Z :E: N
    constructor S :E: (_x0 :E: N) -> N
    constructor Fin :E: (_x1 :E: N) -> Type
    constructor FZ :R: (n :E: N) -> Fin -E- (S -E- n)
    constructor FS :R: (n :E: N) -> (x :R: Fin -E- n) -> Fin -E- (S -E- n)
    embed :R: (n :E: N) -> (_x2 :R: Fin -E- n) -> Fin -E- (S -E- n) 
      n :E: N
        [embed] -E- [S -E- n] -R- (FZ -E- n) = FZ -E- (S -E- n)
      n :E: N x :R: Fin -E- n
        [embed] -E- [S -E- n] -R- (FS -E- n -R- x) = FS -E- (S -E- n) -R- (embed -E- n -R- x)
    fsuc :R: (n :E: N) -> (x :R: Fin -E- n) -> Fin -E- (S -E- n) = FS
    constructor Pair :E: Type
    constructor P :R: (x :R: Fin -E- 3) -> (y :R: Fin -E- 4) -> Pair
    main :R: Pair = P -R- (fsuc -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (embed -E- 3 -R- (FS -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))
  in main

### Specialised ###

  let
    constructor N :E: Type
    constructor Z :E: N
    constructor S :E: (_x0 :E: N) -> N
    constructor Fin :E: (_x1 :E: N) -> Type
    constructor FZ :R: (n :E: N) -> Fin -E- (S -E- n)
    constructor FS :R: (n :E: N) -> (x :R: Fin -E- n) -> Fin -E- (S -E- n)
    embed :R: (n :E: N) -> (_x2 :R: Fin -E- n) -> Fin -E- (S -E- n) 
      n :E: N
        [embed] -E- [S -E- n] -R- (FZ -E- n) = FZ -E- (S -E- n)
      n :E: N x :R: Fin -E- n
        [embed] -E- [S -E- n] -R- (FS -E- n -R- x) = FS -E- (S -E- n) -R- (embed -E- n -R- x)
    fsuc :R: (n :E: N) -> (x :R: Fin -E- n) -> Fin -E- (S -E- n) = FS
    constructor Pair :E: Type
    constructor P :R: (x :R: Fin -E- 3) -> (y :R: Fin -E- 4) -> Pair
    main :R: Pair = P -R- (fsuc -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (embed -E- 3 -R- (FS -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))
  in main

### Final annotation ###

  let
    constructor N :E: Type
    constructor Z :E: N
    constructor S :E: (_x0 :E: N) -> N
    constructor Fin :E: (_x1 :E: N) -> Type
    constructor FZ :R: (n :E: N) -> Fin -E- (S -E- n)
    constructor FS :R: (n :E: N) -> (x :R: Fin -E- n) -> Fin -E- (S -E- n)
    embed :R: (n :E: N) -> (_x2 :R: Fin -E- n) -> Fin -E- (S -E- n) 
      n :E: N
        [embed] -E- [S -E- n] -R- (FZ -E- n) = FZ -E- (S -E- n)
      n :E: N x :R: Fin -E- n
        [embed] -E- [S -E- n] -R- (FS -E- n -R- x) = FS -E- (S -E- n) -R- (embed -E- n -R- x)
    fsuc :R: (n :E: N) -> (x :R: Fin -E- n) -> Fin -E- (S -E- n) = FS
    constructor Pair :E: Type
    constructor P :R: (x :R: Fin -E- 3) -> (y :R: Fin -E- 4) -> Pair
    main :R: Pair = P -R- (fsuc -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (embed -E- 3 -R- (FS -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor FZ : Fin
    constructor FS : (x) -> Fin
    embed 
      [_] FZ = FZ
      [_] (FS x) = FS (embed x)
    fsuc = FS
    constructor P : (x) -> (y) -> Pair
    main = P (fsuc (FS FZ)) (embed (FS (FS FZ)))
  in main

### Normal forms ###

unerased:
  
  let
    constructor N : Type
    constructor Z : N
    constructor S : (_x0 : N) -> N
    constructor Fin : (_x1 : N) -> Type
    constructor FZ : (n : N) -> Fin (S n)
    constructor FS : (n : N) -> (x :R: Fin n) -> Fin (S n)
    constructor Pair : Type
    constructor P : (x :R: Fin 3) -> (y :R: Fin 4) -> Pair
  in P (FS 2 (FS 1 (FZ Z))) (FS 3 (FS 2 (FZ 1)))

erased:
  
  let
    constructor FZ : Fin
    constructor FS : (x) -> Fin
    constructor P : (x) -> (y) -> Pair
  in P (FS (FS FZ)) (FS (FS FZ))

