-- vim: ft=ttstar

### Desugared ###

  let
    constructor Bool : Type
    constructor T : Bool
    constructor F : Bool
    constructor Unit : Type
    constructor MkUnit : Unit
    not : (_x0 : Bool) -> Bool 
       T = F
       F = T
    retTy : (_x1 : Bool) -> Type 
       T = Bool
       F = Unit
    main : Bool = not 
      let f : (x : Bool) -> retTy x 
         F = MkUnit
         T = F
      in f (not F)
  in main

### Evarified ###

  let
    constructor Bool :1: Type
    constructor T :2: Bool
    constructor F :3: Bool
    constructor Unit :4: Type
    constructor MkUnit :5: Unit
    not :6: (_x0 :7: Bool) -> Bool 
       -8- T = F
       -9- F = T
    retTy :10: (_x1 :11: Bool) -> Type 
       -12- T = Bool
       -13- F = Unit
    main :14: Bool = not -15- 
      let f :16: (x :17: Bool) -> retTy -18- x 
         -19- F = MkUnit
         -20- T = F
      in f -21- (not -22- F)
  in main

### Constraints ###

[] -> [2,3,5,6,7,8,9,15,16,17,19,20,21,22,R]
[R] -> [14]

### Solution ###

[2,3,5,6,7,8,9,14,15,16,17,19,20,21,22,R]

### Annotated ###

  let
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor Unit :E: Type
    constructor MkUnit :R: Unit
    not :R: (_x0 :R: Bool) -> Bool 
       -R- T = F
       -R- F = T
    retTy :E: (_x1 :E: Bool) -> Type 
       -E- T = Bool
       -E- F = Unit
    main :R: Bool = not -R- 
      let f :R: (x :R: Bool) -> retTy -E- x 
         -R- F = MkUnit
         -R- T = F
      in f -R- (not -R- F)
  in main

### Specialised ###

  let
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor Unit :E: Type
    constructor MkUnit :R: Unit
    not :R: (_x0 :R: Bool) -> Bool 
       -R- T = F
       -R- F = T
    retTy :E: (_x1 :E: Bool) -> Type 
       -E- T = Bool
       -E- F = Unit
    main :R: Bool = not -R- 
      let f :R: (x :R: Bool) -> retTy -E- x 
         -R- F = MkUnit
         -R- T = F
      in f -R- (not -R- F)
  in main

### Final annotation ###

  let
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor Unit :E: Type
    constructor MkUnit :R: Unit
    not :R: (_x0 :R: Bool) -> Bool 
       -R- T = F
       -R- F = T
    retTy :E: (_x1 :E: Bool) -> Type 
       -E- T = Bool
       -E- F = Unit
    main :R: Bool = not -R- 
      let f :R: (x :R: Bool) -> retTy -E- x 
         -R- F = MkUnit
         -R- T = F
      in f -R- (not -R- F)
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor T : Bool
    constructor F : Bool
    constructor MkUnit : Unit
    not 
       T = F
       F = T
    main = not 
      let f 
         F = MkUnit
         T = F
      in f (not F)
  in main

### Normal forms ###

unerased:
  
  let
    constructor Bool : Type
    constructor T : Bool
  in T

erased:
  
  let constructor T : Bool
  in T

