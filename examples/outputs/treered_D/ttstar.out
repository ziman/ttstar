-- vim: ft=ttstar

### Desugared ###

  let
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    constructor Foo : (_x0 : Bool) -> Type
    constructor Yeah : Foo True
    constructor Nope : Foo False
    constructor Maybe : (_x1 : Type) -> Type
    constructor Nothing : (a : Type) -> Maybe a
    constructor Just : (a : Type) -> (x : a) -> Maybe a
    f : (x : Maybe Bool) -> Bool 
      b : Bool
        f (Just [Bool] b) = b
      f (Nothing [Bool]) = False
    g : (x : Maybe Bool) -> Foo (f x) 
      g (Just [Bool] True) = Yeah
      g (Just [Bool] False) = Nope
      g (Nothing [Bool]) = Nope
    main : Foo True = g (Just Bool True)
  in main

### Evarified ###

  let
    constructor Bool :1: Type
    constructor True :2: Bool
    constructor False :3: Bool
    constructor Foo :4: (_x0 :5: Bool) -> Type
    constructor Yeah :6: Foo -7- True
    constructor Nope :8: Foo -9- False
    constructor Maybe :10: (_x1 :11: Type) -> Type
    constructor Nothing :12: (a :13: Type) -> Maybe -14- a
    constructor Just :15: (a :16: Type) -> (x :17: a) -> Maybe -18- a
    f :19: (x :20: Maybe -21- Bool) -> Bool 
      b :22: Bool
        f -23- (Just -25- [Bool] -24- b) = b
      f -26- (Nothing -27- [Bool]) = False
    g :28: (x :29: Maybe -30- Bool) -> Foo -31- (f -32- x) 
      g -33- (Just -35- [Bool] -34- True) = Yeah
      g -36- (Just -38- [Bool] -37- False) = Nope
      g -39- (Nothing -40- [Bool]) = Nope
    main :41: Foo -42- True = g -43- (Just -45- Bool -44- True)
  in main

### Constraints ###

[] -> [41]
[5] -> [7,9,31,42]
[7] -> [5,31]
[9] -> [5,31]
[11] -> [14,18,21,30]
[13] -> [27,40]
[14] -> [11,21,30]
[16] -> [25,35,38,45]
[17] -> [24,34,37,44]
[18] -> [11,21,30]
[19] -> [3,12,15,22,23,26]
[19,23,24] -> [22]
[19,23,25] -> [1]
[19,26,27] -> [1]
[20] -> [23,26,32]
[21] -> [11,14,18,30]
[22] -> [19,23,24]
[23] -> [20]
[24] -> [17]
[25] -> [16]
[26] -> [20]
[27] -> [13]
[28] -> [2,3,6,8,12,15,33,34,36,37,39]
[28,33,35] -> [1]
[28,36,38] -> [1]
[28,39,40] -> [1]
[29] -> [33,36,39,43]
[30] -> [11,14,18,21]
[31] -> [5,7,9,42]
[32] -> [20]
[33] -> [29]
[34] -> [17]
[35] -> [16]
[36] -> [29]
[37] -> [17]
[38] -> [16]
[39] -> [29]
[40] -> [13]
[41] -> [28]
[41,43] -> [15]
[41,43,44] -> [2]
[41,43,45] -> [1]
[42] -> [5,31]
[43] -> [29]
[44] -> [17]
[45] -> [16]

### Solution ###

[2,3,6,8,12,15,17,24,28,29,33,34,36,37,39,41,43,44,R]

### Annotated ###

  let
    constructor Bool :E: Type
    constructor True :R: Bool
    constructor False :R: Bool
    constructor Foo :E: (_x0 :E: Bool) -> Type
    constructor Yeah :R: Foo -E- True
    constructor Nope :R: Foo -E- False
    constructor Maybe :E: (_x1 :E: Type) -> Type
    constructor Nothing :R: (a :E: Type) -> Maybe -E- a
    constructor Just :R: (a :E: Type) -> (x :R: a) -> Maybe -E- a
    f :E: (x :E: Maybe -E- Bool) -> Bool 
      b :E: Bool
        f -E- (Just -E- [Bool] -R- b) = b
      f -E- (Nothing -E- [Bool]) = False
    g :R: (x :R: Maybe -E- Bool) -> Foo -E- (f -E- x) 
      g -R- (Just -E- [Bool] -R- True) = Yeah
      g -R- (Just -E- [Bool] -R- False) = Nope
      g -R- (Nothing -E- [Bool]) = Nope
    main :R: Foo -E- True = g -R- (Just -E- Bool -R- True)
  in main

### Specialised ###

  let
    constructor Bool :E: Type
    constructor True :R: Bool
    constructor False :R: Bool
    constructor Foo :E: (_x0 :E: Bool) -> Type
    constructor Yeah :R: Foo -E- True
    constructor Nope :R: Foo -E- False
    constructor Maybe :E: (_x1 :E: Type) -> Type
    constructor Nothing :R: (a :E: Type) -> Maybe -E- a
    constructor Just :R: (a :E: Type) -> (x :R: a) -> Maybe -E- a
    f :E: (x :E: Maybe -E- Bool) -> Bool 
      b :E: Bool
        f -E- (Just -E- [Bool] -R- b) = b
      f -E- (Nothing -E- [Bool]) = False
    g :R: (x :R: Maybe -E- Bool) -> Foo -E- (f -E- x) 
      g -R- (Just -E- [Bool] -R- True) = Yeah
      g -R- (Just -E- [Bool] -R- False) = Nope
      g -R- (Nothing -E- [Bool]) = Nope
    main :R: Foo -E- True = g -R- (Just -E- Bool -R- True)
  in main

### Final annotation ###

  let
    constructor Bool :E: Type
    constructor True :R: Bool
    constructor False :R: Bool
    constructor Foo :E: (_x0 :E: Bool) -> Type
    constructor Yeah :R: Foo -E- True
    constructor Nope :R: Foo -E- False
    constructor Maybe :E: (_x1 :E: Type) -> Type
    constructor Nothing :R: (a :E: Type) -> Maybe -E- a
    constructor Just :R: (a :E: Type) -> (x :R: a) -> Maybe -E- a
    f :E: (x :E: Maybe -E- Bool) -> Bool 
      b :E: Bool
        f -E- (Just -E- [Bool] -R- b) = b
      f -E- (Nothing -E- [Bool]) = False
    g :R: (x :R: Maybe -E- Bool) -> Foo -E- (f -E- x) 
      g -R- (Just -E- [Bool] -R- True) = Yeah
      g -R- (Just -E- [Bool] -R- False) = Nope
      g -R- (Nothing -E- [Bool]) = Nope
    main :R: Foo -E- True = g -R- (Just -E- Bool -R- True)
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor True : Bool
    constructor False : Bool
    constructor Yeah : Foo
    constructor Nope : Foo
    constructor Nothing : Maybe
    constructor Just : (x) -> Maybe
    g 
      g (Just True) = Yeah
      g (Just False) = Nope
      g Nothing = Nope
    main = g (Just True)
  in main

### Intermediate representation ###

let True = constructor 0
  in let False = constructor 0
    in let Yeah = constructor 0
      in let Nope = constructor 0
        in let Nothing = constructor 0
          in let Just = constructor 1
            in let g = \_pv0.
              case _pv0 of
                Just _pv1 => case _pv1 of
                  False => Nope
                  True => Yeah
                Nothing => Nope
              in let main = (g (Just True))
                in main

### Normal forms ###

unerased:
  
  let
    constructor Bool : Type
    constructor True : Bool
    constructor Foo : (_x0 : Bool) -> Type
    constructor Yeah : Foo True
  in Yeah

erased:
  
  let constructor Yeah : Foo
  in Yeah

