-- vim: ft=ttstar

### Desugared ###

  let
    postulate Void : Type
    constructor Maybe : (_x0 : Type) -> Type
    constructor Just : (a : Type) -> (x : a) -> Maybe a
    constructor Nothing : (a : Type) -> Maybe a
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    retTy : (x : Maybe Bool) -> Type 
      t : Bool
        retTy (Just [Bool] t) = Bool
      retTy (Nothing [Bool]) = Type
    f : (x : Maybe Bool) -> retTy x 
      b : Bool
        f (Just [Bool] b) = b
      f (Nothing [Bool]) = Bool
    main : Bool = f (Just Bool False)
  in main

### Elaborated ###

  let
    postulate Void : Type
    constructor Maybe : (_x0 : Type) -> Type
    constructor Just : (a : Type) -> (x : a) -> Maybe a
    constructor Nothing : (a : Type) -> Maybe a
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    retTy : (x : Maybe Bool) -> Type 
      t : Bool
        retTy (Just [Bool] t) = Bool
      retTy (Nothing [Bool]) = Type
    f : (x : Maybe Bool) -> retTy x 
      b : Bool
        f (Just [Bool] b) = b
      f (Nothing [Bool]) = Bool
    main : Bool = f (Just Bool False)
  in main

### Evarified ###

  let
    postulate Void :1: Type
    constructor Maybe :2: (_x0 :3: Type) -> Type
    constructor Just :4: (a :5: Type) -> (x :6: a) -> Maybe -7- a
    constructor Nothing :8: (a :9: Type) -> Maybe -10- a
    constructor Bool :11: Type
    constructor True :12: Bool
    constructor False :13: Bool
    retTy :14: (x :15: Maybe -16- Bool) -> Type 
      t :17: Bool
        retTy -18- (Just -20- [Bool] -19- t) = Bool
      retTy -21- (Nothing -22- [Bool]) = Type
    f :23: (x :24: Maybe -25- Bool) -> retTy -26- x 
      b :27: Bool
        f -28- (Just -30- [Bool] -29- b) = b
      f -31- (Nothing -32- [Bool]) = Bool
    main :33: Bool = f -34- (Just -36- Bool -35- False)
  in main

### Constraints ###

[] -> [33]
[3] -> [7,10,16,25]
[5] -> [20,30,36]
[6] -> [19,29,35]
[7] -> [3,16,25]
[9] -> [22,32]
[10] -> [3,16,25]
[14] -> [4,8,11,18,21]
[14,18,19] -> [17]
[14,18,20] -> [11]
[14,21,22] -> [11]
[15] -> [18,21,26]
[16] -> [3,7,10,25]
[17] -> [14,18,19]
[18] -> [15]
[19] -> [6]
[20] -> [5]
[21] -> [15]
[22] -> [9]
[23] -> [4,8,11,27,28,31]
[23,28,29] -> [27]
[23,28,30] -> [11]
[23,31,32] -> [11]
[24] -> [28,31,34]
[25] -> [3,7,10,16]
[26] -> [15]
[27] -> [23,28,29]
[28] -> [24]
[29] -> [6]
[30] -> [5]
[31] -> [24]
[32] -> [9]
[33] -> [23]
[33,34] -> [4]
[33,34,35] -> [13]
[33,34,36] -> [11]
[34] -> [24]
[35] -> [6]
[36] -> [5]

### Solution ###

[4,6,8,11,13,19,23,24,27,28,29,31,33,34,35,R]

### Annotated ###

  let
    postulate Void :E: Type
    constructor Maybe :E: (_x0 :E: Type) -> Type
    constructor Just :R: (a :E: Type) -> (x :R: a) -> Maybe -E- a
    constructor Nothing :R: (a :E: Type) -> Maybe -E- a
    constructor Bool :R: Type
    constructor True :E: Bool
    constructor False :R: Bool
    retTy :E: (x :E: Maybe -E- Bool) -> Type 
      t :E: Bool
        retTy -E- (Just -E- [Bool] -R- t) = Bool
      retTy -E- (Nothing -E- [Bool]) = Type
    f :R: (x :R: Maybe -E- Bool) -> retTy -E- x 
      b :R: Bool
        f -R- (Just -E- [Bool] -R- b) = b
      f -R- (Nothing -E- [Bool]) = Bool
    main :R: Bool = f -R- (Just -E- Bool -R- False)
  in main

### Specialised ###

  let
    postulate Void :E: Type
    constructor Maybe :E: (_x0 :E: Type) -> Type
    constructor Just :R: (a :E: Type) -> (x :R: a) -> Maybe -E- a
    constructor Nothing :R: (a :E: Type) -> Maybe -E- a
    constructor Bool :R: Type
    constructor True :E: Bool
    constructor False :R: Bool
    retTy :E: (x :E: Maybe -E- Bool) -> Type 
      t :E: Bool
        retTy -E- (Just -E- [Bool] -R- t) = Bool
      retTy -E- (Nothing -E- [Bool]) = Type
    f :R: (x :R: Maybe -E- Bool) -> retTy -E- x 
      b :R: Bool
        f -R- (Just -E- [Bool] -R- b) = b
      f -R- (Nothing -E- [Bool]) = Bool
    main :R: Bool = f -R- (Just -E- Bool -R- False)
  in main

### Final annotation ###

  let
    postulate Void :E: Type
    constructor Maybe :E: (_x0 :E: Type) -> Type
    constructor Just :R: (a :E: Type) -> (x :R: a) -> Maybe -E- a
    constructor Nothing :R: (a :E: Type) -> Maybe -E- a
    constructor Bool :R: Type
    constructor True :E: Bool
    constructor False :R: Bool
    retTy :E: (x :E: Maybe -E- Bool) -> Type 
      t :E: Bool
        retTy -E- (Just -E- [Bool] -R- t) = Bool
      retTy -E- (Nothing -E- [Bool]) = Type
    f :R: (x :R: Maybe -E- Bool) -> retTy -E- x 
      b :R: Bool
        f -R- (Just -E- [Bool] -R- b) = b
      f -R- (Nothing -E- [Bool]) = Bool
    main :R: Bool = f -R- (Just -E- Bool -R- False)
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor Just : (x) -> Maybe
    constructor Nothing : Maybe
    constructor Bool : Type
    constructor False : Bool
    f 
      f (Just b) = b
      f Nothing = Bool
    main = f (Just False)
  in main

### Intermediate representation ###

let Just = constructor 1
  in let Nothing = constructor 0
    in let Bool = constructor 0
      in let False = constructor 0
        in let f = \_pv0.
          case _pv0 of
            Just _pv1 => _pv1
            Nothing => Bool
          in let main = (f (Just False))
            in main

### Normal forms ###

unerased:
  
  let
    constructor Bool : Type
    constructor False : Bool
  in False

erased:
  
  let
    constructor Bool : Type
    constructor False : Bool
  in False

