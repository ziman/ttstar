-- vim: ft=ttstar

### Desugared ###

  let
    constructor TyEq : (_x0 : Type) -> (_x1 : Type) -> Type
    constructor Refl : (a : Type) -> TyEq a a
    coerce : (a : Type) -> (b : Type) -> (_x2 : TyEq a b) -> (_x3 : a) -> b 
      a : Type
        [coerce] a [a] ([Refl] [a]) = (\x : a. x)
    sym : (a : Type) -> (b : Type) -> (_x4 : TyEq a b) -> TyEq b a 
      a : Type
        [sym] a [a] ([Refl] [a]) = Refl a
    loopy : (a : Type) -> (b : Type) -> (_x5 : TyEq a (_x6 : a) -> b) -> b 
      a : Type b : Type pf : TyEq a (_x7 : a) -> b
        [loopy] a b pf = 
          let w : (_x8 : a) -> b = (\x : a. coerce a (y : a) -> b pf x x)
          in w (coerce (_x9 : a) -> b a (sym a (_x10 : a) -> b pf) w)
    main : (_x11 : TyEq Type (_x12 : Type) -> Type) -> Type = loopy Type Type
  in main

### Evarified ###

  let
    constructor TyEq :1: (_x0 :2: Type) -> (_x1 :3: Type) -> Type
    constructor Refl :4: (a :5: Type) -> TyEq -7- a -6- a
    coerce :8: (a :9: Type) -> (b :10: Type) -> (_x2 :11: TyEq -13- a -12- b) -> (_x3 :14: a) -> b 
      a :15: Type
        [coerce] -18- a -17- [a] -16- ([Refl] -19- [a]) = (\x :20: a. x)
    sym :21: (a :22: Type) -> (b :23: Type) -> (_x4 :24: TyEq -26- a -25- b) -> TyEq -28- b -27- a 
      a :29: Type
        [sym] -32- a -31- [a] -30- ([Refl] -33- [a]) = Refl -34- a
    loopy :35: (a :36: Type) -> (b :37: Type) -> (_x5 :38: TyEq -40- a -39- (_x6 :41: a) -> b) -> b 
      a :42: Type b :43: Type pf :44: TyEq -46- a -45- (_x7 :47: a) -> b
        [loopy] -50- a -49- b -48- pf = 
          let w :51: (_x8 :52: a) -> b = (\x :53: a. coerce -58- a -57- (y :59: a) -> b -56- pf -55- x -54- x)
          in w -60- (coerce -64- (_x9 :65: a) -> b -63- a -62- (sym -68- a -67- (_x10 :69: a) -> b -66- pf) -61- w)
    main :70: (_x11 :71: TyEq -73- Type -72- (_x12 :74: Type) -> Type) -> Type = loopy -76- Type -75- Type
  in main

### Constraints ###

[5,16] -> [19]
[5,16,60] -> [19]
[5,16,60,61] -> [19]
[5,30,60,62] -> [33]
[5,60,62] -> [34]
[6,16] -> [12]
[6,16,60] -> [12]
[6,16,60,61] -> [12]
[6,30,60,62] -> [25]
[6,60,62] -> [27]
[7,16] -> [13]
[7,16,60] -> [13]
[7,16,60,61] -> [13]
[7,30,60,62] -> [26]
[7,60,62] -> [28]
[9] -> [58]
[9,60] -> [64]
[9,60,61] -> [58]
[9,60,61,R] -> [18]
[9,60,R] -> [18]
[9,R] -> [18]
[10] -> [57]
[10,60] -> [63]
[10,60,61] -> [57]
[10,60,61,R] -> [17]
[10,60,R] -> [17]
[10,R] -> [17]
[11] -> [56]
[11,60] -> [62]
[11,60,61] -> [56]
[11,60,61,R] -> [16]
[11,60,R] -> [16]
[11,R] -> [16]
[12,16] -> [6]
[12,16,60] -> [6]
[12,16,60,61] -> [6]
[12,56] -> [45]
[12,56,60,61] -> [45]
[12,60,62] -> [27]
[13,16] -> [7]
[13,16,60] -> [7]
[13,16,60,61] -> [7]
[13,56] -> [46]
[13,56,60,61] -> [46]
[13,60,62] -> [28]
[14] -> [20,55]
[14,60] -> [20,61]
[14,60,61] -> [20,55]
[15] -> [18]
[15,60] -> [18]
[15,60,61] -> [18]
[16] -> [R]
[16,19] -> [5]
[16,19,60] -> [5]
[16,19,60,61] -> [5]
[16,60] -> [R]
[16,60,61] -> [R]
[16,60,61,R] -> [4,11]
[16,60,R] -> [4,11]
[16,R] -> [4,11]
[17] -> [R]
[17,60] -> [R]
[17,60,61] -> [R]
[17,60,61,R] -> [10,15]
[17,60,R] -> [10,15]
[17,R] -> [10,15]
[18] -> [R]
[18,60] -> [R]
[18,60,61] -> [R]
[18,60,61,R] -> [9]
[18,60,R] -> [9]
[18,R] -> [9]
[19] -> [16]
[19,60] -> [16]
[19,60,61] -> [16]
[19,60,61,R] -> [15]
[19,60,R] -> [15]
[19,R] -> [15]
[20] -> [14]
[20,60] -> [14]
[20,60,61] -> [14]
[22,60,62] -> [68]
[22,60,62,R] -> [32]
[23,60,62] -> [67]
[23,60,62,R] -> [31]
[24,60,62] -> [66]
[24,60,62,R] -> [30]
[25,30,60,62] -> [6]
[25,60,62,66] -> [45]
[26,30,60,62] -> [7]
[26,60,62,66] -> [46]
[27,60,62] -> [6,12]
[28,60,62] -> [7,13]
[28,60,62,65] -> [69]
[28,60,62,69] -> [65]
[29,60,62] -> [32]
[30,33,60,62] -> [5]
[30,60,62] -> [R]
[30,60,62,R] -> [4,24]
[31,60,62] -> [R]
[31,60,62,R] -> [23,29]
[32,60,62] -> [R]
[32,60,62,R] -> [22]
[33,60,62] -> [30]
[33,60,62,R] -> [29]
[34,60,62] -> [5]
[34,60,62,R] -> [29]
[36] -> [76]
[36,R] -> [50]
[37] -> [75]
[37,R] -> [49]
[38] -> [71]
[38,R] -> [48]
[39,48] -> [45]
[39,71] -> [72]
[40,48] -> [46]
[40,71] -> [73]
[41,45,48] -> [47]
[41,71,72] -> [74]
[42] -> [50]
[43] -> [49]
[44] -> [48]
[45,47,48] -> [41]
[45,47,56] -> [59]
[45,47,56,60,61] -> [59]
[45,47,60,62,66] -> [69]
[45,48] -> [39]
[45,56] -> [12]
[45,56,59] -> [47]
[45,56,59,60,61] -> [47]
[45,56,60,61] -> [12]
[45,60,62,66] -> [25]
[45,60,62,66,69] -> [47]
[46,48] -> [40]
[46,56] -> [13]
[46,56,60,61] -> [13]
[46,60,62,66] -> [26]
[48] -> [R]
[48,R] -> [38]
[49] -> [R]
[49,R] -> [37]
[50] -> [R]
[50,R] -> [36]
[52] -> [53,60]
[52,60,61] -> [53,65]
[53] -> [52]
[53,60,61] -> [52]
[54] -> [59]
[54,60,61] -> [59]
[54,60,61,R] -> [53]
[54,R] -> [53]
[55] -> [14]
[55,60,61] -> [14]
[55,60,61,R] -> [53]
[55,R] -> [53]
[56] -> [11]
[56,60,61] -> [11]
[56,60,61,R] -> [44]
[56,R] -> [44]
[57] -> [10]
[57,60,61] -> [10]
[57,60,61,R] -> [43]
[57,R] -> [43]
[58] -> [9]
[58,60,61] -> [9]
[58,60,61,R] -> [42]
[58,R] -> [42]
[59] -> [54]
[59,60,61] -> [54]
[60] -> [52]
[60,61] -> [14]
[60,61,65] -> [52]
[60,61,R] -> [8,20,51]
[60,62] -> [11]
[60,62,66] -> [24]
[60,62,66,R] -> [44]
[60,62,67] -> [23]
[60,62,67,R] -> [43]
[60,62,68] -> [22]
[60,62,68,R] -> [42]
[60,62,R] -> [4,21]
[60,63] -> [10]
[60,63,R] -> [42]
[60,64] -> [9]
[60,64,R] -> [43]
[60,R] -> [8,20]
[71] -> [38]
[71,72] -> [39]
[71,72,74] -> [41]
[71,73] -> [40]
[75] -> [37]
[75,R] -> [R]
[76] -> [36]
[76,R] -> [R]
[R] -> [8,20,35,51,70]

### Solution ###

[8,14,20,35,51,52,53,55,60,61,65,70,R]

### Annotated ###

  let
    constructor TyEq :E: (_x0 :E: Type) -> (_x1 :E: Type) -> Type
    constructor Refl :E: (a :E: Type) -> TyEq -E- a -E- a
    coerce :R: (a :E: Type) -> (b :E: Type) -> (_x2 :E: TyEq -E- a -E- b) -> (_x3 :R: a) -> b 
      a :E: Type
        [coerce] -E- a -E- [a] -E- ([Refl] -E- [a]) = (\x :R: a. x)
    sym :E: (a :E: Type) -> (b :E: Type) -> (_x4 :E: TyEq -E- a -E- b) -> TyEq -E- b -E- a 
      a :E: Type
        [sym] -E- a -E- [a] -E- ([Refl] -E- [a]) = Refl -E- a
    loopy :R: (a :E: Type) -> (b :E: Type) -> (_x5 :E: TyEq -E- a -E- (_x6 :E: a) -> b) -> b 
      a :E: Type b :E: Type pf :E: TyEq -E- a -E- (_x7 :E: a) -> b
        [loopy] -E- a -E- b -E- pf = 
          let w :R: (_x8 :R: a) -> b = (\x :R: a. coerce -E- a -E- (y :E: a) -> b -E- pf -R- x -E- x)
          in w -R- (coerce -E- (_x9 :R: a) -> b -E- a -E- (sym -E- a -E- (_x10 :E: a) -> b -E- pf) -R- w)
    main :R: (_x11 :E: TyEq -E- Type -E- (_x12 :E: Type) -> Type) -> Type = loopy -E- Type -E- Type
  in main

### Specialised ###

  let
    constructor TyEq :E: (_x0 :E: Type) -> (_x1 :E: Type) -> Type
    constructor Refl :E: (a :E: Type) -> TyEq -E- a -E- a
    coerce :R: (a :E: Type) -> (b :E: Type) -> (_x2 :E: TyEq -E- a -E- b) -> (_x3 :R: a) -> b 
      a :E: Type
        [coerce] -E- a -E- [a] -E- ([Refl] -E- [a]) = (\x :R: a. x)
    sym :E: (a :E: Type) -> (b :E: Type) -> (_x4 :E: TyEq -E- a -E- b) -> TyEq -E- b -E- a 
      a :E: Type
        [sym] -E- a -E- [a] -E- ([Refl] -E- [a]) = Refl -E- a
    loopy :R: (a :E: Type) -> (b :E: Type) -> (_x5 :E: TyEq -E- a -E- (_x6 :E: a) -> b) -> b 
      a :E: Type b :E: Type pf :E: TyEq -E- a -E- (_x7 :E: a) -> b
        [loopy] -E- a -E- b -E- pf = 
          let w :R: (_x8 :R: a) -> b = (\x :R: a. coerce -E- a -E- (y :E: a) -> b -E- pf -R- x -E- x)
          in w -R- (coerce -E- (_x9 :R: a) -> b -E- a -E- (sym -E- a -E- (_x10 :E: a) -> b -E- pf) -R- w)
    main :R: (_x11 :E: TyEq -E- Type -E- (_x12 :E: Type) -> Type) -> Type = loopy -E- Type -E- Type
  in main

### Final annotation ###

  let
    constructor TyEq :E: (_x0 :E: Type) -> (_x1 :E: Type) -> Type
    constructor Refl :E: (a :E: Type) -> TyEq -E- a -E- a
    coerce :R: (a :E: Type) -> (b :E: Type) -> (_x2 :E: TyEq -E- a -E- b) -> (_x3 :R: a) -> b 
      a :E: Type
        [coerce] -E- a -E- [a] -E- ([Refl] -E- [a]) = (\x :R: a. x)
    sym :E: (a :E: Type) -> (b :E: Type) -> (_x4 :E: TyEq -E- a -E- b) -> TyEq -E- b -E- a 
      a :E: Type
        [sym] -E- a -E- [a] -E- ([Refl] -E- [a]) = Refl -E- a
    loopy :R: (a :E: Type) -> (b :E: Type) -> (_x5 :E: TyEq -E- a -E- (_x6 :E: a) -> b) -> b 
      a :E: Type b :E: Type pf :E: TyEq -E- a -E- (_x7 :E: a) -> b
        [loopy] -E- a -E- b -E- pf = 
          let w :R: (_x8 :R: a) -> b = (\x :R: a. coerce -E- a -E- (y :E: a) -> b -E- pf -R- x -E- x)
          in w -R- (coerce -E- (_x9 :R: a) -> b -E- a -E- (sym -E- a -E- (_x10 :E: a) -> b -E- pf) -R- w)
    main :R: (_x11 :E: TyEq -E- Type -E- (_x12 :E: Type) -> Type) -> Type = loopy -E- Type -E- Type
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    coerce = (\x. x)
    loopy = 
      let w = (\x. coerce x)
      in w (coerce w)
    main = loopy
  in main

### Normal forms ###

unerased:
  
  let
    constructor TyEq : (_x0 : Type) -> (_x1 : Type) -> Type
    constructor Refl : (a : Type) -> TyEq a a
    coerce : (a : Type) -> (b : Type) -> (_x2 : TyEq a b) -> (_x3 : a) -> b 
      a : Type
        [coerce] a [a] ([Refl] [a]) = (\x : a. x)
    sym : (a : Type) -> (b : Type) -> (_x4 : TyEq a b) -> TyEq b a 
      a : Type
        [sym] a [a] ([Refl] [a]) = Refl a
    loopy : (a : Type) -> (b : Type) -> (_x5 : TyEq a (_x6 : a) -> b) -> b 
      a : Type b : Type pf : TyEq a (_x7 : a) -> b
        [loopy] a b pf = 
          let w : (_x8 : a) -> b = (\x : a. coerce a (y : a) -> b pf x x)
          in w (coerce (_x9 : a) -> b a (sym a (_x10 : a) -> b pf) w)
  in loopy Type Type

erased:
  (\x. x)

