(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Nat `(Nat))
    (Z `(Z))
    (S (lambda (x)
      `(S ,x)))
    (Bool `(Bool))
    (True `(True))
    (False `(False))
    (not_TT (lambda (_e0)
      (match (list _e0)
        ((('True))
          False)
        ((('False))
          True))))
    (isZero (lambda (_e0)
      (match (list _e0)
        ((('Z))
          True)
        ((('S _))
          False))))
    (f (lambda (_e0)
      (match (list _e0)
        ((('Bool))
          not_TT)
        ((('Nat))
          isZero)
        ((_)
          (lambda (x)
            False)))))
    (main ((f Bool) False))
  )
    main))
