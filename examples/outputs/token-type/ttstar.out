-- vim: ft=ttstar

### Desugared ###

  let
    constructor TyEq : (_x0 : Type) -> (_x1 : Type) -> Type
    constructor Refl : (a : Type) -> TyEq a a
    coerce : (a : Type) -> (b : Type) -> (_x2 : TyEq a b) -> (_x3 : a) -> b 
      a : Type
        coerce a [a] ([Refl] [a]) = (\x : a. x)
    sym : (a : Type) -> (b : Type) -> (_x4 : TyEq a b) -> TyEq b a 
      a : Type
        sym a [a] ([Refl] [a]) = Refl a
    loopy : (a : Type) -> (b : Type) -> (_x5 : TyEq a (_x6 : a) -> b) -> b 
      a : Type b : Type pf : TyEq a (_x7 : a) -> b
        loopy a b pf = 
          let w : (_x8 : a) -> b = (\x : a. coerce a (y : a) -> b pf x x)
          in w (coerce (_x9 : a) -> b a (sym a (_x10 : a) -> b pf) w)
    main : Type = Type
  in main

### Evarified ###

  let
    constructor TyEq :1: (_x0 :2: Type) -> (_x1 :3: Type) -> Type
    constructor Refl :4: (a :5: Type) -> TyEq -7- a -6- a
    coerce :8: (a :9: Type) -> (b :10: Type) -> (_x2 :11: TyEq -13- a -12- b) -> (_x3 :14: a) -> b 
      a :15: Type
        coerce -18- a -17- [a] -16- ([Refl] -19- [a]) = (\x :20: a. x)
    sym :21: (a :22: Type) -> (b :23: Type) -> (_x4 :24: TyEq -26- a -25- b) -> TyEq -28- b -27- a 
      a :29: Type
        sym -32- a -31- [a] -30- ([Refl] -33- [a]) = Refl -34- a
    loopy :35: (a :36: Type) -> (b :37: Type) -> (_x5 :38: TyEq -40- a -39- (_x6 :41: a) -> b) -> b 
      a :42: Type b :43: Type pf :44: TyEq -46- a -45- (_x7 :47: a) -> b
        loopy -50- a -49- b -48- pf = 
          let w :51: (_x8 :52: a) -> b = (\x :53: a. coerce -58- a -57- (y :59: a) -> b -56- pf -55- x -54- x)
          in w -60- (coerce -64- (_x9 :65: a) -> b -63- a -62- (sym -68- a -67- (_x10 :69: a) -> b -66- pf) -61- w)
    main :70: Type = Type
  in main

### Constraints ###

[] -> [70]
[2] -> [7,13,26,28,40,46]
[3] -> [6,12,25,27,39,45]
[5] -> [19,33,34]
[6] -> [3,12,25,27]
[7] -> [2]
[8] -> [20]
[8,16] -> [4]
[8,16,19] -> [15]
[8,17] -> [15]
[8,18] -> [15]
[9] -> [18,58,64]
[10] -> [17,57,63]
[11] -> [16,56,62]
[12] -> [3,6,27,45]
[13] -> [2]
[14] -> [20,55,61]
[15] -> [8,18]
[16] -> [11]
[17] -> [10]
[18] -> [9]
[19] -> [5]
[20] -> [14]
[21] -> [4]
[21,30] -> [4]
[21,30,33] -> [29]
[21,31] -> [29]
[21,32] -> [29]
[21,34] -> [29]
[22] -> [32,68]
[23] -> [31,67]
[24] -> [30,66]
[25] -> [3,6,45]
[26] -> [2]
[27] -> [3,6,12]
[28] -> [2]
[29] -> [21,32]
[30] -> [24]
[31] -> [23]
[32] -> [22]
[33] -> [5]
[34] -> [5]
[35] -> [51]
[35,48] -> [44]
[35,49] -> [43]
[35,50] -> [42]
[35,60] -> [8]
[35,60,61] -> [51]
[35,60,62] -> [21]
[35,60,62,66] -> [44]
[35,60,62,67] -> [43]
[35,60,62,68] -> [42]
[35,60,63] -> [42]
[35,60,64] -> [43]
[36] -> [50]
[37] -> [49]
[38] -> [48]
[39] -> [3,45]
[40] -> [2]
[42] -> [35,50]
[43] -> [35,49]
[44] -> [35,48]
[45] -> [3,12,25,39]
[46] -> [2]
[48] -> [38]
[49] -> [37]
[50] -> [36]
[51] -> [8]
[51,54] -> [53]
[51,55] -> [53]
[51,56] -> [44]
[51,57] -> [43]
[51,58] -> [42]
[52] -> [53,60,65]
[53] -> [52]
[54] -> [59]
[55] -> [14]
[56] -> [11]
[57] -> [10]
[58] -> [9]
[59] -> [54]
[60] -> [52]
[61] -> [14]
[62] -> [11]
[63] -> [10]
[64] -> [9]
[65] -> [52]
[66] -> [24]
[67] -> [23]
[68] -> [22]

### Solution ###

[70,R]

### Annotated ###

  let
    constructor TyEq :E: (_x0 :E: Type) -> (_x1 :E: Type) -> Type
    constructor Refl :E: (a :E: Type) -> TyEq -E- a -E- a
    coerce :E: (a :E: Type) -> (b :E: Type) -> (_x2 :E: TyEq -E- a -E- b) -> (_x3 :E: a) -> b 
      a :E: Type
        coerce -E- a -E- [a] -E- ([Refl] -E- [a]) = (\x :E: a. x)
    sym :E: (a :E: Type) -> (b :E: Type) -> (_x4 :E: TyEq -E- a -E- b) -> TyEq -E- b -E- a 
      a :E: Type
        sym -E- a -E- [a] -E- ([Refl] -E- [a]) = Refl -E- a
    loopy :E: (a :E: Type) -> (b :E: Type) -> (_x5 :E: TyEq -E- a -E- (_x6 :E: a) -> b) -> b 
      a :E: Type b :E: Type pf :E: TyEq -E- a -E- (_x7 :E: a) -> b
        loopy -E- a -E- b -E- pf = 
          let w :E: (_x8 :E: a) -> b = (\x :E: a. coerce -E- a -E- (y :E: a) -> b -E- pf -E- x -E- x)
          in w -E- (coerce -E- (_x9 :E: a) -> b -E- a -E- (sym -E- a -E- (_x10 :E: a) -> b -E- pf) -E- w)
    main :R: Type = Type
  in main

### Specialised ###

  let
    constructor TyEq :E: (_x0 :E: Type) -> (_x1 :E: Type) -> Type
    constructor Refl :E: (a :E: Type) -> TyEq -E- a -E- a
    coerce :E: (a :E: Type) -> (b :E: Type) -> (_x2 :E: TyEq -E- a -E- b) -> (_x3 :E: a) -> b 
      a :E: Type
        coerce -E- a -E- [a] -E- ([Refl] -E- [a]) = (\x :E: a. x)
    sym :E: (a :E: Type) -> (b :E: Type) -> (_x4 :E: TyEq -E- a -E- b) -> TyEq -E- b -E- a 
      a :E: Type
        sym -E- a -E- [a] -E- ([Refl] -E- [a]) = Refl -E- a
    loopy :E: (a :E: Type) -> (b :E: Type) -> (_x5 :E: TyEq -E- a -E- (_x6 :E: a) -> b) -> b 
      a :E: Type b :E: Type pf :E: TyEq -E- a -E- (_x7 :E: a) -> b
        loopy -E- a -E- b -E- pf = 
          let w :E: (_x8 :E: a) -> b = (\x :E: a. coerce -E- a -E- (y :E: a) -> b -E- pf -E- x -E- x)
          in w -E- (coerce -E- (_x9 :E: a) -> b -E- a -E- (sym -E- a -E- (_x10 :E: a) -> b -E- pf) -E- w)
    main :R: Type = Type
  in main

### Final annotation ###

  let
    constructor TyEq :E: (_x0 :E: Type) -> (_x1 :E: Type) -> Type
    constructor Refl :E: (a :E: Type) -> TyEq -E- a -E- a
    coerce :E: (a :E: Type) -> (b :E: Type) -> (_x2 :E: TyEq -E- a -E- b) -> (_x3 :E: a) -> b 
      a :E: Type
        coerce -E- a -E- [a] -E- ([Refl] -E- [a]) = (\x :E: a. x)
    sym :E: (a :E: Type) -> (b :E: Type) -> (_x4 :E: TyEq -E- a -E- b) -> TyEq -E- b -E- a 
      a :E: Type
        sym -E- a -E- [a] -E- ([Refl] -E- [a]) = Refl -E- a
    loopy :E: (a :E: Type) -> (b :E: Type) -> (_x5 :E: TyEq -E- a -E- (_x6 :E: a) -> b) -> b 
      a :E: Type b :E: Type pf :E: TyEq -E- a -E- (_x7 :E: a) -> b
        loopy -E- a -E- b -E- pf = 
          let w :E: (_x8 :E: a) -> b = (\x :E: a. coerce -E- a -E- (y :E: a) -> b -E- pf -E- x -E- x)
          in w -E- (coerce -E- (_x9 :E: a) -> b -E- a -E- (sym -E- a -E- (_x10 :E: a) -> b -E- pf) -E- w)
    main :R: Type = Type
  in main

### Verification ###

Verification successful.

### Pruned ###

  let main = Type
  in main

### Intermediate representation ###

let main = Type
  in main

### Normal forms ###

unerased:
  Type

erased:
  Type

