-- vim: ft=ttstar
  let
    postulate N : Type
    postulate Z : N
    postulate S : (_x0) -> N
    postulate B : Type
    postulate T : B
    postulate F : B
    postulate List : Type
    postulate Cons : (_x1) -> (_x2) -> List
    postulate Nil : List
    postulate Maybe : (_x3) -> Type
    postulate Nothing : (a) -> Maybe a
    postulate Just : (a) -> (x) -> Maybe a
    not 
       T = F
       F = T
    postulate Id : (a) -> (x) -> (y) -> Type
    postulate Refl : (a) -> (x) -> Id a x x
    subst 
       a p x [_] [_] = (\w. w)
    cong 
       a b f x [_] [_] = Refl b (f x)
    one = (\x. Cons x Nil)
    app 
       Nil ys = ys
       (Cons x xs) ys = Cons x (app xs ys)
    appRightNeutral 
       Nil = Refl List Nil
       (Cons x xs) = cong List List (Cons x) xs (app xs Nil) (appRightNeutral xs)
    appAssoc 
       Nil ys zs = Refl List (app ys zs)
       (Cons x xs) ys zs = cong List List (Cons x) (app (app xs ys) zs) (app xs (app ys zs)) (appAssoc xs ys zs)
    postulate Rev : (_x12) -> Type
    postulate RNil : Rev Nil
    postulate RSnoc : (xs) -> (x) -> (rxs) -> Rev (app xs (one x))
    rev' 
       xs rxs Nil = subst List Rev xs (app xs Nil) (appRightNeutral xs) rxs
       xs rxs (Cons y ys) = subst List Rev (app (app xs (one y)) ys) (app xs (Cons y ys)) (appAssoc xs (one y) ys) (rev' (app xs (one y)) (RSnoc xs y rxs) ys)
    reverse' 
       [_] RNil = Nil
       [_] (RSnoc xs x rxs) = Cons x (reverse' xs rxs)
    postulate V : (_x13) -> Type
    postulate VNil : V Nil
    postulate VOne : (x) -> V (Cons x Nil)
    postulate VTwo : (x) -> (xs) -> (u) -> (y) -> V (Cons x (app xs (one y)))
    length 
       Nil = Z
       (Cons x xs) = S (length xs)
    index 
       Z xs ys = Nil
       (S Z) (Cons x xs) (Cons y ys) = Cons x Nil
       (S (S n)) (Cons x xs) (Cons y ys) = Cons x (app (index n xs ys) (one y))
       (S n) Nil Nil = Nil
    build 
       Z xs ys = VNil
       (S Z) (Cons x xs) (Cons y ys) = VOne x
       (S (S n)) (Cons x xs) (Cons y ys) = VTwo x (index n xs ys) (build n xs ys) y
       (S n) Nil Nil = VNil
    postulate IsPalindrome : (_x18) -> Type
    postulate PNil : IsPalindrome Nil
    postulate POne : (b) -> IsPalindrome (Cons b Nil)
    postulate PTwo : (b) -> (xs) -> (pf) -> IsPalindrome (Cons b (app xs (one b)))
    decEq 
       T T = Just (Id B T T) (Refl B T)
       F F = Just (Id B F F) (Refl B F)
       T F = Nothing (Id B T F)
       F T = Nothing (Id B F T)
    isPalinV 
       [_] VNil = Just (IsPalindrome Nil) PNil
       [_] (VOne x) = Just (IsPalindrome (Cons x Nil)) (POne x)
       [_] (VTwo x xs v y) = 
        let isPalinV' 
           x [_] xs v (Just [_] [_]) (Just [_] pfV) = Just (IsPalindrome (Cons x (app xs (one x)))) (PTwo x xs pfV)
           x y xs v pfB pfV = Nothing (IsPalindrome (Cons x (app xs (one y))))
        in isPalinV' x y xs v (decEq x y) (isPalinV xs v)
    genList 
       b Z = Nil
       b (S n) = Cons b (genList (not b) n)
    isJust 
       a (Just [_] x) = T
       a (Nothing [_]) = F
  in 
    let foreign inputSize
    in isJust (IsPalindrome (genList T inputSize)) (isPalinV (genList T inputSize) (build (length (genList T inputSize)) (genList T inputSize) (reverse' (genList T inputSize) (rev' Nil RNil (genList T inputSize)))))
