-- vim: ft=ttstar
  let
    constructor FZ : Fin
    constructor FS : (_x14) -> Fin
    constructor VN : Vect
    constructor VC : (x) -> (xs) -> Vect
    constructor V : (_x1) -> TT
    constructor Lam : (_x2) -> TT
    constructor App : (_x3) -> (_x4) -> TT
    env 
       (VC x _) FZ = x
       (VC _ xs) (FS i) = env xs i
    extendMap 
       _ FZ = FZ
       f (FS i) = FS (f i)
    mapVars 
       f (V i) = V (f i)
       f (Lam x) = Lam (mapVars (extendMap f) x)
       f (App g x) = App (mapVars f g) (mapVars f x)
    extendSubst 
       _ FZ = V FZ
       f (FS i) = mapVars FS (f i)
    substVars 
       f (V i) = f i
       f (Lam x) = Lam (substVars (extendSubst f) x)
       f (App g x) = App (substVars f g) (substVars f x)
    testTm = App (Lam (App (V FZ) (V (FS FZ)))) (Lam (App (V (FS FZ)) (V FZ)))
    example1 = substVars (env (VC (Lam (V FZ)) VN)) testTm
    substTop 
       tm FZ = tm
       _ (FS i) = V i
    nf 
       (V i) = V i
       (Lam x) = Lam (nf x)
       (App f x) = 
        let g 
           (Lam y) = nf (substVars (substTop (nf x)) y)
           f' = App f' (nf x)
        in g (nf f)
    example2 = nf testTm
    constructor R : (x) -> (y) -> Result
    main = R example1 example2
  in main
