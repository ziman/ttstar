-- vim: ft=ttstar

### Desugared ###

  let
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (n :R: Nat) -> Nat
    constructor Vec : (_x0 : Nat) -> (_x1 : Type) -> Type
    constructor VNil : (a : Type) -> Vec Z a
    constructor VCons : (a : Type) -> (n : Nat) -> (x : a) -> (xs : Vec n a) -> Vec (S n) a
    vlen : (a : Type) -> (n : Nat) -> (xs : Vec n a) -> Nat 
      a : Type
        [vlen] a [Z] (VNil [a]) = Z
      a : Type n : Nat x : a xs : Vec n a
        [vlen] a ([S] n) (VCons [a] [n] x xs) = S (vlen a n xs)
    testVec : Vec 2 Bool = VCons Bool 1 True (VCons Bool Z False (VNil Bool))
    main : Nat = vlen Bool 2 testVec
  in main

### Evarified ###

  let
    constructor Bool :1: Type
    constructor True :2: Bool
    constructor False :3: Bool
    constructor Nat :4: Type
    constructor Z :5: Nat
    constructor S :6: (n :R: Nat) -> Nat
    constructor Vec :7: (_x0 :8: Nat) -> (_x1 :9: Type) -> Type
    constructor VNil :10: (a :11: Type) -> Vec -13- Z -12- a
    constructor VCons :14: (a :15: Type) -> (n :16: Nat) -> (x :17: a) -> (xs :18: Vec -20- n -19- a) -> Vec -22- (S -23- n) -21- a
    vlen :24: (a :25: Type) -> (n :26: Nat) -> (xs :27: Vec -29- n -28- a) -> Nat 
      a :30: Type
        [vlen] -33- a -32- [Z] -31- (VNil -34- [a]) = Z
      a :35: Type n :36: Nat x :37: a xs :38: Vec -40- n -39- a
        [vlen] -43- a -42- ([S] -44- n) -41- (VCons -48- [a] -47- [n] -46- x -45- xs) = S -49- (vlen -52- a -51- n -50- xs)
    testVec :53: Vec -55- 2 -54- Bool = VCons -61- Bool -60- 1 -59- True -58- (VCons -66- Bool -65- Z -64- False -63- (VNil -67- Bool))
    main :68: Nat = vlen -71- Bool -70- 2 -69- testVec
  in main

### Constraints ###

[11,31] -> [34]
[11,58,63,69] -> [67]
[12,31] -> [28]
[12,58,63,69] -> [19]
[13,31] -> [29]
[13,58,63,69] -> [20]
[15,41] -> [48]
[15,58,69] -> [66]
[15,69] -> [61]
[16,41] -> [47]
[16,58,69] -> [65]
[16,69] -> [60]
[17,41] -> [46]
[17,58,69] -> [64]
[17,69] -> [59]
[18,41] -> [45]
[18,58,69] -> [63]
[18,69] -> [58]
[19,45] -> [39]
[19,58,63,69] -> [12]
[19,58,69] -> [21]
[20,45] -> [40]
[20,58,63,69] -> [13]
[20,58,69] -> [22]
[21,41] -> [28]
[21,58,69] -> [19]
[21,69] -> [54]
[22,23,41] -> [44]
[22,23,58,69] -> [62]
[22,41] -> [29]
[22,41,44] -> [23]
[22,58,62,69] -> [23]
[22,58,69] -> [20]
[22,69] -> [55]
[23,55,69] -> [56]
[25] -> [71]
[25,49] -> [52]
[25,R] -> [33,43]
[26] -> [70]
[26,49] -> [51]
[26,R] -> [32,42]
[27] -> [69]
[27,49] -> [50]
[27,R] -> [31,41]
[28,31] -> [12]
[28,41] -> [21]
[28,49,50] -> [39]
[28,69] -> [54]
[29,31] -> [13]
[29,41] -> [22]
[29,49,50] -> [40]
[29,69] -> [55]
[30] -> [33]
[31] -> [R]
[31,34] -> [11]
[31,R] -> [27]
[32] -> [R]
[32,R] -> [5,26]
[33] -> [R]
[33,R] -> [25]
[34] -> [31]
[34,R] -> [30]
[35] -> [43]
[36] -> [44]
[37] -> [46]
[38] -> [45]
[39,45] -> [19]
[39,49,50] -> [28]
[40,45] -> [20]
[40,49,50] -> [29]
[41] -> [R]
[41,45] -> [18]
[41,46] -> [17]
[41,47] -> [16]
[41,48] -> [15]
[41,R] -> [27]
[42] -> [R]
[42,44] -> [R]
[42,R] -> [6,26,44]
[43] -> [R]
[43,R] -> [25]
[44] -> [42]
[45] -> [41]
[46] -> [41]
[47] -> [41]
[47,R] -> [36]
[48] -> [41]
[48,R] -> [35]
[49] -> [R]
[49,50] -> [27]
[49,50,R] -> [38]
[49,51] -> [26]
[49,51,R] -> [36]
[49,52] -> [25]
[49,52,R] -> [35]
[49,R] -> [24]
[54,69] -> [21,28]
[55,56,57,69] -> [62,73]
[55,56,62,69] -> [57]
[55,56,69] -> [23,72]
[55,56,69,73] -> [57]
[55,69] -> [22,29]
[55,69,72] -> [56]
[58,63,67,69] -> [11]
[58,63,67,69,R] -> [1]
[58,63,69] -> [18]
[58,63,69,R] -> [10]
[58,64,69] -> [17]
[58,64,69,R] -> [3]
[58,65,69] -> [16]
[58,65,69,R] -> [5]
[58,66,69] -> [15]
[58,66,69,R] -> [1]
[58,69] -> [18]
[58,69,R] -> [14]
[59,69] -> [17]
[59,69,R] -> [2]
[60,62,69] -> [R]
[60,62,69,R] -> [5]
[60,69] -> [16]
[60,69,R] -> [6,62]
[61,69] -> [15]
[61,69,R] -> [1]
[69] -> [27]
[69,R] -> [14,53]
[70] -> [26]
[70,72] -> [R]
[70,72,73] -> [R]
[70,72,73,R] -> [5]
[70,72,R] -> [6,73]
[70,R] -> [6,72]
[71] -> [25]
[71,R] -> [1]
[R] -> [5,6,10,14,24,31,41,49,68]

### Solution ###

[5,6,10,14,18,24,27,31,38,41,45,49,50,53,58,63,68,69,R]

### Annotated ###

  let
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    constructor Nat :E: Type
    constructor Z :R: Nat
    constructor S :R: (n :R: Nat) -> Nat
    constructor Vec :E: (_x0 :E: Nat) -> (_x1 :E: Type) -> Type
    constructor VNil :R: (a :E: Type) -> Vec -E- Z -E- a
    constructor VCons :R: (a :E: Type) -> (n :E: Nat) -> (x :E: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    vlen :R: (a :E: Type) -> (n :E: Nat) -> (xs :R: Vec -E- n -E- a) -> Nat 
      a :E: Type
        [vlen] -E- a -E- [Z] -R- (VNil -E- [a]) = Z
      a :E: Type n :E: Nat x :E: a xs :R: Vec -E- n -E- a
        [vlen] -E- a -E- ([S] -E- n) -R- (VCons -E- [a] -E- [n] -E- x -R- xs) = S -R- (vlen -E- a -E- n -R- xs)
    testVec :R: Vec -E- 2 -E- Bool = VCons -E- Bool -E- 1 -E- True -R- (VCons -E- Bool -E- Z -E- False -R- (VNil -E- Bool))
    main :R: Nat = vlen -E- Bool -E- 2 -R- testVec
  in main

### Specialised ###

  let
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    constructor Nat :E: Type
    constructor Z :R: Nat
    constructor S :R: (n :R: Nat) -> Nat
    constructor Vec :E: (_x0 :E: Nat) -> (_x1 :E: Type) -> Type
    constructor VNil :R: (a :E: Type) -> Vec -E- Z -E- a
    constructor VCons :R: (a :E: Type) -> (n :E: Nat) -> (x :E: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    vlen :R: (a :E: Type) -> (n :E: Nat) -> (xs :R: Vec -E- n -E- a) -> Nat 
      a :E: Type
        [vlen] -E- a -E- [Z] -R- (VNil -E- [a]) = Z
      a :E: Type n :E: Nat x :E: a xs :R: Vec -E- n -E- a
        [vlen] -E- a -E- ([S] -E- n) -R- (VCons -E- [a] -E- [n] -E- x -R- xs) = S -R- (vlen -E- a -E- n -R- xs)
    testVec :R: Vec -E- 2 -E- Bool = VCons -E- Bool -E- 1 -E- True -R- (VCons -E- Bool -E- Z -E- False -R- (VNil -E- Bool))
    main :R: Nat = vlen -E- Bool -E- 2 -R- testVec
  in main

### Final annotation ###

  let
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    constructor Nat :E: Type
    constructor Z :R: Nat
    constructor S :R: (n :R: Nat) -> Nat
    constructor Vec :E: (_x0 :E: Nat) -> (_x1 :E: Type) -> Type
    constructor VNil :R: (a :E: Type) -> Vec -E- Z -E- a
    constructor VCons :R: (a :E: Type) -> (n :E: Nat) -> (x :E: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    vlen :R: (a :E: Type) -> (n :E: Nat) -> (xs :R: Vec -E- n -E- a) -> Nat 
      a :E: Type
        [vlen] -E- a -E- [Z] -R- (VNil -E- [a]) = Z
      a :E: Type n :E: Nat x :E: a xs :R: Vec -E- n -E- a
        [vlen] -E- a -E- ([S] -E- n) -R- (VCons -E- [a] -E- [n] -E- x -R- xs) = S -R- (vlen -E- a -E- n -R- xs)
    testVec :R: Vec -E- 2 -E- Bool = VCons -E- Bool -E- 1 -E- True -R- (VCons -E- Bool -E- Z -E- False -R- (VNil -E- Bool))
    main :R: Nat = vlen -E- Bool -E- 2 -R- testVec
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor Z : Nat
    constructor S : (n) -> Nat
    constructor VNil : Vec
    constructor VCons : (xs) -> Vec
    vlen 
      [_] VNil = Z
      [_] (VCons xs) = S (vlen xs)
    testVec = VCons (VCons VNil)
    main = vlen testVec
  in main

### Normal forms ###

unerased:
  
  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (n :R: Nat) -> Nat
  in 2

erased:
  
  let
    constructor Z : Nat
    constructor S : (n) -> Nat
  in 2

