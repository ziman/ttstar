-- vim: ft=ttstar

### Desugared ###

  let
    constructor Bool : Type
    constructor T : Bool
    constructor F : Bool
    constructor Pair : Type
    constructor P : (x : Bool) -> (y : Bool) -> Pair
    fst : (_x0 : Pair) -> Bool 
      l : Bool r : Bool
        fst ([P] l r) = l
    snd : (_x1 : Pair) -> Bool 
      l : Bool r : Bool
        snd ([P] l r) = r
    and : (_x2 : Bool) -> (_x3 : Bool) -> Bool 
      y : Bool
        and T y = y
      y : Bool
        and F y = F
    main : Bool = and (fst (P T F)) (snd (P F T))
  in main

### Evarified ###

  let
    constructor Bool :1: Type
    constructor T :2: Bool
    constructor F :3: Bool
    constructor Pair :4: Type
    constructor P :5: (x :6: Bool) -> (y :7: Bool) -> Pair
    fst :8: (_x0 :9: Pair) -> Bool 
      l :10: Bool r :11: Bool
        fst -12- ([P] -14- l -13- r) = l
    snd :15: (_x1 :16: Pair) -> Bool 
      l :17: Bool r :18: Bool
        snd -19- ([P] -21- l -20- r) = r
    and :22: (_x2 :23: Bool) -> (_x3 :24: Bool) -> Bool 
      y :25: Bool
        and -27- T -26- y = y
      y :28: Bool
        and -30- F -29- y = F
    main :31: Bool = and -33- (fst -34- (P -36- T -35- F)) -32- (snd -37- (P -39- F -38- T))
  in main

### Constraints ###

[6] -> [14,21,36,39]
[7] -> [13,20,35,38]
[8] -> [8,10]
[8,12] -> [5]
[8,12,13] -> [11]
[8,12,14] -> [10]
[9] -> [12,34]
[10] -> [8,12,14]
[11] -> [8,12,13]
[12] -> [9]
[13] -> [7]
[14] -> [6]
[15] -> [15,18]
[15,19] -> [5]
[15,19,20] -> [18]
[15,19,21] -> [17]
[16] -> [19,37]
[17] -> [15,19,21]
[18] -> [15,19,20]
[19] -> [16]
[20] -> [7]
[21] -> [6]
[22] -> [2,3,22,25,27,30]
[22,26] -> [25]
[22,29] -> [28]
[23] -> [27,30,33]
[24] -> [26,29,32]
[25] -> [22,26]
[26] -> [24]
[27] -> [23]
[28] -> [22,29]
[29] -> [24]
[30] -> [23]
[31] -> [22]
[31,32] -> [15]
[31,32,37] -> [5]
[31,32,37,38] -> [2]
[31,32,37,39] -> [3]
[31,33] -> [8]
[31,33,34] -> [5]
[31,33,34,35] -> [3]
[31,33,34,36] -> [2]
[32] -> [24]
[33] -> [23]
[34] -> [9]
[35] -> [7]
[36] -> [6]
[37] -> [16]
[38] -> [7]
[39] -> [6]
[E] -> [1,4,R]
[R] -> [31]

### Solution ###

[2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,R]

### Annotated ###

  let
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor Pair :E: Type
    constructor P :R: (x :R: Bool) -> (y :R: Bool) -> Pair
    fst :R: (_x0 :R: Pair) -> Bool 
      l :R: Bool r :R: Bool
        fst -R- ([P] -R- l -R- r) = l
    snd :R: (_x1 :R: Pair) -> Bool 
      l :R: Bool r :R: Bool
        snd -R- ([P] -R- l -R- r) = r
    and :R: (_x2 :R: Bool) -> (_x3 :R: Bool) -> Bool 
      y :R: Bool
        and -R- T -R- y = y
      y :R: Bool
        and -R- F -R- y = F
    main :R: Bool = and -R- (fst -R- (P -R- T -R- F)) -R- (snd -R- (P -R- F -R- T))
  in main

### Specialised ###

  let
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor Pair :E: Type
    constructor P :R: (x :R: Bool) -> (y :R: Bool) -> Pair
    fst :R: (_x0 :R: Pair) -> Bool 
      l :R: Bool r :R: Bool
        fst -R- ([P] -R- l -R- r) = l
    snd :R: (_x1 :R: Pair) -> Bool 
      l :R: Bool r :R: Bool
        snd -R- ([P] -R- l -R- r) = r
    and :R: (_x2 :R: Bool) -> (_x3 :R: Bool) -> Bool 
      y :R: Bool
        and -R- T -R- y = y
      y :R: Bool
        and -R- F -R- y = F
    main :R: Bool = and -R- (fst -R- (P -R- T -R- F)) -R- (snd -R- (P -R- F -R- T))
  in main

### Final annotation ###

  let
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor Pair :E: Type
    constructor P :R: (x :R: Bool) -> (y :R: Bool) -> Pair
    fst :R: (_x0 :R: Pair) -> Bool 
      l :R: Bool r :R: Bool
        fst -R- ([P] -R- l -R- r) = l
    snd :R: (_x1 :R: Pair) -> Bool 
      l :R: Bool r :R: Bool
        snd -R- ([P] -R- l -R- r) = r
    and :R: (_x2 :R: Bool) -> (_x3 :R: Bool) -> Bool 
      y :R: Bool
        and -R- T -R- y = y
      y :R: Bool
        and -R- F -R- y = F
    main :R: Bool = and -R- (fst -R- (P -R- T -R- F)) -R- (snd -R- (P -R- F -R- T))
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor T : Bool
    constructor F : Bool
    constructor P : (x) -> (y) -> Pair
    fst 
      fst ([_] l r) = l
    snd 
      snd ([_] l r) = r
    and 
      and T y = y
      and F y = F
    main = and (fst (P T F)) (snd (P F T))
  in main

### Intermediate representation ###

let T = constructor 0
  in let F = constructor 0
    in let P = constructor 2
      in let fst = \_pv0.
        case _pv0 of
          _ _pv1 _pv2 => _pv1
        in let snd = \_pv0.
          case _pv0 of
            _ _pv1 _pv2 => _pv2
          in let and = \_pv0. \_pv1.
            case _pv0 of
              F => F
              T => _pv1
            in let main = ((and (fst ((P T) F))) (snd ((P F) T)))
              in main

### Normal forms ###

unerased:
  
  let
    constructor Bool : Type
    constructor T : Bool
  in T

erased:
  
  let constructor T : Bool
  in T

