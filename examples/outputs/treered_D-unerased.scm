(require-extension matchable)
(define Type #(Type))
(define (number->peano z s i) (if (= i 0) (vector z) (vector s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Bool (vector 'Bool))
    (True (vector 'True))
    (False (vector 'False))
    (Foo (lambda (_x0)
      (vector 'Foo _x0)))
    (Yeah (vector 'Yeah))
    (Nope (vector 'Nope))
    (Maybe (lambda (_x1)
      (vector 'Maybe _x1)))
    (Nothing (lambda (a)
      (vector 'Nothing a)))
    (Just (lambda (a)
      (lambda (x)
        (vector 'Just a x))))
    (f (lambda (_e0)
      (match (list _e0)
        ((#('Just _ b))
          b)
        ((#('Nothing _))
          False))))
    (g (lambda (_e0)
      (match (list _e0)
        ((#('Just _ #('True)))
          Yeah)
        ((#('Just _ #('False)))
          Nope)
        ((#('Nothing _))
          Nope))))
    (main (g ((Just Bool) True)))
  )
    main))
