-- vim: ft=ttstar

### Desugared ###

  let
    constructor N : Type
    constructor Z : N
    constructor S : (x :R: N) -> N
    constructor Vec : (_x0 : N) -> (_x1 : Type) -> Type
    constructor Nil : (a : Type) -> Vec Z a
    constructor Cons : (a : Type) -> (n : N) -> (x :R: a) -> (xs :R: Vec n a) -> Vec (S n) a
    vlen : (n : N) -> (xs : Vec n N) -> N 
      vlen [Z] (Nil [N]) = Z
      m : N y : N ys : Vec m N
        vlen ([S] m) (Cons [N] [m] y ys) = S (vlen m ys)
    main : N = vlen 1 (Cons N Z 3 (Nil N))
  in main

### Evarified ###

  let
    constructor N :1: Type
    constructor Z :2: N
    constructor S :3: (x :R: N) -> N
    constructor Vec :4: (_x0 :5: N) -> (_x1 :6: Type) -> Type
    constructor Nil :7: (a :8: Type) -> Vec -10- Z -9- a
    constructor Cons :11: (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
    vlen :19: (n :20: N) -> (xs :21: Vec -23- n -22- N) -> N 
      vlen -25- [Z] -24- (Nil -26- [N]) = Z
      m :27: N y :28: N ys :29: Vec -31- m -30- N
        vlen -33- ([S] -34- m) -32- (Cons -38- [N] -37- [m] -36- y -35- ys) = S -39- (vlen -41- m -40- ys)
    main :42: N = vlen -44- 1 -43- (Cons -49- N -48- Z -47- 3 -46- (Nil -53- N))
  in main

### Constraints ###

[] -> [18,34,35,36,39,42,45,46,47,50,51,52,R]
[5] -> [10,15,17,23,31]
[6] -> [9,14,16,22,30]
[8] -> [26,53]
[9] -> [6,14,22]
[10] -> [5,10]
[12] -> [38,49]
[13] -> [37,48]
[14] -> [6,9,30]
[15] -> [5]
[16] -> [6,22]
[17] -> [5,17]
[19] -> [2,3,7,11,19,24,32]
[19,24,26] -> [1]
[19,25] -> [2]
[19,32] -> [28,29]
[19,32,37] -> [27]
[19,32,38] -> [1]
[19,33] -> [3,27]
[19,40] -> [29]
[19,41] -> [27]
[20] -> [25,33,41,44]
[21] -> [24,32,40,43]
[22] -> [6,9,16,30]
[23] -> [5]
[24] -> [21]
[25] -> [20]
[26] -> [8]
[27] -> [19,33,34]
[28] -> [19,32,36]
[29] -> [19,32,35]
[30] -> [6,14,22]
[31] -> [5,31]
[32] -> [21]
[33] -> [20]
[37] -> [13]
[38] -> [12]
[40] -> [21]
[41] -> [20]
[42] -> [19]
[42,43] -> [2,3,7,11]
[42,43,48] -> [2]
[42,43,49] -> [1]
[42,43,53] -> [1]
[42,44] -> [2,3]
[43] -> [21]
[44] -> [20]
[48] -> [13]
[49] -> [12]
[53] -> [8]

### Solution ###

[2,3,7,11,18,19,21,24,28,29,32,34,35,36,39,40,42,43,45,46,47,50,51,52,R]

### Annotated ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (x :R: N) -> N
    constructor Vec :E: (_x0 :E: N) -> (_x1 :E: Type) -> Type
    constructor Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    constructor Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -R- n) -E- a
    vlen :R: (n :E: N) -> (xs :R: Vec -E- n -E- N) -> N 
      vlen -E- [Z] -R- (Nil -E- [N]) = Z
      m :E: N y :R: N ys :R: Vec -E- m -E- N
        vlen -E- ([S] -R- m) -R- (Cons -E- [N] -E- [m] -R- y -R- ys) = S -R- (vlen -E- m -R- ys)
    main :R: N = vlen -E- 1 -R- (Cons -E- N -E- Z -R- 3 -R- (Nil -E- N))
  in main

### Specialised ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (x :R: N) -> N
    constructor Vec :E: (_x0 :E: N) -> (_x1 :E: Type) -> Type
    constructor Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    constructor Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -R- n) -E- a
    vlen :R: (n :E: N) -> (xs :R: Vec -E- n -E- N) -> N 
      vlen -E- [Z] -R- (Nil -E- [N]) = Z
      m :E: N y :R: N ys :R: Vec -E- m -E- N
        vlen -E- ([S] -R- m) -R- (Cons -E- [N] -E- [m] -R- y -R- ys) = S -R- (vlen -E- m -R- ys)
    main :R: N = vlen -E- 1 -R- (Cons -E- N -E- Z -R- 3 -R- (Nil -E- N))
  in main

### Final annotation ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (x :R: N) -> N
    constructor Vec :E: (_x0 :E: N) -> (_x1 :E: Type) -> Type
    constructor Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    constructor Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -R- n) -E- a
    vlen :R: (n :E: N) -> (xs :R: Vec -E- n -E- N) -> N 
      vlen -E- [Z] -R- (Nil -E- [N]) = Z
      m :E: N y :R: N ys :R: Vec -E- m -E- N
        vlen -E- ([S] -R- m) -R- (Cons -E- [N] -E- [m] -R- y -R- ys) = S -R- (vlen -E- m -R- ys)
    main :R: N = vlen -E- 1 -R- (Cons -E- N -E- Z -R- 3 -R- (Nil -E- N))
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor Z : N
    constructor S : (x) -> N
    constructor Nil : Vec
    constructor Cons : (x) -> (xs) -> Vec
    vlen 
      vlen Nil = Z
      vlen (Cons y ys) = S (vlen ys)
    main = vlen (Cons 3 Nil)
  in main

### Intermediate representation ###

let Z = constructor 0
  in let S = constructor 1
    in let Nil = constructor 0
      in let Cons = constructor 2
        in let vlen = \_pv0.
          case _pv0 of
            Cons _pv1 _pv2 => (S (vlen _pv2))
            Nil => Z
          in let main = (vlen ((Cons (S (S (S Z)))) Nil))
            in main

### Normal forms ###

unerased:
  
  let
    constructor N : Type
    constructor Z : N
    constructor S : (x :R: N) -> N
  in 1

erased:
  
  let
    constructor Z : N
    constructor S : (x) -> N
  in 1

