-- vim: ft=ttstar

  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x) -> Nat
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    constructor List : (_x21) -> Type
    constructor Nil : (a) -> List a
    constructor Cons : (a) -> (_x22) -> (_x23) -> List a
    constructor List : Type
    constructor Nil : List
    constructor Cons : (_x0) -> (_x1) -> List
    repl 
      repl Z x xs = xs
      repl (S n) x xs = Cons x (repl n x xs)
    constructor RLE : (_x3) -> Type
    constructor RNil : RLE Nil
    constructor RCons : (n) -> (x) -> (xs) -> (_x4) -> RLE (repl n x xs)
    compress 
      compress Nil = RNil
      compress (Cons x xs) = 
        let aux 
          aux y [_] RNil = RCons 1 y Nil RNil
          aux True [_] (RCons n True zs rzs) = RCons (S n) True zs rzs
          aux False [_] (RCons n False zs rzs) = RCons (S n) False zs rzs
          aux True [_] (RCons n False zs rzs) = RCons 1 True (repl n False zs) (RCons n False zs rzs)
          aux False [_] (RCons n True zs rzs) = RCons 1 False (repl n True zs) (RCons n True zs rzs)
        in aux x xs (compress xs)
    decompress 
      decompress [_] RNil = Nil
      decompress [_] (RCons n x xs rxs) = repl n x (decompress xs rxs)
    foldl 
      foldl f z Nil = z
      foldl f z (Cons x xs) = foldl f (f z x) xs
    xor 
      xor False b = b
      xor True False = True
      xor True True = False
  in 
    let foreign inputSize
    in foldl xor False (decompress (repl inputSize True Nil) (compress (repl inputSize True Nil)))
