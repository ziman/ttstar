-- vim: ft=ttstar
  let
    constructor Z : Nat
    constructor S : (x) -> Nat
    constructor True : Bool
    constructor False : Bool
    constructor Nil : List
    constructor Cons : (_x0) -> (_x1) -> List
    repl 
      [_] Z _ xs = xs
      [_] (S n) x xs = Cons x (repl n x xs)
    constructor RNil : RLE
    constructor RCons : (n) -> (x) -> (_x4) -> RLE
    compress 
      [_] Nil = RNil
      [_] (Cons x xs) = 
        let aux 
          [_] y RNil = RCons 1 y RNil
          [_] True (RCons n True rzs) = RCons (S n) True rzs
          [_] False (RCons n False rzs) = RCons (S n) False rzs
          [_] True (RCons n False rzs) = RCons 1 True (RCons n False rzs)
          [_] False (RCons n True rzs) = RCons 1 False (RCons n True rzs)
        in aux x (compress xs)
    decompress 
      [_] RNil = Nil
      [_] (RCons n x rxs) = repl n x (decompress rxs)
    foldl 
      [_] _ z Nil = z
      [_] f z (Cons x xs) = foldl f (f z x) xs
    xor 
      [_] False b = b
      [_] True False = True
      [_] True True = False
  in 
    let foreign inputSize
    in foldl xor False (decompress (compress (repl inputSize True Nil)))
