(import (chicken process-context))
(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Z `(Z))
    (S (lambda (x)
      `(S ,x)))
    (True `(True))
    (False `(False))
    (Nil `(Nil))
    (Cons (lambda (_x0)
      (lambda (_x1)
        `(Cons ,_x0 ,_x1))))
    (repl (lambda (_e0)
      (lambda (_e1)
        (lambda (_e2)
          (match (list _e0 _e1 _e2)
            ((('Z) x xs)
              xs)
            ((('S n) x xs)
              ((Cons x) (((repl n) x) xs))))))))
    (RNil `(RNil))
    (RCons (lambda (n)
      (lambda (x)
        (lambda (_x4)
          `(RCons ,n ,x ,_x4)))))
    (compress (lambda (_e0)
      (match (list _e0)
        ((('Nil))
          RNil)
        ((('Cons x xs))
          (letrec* ((aux (lambda (_e0)
            (lambda (_e1)
              (match (list _e0 _e1)
                ((y ('RNil))
                  (((RCons (S Z)) y) RNil))
                ((('True) ('RCons n ('True) rzs))
                  (((RCons (S n)) True) rzs))
                ((('False) ('RCons n ('False) rzs))
                  (((RCons (S n)) False) rzs))
                ((('True) ('RCons n ('False) rzs))
                  (((RCons (S Z)) True) (((RCons n) False) rzs)))
                ((('False) ('RCons n ('True) rzs))
                  (((RCons (S Z)) False) (((RCons n) True) rzs))))))))
            ((aux x) (compress xs)))))))
    (decompress (lambda (_e0)
      (match (list _e0)
        ((('RNil))
          Nil)
        ((('RCons n x rxs))
          (((repl n) x) (decompress rxs))))))
    (foldl (lambda (_e0)
      (lambda (_e1)
        (lambda (_e2)
          (match (list _e0 _e1 _e2)
            ((f z ('Nil))
              z)
            ((f z ('Cons x xs))
              (((foldl f) ((f z) x)) xs)))))))
    (xor (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((('False) b)
            b)
          ((('True) ('False))
            True)
          ((('True) ('True))
            False)))))
    (xors ((foldl xor) False))
    (genInputList (lambda (n)
      (((repl n) True) Nil)))
    (main (letrec* (
      (inputSize (rts-arg-peano 'Z 'S 0))
      (inputList (genInputList inputSize))
    )
      (xors (decompress (compress inputList)))))
  )
    main))
