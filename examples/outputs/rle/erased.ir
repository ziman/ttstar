-- vim: ft=ttstar
let Z = constructor 0
  in let S = constructor 1
    in let True = constructor 0
      in let False = constructor 0
        in let Nil = constructor 0
          in let Cons = constructor 2
            in let repl = \_pv0. \_pv1. \_pv2.
              case _pv0 of
                S _pv3 => ((Cons _pv1) (((repl _pv3) _pv1) _pv2))
                Z => _pv2
              in let RNil = constructor 0
                in let RCons = constructor 3
                  in let compress = \_pv0.
                    case _pv0 of
                      Cons _pv1 _pv2 => let aux = \_pv3. \_pv4.
                        case _pv4 of
                          RNil => (((RCons (S Z)) _pv3) RNil)
                          _ => case _pv3 of
                            False => case _pv4 of
                              RCons _pv5 _pv6 _pv7 => case _pv6 of
                                False => (((RCons (S _pv5)) False) _pv7)
                                True => (((RCons (S Z)) False) (((RCons _pv5) True) _pv7))
                            True => case _pv4 of
                              RCons _pv5 _pv6 _pv7 => case _pv6 of
                                False => (((RCons (S Z)) True) (((RCons _pv5) False) _pv7))
                                True => (((RCons (S _pv5)) True) _pv7)
                        in ((aux _pv1) (compress _pv2))
                      Nil => RNil
                    in let decompress = \_pv0.
                      case _pv0 of
                        RCons _pv1 _pv2 _pv3 => (((repl _pv1) _pv2) (decompress _pv3))
                        RNil => Nil
                      in let foldl = \_pv0. \_pv1. \_pv2.
                        case _pv2 of
                          Cons _pv3 _pv4 => (((foldl _pv0) ((_pv0 _pv1) _pv3)) _pv4)
                          Nil => _pv1
                        in let xor = \_pv0. \_pv1.
                          case _pv0 of
                            False => _pv1
                            True => case _pv1 of
                              False => True
                              True => False
                          in let xors = ((foldl xor) False)
                            in let genInputList = \n. (((repl n) True) Nil)
                              in let main = let inputSize = foreign "(rts-arg-peano 'Z 'S 0)"
                                in let inputList = (genInputList inputSize)
                                  in (xors (decompress (compress inputList)))
                                in main
