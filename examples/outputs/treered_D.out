-- vim: ft=ttstar

### Desugared ###

  let
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    constructor Foo : (_x0 : Bool) -> Type
    constructor Yeah : Foo True
    constructor Nope : Foo False
    constructor Maybe : (_x1 : Type) -> Type
    constructor Nothing : (a : Type) -> Maybe a
    constructor Just : (a : Type) -> (x : a) -> Maybe a
    f : (x : Maybe Bool) -> Bool 
      b : Bool
        [f] (Just [Bool] b) = b
      [f] (Nothing [Bool]) = False
    g : (x : Maybe Bool) -> Foo (f x) 
      [g] (Just [Bool] True) = Yeah
      [g] (Just [Bool] False) = Nope
      [g] (Nothing [Bool]) = Nope
    main : Foo True = g (Just Bool True)
  in main

### Evarified ###

  let
    constructor Bool :1: Type
    constructor True :2: Bool
    constructor False :3: Bool
    constructor Foo :4: (_x0 :5: Bool) -> Type
    constructor Yeah :6: Foo -7- True
    constructor Nope :8: Foo -9- False
    constructor Maybe :10: (_x1 :11: Type) -> Type
    constructor Nothing :12: (a :13: Type) -> Maybe -14- a
    constructor Just :15: (a :16: Type) -> (x :17: a) -> Maybe -18- a
    f :19: (x :20: Maybe -21- Bool) -> Bool 
      b :22: Bool
        [f] -23- (Just -25- [Bool] -24- b) = b
      [f] -26- (Nothing -27- [Bool]) = False
    g :28: (x :29: Maybe -30- Bool) -> Foo -31- (f -32- x) 
      [g] -33- (Just -35- [Bool] -34- True) = Yeah
      [g] -36- (Just -38- [Bool] -37- False) = Nope
      [g] -39- (Nothing -40- [Bool]) = Nope
    main :41: Foo -42- True = g -43- (Just -45- Bool -44- True)
  in main

### Constraints ###

[7] -> [31]
[9] -> [31]
[13,39] -> [40]
[14,39] -> [30]
[16,33] -> [35]
[16,36] -> [38]
[16,43] -> [45]
[17,33] -> [34]
[17,36] -> [37]
[17,43] -> [44]
[18,33] -> [30]
[18,36] -> [30]
[18,43] -> [30]
[29] -> [43]
[29,R] -> [33,36,39]
[30,33] -> [18]
[30,36] -> [18]
[30,39] -> [14]
[30,43] -> [18]
[31] -> [7,9,42]
[33] -> [R]
[33,34] -> [17]
[33,35] -> [16]
[33,R] -> [29]
[34] -> [33]
[35] -> [33]
[35,R] -> [1]
[36] -> [R]
[36,37] -> [17]
[36,38] -> [16]
[36,R] -> [29]
[37] -> [36]
[38] -> [36]
[38,R] -> [1]
[39] -> [R]
[39,40] -> [13]
[39,R] -> [29]
[40] -> [39]
[40,R] -> [1]
[42] -> [31]
[43] -> [29]
[43,44] -> [17]
[43,44,R] -> [2]
[43,45] -> [16]
[43,45,R] -> [1]
[43,R] -> [15]
[R] -> [2,3,6,8,12,15,28,33,34,36,37,39,41]

### Solution ###

[2,3,6,8,12,15,17,28,29,33,34,36,37,39,41,43,44,R]

### Annotated ###

  let
    constructor Bool :E: Type
    constructor True :R: Bool
    constructor False :R: Bool
    constructor Foo :E: (_x0 :E: Bool) -> Type
    constructor Yeah :R: Foo -E- True
    constructor Nope :R: Foo -E- False
    constructor Maybe :E: (_x1 :E: Type) -> Type
    constructor Nothing :R: (a :E: Type) -> Maybe -E- a
    constructor Just :R: (a :E: Type) -> (x :R: a) -> Maybe -E- a
    f :E: (x :E: Maybe -E- Bool) -> Bool 
      b :E: Bool
        [f] -E- (Just -E- [Bool] -E- b) = b
      [f] -E- (Nothing -E- [Bool]) = False
    g :R: (x :R: Maybe -E- Bool) -> Foo -E- (f -E- x) 
      [g] -R- (Just -E- [Bool] -R- True) = Yeah
      [g] -R- (Just -E- [Bool] -R- False) = Nope
      [g] -R- (Nothing -E- [Bool]) = Nope
    main :R: Foo -E- True = g -R- (Just -E- Bool -R- True)
  in main

### Specialised ###

  let
    constructor Bool :E: Type
    constructor True :R: Bool
    constructor False :R: Bool
    constructor Foo :E: (_x0 :E: Bool) -> Type
    constructor Yeah :R: Foo -E- True
    constructor Nope :R: Foo -E- False
    constructor Maybe :E: (_x1 :E: Type) -> Type
    constructor Nothing :R: (a :E: Type) -> Maybe -E- a
    constructor Just :R: (a :E: Type) -> (x :R: a) -> Maybe -E- a
    f :E: (x :E: Maybe -E- Bool) -> Bool 
      b :E: Bool
        [f] -E- (Just -E- [Bool] -E- b) = b
      [f] -E- (Nothing -E- [Bool]) = False
    g :R: (x :R: Maybe -E- Bool) -> Foo -E- (f -E- x) 
      [g] -R- (Just -E- [Bool] -R- True) = Yeah
      [g] -R- (Just -E- [Bool] -R- False) = Nope
      [g] -R- (Nothing -E- [Bool]) = Nope
    main :R: Foo -E- True = g -R- (Just -E- Bool -R- True)
  in main

### Final annotation ###

  let
    constructor Bool :E: Type
    constructor True :R: Bool
    constructor False :R: Bool
    constructor Foo :E: (_x0 :E: Bool) -> Type
    constructor Yeah :R: Foo -E- True
    constructor Nope :R: Foo -E- False
    constructor Maybe :E: (_x1 :E: Type) -> Type
    constructor Nothing :R: (a :E: Type) -> Maybe -E- a
    constructor Just :R: (a :E: Type) -> (x :R: a) -> Maybe -E- a
    f :E: (x :E: Maybe -E- Bool) -> Bool 
      b :E: Bool
        [f] -E- (Just -E- [Bool] -E- b) = b
      [f] -E- (Nothing -E- [Bool]) = False
    g :R: (x :R: Maybe -E- Bool) -> Foo -E- (f -E- x) 
      [g] -R- (Just -E- [Bool] -R- True) = Yeah
      [g] -R- (Just -E- [Bool] -R- False) = Nope
      [g] -R- (Nothing -E- [Bool]) = Nope
    main :R: Foo -E- True = g -R- (Just -E- Bool -R- True)
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor True : Bool
    constructor False : Bool
    constructor Yeah : Foo
    constructor Nope : Foo
    constructor Nothing : Maybe
    constructor Just : (x) -> Maybe
    g 
      [_] (Just True) = Yeah
      [_] (Just False) = Nope
      [_] Nothing = Nope
    main = g (Just True)
  in main

### Normal forms ###

unerased:
  
  let
    constructor Bool : Type
    constructor True : Bool
    constructor Foo : (_x0 : Bool) -> Type
    constructor Yeah : Foo True
  in Yeah

erased:
  
  let constructor Yeah : Foo
  in Yeah

