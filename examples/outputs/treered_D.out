-- vim: ft=ttstar

### Desugared ###

  let
    postulate Bool : Type
    postulate True : Bool
    postulate False : Bool
    postulate Foo : (_x0 : Bool) -> Type
    postulate Yeah : Foo True
    postulate Nope : Foo False
    postulate Maybe : (_x1 : Type) -> Type
    postulate Nothing : (a : Type) -> Maybe a
    postulate Just : (a : Type) -> (x : a) -> Maybe a
    f : (x : Maybe Bool) -> Bool 
      (b : Bool)
         (Just [Bool] b) = b
       (Nothing [Bool]) = False
    g : (x : Maybe Bool) -> Foo (f x) 
       (Just [Bool] True) = Yeah
       (Just [Bool] False) = Nope
       (Nothing [Bool]) = Nope
    main : Foo True = g (Just Bool True)
  in main

### Evarified ###

  let
    postulate Bool :1: Type
    postulate True :2: Bool
    postulate False :3: Bool
    postulate Foo :4: (_x0 :5: Bool) -> Type
    postulate Yeah :6: Foo -7- True
    postulate Nope :8: Foo -9- False
    postulate Maybe :10: (_x1 :11: Type) -> Type
    postulate Nothing :12: (a :13: Type) -> Maybe -14- a
    postulate Just :15: (a :16: Type) -> (x :17: a) -> Maybe -18- a
    f :19: (x :20: Maybe -21- Bool) -> Bool 
      (b :22: Bool)
         -23- (Just -24- [Bool] -25- b) = b
       -26- (Nothing -27- [Bool]) = False
    g :28: (x :29: Maybe -30- Bool) -> Foo -31- (f -32- x) 
       -33- (Just -34- [Bool] -35- True) = Yeah
       -36- (Just -37- [Bool] -38- False) = Nope
       -39- (Nothing -40- [Bool]) = Nope
    main :41: Foo -42- True = g -43- (Just -45- Bool -44- True)
  in main

### Constraints ###

[] -> [2,3,6,8,12,15,17,28,29,33,35,36,38,39,43,44,R]
[7] -> [31]
[9] -> [31]
[13] -> [40]
[14] -> [30]
[16] -> [1,34,37,45]
[18] -> [30]
[30] -> [14,18]
[31] -> [7,9,42]
[34] -> [1,16]
[37] -> [1,16]
[40] -> [1,13]
[42] -> [31]
[45] -> [16]
[R] -> [41]

### Solution ###

[2,3,6,8,12,15,17,28,29,33,35,36,38,39,41,43,44,R]

### Annotated ###

  let
    postulate Bool :E: Type
    postulate True :R: Bool
    postulate False :R: Bool
    postulate Foo :E: (_x0 :E: Bool) -> Type
    postulate Yeah :R: Foo -E- True
    postulate Nope :R: Foo -E- False
    postulate Maybe :E: (_x1 :E: Type) -> Type
    postulate Nothing :R: (a :E: Type) -> Maybe -E- a
    postulate Just :R: (a :E: Type) -> (x :R: a) -> Maybe -E- a
    f :E: (x :E: Maybe -E- Bool) -> Bool 
      (b :E: Bool)
         -E- (Just -E- [Bool] -E- b) = b
       -E- (Nothing -E- [Bool]) = False
    g :R: (x :R: Maybe -E- Bool) -> Foo -E- (f -E- x) 
       -R- (Just -E- [Bool] -R- True) = Yeah
       -R- (Just -E- [Bool] -R- False) = Nope
       -R- (Nothing -E- [Bool]) = Nope
    main :R: Foo -E- True = g -R- (Just -E- Bool -R- True)
  in main

### Specialised ###

  let
    postulate Bool :E: Type
    postulate True :R: Bool
    postulate False :R: Bool
    postulate Foo :E: (_x0 :E: Bool) -> Type
    postulate Yeah :R: Foo -E- True
    postulate Nope :R: Foo -E- False
    postulate Maybe :E: (_x1 :E: Type) -> Type
    postulate Nothing :R: (a :E: Type) -> Maybe -E- a
    postulate Just :R: (a :E: Type) -> (x :R: a) -> Maybe -E- a
    f :E: (x :E: Maybe -E- Bool) -> Bool 
      (b :E: Bool)
         -E- (Just -E- [Bool] -E- b) = b
       -E- (Nothing -E- [Bool]) = False
    g :R: (x :R: Maybe -E- Bool) -> Foo -E- (f -E- x) 
       -R- (Just -E- [Bool] -R- True) = Yeah
       -R- (Just -E- [Bool] -R- False) = Nope
       -R- (Nothing -E- [Bool]) = Nope
    main :R: Foo -E- True = g -R- (Just -E- Bool -R- True)
  in main

### Final annotation ###

  let
    postulate Bool :E: Type
    postulate True :R: Bool
    postulate False :R: Bool
    postulate Foo :E: (_x0 :E: Bool) -> Type
    postulate Yeah :R: Foo -E- True
    postulate Nope :R: Foo -E- False
    postulate Maybe :E: (_x1 :E: Type) -> Type
    postulate Nothing :R: (a :E: Type) -> Maybe -E- a
    postulate Just :R: (a :E: Type) -> (x :R: a) -> Maybe -E- a
    f :E: (x :E: Maybe -E- Bool) -> Bool 
      (b :E: Bool)
         -E- (Just -E- [Bool] -E- b) = b
       -E- (Nothing -E- [Bool]) = False
    g :R: (x :R: Maybe -E- Bool) -> Foo -E- (f -E- x) 
       -R- (Just -E- [Bool] -R- True) = Yeah
       -R- (Just -E- [Bool] -R- False) = Nope
       -R- (Nothing -E- [Bool]) = Nope
    main :R: Foo -E- True = g -R- (Just -E- Bool -R- True)
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    postulate True : Bool
    postulate False : Bool
    postulate Yeah : Foo
    postulate Nope : Foo
    postulate Nothing : Maybe
    postulate Just : (x) -> Maybe
    g 
       (Just True) = Yeah
       (Just False) = Nope
       Nothing = Nope
    main = g (Just True)
  in main

### Normal forms ###

unerased:
  
  let
    postulate Bool : Type
    postulate True : Bool
    postulate Foo : (_x0 : Bool) -> Type
    postulate Yeah : Foo True
  in Yeah

erased:
  
  let postulate Yeah : Foo
  in Yeah

