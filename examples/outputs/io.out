-- vim: ft=ttstar

### Desugared ###

  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x :R: Nat) -> Nat
    plus : (_x0 : Nat) -> (_x1 : Nat) -> Nat 
      n : Nat
        [plus] Z n = n
      m : Nat n : Nat
        [plus] (S m) n = S (plus m n)
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    not : (_x2 : Bool) -> Bool 
      [not] True = False
      [not] False = True
    constructor Unit : Type
    constructor MkUnit : Unit
    constructor Pair : (_x3 : Type) -> (_x4 : Type) -> Type
    constructor MkPair : (a : Type) -> (b : Type) -> (_x5 : a) -> (_x6 : b) -> Pair a b
    fst : (a : Type) -> (b : Type) -> (_x7 : Pair a b) -> a 
      a : Type b : Type x : a y : b
        [fst] a b ([MkPair] [a] [b] x y) = x
    snd : (a : Type) -> (b : Type) -> (_x8 : Pair a b) -> b 
      a : Type b : Type x : a y : b
        [snd] a b ([MkPair] [a] [b] x y) = y
    constructor Either : (_x9 : Type) -> (_x10 : Type) -> Type
    constructor Left : (a : Type) -> (b : Type) -> (_x11 : a) -> Either a b
    constructor Right : (a : Type) -> (b : Type) -> (_x12 : b) -> Either a b
    id : (a : Type) -> (x : a) -> a = (\a : Type. (\x : a. x))
    constructor Fin : (_x13 : Nat) -> Type
    constructor FZ : (n : Nat) -> Fin (S n)
    constructor FS : (n : Nat) -> (_x14 : Fin n) -> Fin (S n)
    constructor Vect : (_x15 : Nat) -> (_x16 : Type) -> Type
    constructor VN : (a : Type) -> Vect Z a
    constructor VC : (n : Nat) -> (a : Type) -> (x : a) -> (xs : Vect n a) -> Vect (S n) a
    constructor State : (_x0 : Type) -> (_x1 : Type) -> Type
    constructor MkSt : (st : Type) -> (a : Type) -> (run : (_x2 : st) -> Pair st a) -> State st a
    runState : (st : Type) -> (a : Type) -> (_x3 : State st a) -> (_x4 : st) -> Pair st a 
      st : Type a : Type run : (_x5 : st) -> Pair st a
        [runState] st a ([MkSt] [st] [a] run) = run
    execState : (st : Type) -> (a : Type) -> (x : State st a) -> (s : st) -> a = (\st : Type. (\a : Type. (\x : State st a. (\s : st. snd st a (runState st a x s)))))
    stReturn : (st : Type) -> (a : Type) -> (x : a) -> State st a = (\st : Type. (\a : Type. (\x : a. MkSt st a (\s : st. MkPair st a s x))))
    stBind : (st : Type) -> (a : Type) -> (b : Type) -> (x : State st a) -> (y : (z : a) -> State st b) -> State st b 
      st : Type a : Type b : Type f : (_x6 : st) -> Pair st a g : (_x7 : a) -> State st b
        [stBind] st a b ([MkSt] [st] [a] f) g = 
          let
            stBind3 : (st : Type) -> (b : Type) -> (_x8 : st) -> (_x9 : State st b) -> Pair st b 
              st : Type b : Type s : st f : (_x10 : st) -> Pair st b
                [stBind3] st b s ([MkSt] [st] [b] f) = f s
            stBind2 : (st : Type) -> (a : Type) -> (b : Type) -> (g : (_x11 : a) -> State st b) -> (r : Pair st a) -> Pair st b 
              st : Type a : Type b : Type g : (_x12 : a) -> State st b x : a s : st
                [stBind2] st a b g ([MkPair] [st] [a] s x) = stBind3 st b s (g x)
          in MkSt st b (\s : st. stBind2 st a b g (f s))
    postulate RealWorld : Type
    IO : (_x0 : Type) -> Type = State RealWorld
    ioReturn : (a : Type) -> (x : a) -> IO a = (\a : Type. (\x : a. stReturn RealWorld a x))
    ioBind : (a : Type) -> (b : Type) -> (x : IO a) -> (y : (_x1 : a) -> IO b) -> IO b = (\a : Type. (\b : Type. (\x : IO a. (\y : (_x1 : a) -> IO b. stBind RealWorld a b x y))))
    ioWrapImpure : (a : Type) -> (impureF : (delayToken :R: Unit) -> a) -> IO a = (\a : Type. (\impureF : (delayToken :R: Unit) -> a. MkSt RealWorld a (\w :R: RealWorld. MkPair RealWorld a w (impureF MkUnit))))
    unsafePerformIO : (a : Type) -> (x : IO a) -> a = (\a : Type. (\x : IO a. 
      let postulate TheWorld : RealWorld
      in execState RealWorld a x TheWorld))
    postulate Int : Type
    foreign intS : (x :R: Int) -> Int
    foreign intZ : Int
    postulate Unspec : Type
    printSchemeRepr : (a : Type) -> (x : a) -> IO Unspec = (\a : Type. (\x : a. 
      let foreign nativePrint : (a :E: Type) -> (x :R: a) -> Unspec
      in ioWrapImpure Unspec (\delayToken : Unit. nativePrint a x)))
    natToInt : (_x0 : Nat) -> Int 
      [natToInt] Z = intZ
      n : Nat
        [natToInt] (S n) = intS (natToInt n)
    foreign intToNat : (x :R: Int) -> Nat
    printNat : (x : Nat) -> IO Unspec = (\x : Nat. printSchemeRepr Int (natToInt x))
    main : Unspec = unsafePerformIO Unspec (ioBind Nat Unspec (ioReturn Nat 4) (\v : Nat. ioBind Unspec Unspec (printNat v) (\_0 : Unspec. printSchemeRepr Nat (intToNat (intS (intS (intS intZ)))))))
  in main

### Evarified ###

  let
    constructor Nat :1: Type
    constructor Z :2: Nat
    constructor S :3: (x :R: Nat) -> Nat
    plus :4: (_x0 :5: Nat) -> (_x1 :6: Nat) -> Nat 
      n :7: Nat
        [plus] -9- Z -8- n = n
      m :10: Nat n :11: Nat
        [plus] -13- (S -14- m) -12- n = S -15- (plus -17- m -16- n)
    constructor Bool :18: Type
    constructor True :19: Bool
    constructor False :20: Bool
    not :21: (_x2 :22: Bool) -> Bool 
      [not] -23- True = False
      [not] -24- False = True
    constructor Unit :25: Type
    constructor MkUnit :26: Unit
    constructor Pair :27: (_x3 :28: Type) -> (_x4 :29: Type) -> Type
    constructor MkPair :30: (a :31: Type) -> (b :32: Type) -> (_x5 :33: a) -> (_x6 :34: b) -> Pair -36- a -35- b
    fst :37: (a :38: Type) -> (b :39: Type) -> (_x7 :40: Pair -42- a -41- b) -> a 
      a :43: Type b :44: Type x :45: a y :46: b
        [fst] -49- a -48- b -47- ([MkPair] -53- [a] -52- [b] -51- x -50- y) = x
    snd :54: (a :55: Type) -> (b :56: Type) -> (_x8 :57: Pair -59- a -58- b) -> b 
      a :60: Type b :61: Type x :62: a y :63: b
        [snd] -66- a -65- b -64- ([MkPair] -70- [a] -69- [b] -68- x -67- y) = y
    constructor Either :71: (_x9 :72: Type) -> (_x10 :73: Type) -> Type
    constructor Left :74: (a :75: Type) -> (b :76: Type) -> (_x11 :77: a) -> Either -79- a -78- b
    constructor Right :80: (a :81: Type) -> (b :82: Type) -> (_x12 :83: b) -> Either -85- a -84- b
    id :86: (a :87: Type) -> (x :88: a) -> a = (\a :89: Type. (\x :90: a. x))
    constructor Fin :91: (_x13 :92: Nat) -> Type
    constructor FZ :93: (n :94: Nat) -> Fin -95- (S -96- n)
    constructor FS :97: (n :98: Nat) -> (_x14 :99: Fin -100- n) -> Fin -101- (S -102- n)
    constructor Vect :103: (_x15 :104: Nat) -> (_x16 :105: Type) -> Type
    constructor VN :106: (a :107: Type) -> Vect -109- Z -108- a
    constructor VC :110: (n :111: Nat) -> (a :112: Type) -> (x :113: a) -> (xs :114: Vect -116- n -115- a) -> Vect -118- (S -119- n) -117- a
    constructor State :120: (_x0 :121: Type) -> (_x1 :122: Type) -> Type
    constructor MkSt :123: (st :124: Type) -> (a :125: Type) -> (run :126: (_x2 :127: st) -> Pair -129- st -128- a) -> State -131- st -130- a
    runState :132: (st :133: Type) -> (a :134: Type) -> (_x3 :135: State -137- st -136- a) -> (_x4 :138: st) -> Pair -140- st -139- a 
      st :141: Type a :142: Type run :143: (_x5 :144: st) -> Pair -146- st -145- a
        [runState] -149- st -148- a -147- ([MkSt] -152- [st] -151- [a] -150- run) = run
    execState :153: (st :154: Type) -> (a :155: Type) -> (x :156: State -158- st -157- a) -> (s :159: st) -> a = (\st :160: Type. (\a :161: Type. (\x :162: State -164- st -163- a. (\s :165: st. snd -168- st -167- a -166- (runState -172- st -171- a -170- x -169- s)))))
    stReturn :173: (st :174: Type) -> (a :175: Type) -> (x :176: a) -> State -178- st -177- a = (\st :179: Type. (\a :180: Type. (\x :181: a. MkSt -184- st -183- a -182- (\s :185: st. MkPair -189- st -188- a -187- s -186- x))))
    stBind :190: (st :191: Type) -> (a :192: Type) -> (b :193: Type) -> (x :194: State -196- st -195- a) -> (y :197: (z :198: a) -> State -200- st -199- b) -> State -202- st -201- b 
      st :203: Type a :204: Type b :205: Type f :206: (_x6 :207: st) -> Pair -209- st -208- a g :210: (_x7 :211: a) -> State -213- st -212- b
        [stBind] -218- st -217- a -216- b -215- ([MkSt] -221- [st] -220- [a] -219- f) -214- g = 
          let
            stBind3 :222: (st :223: Type) -> (b :224: Type) -> (_x8 :225: st) -> (_x9 :226: State -228- st -227- b) -> Pair -230- st -229- b 
              st :231: Type b :232: Type s :233: st f :234: (_x10 :235: st) -> Pair -237- st -236- b
                [stBind3] -241- st -240- b -239- s -238- ([MkSt] -244- [st] -243- [b] -242- f) = f -245- s
            stBind2 :246: (st :247: Type) -> (a :248: Type) -> (b :249: Type) -> (g :250: (_x11 :251: a) -> State -253- st -252- b) -> (r :254: Pair -256- st -255- a) -> Pair -258- st -257- b 
              st :259: Type a :260: Type b :261: Type g :262: (_x12 :263: a) -> State -265- st -264- b x :266: a s :267: st
                [stBind2] -272- st -271- a -270- b -269- g -268- ([MkPair] -276- [st] -275- [a] -274- s -273- x) = stBind3 -280- st -279- b -278- s -277- (g -281- x)
          in MkSt -284- st -283- b -282- (\s :285: st. stBind2 -290- st -289- a -288- b -287- g -286- (f -291- s))
    postulate RealWorld :292: Type
    IO :293: (_x0 :294: Type) -> Type = State -295- RealWorld
    ioReturn :296: (a :297: Type) -> (x :298: a) -> IO -299- a = (\a :300: Type. (\x :301: a. stReturn -304- RealWorld -303- a -302- x))
    ioBind :305: (a :306: Type) -> (b :307: Type) -> (x :308: IO -309- a) -> (y :310: (_x1 :311: a) -> IO -312- b) -> IO -313- b = (\a :314: Type. (\b :315: Type. (\x :316: IO -317- a. (\y :318: (_x1 :319: a) -> IO -320- b. stBind -325- RealWorld -324- a -323- b -322- x -321- y))))
    ioWrapImpure :326: (a :327: Type) -> (impureF :328: (delayToken :R: Unit) -> a) -> IO -329- a = (\a :330: Type. (\impureF :331: (delayToken :R: Unit) -> a. MkSt -334- RealWorld -333- a -332- (\w :R: RealWorld. MkPair -338- RealWorld -337- a -336- w -335- (impureF -339- MkUnit))))
    unsafePerformIO :340: (a :341: Type) -> (x :342: IO -343- a) -> a = (\a :344: Type. (\x :345: IO -346- a. 
      let postulate TheWorld :347: RealWorld
      in execState -351- RealWorld -350- a -349- x -348- TheWorld))
    postulate Int :352: Type
    foreign intS :353: (x :R: Int) -> Int
    foreign intZ :354: Int
    postulate Unspec :355: Type
    printSchemeRepr :356: (a :357: Type) -> (x :358: a) -> IO -359- Unspec = (\a :360: Type. (\x :361: a. 
      let foreign nativePrint :362: (a :E: Type) -> (x :R: a) -> Unspec
      in ioWrapImpure -364- Unspec -363- (\delayToken :365: Unit. nativePrint -367- a -366- x)))
    natToInt :368: (_x0 :369: Nat) -> Int 
      [natToInt] -370- Z = intZ
      n :371: Nat
        [natToInt] -372- (S -373- n) = intS -374- (natToInt -375- n)
    foreign intToNat :376: (x :R: Int) -> Nat
    printNat :377: (x :378: Nat) -> IO -379- Unspec = (\x :380: Nat. printSchemeRepr -382- Int -381- (natToInt -383- x))
    main :384: Unspec = unsafePerformIO -386- Unspec -385- (ioBind -390- Nat -389- Unspec -388- (ioReturn -392- Nat -391- 4) -387- (\v :397: Nat. ioBind -401- Unspec -400- Unspec -399- (printNat -402- v) -398- (\_0 :403: Unspec. printSchemeRepr -405- Nat -404- (intToNat -406- (intS -407- (intS -408- (intS -409- intZ)))))))
  in main

### Constraints ###

[31,64] -> [70]
[31,182,385,388] -> [189]
[31,268,282,385] -> [276]
[31,268,282,385,387] -> [276]
[31,332,385,387,398] -> [338]
[31,332,385,387,399] -> [338]
[32,64] -> [69]
[32,182,385,388] -> [188]
[32,268,282,385] -> [275]
[32,268,282,385,387] -> [275]
[32,332,385,387,398] -> [337]
[32,332,385,387,399] -> [337]
[33,64] -> [68]
[33,182,385,388] -> [187]
[33,268,282,385] -> [274]
[33,268,282,385,387] -> [274]
[33,332,385,387,398] -> [336]
[33,332,385,387,399] -> [336]
[34,64] -> [67]
[34,182,385,388] -> [186]
[34,268,282,385] -> [273]
[34,268,282,385,387] -> [273]
[34,332,385,387,398] -> [335]
[34,332,385,387,399] -> [335]
[35,64] -> [58]
[35,182,385,388] -> [128]
[35,268,282,385] -> [255]
[35,268,282,385,387] -> [255]
[35,332,385,387,398] -> [128]
[35,332,385,387,399] -> [128]
[36,64] -> [59]
[36,182,385,388] -> [129]
[36,268,282,385] -> [256]
[36,268,282,385,387] -> [256]
[36,332,385,387,398] -> [129]
[36,332,385,387,399] -> [129]
[55] -> [168]
[55,R] -> [66]
[56] -> [167]
[56,R] -> [65]
[57] -> [166]
[57,R] -> [64]
[58,64] -> [35]
[58,166] -> [139]
[59,64] -> [36]
[59,166] -> [140]
[60] -> [66]
[61] -> [65]
[62] -> [68]
[63] -> [67]
[64] -> [R]
[64,67] -> [34]
[64,68] -> [33]
[64,69] -> [32]
[64,70] -> [31]
[64,R] -> [30,57]
[65] -> [R]
[65,R] -> [56]
[66] -> [R]
[66,R] -> [55]
[67] -> [64]
[68] -> [64]
[69] -> [64]
[69,R] -> [61]
[70] -> [64]
[70,R] -> [60]
[124,147,166] -> [152]
[124,215,385] -> [221]
[124,215,385,387] -> [221]
[124,238,282,385] -> [244]
[124,238,282,385,387] -> [244]
[124,385] -> [284]
[124,385,387] -> [284]
[124,385,387,398] -> [334]
[124,385,387,399] -> [334]
[124,385,388] -> [184]
[125,147,166] -> [151]
[125,215,385] -> [220]
[125,215,385,387] -> [220]
[125,238,282,385] -> [243]
[125,238,282,385,387] -> [243]
[125,385] -> [283]
[125,385,387] -> [283]
[125,385,387,398] -> [333]
[125,385,387,399] -> [333]
[125,385,388] -> [183]
[126,147,166] -> [150]
[126,215,385] -> [219]
[126,215,385,387] -> [219]
[126,238,282,385] -> [242]
[126,238,282,385,387] -> [242]
[126,385] -> [282]
[126,385,387] -> [282]
[126,385,387,398] -> [332]
[126,385,387,399] -> [332]
[126,385,388] -> [182]
[127,150,166] -> [144]
[127,182,385,388] -> [185]
[127,219,385] -> [207]
[127,219,385,387] -> [207]
[127,242,282,385] -> [235]
[127,242,282,385,387] -> [235]
[127,282,385] -> [285]
[127,282,385,387] -> [285]
[127,332,385,387,398] -> [R]
[127,332,385,387,399] -> [R]
[128,150,166] -> [145]
[128,182,385,388] -> [35]
[128,219,385] -> [208]
[128,219,385,387] -> [208]
[128,242,282,385] -> [236]
[128,242,282,385,387] -> [236]
[128,282,385] -> [257]
[128,282,385,387] -> [257]
[128,332,385,387,398] -> [35]
[128,332,385,387,399] -> [35]
[129,150,166] -> [146]
[129,182,385,388] -> [36]
[129,219,385] -> [209]
[129,219,385,387] -> [209]
[129,242,282,385] -> [237]
[129,242,282,385,387] -> [237]
[129,282,385] -> [258]
[129,282,385,387] -> [258]
[129,332,385,387,398] -> [36]
[129,332,385,387,399] -> [36]
[130,147,166] -> [136]
[130,215,385] -> [195]
[130,215,385,387] -> [195]
[130,238,282,385] -> [227]
[130,238,282,385,387] -> [227]
[130,385] -> [201]
[130,385,387] -> [201]
[130,385,387,398] -> [329]
[130,385,387,399] -> [329]
[130,385,388] -> [177]
[131,147,166] -> [137]
[131,215,385] -> [196]
[131,215,385,387] -> [196]
[131,238,282,385] -> [228]
[131,238,282,385,387] -> [228]
[131,385] -> [202]
[131,385,387] -> [202]
[131,385,387,398] -> [295]
[131,385,387,399] -> [295]
[131,385,388] -> [178]
[133,166] -> [172]
[133,166,R] -> [149]
[134,166] -> [171]
[134,166,R] -> [148]
[135,166] -> [170]
[135,166,R] -> [147]
[136,147,166] -> [130]
[136,166,170] -> [163]
[137,147,166] -> [131]
[137,166,170] -> [164]
[138,166] -> [144,169]
[139,166] -> [58,145]
[140,166] -> [59,146]
[141,166] -> [149]
[142,166] -> [148]
[143,166] -> [150]
[144,150,166] -> [127]
[144,166] -> [138]
[145,150,166] -> [128]
[145,166] -> [139]
[146,150,166] -> [129]
[146,166] -> [140]
[147,150,166] -> [126]
[147,151,166] -> [125]
[147,152,166] -> [124]
[147,166] -> [R]
[147,166,R] -> [123,135]
[148,166] -> [R]
[148,166,R] -> [134]
[149,166] -> [R]
[149,166,R] -> [133]
[150,166] -> [147]
[151,166] -> [147]
[151,166,R] -> [142]
[152,166] -> [147]
[152,166,R] -> [141]
[154] -> [160,351]
[155] -> [161,350]
[156] -> [162,349]
[156,157] -> [163]
[156,158] -> [164]
[156,163] -> [157]
[156,164] -> [158]
[157,349] -> [346]
[158,349] -> [295]
[159] -> [165,348]
[160] -> [154]
[161] -> [155]
[162] -> [156]
[163,166,170] -> [136]
[164,166,170] -> [137]
[165] -> [159]
[166] -> [57]
[166,169] -> [138]
[166,169,R] -> [165]
[166,170] -> [135]
[166,170,R] -> [162]
[166,171] -> [134]
[166,171,R] -> [161]
[166,172] -> [133]
[166,172,R] -> [160]
[166,R] -> [132,143]
[167] -> [56]
[167,R] -> [161]
[168] -> [55]
[168,R] -> [160]
[174,385,388] -> [179,304]
[175,385,388] -> [180,303]
[176,385,388] -> [181,302]
[177,385,388] -> [130,299]
[178,385,388] -> [131,295]
[179,385,388] -> [174]
[180,385,388] -> [175]
[181,385,388] -> [176]
[182,185,385,388] -> [127]
[182,186,385,388] -> [34]
[182,186,385,388,R] -> [181]
[182,187,385,388] -> [33]
[182,187,385,388,R] -> [185]
[182,188,385,388] -> [32]
[182,188,385,388,R] -> [180]
[182,189,385,388] -> [31]
[182,189,385,388,R] -> [179]
[182,385,388] -> [126]
[182,385,388,R] -> [30]
[183,385,388] -> [125]
[183,385,388,R] -> [180]
[184,385,388] -> [124]
[184,385,388,R] -> [179]
[191,385] -> [325]
[191,385,387] -> [325]
[191,385,387,R] -> [218]
[191,385,R] -> [218]
[192,385] -> [324]
[192,385,387] -> [324]
[192,385,387,R] -> [217]
[192,385,R] -> [217]
[193,385] -> [323]
[193,385,387] -> [323]
[193,385,387,R] -> [216]
[193,385,R] -> [216]
[194,385] -> [322]
[194,385,387] -> [322]
[194,385,387,R] -> [215]
[194,385,R] -> [215]
[195,215,385] -> [130]
[195,215,385,387] -> [130]
[195,322,385] -> [317]
[195,322,385,387] -> [317]
[196,215,385] -> [131]
[196,215,385,387] -> [131]
[196,322,385] -> [295]
[196,322,385,387] -> [295]
[197,385] -> [321]
[197,385,387] -> [321]
[197,385,387,R] -> [214]
[197,385,R] -> [214]
[198,214,385] -> [211]
[198,214,385,387] -> [211]
[198,321,385] -> [319]
[198,321,385,387] -> [319]
[199,214,385] -> [212]
[199,214,385,387] -> [212]
[199,321,385] -> [320]
[199,321,385,387] -> [320]
[200,214,385] -> [213]
[200,214,385,387] -> [213]
[200,321,385] -> [295]
[200,321,385,387] -> [295]
[201,385] -> [130,313]
[201,385,387] -> [130,313]
[202,385] -> [131,295]
[202,385,387] -> [131,295]
[203,385] -> [218]
[203,385,387] -> [218]
[204,385] -> [217]
[204,385,387] -> [217]
[205,385] -> [216]
[205,385,387] -> [216]
[206,385] -> [219]
[206,385,387] -> [219]
[207,219,385] -> [127]
[207,219,385,387] -> [127]
[207,282,286,385] -> [291]
[207,282,286,385,387] -> [291]
[208,219,385] -> [128]
[208,219,385,387] -> [128]
[208,282,286,385] -> [255]
[208,282,286,385,387] -> [255]
[209,219,385] -> [129]
[209,219,385,387] -> [129]
[209,282,286,385] -> [256]
[209,282,286,385,387] -> [256]
[210,385] -> [214]
[210,385,387] -> [214]
[211,214,385] -> [198]
[211,214,385,387] -> [198]
[211,282,287,385] -> [251]
[211,282,287,385,387] -> [251]
[212,214,385] -> [199]
[212,214,385,387] -> [199]
[212,282,287,385] -> [252]
[212,282,287,385,387] -> [252]
[213,214,385] -> [200]
[213,214,385,387] -> [200]
[213,282,287,385] -> [253]
[213,282,287,385,387] -> [253]
[214,385] -> [R]
[214,385,387] -> [R]
[214,385,387,R] -> [197]
[214,385,R] -> [197]
[215,219,385] -> [126]
[215,219,385,387] -> [126]
[215,220,385] -> [125]
[215,220,385,387] -> [125]
[215,221,385] -> [124]
[215,221,385,387] -> [124]
[215,385] -> [R]
[215,385,387] -> [R]
[215,385,387,R] -> [123,194]
[215,385,R] -> [123,194]
[216,385] -> [R]
[216,385,387] -> [R]
[216,385,387,R] -> [193]
[216,385,R] -> [193]
[217,385] -> [R]
[217,385,387] -> [R]
[217,385,387,R] -> [192]
[217,385,R] -> [192]
[218,385] -> [R]
[218,385,387] -> [R]
[218,385,387,R] -> [191]
[218,385,R] -> [191]
[219,385] -> [215]
[219,385,387] -> [215]
[220,385] -> [215]
[220,385,387] -> [215]
[220,385,387,R] -> [204]
[220,385,R] -> [204]
[221,385] -> [215]
[221,385,387] -> [215]
[221,385,387,R] -> [203]
[221,385,R] -> [203]
[223,282,385] -> [280]
[223,282,385,387] -> [280]
[223,282,385,387,R] -> [241]
[223,282,385,R] -> [241]
[224,282,385] -> [279]
[224,282,385,387] -> [279]
[224,282,385,387,R] -> [240]
[224,282,385,R] -> [240]
[225,282,385] -> [278]
[225,282,385,387] -> [278]
[225,282,385,387,R] -> [239]
[225,282,385,R] -> [239]
[226,282,385] -> [277]
[226,282,385,387] -> [277]
[226,282,385,387,R] -> [238]
[226,282,385,R] -> [238]
[227,238,282,385] -> [130]
[227,238,282,385,387] -> [130]
[227,277,282,385] -> [264]
[227,277,282,385,387] -> [264]
[228,238,282,385] -> [131]
[228,238,282,385,387] -> [131]
[228,277,282,385] -> [265]
[228,277,282,385,387] -> [265]
[229,282,385] -> [236,257]
[229,282,385,387] -> [236,257]
[230,282,385] -> [237,258]
[230,282,385,387] -> [237,258]
[231,282,385] -> [241]
[231,282,385,387] -> [241]
[232,282,385] -> [240]
[232,282,385,387] -> [240]
[233,282,385] -> [239]
[233,282,385,387] -> [239]
[234,282,385] -> [242]
[234,282,385,387] -> [242]
[235,242,282,385] -> [127]
[235,242,282,385,387] -> [127]
[235,282,385] -> [245]
[235,282,385,387] -> [245]
[236,242,282,385] -> [128]
[236,242,282,385,387] -> [128]
[236,282,385] -> [229]
[236,282,385,387] -> [229]
[237,242,282,385] -> [129]
[237,242,282,385,387] -> [129]
[237,282,385] -> [230]
[237,282,385,387] -> [230]
[238,242,282,385] -> [126]
[238,242,282,385,387] -> [126]
[238,243,282,385] -> [125]
[238,243,282,385,387] -> [125]
[238,244,282,385] -> [124]
[238,244,282,385,387] -> [124]
[238,282,385] -> [R]
[238,282,385,387] -> [R]
[238,282,385,387,R] -> [123,226]
[238,282,385,R] -> [123,226]
[239,282,385] -> [R]
[239,282,385,387] -> [R]
[239,282,385,387,R] -> [225]
[239,282,385,R] -> [225]
[240,282,385] -> [R]
[240,282,385,387] -> [R]
[240,282,385,387,R] -> [224]
[240,282,385,R] -> [224]
[241,282,385] -> [R]
[241,282,385,387] -> [R]
[241,282,385,387,R] -> [223]
[241,282,385,R] -> [223]
[242,282,385] -> [238]
[242,282,385,387] -> [238]
[243,282,385] -> [238]
[243,282,385,387] -> [238]
[243,282,385,387,R] -> [232]
[243,282,385,R] -> [232]
[244,282,385] -> [238]
[244,282,385,387] -> [238]
[244,282,385,387,R] -> [231]
[244,282,385,R] -> [231]
[245,282,385] -> [235]
[245,282,385,387] -> [235]
[245,282,385,387,R] -> [233]
[245,282,385,R] -> [233]
[247,282,385] -> [290]
[247,282,385,387] -> [290]
[247,282,385,387,R] -> [272]
[247,282,385,R] -> [272]
[248,282,385] -> [289]
[248,282,385,387] -> [289]
[248,282,385,387,R] -> [271]
[248,282,385,R] -> [271]
[249,282,385] -> [288]
[249,282,385,387] -> [288]
[249,282,385,387,R] -> [270]
[249,282,385,R] -> [270]
[250,282,385] -> [287]
[250,282,385,387] -> [287]
[250,282,385,387,R] -> [269]
[250,282,385,R] -> [269]
[251,269,282,385] -> [263]
[251,269,282,385,387] -> [263]
[251,282,287,385] -> [211]
[251,282,287,385,387] -> [211]
[252,269,282,385] -> [264]
[252,269,282,385,387] -> [264]
[252,282,287,385] -> [212]
[252,282,287,385,387] -> [212]
[253,269,282,385] -> [265]
[253,269,282,385,387] -> [265]
[253,282,287,385] -> [213]
[253,282,287,385,387] -> [213]
[254,282,385] -> [286]
[254,282,385,387] -> [286]
[254,282,385,387,R] -> [268]
[254,282,385,R] -> [268]
[255,268,282,385] -> [35]
[255,268,282,385,387] -> [35]
[255,282,286,385] -> [208]
[255,282,286,385,387] -> [208]
[256,268,282,385] -> [36]
[256,268,282,385,387] -> [36]
[256,282,286,385] -> [209]
[256,282,286,385,387] -> [209]
[257,282,385] -> [128,229]
[257,282,385,387] -> [128,229]
[258,282,385] -> [129,230]
[258,282,385,387] -> [129,230]
[259,282,385] -> [272]
[259,282,385,387] -> [272]
[260,282,385] -> [271]
[260,282,385,387] -> [271]
[261,282,385] -> [270]
[261,282,385,387] -> [270]
[262,282,385] -> [269]
[262,282,385,387] -> [269]
[263,269,282,385] -> [251]
[263,269,282,385,387] -> [251]
[263,277,282,385] -> [281]
[263,277,282,385,387] -> [281]
[264,269,282,385] -> [252]
[264,269,282,385,387] -> [252]
[264,277,282,385] -> [227]
[264,277,282,385,387] -> [227]
[265,269,282,385] -> [253]
[265,269,282,385,387] -> [253]
[265,277,282,385] -> [228]
[265,277,282,385,387] -> [228]
[266,282,385] -> [273]
[266,282,385,387] -> [273]
[267,282,385] -> [274]
[267,282,385,387] -> [274]
[268,273,282,385] -> [34]
[268,273,282,385,387] -> [34]
[268,274,282,385] -> [33]
[268,274,282,385,387] -> [33]
[268,275,282,385] -> [32]
[268,275,282,385,387] -> [32]
[268,276,282,385] -> [31]
[268,276,282,385,387] -> [31]
[268,282,385] -> [R]
[268,282,385,387] -> [R]
[268,282,385,387,R] -> [30,254]
[268,282,385,R] -> [30,254]
[269,282,385] -> [R]
[269,282,385,387] -> [R]
[269,282,385,387,R] -> [250]
[269,282,385,R] -> [250]
[270,282,385] -> [R]
[270,282,385,387] -> [R]
[270,282,385,387,R] -> [249]
[270,282,385,R] -> [249]
[271,282,385] -> [R]
[271,282,385,387] -> [R]
[271,282,385,387,R] -> [248]
[271,282,385,R] -> [248]
[272,282,385] -> [R]
[272,282,385,387] -> [R]
[272,282,385,387,R] -> [247]
[272,282,385,R] -> [247]
[273,282,385] -> [268]
[273,282,385,387] -> [268]
[274,282,385] -> [268]
[274,282,385,387] -> [268]
[275,282,385] -> [268]
[275,282,385,387] -> [268]
[275,282,385,387,R] -> [260]
[275,282,385,R] -> [260]
[276,282,385] -> [268]
[276,282,385,387] -> [268]
[276,282,385,387,R] -> [259]
[276,282,385,R] -> [259]
[277,281,282,385] -> [263]
[277,281,282,385,387] -> [263]
[277,281,282,385,387,R] -> [266]
[277,281,282,385,R] -> [266]
[277,282,385] -> [226]
[277,282,385,387] -> [226]
[277,282,385,387,R] -> [262]
[277,282,385,R] -> [262]
[278,282,385] -> [225]
[278,282,385,387] -> [225]
[278,282,385,387,R] -> [267]
[278,282,385,R] -> [267]
[279,282,385] -> [224]
[279,282,385,387] -> [224]
[279,282,385,387,R] -> [261]
[279,282,385,R] -> [261]
[280,282,385] -> [223]
[280,282,385,387] -> [223]
[280,282,385,387,R] -> [259]
[280,282,385,R] -> [259]
[282,285,385] -> [127]
[282,285,385,387] -> [127]
[282,286,291,385] -> [207]
[282,286,291,385,387] -> [207]
[282,286,291,385,387,R] -> [285]
[282,286,291,385,R] -> [285]
[282,286,385] -> [254]
[282,286,385,387] -> [254]
[282,286,385,387,R] -> [206]
[282,286,385,R] -> [206]
[282,287,385] -> [250]
[282,287,385,387] -> [250]
[282,287,385,387,R] -> [210]
[282,287,385,R] -> [210]
[282,288,385] -> [249]
[282,288,385,387] -> [249]
[282,288,385,387,R] -> [205]
[282,288,385,R] -> [205]
[282,289,385] -> [248]
[282,289,385,387] -> [248]
[282,289,385,387,R] -> [204]
[282,289,385,R] -> [204]
[282,290,385] -> [247]
[282,290,385,387] -> [247]
[282,290,385,387,R] -> [203]
[282,290,385,R] -> [203]
[282,385] -> [126]
[282,385,387] -> [126]
[282,385,387,R] -> [222,234,246]
[282,385,R] -> [222,234,246]
[283,385] -> [125]
[283,385,387] -> [125]
[283,385,387,R] -> [205]
[283,385,R] -> [205]
[284,385] -> [124]
[284,385,387] -> [124]
[284,385,387,R] -> [203]
[284,385,R] -> [203]
[295,308,385] -> [295]
[295,308,385,387] -> [295]
[295,310,385] -> [295]
[295,310,385,387] -> [295]
[295,321,385] -> [200]
[295,321,385,387] -> [200]
[295,322,385] -> [196]
[295,322,385,387] -> [196]
[295,342] -> [295]
[295,349] -> [158]
[295,385] -> [202,295]
[295,385,387] -> [202,295]
[295,385,387,398] -> [131,295]
[295,385,387,399] -> [131,295]
[295,385,388] -> [178,295]
[297,385,388] -> [300,392]
[298,385,388] -> [301,391]
[299,385,388] -> [177,309]
[300,385,388] -> [297]
[301,385,388] -> [298]
[302,385,388] -> [176]
[302,385,388,R] -> [301]
[303,385,388] -> [175]
[303,385,388,R] -> [300]
[304,385,388] -> [174]
[304,385,388,R] -> [292]
[306,385] -> [314,390]
[306,385,387] -> [314,401]
[307,385] -> [315,389]
[307,385,387] -> [315,400]
[308,309,385] -> [317]
[308,309,385,387] -> [317]
[308,317,385] -> [309]
[308,317,385,387] -> [309]
[308,385] -> [316,388]
[308,385,387] -> [316,399]
[309,385,387,399] -> [379]
[309,385,388] -> [299]
[310,311,385] -> [319]
[310,311,385,387] -> [319]
[310,312,385] -> [320]
[310,312,385,387] -> [320]
[310,319,385] -> [311]
[310,319,385,387] -> [311]
[310,320,385] -> [312]
[310,320,385,387] -> [312]
[310,385] -> [318,387]
[310,385,387] -> [318,398]
[311,385,387] -> [397]
[311,385,387,398] -> [403]
[312,385,387] -> [313]
[312,385,387,398] -> [359]
[313,385] -> [201,343]
[313,385,387] -> [201,312]
[314,385] -> [306]
[314,385,387] -> [306]
[315,385] -> [307]
[315,385,387] -> [307]
[316,385] -> [308]
[316,385,387] -> [308]
[317,322,385] -> [195]
[317,322,385,387] -> [195]
[318,385] -> [310]
[318,385,387] -> [310]
[319,321,385] -> [198]
[319,321,385,387] -> [198]
[320,321,385] -> [199]
[320,321,385,387] -> [199]
[321,385] -> [197]
[321,385,387] -> [197]
[321,385,387,R] -> [318]
[321,385,R] -> [318]
[322,385] -> [194]
[322,385,387] -> [194]
[322,385,387,R] -> [316]
[322,385,R] -> [316]
[323,385] -> [193]
[323,385,387] -> [193]
[323,385,387,R] -> [315]
[323,385,R] -> [315]
[324,385] -> [192]
[324,385,387] -> [192]
[324,385,387,R] -> [314]
[324,385,R] -> [314]
[325,385] -> [191]
[325,385,387] -> [191]
[325,385,387,R] -> [292]
[325,385,R] -> [292]
[327,385,387,398] -> [330,364]
[327,385,387,399] -> [330,364]
[328,385,387,398] -> [331,363]
[328,385,387,398,R] -> [R]
[328,385,387,399] -> [331,363]
[328,385,387,399,R] -> [R]
[329,385,387,398] -> [130,359]
[329,385,387,399] -> [130,359]
[330,385,387,398] -> [327]
[330,385,387,399] -> [327]
[331,385,387,398] -> [328]
[331,385,387,399] -> [328]
[332,335,339,385,387,398] -> [R]
[332,335,339,385,387,398,R] -> [26]
[332,335,339,385,387,399] -> [R]
[332,335,339,385,387,399,R] -> [26]
[332,335,385,387,398] -> [34]
[332,335,385,387,398,R] -> [331,339]
[332,335,385,387,399] -> [34]
[332,335,385,387,399,R] -> [331,339]
[332,336,385,387,398] -> [33]
[332,336,385,387,398,R] -> [R]
[332,336,385,387,399] -> [33]
[332,336,385,387,399,R] -> [R]
[332,337,385,387,398] -> [32]
[332,337,385,387,398,R] -> [330]
[332,337,385,387,399] -> [32]
[332,337,385,387,399,R] -> [330]
[332,338,385,387,398] -> [31]
[332,338,385,387,398,R] -> [292]
[332,338,385,387,399] -> [31]
[332,338,385,387,399,R] -> [292]
[332,385,387,398] -> [126]
[332,385,387,398,R] -> [30,127]
[332,385,387,399] -> [126]
[332,385,387,399,R] -> [30,127]
[333,385,387,398] -> [125]
[333,385,387,398,R] -> [330]
[333,385,387,399] -> [125]
[333,385,387,399,R] -> [330]
[334,385,387,398] -> [124]
[334,385,387,398,R] -> [292]
[334,385,387,399] -> [124]
[334,385,387,399,R] -> [292]
[341] -> [344,386]
[342] -> [345,385]
[342,343] -> [346]
[342,346] -> [343]
[343,385] -> [313]
[344] -> [341]
[345] -> [342]
[346,349] -> [157]
[348] -> [159]
[348,R] -> [347]
[349] -> [156]
[349,R] -> [345]
[350] -> [155]
[350,R] -> [344]
[351] -> [154]
[351,R] -> [292]
[357,385,387,398] -> [360,405]
[357,385,387,399] -> [360,382]
[358,385,387,398] -> [361,404]
[358,385,387,399] -> [361,381]
[359,385,387,398] -> [312,329]
[359,385,387,399] -> [329,379]
[360,385,387,398] -> [357]
[360,385,387,399] -> [357]
[361,385,387,398] -> [358]
[361,385,387,399] -> [358]
[363,365,385,387,398] -> [R]
[363,365,385,387,399] -> [R]
[363,366,385,387,398] -> [R]
[363,366,385,387,398,R] -> [361]
[363,366,385,387,399] -> [R]
[363,366,385,387,399,R] -> [361]
[363,367,385,387,398] -> [E]
[363,367,385,387,398,R] -> [360]
[363,367,385,387,399] -> [E]
[363,367,385,387,399,R] -> [360]
[363,385,387,398] -> [328]
[363,385,387,398,E] -> [367]
[363,385,387,398,R] -> [362,365,366]
[363,385,387,399] -> [328]
[363,385,387,399,E] -> [367]
[363,385,387,399,R] -> [362,365,366]
[364,385,387,398] -> [327]
[364,385,387,398,R] -> [355]
[364,385,387,399] -> [327]
[364,385,387,399,R] -> [355]
[369,374,381,385,387,399] -> [375]
[369,381,385,387,399] -> [383]
[369,381,385,387,399,R] -> [370,372]
[370,381,385,387,399] -> [R]
[370,381,385,387,399,R] -> [369]
[371,381,385,387,399] -> [373]
[372,373,381,385,387,399] -> [R]
[372,381,385,387,399] -> [R]
[372,381,385,387,399,R] -> [369,373]
[373,381,385,387,399] -> [372]
[374,375,381,385,387,399] -> [369]
[374,375,381,385,387,399,R] -> [371]
[374,381,385,387,399] -> [R]
[374,381,385,387,399,R] -> [368]
[378,385,387,399] -> [380,402]
[379,385,387,399] -> [309,359]
[380,385,387,399] -> [378]
[381,383,385,387,399] -> [369]
[381,383,385,387,399,R] -> [380]
[381,385,387,399] -> [358]
[381,385,387,399,R] -> [2,3,353,354,368,370,372,374]
[382,385,387,399] -> [357]
[382,385,387,399,R] -> [352]
[385] -> [342]
[385,387] -> [310]
[385,387,397] -> [311]
[385,387,398] -> [310]
[385,387,398,403] -> [311]
[385,387,398,404] -> [358]
[385,387,398,404,406] -> [R]
[385,387,398,404,406,407] -> [R]
[385,387,398,404,406,407,408] -> [R]
[385,387,398,404,406,407,408,409] -> [R]
[385,387,398,404,406,407,408,409,R] -> [354]
[385,387,398,404,406,407,408,R] -> [353,409]
[385,387,398,404,406,407,R] -> [353,408]
[385,387,398,404,406,R] -> [353,407]
[385,387,398,404,R] -> [376,406]
[385,387,398,405] -> [357]
[385,387,398,405,R] -> [1]
[385,387,398,R] -> [123,326,356]
[385,387,399] -> [308]
[385,387,399,402] -> [378]
[385,387,399,402,R] -> [397]
[385,387,399,R] -> [123,326,356,377]
[385,387,400] -> [307]
[385,387,400,R] -> [355]
[385,387,401] -> [306]
[385,387,401,R] -> [355]
[385,387,R] -> [123,190,305]
[385,388] -> [308]
[385,388,391] -> [298]
[385,388,391,393] -> [R]
[385,388,391,393,394] -> [R]
[385,388,391,393,394,395] -> [R]
[385,388,391,393,394,395,396] -> [R]
[385,388,391,393,394,395,396,R] -> [2]
[385,388,391,393,394,395,R] -> [3,396]
[385,388,391,393,394,R] -> [3,395]
[385,388,391,393,R] -> [3,394]
[385,388,391,R] -> [3,393]
[385,388,392] -> [297]
[385,388,392,R] -> [1]
[385,388,R] -> [123,173,296]
[385,389] -> [307]
[385,389,R] -> [355]
[385,390] -> [306]
[385,390,R] -> [1]
[385,R] -> [123,190,305]
[386] -> [341]
[386,R] -> [355]
[R] -> [54,63,153,340,384]

### Solution ###

[2,3,26,30,33,34,54,57,63,64,67,68,123,126,127,132,135,138,143,144,147,150,153,156,159,162,165,166,169,170,173,176,181,182,185,186,187,190,194,197,198,206,207,210,211,214,215,219,222,225,226,233,234,235,238,239,242,245,246,250,251,254,262,263,266,267,268,269,273,274,277,278,281,282,285,286,287,291,296,298,301,302,305,308,310,311,316,318,319,321,322,326,328,331,332,335,336,339,340,342,345,347,348,349,353,354,356,358,361,362,363,365,366,368,369,370,371,372,373,374,375,376,377,378,380,381,383,384,385,387,388,391,393,394,395,396,397,398,399,402,403,404,406,407,408,409,R]

### Annotated ###

  let
    constructor Nat :E: Type
    constructor Z :R: Nat
    constructor S :R: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      n :E: Nat
        [plus] -E- Z -E- n = n
      m :E: Nat n :E: Nat
        [plus] -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    not :E: (_x2 :E: Bool) -> Bool 
      [not] -E- True = False
      [not] -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :R: Unit
    constructor Pair :E: (_x3 :E: Type) -> (_x4 :E: Type) -> Type
    constructor MkPair :R: (a :E: Type) -> (b :E: Type) -> (_x5 :R: a) -> (_x6 :R: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: Pair -E- a -E- b) -> a 
      a :E: Type b :E: Type x :E: a y :E: b
        [fst] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = x
    snd :R: (a :E: Type) -> (b :E: Type) -> (_x8 :R: Pair -E- a -E- b) -> b 
      a :E: Type b :E: Type x :E: a y :R: b
        [snd] -E- a -E- b -R- ([MkPair] -E- [a] -E- [b] -R- x -R- y) = y
    constructor Either :E: (_x9 :E: Type) -> (_x10 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x11 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x12 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x13 :E: Nat) -> Type
    constructor FZ :E: (n :E: Nat) -> Fin -E- (S -E- n)
    constructor FS :E: (n :E: Nat) -> (_x14 :E: Fin -E- n) -> Fin -E- (S -E- n)
    constructor Vect :E: (_x15 :E: Nat) -> (_x16 :E: Type) -> Type
    constructor VN :E: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :E: (n :E: Nat) -> (a :E: Type) -> (x :E: a) -> (xs :E: Vect -E- n -E- a) -> Vect -E- (S -E- n) -E- a
    constructor State :E: (_x0 :E: Type) -> (_x1 :E: Type) -> Type
    constructor MkSt :R: (st :E: Type) -> (a :E: Type) -> (run :R: (_x2 :R: st) -> Pair -E- st -E- a) -> State -E- st -E- a
    runState :R: (st :E: Type) -> (a :E: Type) -> (_x3 :R: State -E- st -E- a) -> (_x4 :R: st) -> Pair -E- st -E- a 
      st :E: Type a :E: Type run :R: (_x5 :R: st) -> Pair -E- st -E- a
        [runState] -E- st -E- a -R- ([MkSt] -E- [st] -E- [a] -R- run) = run
    execState :R: (st :E: Type) -> (a :E: Type) -> (x :R: State -E- st -E- a) -> (s :R: st) -> a = (\st :E: Type. (\a :E: Type. (\x :R: State -E- st -E- a. (\s :R: st. snd -E- st -E- a -R- (runState -E- st -E- a -R- x -R- s)))))
    stReturn :R: (st :E: Type) -> (a :E: Type) -> (x :R: a) -> State -E- st -E- a = (\st :E: Type. (\a :E: Type. (\x :R: a. MkSt -E- st -E- a -R- (\s :R: st. MkPair -E- st -E- a -R- s -R- x))))
    stBind :R: (st :E: Type) -> (a :E: Type) -> (b :E: Type) -> (x :R: State -E- st -E- a) -> (y :R: (z :R: a) -> State -E- st -E- b) -> State -E- st -E- b 
      st :E: Type a :E: Type b :E: Type f :R: (_x6 :R: st) -> Pair -E- st -E- a g :R: (_x7 :R: a) -> State -E- st -E- b
        [stBind] -E- st -E- a -E- b -R- ([MkSt] -E- [st] -E- [a] -R- f) -R- g = 
          let
            stBind3 :R: (st :E: Type) -> (b :E: Type) -> (_x8 :R: st) -> (_x9 :R: State -E- st -E- b) -> Pair -E- st -E- b 
              st :E: Type b :E: Type s :R: st f :R: (_x10 :R: st) -> Pair -E- st -E- b
                [stBind3] -E- st -E- b -R- s -R- ([MkSt] -E- [st] -E- [b] -R- f) = f -R- s
            stBind2 :R: (st :E: Type) -> (a :E: Type) -> (b :E: Type) -> (g :R: (_x11 :R: a) -> State -E- st -E- b) -> (r :R: Pair -E- st -E- a) -> Pair -E- st -E- b 
              st :E: Type a :E: Type b :E: Type g :R: (_x12 :R: a) -> State -E- st -E- b x :R: a s :R: st
                [stBind2] -E- st -E- a -E- b -R- g -R- ([MkPair] -E- [st] -E- [a] -R- s -R- x) = stBind3 -E- st -E- b -R- s -R- (g -R- x)
          in MkSt -E- st -E- b -R- (\s :R: st. stBind2 -E- st -E- a -E- b -R- g -R- (f -R- s))
    postulate RealWorld :E: Type
    IO :E: (_x0 :E: Type) -> Type = State -E- RealWorld
    ioReturn :R: (a :E: Type) -> (x :R: a) -> IO -E- a = (\a :E: Type. (\x :R: a. stReturn -E- RealWorld -E- a -R- x))
    ioBind :R: (a :E: Type) -> (b :E: Type) -> (x :R: IO -E- a) -> (y :R: (_x1 :R: a) -> IO -E- b) -> IO -E- b = (\a :E: Type. (\b :E: Type. (\x :R: IO -E- a. (\y :R: (_x1 :R: a) -> IO -E- b. stBind -E- RealWorld -E- a -E- b -R- x -R- y))))
    ioWrapImpure :R: (a :E: Type) -> (impureF :R: (delayToken :R: Unit) -> a) -> IO -E- a = (\a :E: Type. (\impureF :R: (delayToken :R: Unit) -> a. MkSt -E- RealWorld -E- a -R- (\w :R: RealWorld. MkPair -E- RealWorld -E- a -R- w -R- (impureF -R- MkUnit))))
    unsafePerformIO :R: (a :E: Type) -> (x :R: IO -E- a) -> a = (\a :E: Type. (\x :R: IO -E- a. 
      let postulate TheWorld :R: RealWorld
      in execState -E- RealWorld -E- a -R- x -R- TheWorld))
    postulate Int :E: Type
    foreign intS :R: (x :R: Int) -> Int
    foreign intZ :R: Int
    postulate Unspec :E: Type
    printSchemeRepr :R: (a :E: Type) -> (x :R: a) -> IO -E- Unspec = (\a :E: Type. (\x :R: a. 
      let foreign nativePrint :R: (a :E: Type) -> (x :R: a) -> Unspec
      in ioWrapImpure -E- Unspec -R- (\delayToken :R: Unit. nativePrint -E- a -R- x)))
    natToInt :R: (_x0 :R: Nat) -> Int 
      [natToInt] -R- Z = intZ
      n :R: Nat
        [natToInt] -R- (S -R- n) = intS -R- (natToInt -R- n)
    foreign intToNat :R: (x :R: Int) -> Nat
    printNat :R: (x :R: Nat) -> IO -E- Unspec = (\x :R: Nat. printSchemeRepr -E- Int -R- (natToInt -R- x))
    main :R: Unspec = unsafePerformIO -E- Unspec -R- (ioBind -E- Nat -E- Unspec -R- (ioReturn -E- Nat -R- 4) -R- (\v :R: Nat. ioBind -E- Unspec -E- Unspec -R- (printNat -R- v) -R- (\_0 :R: Unspec. printSchemeRepr -E- Nat -R- (intToNat -R- (intS -R- (intS -R- (intS -R- intZ)))))))
  in main

### Specialised ###

  let
    constructor Nat :E: Type
    constructor Z :R: Nat
    constructor S :R: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      n :E: Nat
        [plus] -E- Z -E- n = n
      m :E: Nat n :E: Nat
        [plus] -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    not :E: (_x2 :E: Bool) -> Bool 
      [not] -E- True = False
      [not] -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :R: Unit
    constructor Pair :E: (_x3 :E: Type) -> (_x4 :E: Type) -> Type
    constructor MkPair :R: (a :E: Type) -> (b :E: Type) -> (_x5 :R: a) -> (_x6 :R: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: Pair -E- a -E- b) -> a 
      a :E: Type b :E: Type x :E: a y :E: b
        [fst] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = x
    snd :R: (a :E: Type) -> (b :E: Type) -> (_x8 :R: Pair -E- a -E- b) -> b 
      a :E: Type b :E: Type x :E: a y :R: b
        [snd] -E- a -E- b -R- ([MkPair] -E- [a] -E- [b] -R- x -R- y) = y
    constructor Either :E: (_x9 :E: Type) -> (_x10 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x11 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x12 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x13 :E: Nat) -> Type
    constructor FZ :E: (n :E: Nat) -> Fin -E- (S -E- n)
    constructor FS :E: (n :E: Nat) -> (_x14 :E: Fin -E- n) -> Fin -E- (S -E- n)
    constructor Vect :E: (_x15 :E: Nat) -> (_x16 :E: Type) -> Type
    constructor VN :E: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :E: (n :E: Nat) -> (a :E: Type) -> (x :E: a) -> (xs :E: Vect -E- n -E- a) -> Vect -E- (S -E- n) -E- a
    constructor State :E: (_x0 :E: Type) -> (_x1 :E: Type) -> Type
    constructor MkSt :R: (st :E: Type) -> (a :E: Type) -> (run :R: (_x2 :R: st) -> Pair -E- st -E- a) -> State -E- st -E- a
    runState :R: (st :E: Type) -> (a :E: Type) -> (_x3 :R: State -E- st -E- a) -> (_x4 :R: st) -> Pair -E- st -E- a 
      st :E: Type a :E: Type run :R: (_x5 :R: st) -> Pair -E- st -E- a
        [runState] -E- st -E- a -R- ([MkSt] -E- [st] -E- [a] -R- run) = run
    execState :R: (st :E: Type) -> (a :E: Type) -> (x :R: State -E- st -E- a) -> (s :R: st) -> a = (\st :E: Type. (\a :E: Type. (\x :R: State -E- st -E- a. (\s :R: st. snd -E- st -E- a -R- (runState -E- st -E- a -R- x -R- s)))))
    stReturn :R: (st :E: Type) -> (a :E: Type) -> (x :R: a) -> State -E- st -E- a = (\st :E: Type. (\a :E: Type. (\x :R: a. MkSt -E- st -E- a -R- (\s :R: st. MkPair -E- st -E- a -R- s -R- x))))
    stBind :R: (st :E: Type) -> (a :E: Type) -> (b :E: Type) -> (x :R: State -E- st -E- a) -> (y :R: (z :R: a) -> State -E- st -E- b) -> State -E- st -E- b 
      st :E: Type a :E: Type b :E: Type f :R: (_x6 :R: st) -> Pair -E- st -E- a g :R: (_x7 :R: a) -> State -E- st -E- b
        [stBind] -E- st -E- a -E- b -R- ([MkSt] -E- [st] -E- [a] -R- f) -R- g = 
          let
            stBind3 :R: (st :E: Type) -> (b :E: Type) -> (_x8 :R: st) -> (_x9 :R: State -E- st -E- b) -> Pair -E- st -E- b 
              st :E: Type b :E: Type s :R: st f :R: (_x10 :R: st) -> Pair -E- st -E- b
                [stBind3] -E- st -E- b -R- s -R- ([MkSt] -E- [st] -E- [b] -R- f) = f -R- s
            stBind2 :R: (st :E: Type) -> (a :E: Type) -> (b :E: Type) -> (g :R: (_x11 :R: a) -> State -E- st -E- b) -> (r :R: Pair -E- st -E- a) -> Pair -E- st -E- b 
              st :E: Type a :E: Type b :E: Type g :R: (_x12 :R: a) -> State -E- st -E- b x :R: a s :R: st
                [stBind2] -E- st -E- a -E- b -R- g -R- ([MkPair] -E- [st] -E- [a] -R- s -R- x) = stBind3 -E- st -E- b -R- s -R- (g -R- x)
          in MkSt -E- st -E- b -R- (\s :R: st. stBind2 -E- st -E- a -E- b -R- g -R- (f -R- s))
    postulate RealWorld :E: Type
    IO :E: (_x0 :E: Type) -> Type = State -E- RealWorld
    ioReturn :R: (a :E: Type) -> (x :R: a) -> IO -E- a = (\a :E: Type. (\x :R: a. stReturn -E- RealWorld -E- a -R- x))
    ioBind :R: (a :E: Type) -> (b :E: Type) -> (x :R: IO -E- a) -> (y :R: (_x1 :R: a) -> IO -E- b) -> IO -E- b = (\a :E: Type. (\b :E: Type. (\x :R: IO -E- a. (\y :R: (_x1 :R: a) -> IO -E- b. stBind -E- RealWorld -E- a -E- b -R- x -R- y))))
    ioWrapImpure :R: (a :E: Type) -> (impureF :R: (delayToken :R: Unit) -> a) -> IO -E- a = (\a :E: Type. (\impureF :R: (delayToken :R: Unit) -> a. MkSt -E- RealWorld -E- a -R- (\w :R: RealWorld. MkPair -E- RealWorld -E- a -R- w -R- (impureF -R- MkUnit))))
    unsafePerformIO :R: (a :E: Type) -> (x :R: IO -E- a) -> a = (\a :E: Type. (\x :R: IO -E- a. 
      let postulate TheWorld :R: RealWorld
      in execState -E- RealWorld -E- a -R- x -R- TheWorld))
    postulate Int :E: Type
    foreign intS :R: (x :R: Int) -> Int
    foreign intZ :R: Int
    postulate Unspec :E: Type
    printSchemeRepr :R: (a :E: Type) -> (x :R: a) -> IO -E- Unspec = (\a :E: Type. (\x :R: a. 
      let foreign nativePrint :R: (a :E: Type) -> (x :R: a) -> Unspec
      in ioWrapImpure -E- Unspec -R- (\delayToken :R: Unit. nativePrint -E- a -R- x)))
    natToInt :R: (_x0 :R: Nat) -> Int 
      [natToInt] -R- Z = intZ
      n :R: Nat
        [natToInt] -R- (S -R- n) = intS -R- (natToInt -R- n)
    foreign intToNat :R: (x :R: Int) -> Nat
    printNat :R: (x :R: Nat) -> IO -E- Unspec = (\x :R: Nat. printSchemeRepr -E- Int -R- (natToInt -R- x))
    main :R: Unspec = unsafePerformIO -E- Unspec -R- (ioBind -E- Nat -E- Unspec -R- (ioReturn -E- Nat -R- 4) -R- (\v :R: Nat. ioBind -E- Unspec -E- Unspec -R- (printNat -R- v) -R- (\_0 :R: Unspec. printSchemeRepr -E- Nat -R- (intToNat -R- (intS -R- (intS -R- (intS -R- intZ)))))))
  in main

### Final annotation ###

  let
    constructor Nat :E: Type
    constructor Z :R: Nat
    constructor S :R: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      n :E: Nat
        [plus] -E- Z -E- n = n
      m :E: Nat n :E: Nat
        [plus] -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    not :E: (_x2 :E: Bool) -> Bool 
      [not] -E- True = False
      [not] -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :R: Unit
    constructor Pair :E: (_x3 :E: Type) -> (_x4 :E: Type) -> Type
    constructor MkPair :R: (a :E: Type) -> (b :E: Type) -> (_x5 :R: a) -> (_x6 :R: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: Pair -E- a -E- b) -> a 
      a :E: Type b :E: Type x :E: a y :E: b
        [fst] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = x
    snd :R: (a :E: Type) -> (b :E: Type) -> (_x8 :R: Pair -E- a -E- b) -> b 
      a :E: Type b :E: Type x :E: a y :R: b
        [snd] -E- a -E- b -R- ([MkPair] -E- [a] -E- [b] -R- x -R- y) = y
    constructor Either :E: (_x9 :E: Type) -> (_x10 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x11 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x12 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x13 :E: Nat) -> Type
    constructor FZ :E: (n :E: Nat) -> Fin -E- (S -E- n)
    constructor FS :E: (n :E: Nat) -> (_x14 :E: Fin -E- n) -> Fin -E- (S -E- n)
    constructor Vect :E: (_x15 :E: Nat) -> (_x16 :E: Type) -> Type
    constructor VN :E: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :E: (n :E: Nat) -> (a :E: Type) -> (x :E: a) -> (xs :E: Vect -E- n -E- a) -> Vect -E- (S -E- n) -E- a
    constructor State :E: (_x0 :E: Type) -> (_x1 :E: Type) -> Type
    constructor MkSt :R: (st :E: Type) -> (a :E: Type) -> (run :R: (_x2 :R: st) -> Pair -E- st -E- a) -> State -E- st -E- a
    runState :R: (st :E: Type) -> (a :E: Type) -> (_x3 :R: State -E- st -E- a) -> (_x4 :R: st) -> Pair -E- st -E- a 
      st :E: Type a :E: Type run :R: (_x5 :R: st) -> Pair -E- st -E- a
        [runState] -E- st -E- a -R- ([MkSt] -E- [st] -E- [a] -R- run) = run
    execState :R: (st :E: Type) -> (a :E: Type) -> (x :R: State -E- st -E- a) -> (s :R: st) -> a = (\st :E: Type. (\a :E: Type. (\x :R: State -E- st -E- a. (\s :R: st. snd -E- st -E- a -R- (runState -E- st -E- a -R- x -R- s)))))
    stReturn :R: (st :E: Type) -> (a :E: Type) -> (x :R: a) -> State -E- st -E- a = (\st :E: Type. (\a :E: Type. (\x :R: a. MkSt -E- st -E- a -R- (\s :R: st. MkPair -E- st -E- a -R- s -R- x))))
    stBind :R: (st :E: Type) -> (a :E: Type) -> (b :E: Type) -> (x :R: State -E- st -E- a) -> (y :R: (z :R: a) -> State -E- st -E- b) -> State -E- st -E- b 
      st :E: Type a :E: Type b :E: Type f :R: (_x6 :R: st) -> Pair -E- st -E- a g :R: (_x7 :R: a) -> State -E- st -E- b
        [stBind] -E- st -E- a -E- b -R- ([MkSt] -E- [st] -E- [a] -R- f) -R- g = 
          let
            stBind3 :R: (st :E: Type) -> (b :E: Type) -> (_x8 :R: st) -> (_x9 :R: State -E- st -E- b) -> Pair -E- st -E- b 
              st :E: Type b :E: Type s :R: st f :R: (_x10 :R: st) -> Pair -E- st -E- b
                [stBind3] -E- st -E- b -R- s -R- ([MkSt] -E- [st] -E- [b] -R- f) = f -R- s
            stBind2 :R: (st :E: Type) -> (a :E: Type) -> (b :E: Type) -> (g :R: (_x11 :R: a) -> State -E- st -E- b) -> (r :R: Pair -E- st -E- a) -> Pair -E- st -E- b 
              st :E: Type a :E: Type b :E: Type g :R: (_x12 :R: a) -> State -E- st -E- b x :R: a s :R: st
                [stBind2] -E- st -E- a -E- b -R- g -R- ([MkPair] -E- [st] -E- [a] -R- s -R- x) = stBind3 -E- st -E- b -R- s -R- (g -R- x)
          in MkSt -E- st -E- b -R- (\s :R: st. stBind2 -E- st -E- a -E- b -R- g -R- (f -R- s))
    postulate RealWorld :E: Type
    IO :E: (_x0 :E: Type) -> Type = State -E- RealWorld
    ioReturn :R: (a :E: Type) -> (x :R: a) -> IO -E- a = (\a :E: Type. (\x :R: a. stReturn -E- RealWorld -E- a -R- x))
    ioBind :R: (a :E: Type) -> (b :E: Type) -> (x :R: IO -E- a) -> (y :R: (_x1 :R: a) -> IO -E- b) -> IO -E- b = (\a :E: Type. (\b :E: Type. (\x :R: IO -E- a. (\y :R: (_x1 :R: a) -> IO -E- b. stBind -E- RealWorld -E- a -E- b -R- x -R- y))))
    ioWrapImpure :R: (a :E: Type) -> (impureF :R: (delayToken :R: Unit) -> a) -> IO -E- a = (\a :E: Type. (\impureF :R: (delayToken :R: Unit) -> a. MkSt -E- RealWorld -E- a -R- (\w :R: RealWorld. MkPair -E- RealWorld -E- a -R- w -R- (impureF -R- MkUnit))))
    unsafePerformIO :R: (a :E: Type) -> (x :R: IO -E- a) -> a = (\a :E: Type. (\x :R: IO -E- a. 
      let postulate TheWorld :R: RealWorld
      in execState -E- RealWorld -E- a -R- x -R- TheWorld))
    postulate Int :E: Type
    foreign intS :R: (x :R: Int) -> Int
    foreign intZ :R: Int
    postulate Unspec :E: Type
    printSchemeRepr :R: (a :E: Type) -> (x :R: a) -> IO -E- Unspec = (\a :E: Type. (\x :R: a. 
      let foreign nativePrint :R: (a :E: Type) -> (x :R: a) -> Unspec
      in ioWrapImpure -E- Unspec -R- (\delayToken :R: Unit. nativePrint -E- a -R- x)))
    natToInt :R: (_x0 :R: Nat) -> Int 
      [natToInt] -R- Z = intZ
      n :R: Nat
        [natToInt] -R- (S -R- n) = intS -R- (natToInt -R- n)
    foreign intToNat :R: (x :R: Int) -> Nat
    printNat :R: (x :R: Nat) -> IO -E- Unspec = (\x :R: Nat. printSchemeRepr -E- Int -R- (natToInt -R- x))
    main :R: Unspec = unsafePerformIO -E- Unspec -R- (ioBind -E- Nat -E- Unspec -R- (ioReturn -E- Nat -R- 4) -R- (\v :R: Nat. ioBind -E- Unspec -E- Unspec -R- (printNat -R- v) -R- (\_0 :R: Unspec. printSchemeRepr -E- Nat -R- (intToNat -R- (intS -R- (intS -R- (intS -R- intZ)))))))
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor Z : Nat
    constructor S : (x) -> Nat
    constructor MkUnit : Unit
    constructor MkPair : (_x5) -> (_x6) -> Pair
    snd 
      [_] ([_] _ y) = y
    constructor MkSt : (run) -> State
    runState 
      [_] ([_] run) = run
    execState = (\x. (\s. snd (runState x s)))
    stReturn = (\x. MkSt (\s. MkPair s x))
    stBind 
      [_] ([_] f) g = 
        let
          stBind3 
            [_] s ([_] f) = f s
          stBind2 
            [_] g ([_] s x) = stBind3 s (g x)
        in MkSt (\s. stBind2 g (f s))
    ioReturn = (\x. stReturn x)
    ioBind = (\x. (\y. stBind x y))
    ioWrapImpure = (\impureF. MkSt (\w. MkPair w (impureF MkUnit)))
    unsafePerformIO = (\x. 
      let postulate TheWorld : RealWorld
      in execState x TheWorld)
    foreign intS
    foreign intZ
    printSchemeRepr = (\x. 
      let foreign nativePrint
      in ioWrapImpure (\delayToken. nativePrint x))
    natToInt 
      [_] Z = intZ
      [_] (S n) = intS (natToInt n)
    foreign intToNat
    printNat = (\x. printSchemeRepr (natToInt x))
    main = unsafePerformIO (ioBind (ioReturn 4) (\v. ioBind (printNat v) (\_0. printSchemeRepr (intToNat (intS (intS (intS intZ)))))))
  in main

### Normal forms ###

unerased:
  
  let
    constructor Nat : Type
    postulate Int : Type
    foreign intS : (x :R: Int) -> Int
    foreign intZ : Int
    postulate Unspec : Type
    foreign intToNat : (x :R: Int) -> Nat
  in 
    let foreign nativePrint0 : (a :E: Type) -> (x :R: a) -> Unspec
    in nativePrint0 Nat (intToNat (intS (intS (intS intZ))))

erased:
  
  let
    foreign intS
    foreign intZ
    foreign intToNat
  in 
    let foreign nativePrint0
    in nativePrint0 (intToNat (intS (intS (intS intZ))))

