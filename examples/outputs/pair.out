-- vim: ft=ttstar

### Desugared ###

  let
    postulate Bool : Type
    postulate T : Bool
    postulate F : Bool
    postulate Pair : Type
    postulate P : (x : Bool) -> (y : Bool) -> Pair
    fst : (_x0 : Pair) -> Bool 
      (l : Bool) (r : Bool)
         (P l r) = l
    snd : (_x1 : Pair) -> Bool 
      (l : Bool) (r : Bool)
         (P l r) = r
    and : (_x2 : Bool) -> (_x3 : Bool) -> Bool 
      (y : Bool)
         T y = y
      (y : Bool)
         F y = F
    main : Bool = and (fst (P T F)) (snd (P F T))
  in main

### Evarified ###

  let
    postulate Bool :1: Type
    postulate T :2: Bool
    postulate F :3: Bool
    postulate Pair :4: Type
    postulate P :5: (x :6: Bool) -> (y :7: Bool) -> Pair
    fst :8: (_x0 :9: Pair) -> Bool 
      (l :10: Bool) (r :11: Bool)
         -12- (P -13- l -14- r) = l
    snd :15: (_x1 :16: Pair) -> Bool 
      (l :17: Bool) (r :18: Bool)
         -19- (P -20- l -21- r) = r
    and :22: (_x2 :23: Bool) -> (_x3 :24: Bool) -> Bool 
      (y :25: Bool)
         -26- T -27- y = y
      (y :28: Bool)
         -29- F -30- y = F
    main :31: Bool = and -33- (fst -34- (P -36- T -35- F)) -32- (snd -37- (P -39- F -38- T))
  in main

### Constraints ###

[] -> [2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,20,21,22,23,24,25,26,27,29,30,32,33,34,35,36,37,38,39,R]
[R] -> [31]

### Solution ###

[2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,R]

### Annotated ###

  let
    postulate Bool :E: Type
    postulate T :R: Bool
    postulate F :R: Bool
    postulate Pair :E: Type
    postulate P :R: (x :R: Bool) -> (y :R: Bool) -> Pair
    fst :R: (_x0 :R: Pair) -> Bool 
      (l :R: Bool) (r :E: Bool)
         -R- (P -R- l -R- r) = l
    snd :R: (_x1 :R: Pair) -> Bool 
      (l :E: Bool) (r :R: Bool)
         -R- (P -R- l -R- r) = r
    and :R: (_x2 :R: Bool) -> (_x3 :R: Bool) -> Bool 
      (y :R: Bool)
         -R- T -R- y = y
      (y :E: Bool)
         -R- F -R- y = F
    main :R: Bool = and -R- (fst -R- (P -R- T -R- F)) -R- (snd -R- (P -R- F -R- T))
  in main

### Specialised ###

  let
    postulate Bool :E: Type
    postulate T :R: Bool
    postulate F :R: Bool
    postulate Pair :E: Type
    postulate P :R: (x :R: Bool) -> (y :R: Bool) -> Pair
    fst :R: (_x0 :R: Pair) -> Bool 
      (l :R: Bool) (r :E: Bool)
         -R- (P -R- l -R- r) = l
    snd :R: (_x1 :R: Pair) -> Bool 
      (l :E: Bool) (r :R: Bool)
         -R- (P -R- l -R- r) = r
    and :R: (_x2 :R: Bool) -> (_x3 :R: Bool) -> Bool 
      (y :R: Bool)
         -R- T -R- y = y
      (y :E: Bool)
         -R- F -R- y = F
    main :R: Bool = and -R- (fst -R- (P -R- T -R- F)) -R- (snd -R- (P -R- F -R- T))
  in main

### Final annotation ###

  let
    postulate Bool :E: Type
    postulate T :R: Bool
    postulate F :R: Bool
    postulate Pair :E: Type
    postulate P :R: (x :R: Bool) -> (y :R: Bool) -> Pair
    fst :R: (_x0 :R: Pair) -> Bool 
      (l :R: Bool) (r :E: Bool)
         -R- (P -R- l -R- r) = l
    snd :R: (_x1 :R: Pair) -> Bool 
      (l :E: Bool) (r :R: Bool)
         -R- (P -R- l -R- r) = r
    and :R: (_x2 :R: Bool) -> (_x3 :R: Bool) -> Bool 
      (y :R: Bool)
         -R- T -R- y = y
      (y :E: Bool)
         -R- F -R- y = F
    main :R: Bool = and -R- (fst -R- (P -R- T -R- F)) -R- (snd -R- (P -R- F -R- T))
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    postulate T : Bool
    postulate F : Bool
    postulate P : (x) -> (y) -> Pair
    fst 
       (P l _) = l
    snd 
       (P _ r) = r
    and 
       T y = y
       F _ = F
    main = and (fst (P T F)) (snd (P F T))
  in main

### Normal forms ###

unerased:
  
  let
    postulate Bool : Type
    postulate T : Bool
  in T

erased:
  
  let postulate T : Bool
  in T

