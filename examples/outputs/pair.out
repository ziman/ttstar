-- vim: ft=ttstar

### Desugared ###

  let
    constructor Bool : Type
    constructor T : Bool
    constructor F : Bool
    constructor Pair : Type
    constructor P : (x : Bool) -> (y : Bool) -> Pair
    fst : (_x0 : Pair) -> Bool 
      l : Bool r : Bool
        [fst] (P l r) = l
    snd : (_x1 : Pair) -> Bool 
      l : Bool r : Bool
        [snd] (P l r) = r
    and : (_x2 : Bool) -> (_x3 : Bool) -> Bool 
      y : Bool
        [and] T y = y
      y : Bool
        [and] F y = F
    main : Bool = and (fst (P T F)) (snd (P F T))
  in main

### Evarified ###

  let
    constructor Bool :1: Type
    constructor T :2: Bool
    constructor F :3: Bool
    constructor Pair :4: Type
    constructor P :5: (x :6: Bool) -> (y :7: Bool) -> Pair
    fst :8: (_x0 :9: Pair) -> Bool 
      l :10: Bool r :11: Bool
        [fst] -12- (P -14- l -13- r) = l
    snd :15: (_x1 :16: Pair) -> Bool 
      l :17: Bool r :18: Bool
        [snd] -19- (P -21- l -20- r) = r
    and :22: (_x2 :23: Bool) -> (_x3 :24: Bool) -> Bool 
      y :25: Bool
        [and] -27- T -26- y = y
      y :28: Bool
        [and] -30- F -29- y = F
    main :31: Bool = and -33- (fst -34- (P -36- T -35- F)) -32- (snd -37- (P -39- F -38- T))
  in main

### Constraints ###

[6,12,33] -> [14]
[6,19,32] -> [21]
[6,32,37] -> [39]
[6,33,34] -> [36]
[7,12,33] -> [13]
[7,19,32] -> [20]
[7,32,37] -> [38]
[7,33,34] -> [35]
[9,33] -> [34]
[9,33,R] -> [12]
[10,33] -> [14]
[11,33] -> [13]
[12,13,33] -> [7]
[12,14,33] -> [6]
[12,33] -> [R]
[12,33,R] -> [9]
[13,33] -> [12]
[14,33] -> [12]
[16,32] -> [37]
[16,32,R] -> [19]
[17,32] -> [21]
[18,32] -> [20]
[19,20,32] -> [7]
[19,21,32] -> [6]
[19,32] -> [R]
[19,32,R] -> [16]
[20,32] -> [19]
[21,32] -> [19]
[23] -> [33]
[23,R] -> [27,30]
[24] -> [32]
[24,R] -> [26,29]
[25] -> [26]
[26] -> [R]
[26,R] -> [24]
[27] -> [R]
[27,R] -> [23]
[28] -> [29]
[29] -> [R]
[29,R] -> [24]
[30] -> [R]
[30,R] -> [23]
[32] -> [24]
[32,37] -> [16]
[32,37,38] -> [7]
[32,37,38,R] -> [2]
[32,37,39] -> [6]
[32,37,39,R] -> [3]
[32,37,R] -> [5]
[32,R] -> [5,15,18,19]
[33] -> [23]
[33,34] -> [9]
[33,34,35] -> [7]
[33,34,35,R] -> [3]
[33,34,36] -> [6]
[33,34,36,R] -> [2]
[33,34,R] -> [5]
[33,R] -> [5,8,10,12]
[R] -> [2,3,22,25,27,30,31]

### Solution ###

[2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,R]

### Annotated ###

  let
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor Pair :E: Type
    constructor P :R: (x :R: Bool) -> (y :R: Bool) -> Pair
    fst :R: (_x0 :R: Pair) -> Bool 
      l :R: Bool r :E: Bool
        [fst] -R- (P -R- l -R- r) = l
    snd :R: (_x1 :R: Pair) -> Bool 
      l :E: Bool r :R: Bool
        [snd] -R- (P -R- l -R- r) = r
    and :R: (_x2 :R: Bool) -> (_x3 :R: Bool) -> Bool 
      y :R: Bool
        [and] -R- T -R- y = y
      y :E: Bool
        [and] -R- F -R- y = F
    main :R: Bool = and -R- (fst -R- (P -R- T -R- F)) -R- (snd -R- (P -R- F -R- T))
  in main

### Specialised ###

  let
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor Pair :E: Type
    constructor P :R: (x :R: Bool) -> (y :R: Bool) -> Pair
    fst :R: (_x0 :R: Pair) -> Bool 
      l :R: Bool r :E: Bool
        [fst] -R- (P -R- l -R- r) = l
    snd :R: (_x1 :R: Pair) -> Bool 
      l :E: Bool r :R: Bool
        [snd] -R- (P -R- l -R- r) = r
    and :R: (_x2 :R: Bool) -> (_x3 :R: Bool) -> Bool 
      y :R: Bool
        [and] -R- T -R- y = y
      y :E: Bool
        [and] -R- F -R- y = F
    main :R: Bool = and -R- (fst -R- (P -R- T -R- F)) -R- (snd -R- (P -R- F -R- T))
  in main

### Final annotation ###

  let
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor Pair :E: Type
    constructor P :R: (x :R: Bool) -> (y :R: Bool) -> Pair
    fst :R: (_x0 :R: Pair) -> Bool 
      l :R: Bool r :E: Bool
        [fst] -R- (P -R- l -R- r) = l
    snd :R: (_x1 :R: Pair) -> Bool 
      l :E: Bool r :R: Bool
        [snd] -R- (P -R- l -R- r) = r
    and :R: (_x2 :R: Bool) -> (_x3 :R: Bool) -> Bool 
      y :R: Bool
        [and] -R- T -R- y = y
      y :E: Bool
        [and] -R- F -R- y = F
    main :R: Bool = and -R- (fst -R- (P -R- T -R- F)) -R- (snd -R- (P -R- F -R- T))
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor T : Bool
    constructor F : Bool
    constructor P : (x) -> (y) -> Pair
    fst 
      [_] (P l _) = l
    snd 
      [_] (P _ r) = r
    and 
      [_] T y = y
      [_] F _ = F
    main = and (fst (P T F)) (snd (P F T))
  in main

### Normal forms ###

unerased:
  
  let
    constructor Bool : Type
    constructor T : Bool
  in T

erased:
  
  let constructor T : Bool
  in T

