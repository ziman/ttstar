-- vim: ft=ttstar

### Desugared ###

  let
    constructor Id : (a : Type) -> (x : a) -> (y : a) -> Type
    constructor Refl : (a : Type) -> (x : a) -> Id a x x
    id : (a : Type) -> (_x0 : a) -> a = (\a : Type. (\x : a. x))
    subst : (a : Type) -> (P : (_x1 : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (w : P x) -> P y 
      a : Type P : (_x2 : a) -> Type x : a
        [subst] a P x [x] [Refl a x] = (\w : P x. w)
    cong : (a : Type) -> (b : Type) -> (f : (_x3 : a) -> b) -> (x : a) -> (y : a) -> (eq : Id a x y) -> Id b (f x) (f y) 
      a : Type b : Type f : (_x4 : a) -> b x : a
        [cong] a b f x [x] [Refl a x] = Refl b (f x)
    constructor Bool : Type
    constructor T : Bool
    constructor F : Bool
    constructor List : Type
    constructor Nil : List
    constructor Cons : (x :R: Bool) -> (xs :R: List) -> List
    one : (x : Bool) -> List = (\x : Bool. Cons x Nil)
    app : (_x5 : List) -> (_x6 : List) -> List 
      ys : List
        [app] Nil ys = ys
      x : Bool xs : List ys : List
        [app] (Cons x xs) ys = Cons x (app xs ys)
    appRightNeutral : (ys : List) -> Id List ys (app ys Nil) 
      [appRightNeutral] Nil = Refl List Nil
      x : Bool xs : List
        [appRightNeutral] (Cons x xs) = cong List List (Cons x) xs (app xs Nil) (appRightNeutral xs)
    appAssoc : (xs : List) -> (ys : List) -> (zs : List) -> Id List (app (app xs ys) zs) (app xs (app ys zs)) 
      ys : List zs : List
        [appAssoc] Nil ys zs = Refl List (app ys zs)
      x : Bool xs : List ys : List zs : List
        [appAssoc] (Cons x xs) ys zs = cong List List (Cons x) (app (app xs ys) zs) (app xs (app ys zs)) (appAssoc xs ys zs)
    constructor Rev : (_x7 : List) -> Type
    constructor RNil : Rev Nil
    constructor RSnoc : (xs : List) -> (x : Bool) -> (rxs : Rev xs) -> Rev (app xs (one x))
    rev' : (xs : List) -> (rxs : Rev xs) -> (ys : List) -> Rev (app xs ys) 
      xs : List rxs : Rev xs
        [rev'] xs rxs Nil = subst List Rev xs (app xs Nil) (appRightNeutral xs) rxs
      xs : List rxs : Rev xs y : Bool ys : List
        [rev'] xs rxs (Cons y ys) = subst List Rev (app (app xs (one y)) ys) (app xs (Cons y ys)) (appAssoc xs (one y) ys) (rev' (app xs (one y)) (RSnoc xs y rxs) ys)
    rev : (xs : List) -> Rev xs = (\xs : List. rev' Nil RNil xs)
    reverse' : (xs : List) -> (rxs : Rev xs) -> List 
      [reverse'] [Nil] RNil = Nil
      xs : List x : Bool rxs : Rev xs
        [reverse'] [app xs (one x)] (RSnoc xs x rxs) = Cons x (reverse' xs rxs)
    reverse : (xs : List) -> List = (\xs : List. reverse' xs (rev xs))
    main : List = reverse (Cons T (Cons F (Cons T (Cons F Nil))))
  in main

### Evarified ###

  let
    constructor Id :1: (a :2: Type) -> (x :3: a) -> (y :4: a) -> Type
    constructor Refl :5: (a :6: Type) -> (x :7: a) -> Id -10- a -9- x -8- x
    id :11: (a :12: Type) -> (_x0 :13: a) -> a = (\a :14: Type. (\x :15: a. x))
    subst :16: (a :17: Type) -> (P :18: (_x1 :19: a) -> Type) -> (x :20: a) -> (y :21: a) -> (eq :22: Id -25- a -24- x -23- y) -> (w :26: P -27- x) -> P -28- y 
      a :29: Type P :30: (_x2 :31: a) -> Type x :32: a
        [subst] -37- a -36- P -35- x -34- [x] -33- [Refl -39- a -38- x] = (\w :40: P -41- x. w)
    cong :42: (a :43: Type) -> (b :44: Type) -> (f :45: (_x3 :46: a) -> b) -> (x :47: a) -> (y :48: a) -> (eq :49: Id -52- a -51- x -50- y) -> Id -55- b -54- (f -56- x) -53- (f -57- y) 
      a :58: Type b :59: Type f :60: (_x4 :61: a) -> b x :62: a
        [cong] -68- a -67- b -66- f -65- x -64- [x] -63- [Refl -70- a -69- x] = Refl -72- b -71- (f -73- x)
    constructor Bool :74: Type
    constructor T :75: Bool
    constructor F :76: Bool
    constructor List :77: Type
    constructor Nil :78: List
    constructor Cons :79: (x :R: Bool) -> (xs :R: List) -> List
    one :80: (x :81: Bool) -> List = (\x :82: Bool. Cons -84- x -83- Nil)
    app :85: (_x5 :86: List) -> (_x6 :87: List) -> List 
      ys :88: List
        [app] -90- Nil -89- ys = ys
      x :91: Bool xs :92: List ys :93: List
        [app] -95- (Cons -97- x -96- xs) -94- ys = Cons -99- x -98- (app -101- xs -100- ys)
    appRightNeutral :102: (ys :103: List) -> Id -106- List -105- ys -104- (app -108- ys -107- Nil) 
      [appRightNeutral] -109- Nil = Refl -111- List -110- Nil
      x :112: Bool xs :113: List
        [appRightNeutral] -114- (Cons -116- x -115- xs) = cong -122- List -121- List -120- (Cons -123- x) -119- xs -118- (app -125- xs -124- Nil) -117- (appRightNeutral -126- xs)
    appAssoc :127: (xs :128: List) -> (ys :129: List) -> (zs :130: List) -> Id -133- List -132- (app -135- (app -137- xs -136- ys) -134- zs) -131- (app -139- xs -138- (app -141- ys -140- zs)) 
      ys :142: List zs :143: List
        [appAssoc] -146- Nil -145- ys -144- zs = Refl -148- List -147- (app -150- ys -149- zs)
      x :151: Bool xs :152: List ys :153: List zs :154: List
        [appAssoc] -157- (Cons -159- x -158- xs) -156- ys -155- zs = cong -165- List -164- List -163- (Cons -166- x) -162- (app -168- (app -170- xs -169- ys) -167- zs) -161- (app -172- xs -171- (app -174- ys -173- zs)) -160- (appAssoc -177- xs -176- ys -175- zs)
    constructor Rev :178: (_x7 :179: List) -> Type
    constructor RNil :180: Rev -181- Nil
    constructor RSnoc :182: (xs :183: List) -> (x :184: Bool) -> (rxs :185: Rev -186- xs) -> Rev -187- (app -189- xs -188- (one -190- x))
    rev' :191: (xs :192: List) -> (rxs :193: Rev -194- xs) -> (ys :195: List) -> Rev -196- (app -198- xs -197- ys) 
      xs :199: List rxs :200: Rev -201- xs
        [rev'] -204- xs -203- rxs -202- Nil = subst -210- List -209- Rev -208- xs -207- (app -212- xs -211- Nil) -206- (appRightNeutral -213- xs) -205- rxs
      xs :214: List rxs :215: Rev -216- xs y :217: Bool ys :218: List
        [rev'] -221- xs -220- rxs -219- (Cons -223- y -222- ys) = subst -229- List -228- Rev -227- (app -231- (app -233- xs -232- (one -234- y)) -230- ys) -226- (app -236- xs -235- (Cons -238- y -237- ys)) -225- (appAssoc -241- xs -240- (one -242- y) -239- ys) -224- (rev' -245- (app -247- xs -246- (one -248- y)) -244- (RSnoc -251- xs -250- y -249- rxs) -243- ys)
    rev :252: (xs :253: List) -> Rev -254- xs = (\xs :255: List. rev' -258- Nil -257- RNil -256- xs)
    reverse' :259: (xs :260: List) -> (rxs :261: Rev -262- xs) -> List 
      [reverse'] -264- [Nil] -263- RNil = Nil
      xs :265: List x :266: Bool rxs :267: Rev -268- xs
        [reverse'] -270- [app -272- xs -271- (one -273- x)] -269- (RSnoc -276- xs -275- x -274- rxs) = Cons -278- x -277- (reverse' -280- xs -279- rxs)
    reverse :281: (xs :282: List) -> List = (\xs :283: List. reverse' -285- xs -284- (rev -286- xs))
    main :287: List = reverse -288- (Cons -290- T -289- (Cons -292- F -291- (Cons -294- T -293- (Cons -296- F -295- Nil))))
  in main

### Constraints ###

[] -> [16,26,40,75,76,78,79,180,182,184,185,191,193,195,200,202,203,205,215,217,218,219,220,222,223,224,243,244,249,250,252,253,255,256,257,259,261,263,266,267,269,274,275,277,278,279,281,282,283,284,286,288,289,290,291,292,293,294,295,296,R]
[6,33] -> [39]
[6,63,206] -> [70]
[6,63,225] -> [70]
[6,206] -> [72,111]
[6,225] -> [72,148]
[7,33] -> [38]
[7,63,206] -> [69]
[7,63,225] -> [69]
[7,206] -> [71,110]
[7,225] -> [71,147]
[8,33] -> [23]
[8,63,206] -> [50]
[8,63,225] -> [50]
[8,206] -> [53,104]
[8,225] -> [53,131]
[9,33] -> [24]
[9,63,206] -> [51]
[9,63,225] -> [51]
[9,206] -> [54,105]
[9,225] -> [54,132]
[10,33] -> [25]
[10,63,206] -> [52]
[10,63,225] -> [52]
[10,206] -> [55,106]
[10,225] -> [55,133]
[17] -> [37,210,229]
[18] -> [36,209,228]
[19,36] -> [31]
[19,209] -> [179]
[19,228] -> [179]
[20] -> [35,208,227]
[21] -> [34,207,226]
[22] -> [33,206,225]
[23,33] -> [8]
[23,206] -> [104]
[23,225] -> [131]
[24,33] -> [9]
[24,206] -> [105]
[24,225] -> [132]
[25,33] -> [10]
[25,206] -> [106]
[25,225] -> [133]
[27] -> [41,196,201]
[28] -> [41,196]
[29] -> [37]
[30] -> [36]
[31,36] -> [19]
[32] -> [35]
[33] -> [5,22,R]
[33,38] -> [7,32]
[33,39] -> [6,29]
[34] -> [21,32,R]
[35] -> [20,R]
[36] -> [18,R]
[37] -> [17,R]
[41] -> [27,28]
[43,206] -> [68,122]
[43,225] -> [68,165]
[44,206] -> [67,121]
[44,225] -> [67,164]
[45,206] -> [66,120]
[45,225] -> [66,163]
[46,66,206] -> [61]
[46,66,225] -> [61]
[46,120,206] -> [R]
[46,163,225] -> [R]
[47,206] -> [65,119]
[47,225] -> [65,162]
[48,206] -> [64,118]
[48,225] -> [64,161]
[49,206] -> [63,117]
[49,225] -> [63,160]
[50,63,206] -> [8]
[50,63,225] -> [8]
[50,117,206] -> [104]
[50,160,225] -> [131]
[51,63,206] -> [9]
[51,63,225] -> [9]
[51,117,206] -> [105]
[51,160,225] -> [132]
[52,63,206] -> [10]
[52,63,225] -> [10]
[52,117,206] -> [106]
[52,160,225] -> [133]
[53,57,206] -> [73]
[53,57,225] -> [73]
[53,73,206] -> [57]
[53,73,225] -> [57]
[53,206] -> [8,104]
[53,225] -> [8,131]
[54,56,206] -> [73]
[54,56,225] -> [73]
[54,73,206] -> [56]
[54,73,225] -> [56]
[54,206] -> [9,105]
[54,225] -> [9,132]
[55,206] -> [10,106]
[55,225] -> [10,133]
[56,105,206] -> [115]
[56,132,225] -> [98]
[57,104,206] -> [98]
[57,131,225] -> [98]
[58,206] -> [68]
[58,225] -> [68]
[59,206] -> [67]
[59,225] -> [67]
[60,206] -> [66]
[60,225] -> [66]
[61,66,206] -> [46]
[61,66,225] -> [46]
[61,71,206] -> [73]
[61,71,225] -> [73]
[62,206] -> [65]
[62,225] -> [65]
[63,69,206] -> [7,62]
[63,69,225] -> [7,62]
[63,70,206] -> [6,58]
[63,70,225] -> [6,58]
[63,206] -> [5,49,R]
[63,225] -> [5,49,R]
[64,206] -> [48,62,R]
[64,225] -> [48,62,R]
[65,206] -> [47,R]
[65,225] -> [47,R]
[66,206] -> [45,R]
[66,225] -> [45,R]
[67,206] -> [44,R]
[67,225] -> [44,R]
[68,206] -> [43,R]
[68,225] -> [43,R]
[71,73,206] -> [61,62]
[71,73,225] -> [61,62]
[71,206] -> [7,60]
[71,225] -> [7,60]
[72,206] -> [6,59]
[72,225] -> [6,59]
[81,225,240] -> [242]
[81,227,231,232] -> [234]
[81,245,246] -> [248]
[81,270,271] -> [273]
[83,131,138,225] -> [96]
[83,132,135,136,225] -> [83]
[83,187,188] -> [83]
[83,196,198,246] -> [83]
[84,131,138,225] -> [97]
[84,132,135,136,225] -> [84]
[84,187,188] -> [84]
[84,196,198,246] -> [84]
[86,118,206] -> [125]
[86,147,225] -> [150]
[86,161,171,225] -> [174]
[86,161,225] -> [172]
[86,162,168,225] -> [170]
[86,162,225] -> [168]
[86,207] -> [212]
[86,226] -> [236]
[86,227] -> [231]
[86,227,231] -> [233]
[86,245] -> [247]
[86,270] -> [272]
[87,118,206] -> [124]
[87,147,225] -> [149]
[87,161,171,225] -> [173]
[87,161,225] -> [171]
[87,162,168,225] -> [169]
[87,162,225] -> [167]
[87,207] -> [211]
[87,226] -> [235]
[87,227] -> [230]
[87,227,231] -> [232]
[87,245] -> [246]
[87,270] -> [271]
[96,104,206] -> [115]
[96,131,138,225] -> [83]
[96,131,225] -> [158]
[96,132,225] -> [98,158]
[97,104,206] -> [116]
[97,131,138,225] -> [84]
[97,131,225] -> [159]
[97,132,225] -> [99,159]
[98,100,101,132,225] -> [169]
[98,100,104,206] -> [124]
[98,100,131,140,225] -> [173]
[98,100,131,141,225] -> [174]
[98,100,131,173,225] -> [140]
[98,100,131,174,225] -> [141]
[98,100,131,225] -> [171]
[98,100,132,225] -> [167]
[98,101,104,206] -> [125]
[98,101,131,225] -> [172]
[98,101,132,169,225] -> [100]
[98,101,132,170,225] -> [101]
[98,101,132,225] -> [168,170]
[98,104,124,206] -> [100]
[98,104,125,206] -> [101]
[98,104,206] -> [57]
[98,131,138,225] -> [237]
[98,131,171,225] -> [100]
[98,131,172,225] -> [101]
[98,131,225] -> [57]
[98,132,167,225] -> [100]
[98,132,168,225] -> [101]
[98,132,225] -> [56,96]
[99,104,206] -> [123]
[99,131,138,225] -> [238]
[99,131,225] -> [166]
[99,132,225] -> [97,166]
[103,206] -> [213]
[104,107,117,206] -> [124]
[104,107,206] -> [211]
[104,108,117,206] -> [125]
[104,108,206] -> [212]
[104,117,124,206] -> [107]
[104,117,125,206] -> [108]
[104,117,206] -> [50]
[104,123,206] -> [99]
[104,206] -> [8,23,53,96,97]
[104,206,211] -> [107]
[104,206,212] -> [108]
[105,117,206] -> [51]
[105,123,206] -> [116]
[105,206] -> [9,24,54,56,123]
[106,117,206] -> [52]
[106,206] -> [10,25,55]
[110,206] -> [7,78]
[111,206] -> [6,77]
[112,206] -> [116]
[113,206] -> [115]
[117,126,206] -> [103,113]
[117,206] -> [49,102,126]
[118,124,206] -> [78,87]
[118,125,206] -> [86,113]
[118,206] -> [48,78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,R]
[119,206] -> [47,113]
[120,123,206] -> [112,R]
[120,206] -> [45,46,79,123]
[121,206] -> [44,77]
[122,206] -> [43,77]
[128,225] -> [241]
[129,160,225] -> [176]
[129,225] -> [145,156,240]
[130,160,225] -> [175]
[130,225] -> [144,155,239]
[131,138,140,160,225] -> [173]
[131,138,141,160,225] -> [174]
[131,138,160,173,225] -> [140]
[131,138,160,174,225] -> [141]
[131,138,160,225] -> [171]
[131,138,225] -> [235]
[131,138,225,237] -> [98]
[131,138,225,238] -> [99]
[131,139,160,225] -> [172]
[131,139,225] -> [236]
[131,140,225] -> [149]
[131,141,225] -> [150]
[131,149,225] -> [140]
[131,150,225] -> [141]
[131,160,171,225] -> [138]
[131,160,172,225] -> [139]
[131,160,225] -> [50]
[131,166,225] -> [99]
[131,225] -> [8,23,53,96,97]
[131,225,235] -> [138]
[131,225,236] -> [139]
[132,134,160,225] -> [167]
[132,134,225] -> [149,230]
[132,135,136,160,225] -> [169]
[132,135,136,225] -> [232]
[132,135,137,160,225] -> [170]
[132,135,137,225] -> [233]
[132,135,160,169,225] -> [136]
[132,135,160,170,225] -> [137]
[132,135,160,225] -> [168]
[132,135,225] -> [150,231]
[132,135,225,232] -> [136]
[132,135,225,233] -> [137]
[132,149,225] -> [134]
[132,150,225] -> [135]
[132,160,167,225] -> [134]
[132,160,168,225] -> [135]
[132,160,225] -> [51]
[132,166,225] -> [99]
[132,225] -> [9,24,54,96,97]
[132,225,230] -> [134]
[132,225,231] -> [135]
[133,160,225] -> [52]
[133,225] -> [10,25,55]
[142,225] -> [145]
[143,225] -> [144]
[144,225] -> [130,R]
[145,225] -> [129,R]
[147,149,225] -> [87,143]
[147,150,225] -> [86,142]
[147,225] -> [7,78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,R]
[148,225] -> [6,77]
[151,225] -> [159]
[152,225] -> [158]
[153,225] -> [156]
[154,225] -> [155]
[155,225] -> [130,R]
[156,225] -> [129,R]
[160,175,225] -> [130,154]
[160,176,225] -> [129,153]
[160,177,225] -> [128,152]
[160,225] -> [49,127,177]
[161,171,173,225] -> [87,154]
[161,171,174,225] -> [86,153]
[161,171,225] -> [78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,R]
[161,172,225] -> [86,152]
[161,225] -> [48,78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,R]
[162,167,225] -> [87,154]
[162,168,169,225] -> [87,153]
[162,168,170,225] -> [86,152]
[162,168,225] -> [78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,R]
[162,225] -> [47,78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,R]
[163,166,225] -> [151,R]
[163,225] -> [45,46,79,166]
[164,225] -> [44,77]
[165,225] -> [43,77]
[179,209] -> [19]
[179,228] -> [19]
[181] -> [194,262]
[183] -> [251,276]
[186] -> [216,268]
[187] -> [194,262]
[187,188] -> [246,271]
[187,189] -> [247,272]
[187,246] -> [188]
[187,247] -> [189]
[187,271] -> [188]
[187,272] -> [189]
[192] -> [204,221,245,258]
[194] -> [181,187,201,216]
[196] -> [27,28,254]
[196,197] -> [211,230,235,237,238]
[196,197,237] -> [222]
[196,197,238] -> [223]
[196,198] -> [212,231,236]
[196,198,232] -> [246]
[196,198,233] -> [247]
[196,198,246] -> [232]
[196,198,247] -> [233]
[196,211] -> [197]
[196,212] -> [198]
[196,230] -> [197]
[196,231] -> [198]
[196,235] -> [197]
[196,236] -> [198]
[199] -> [204]
[201] -> [27,194]
[204] -> [192,R]
[206] -> [5,22,42,78,79,102,103,109,114,115,116,R]
[206,213] -> [103,199]
[207] -> [21,78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,R]
[207,211] -> [78,87]
[207,212] -> [86,199]
[208] -> [20,199]
[209] -> [18,178]
[210] -> [17,77]
[214] -> [221]
[216] -> [186,194]
[221] -> [192,R]
[225] -> [5,22,42,78,79,127,128,146,157,158,159,R]
[225,239] -> [130,218]
[225,240] -> [78,79,80,81,82,83,84,129,R]
[225,240,242] -> [81,217]
[225,241] -> [128,214]
[226] -> [21,78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,R]
[226,235] -> [79,87,237,238]
[226,235,237] -> [218,R]
[226,235,238] -> [217,R]
[226,236] -> [86,214]
[227] -> [20,78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,R]
[227,230] -> [87,218]
[227,231] -> [78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,R]
[227,231,232] -> [78,79,80,81,82,83,84,87,R]
[227,231,232,234] -> [81,217]
[227,231,233] -> [86,214]
[228] -> [18,178]
[229] -> [17,77]
[245] -> [78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,192,R]
[245,246] -> [78,79,80,81,82,83,84,87,R]
[245,246,248] -> [81,217]
[245,247] -> [86,214]
[251] -> [183,214]
[254] -> [196,262]
[258] -> [78,192]
[260] -> [264,270,280,285]
[262] -> [181,187,254,268]
[264] -> [78,260,R]
[265] -> [276]
[268] -> [186,262]
[270] -> [78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,260,R]
[270,271] -> [78,79,80,81,82,83,84,87,R]
[270,271,273] -> [81,266]
[270,272] -> [86,265]
[276] -> [183,269]
[280] -> [260,265]
[285] -> [260,283]
[R] -> [287]

### Solution ###

[16,26,40,75,76,78,79,180,182,184,185,191,193,195,200,202,203,205,215,217,218,219,220,222,223,224,243,244,249,250,252,253,255,256,257,259,261,263,266,267,269,274,275,277,278,279,281,282,283,284,286,287,288,289,290,291,292,293,294,295,296,R]

### Annotated ###

  let
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    id :E: (a :E: Type) -> (_x0 :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    subst :R: (a :E: Type) -> (P :E: (_x1 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (w :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x2 :E: a) -> Type x :E: a
        [subst] -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\w :R: P -E- x. w)
    cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_x3 :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) 
      a :E: Type b :E: Type f :E: (_x4 :E: a) -> b x :E: a
        [cong] -E- a -E- b -E- f -E- x -E- [x] -E- [Refl -E- a -E- x] = Refl -E- b -E- (f -E- x)
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor List :E: Type
    constructor Nil :R: List
    constructor Cons :R: (x :R: Bool) -> (xs :R: List) -> List
    one :E: (x :E: Bool) -> List = (\x :E: Bool. Cons -E- x -E- Nil)
    app :E: (_x5 :E: List) -> (_x6 :E: List) -> List 
      ys :E: List
        [app] -E- Nil -E- ys = ys
      x :E: Bool xs :E: List ys :E: List
        [app] -E- (Cons -E- x -E- xs) -E- ys = Cons -E- x -E- (app -E- xs -E- ys)
    appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) 
      [appRightNeutral] -E- Nil = Refl -E- List -E- Nil
      x :E: Bool xs :E: List
        [appRightNeutral] -E- (Cons -E- x -E- xs) = cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)
    appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) 
      ys :E: List zs :E: List
        [appAssoc] -E- Nil -E- ys -E- zs = Refl -E- List -E- (app -E- ys -E- zs)
      x :E: Bool xs :E: List ys :E: List zs :E: List
        [appAssoc] -E- (Cons -E- x -E- xs) -E- ys -E- zs = cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs -E- ys -E- zs)
    constructor Rev :E: (_x7 :E: List) -> Type
    constructor RNil :R: Rev -E- Nil
    constructor RSnoc :R: (xs :E: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))
    rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -E- xs -E- ys) 
      xs :E: List rxs :R: Rev -E- xs
        [rev'] -E- xs -R- rxs -R- Nil = subst -E- List -E- Rev -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs) -R- rxs
      xs :E: List rxs :R: Rev -E- xs y :R: Bool ys :R: List
        [rev'] -E- xs -R- rxs -R- (Cons -R- y -R- ys) = subst -E- List -E- Rev -E- (app -E- (app -E- xs -E- (one -E- y)) -E- ys) -E- (app -E- xs -E- (Cons -E- y -E- ys)) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys) -R- (rev' -E- (app -E- xs -E- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys)
    rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)
    reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List 
      [reverse'] -E- [Nil] -R- RNil = Nil
      xs :E: List x :R: Bool rxs :R: Rev -E- xs
        [reverse'] -E- [app -E- xs -E- (one -E- x)] -R- (RSnoc -E- xs -R- x -R- rxs) = Cons -R- x -R- (reverse' -E- xs -R- rxs)
    reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))
    main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))
  in main

### Specialised ###

  let
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    id :E: (a :E: Type) -> (_x0 :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    subst :R: (a :E: Type) -> (P :E: (_x1 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (w :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x2 :E: a) -> Type x :E: a
        [subst] -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\w :R: P -E- x. w)
    cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_x3 :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) 
      a :E: Type b :E: Type f :E: (_x4 :E: a) -> b x :E: a
        [cong] -E- a -E- b -E- f -E- x -E- [x] -E- [Refl -E- a -E- x] = Refl -E- b -E- (f -E- x)
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor List :E: Type
    constructor Nil :R: List
    constructor Cons :R: (x :R: Bool) -> (xs :R: List) -> List
    one :E: (x :E: Bool) -> List = (\x :E: Bool. Cons -E- x -E- Nil)
    app :E: (_x5 :E: List) -> (_x6 :E: List) -> List 
      ys :E: List
        [app] -E- Nil -E- ys = ys
      x :E: Bool xs :E: List ys :E: List
        [app] -E- (Cons -E- x -E- xs) -E- ys = Cons -E- x -E- (app -E- xs -E- ys)
    appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) 
      [appRightNeutral] -E- Nil = Refl -E- List -E- Nil
      x :E: Bool xs :E: List
        [appRightNeutral] -E- (Cons -E- x -E- xs) = cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)
    appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) 
      ys :E: List zs :E: List
        [appAssoc] -E- Nil -E- ys -E- zs = Refl -E- List -E- (app -E- ys -E- zs)
      x :E: Bool xs :E: List ys :E: List zs :E: List
        [appAssoc] -E- (Cons -E- x -E- xs) -E- ys -E- zs = cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs -E- ys -E- zs)
    constructor Rev :E: (_x7 :E: List) -> Type
    constructor RNil :R: Rev -E- Nil
    constructor RSnoc :R: (xs :E: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))
    rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -E- xs -E- ys) 
      xs :E: List rxs :R: Rev -E- xs
        [rev'] -E- xs -R- rxs -R- Nil = subst -E- List -E- Rev -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs) -R- rxs
      xs :E: List rxs :R: Rev -E- xs y :R: Bool ys :R: List
        [rev'] -E- xs -R- rxs -R- (Cons -R- y -R- ys) = subst -E- List -E- Rev -E- (app -E- (app -E- xs -E- (one -E- y)) -E- ys) -E- (app -E- xs -E- (Cons -E- y -E- ys)) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys) -R- (rev' -E- (app -E- xs -E- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys)
    rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)
    reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List 
      [reverse'] -E- [Nil] -R- RNil = Nil
      xs :E: List x :R: Bool rxs :R: Rev -E- xs
        [reverse'] -E- [app -E- xs -E- (one -E- x)] -R- (RSnoc -E- xs -R- x -R- rxs) = Cons -R- x -R- (reverse' -E- xs -R- rxs)
    reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))
    main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))
  in main

### Final annotation ###

  let
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    id :E: (a :E: Type) -> (_x0 :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    subst :R: (a :E: Type) -> (P :E: (_x1 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (w :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x2 :E: a) -> Type x :E: a
        [subst] -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\w :R: P -E- x. w)
    cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_x3 :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) 
      a :E: Type b :E: Type f :E: (_x4 :E: a) -> b x :E: a
        [cong] -E- a -E- b -E- f -E- x -E- [x] -E- [Refl -E- a -E- x] = Refl -E- b -E- (f -E- x)
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor List :E: Type
    constructor Nil :R: List
    constructor Cons :R: (x :R: Bool) -> (xs :R: List) -> List
    one :E: (x :E: Bool) -> List = (\x :E: Bool. Cons -E- x -E- Nil)
    app :E: (_x5 :E: List) -> (_x6 :E: List) -> List 
      ys :E: List
        [app] -E- Nil -E- ys = ys
      x :E: Bool xs :E: List ys :E: List
        [app] -E- (Cons -E- x -E- xs) -E- ys = Cons -E- x -E- (app -E- xs -E- ys)
    appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) 
      [appRightNeutral] -E- Nil = Refl -E- List -E- Nil
      x :E: Bool xs :E: List
        [appRightNeutral] -E- (Cons -E- x -E- xs) = cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)
    appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) 
      ys :E: List zs :E: List
        [appAssoc] -E- Nil -E- ys -E- zs = Refl -E- List -E- (app -E- ys -E- zs)
      x :E: Bool xs :E: List ys :E: List zs :E: List
        [appAssoc] -E- (Cons -E- x -E- xs) -E- ys -E- zs = cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs -E- ys -E- zs)
    constructor Rev :E: (_x7 :E: List) -> Type
    constructor RNil :R: Rev -E- Nil
    constructor RSnoc :R: (xs :E: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))
    rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -E- xs -E- ys) 
      xs :E: List rxs :R: Rev -E- xs
        [rev'] -E- xs -R- rxs -R- Nil = subst -E- List -E- Rev -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs) -R- rxs
      xs :E: List rxs :R: Rev -E- xs y :R: Bool ys :R: List
        [rev'] -E- xs -R- rxs -R- (Cons -R- y -R- ys) = subst -E- List -E- Rev -E- (app -E- (app -E- xs -E- (one -E- y)) -E- ys) -E- (app -E- xs -E- (Cons -E- y -E- ys)) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys) -R- (rev' -E- (app -E- xs -E- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys)
    rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)
    reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List 
      [reverse'] -E- [Nil] -R- RNil = Nil
      xs :E: List x :R: Bool rxs :R: Rev -E- xs
        [reverse'] -E- [app -E- xs -E- (one -E- x)] -R- (RSnoc -E- xs -R- x -R- rxs) = Cons -R- x -R- (reverse' -E- xs -R- rxs)
    reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))
    main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    subst = (\w. w)
    constructor T : Bool
    constructor F : Bool
    constructor Nil : List
    constructor Cons : (x) -> (xs) -> List
    constructor RNil : Rev
    constructor RSnoc : (x) -> (rxs) -> Rev
    rev' 
      [_] rxs Nil = subst rxs
      [_] rxs (Cons y ys) = subst (rev' (RSnoc y rxs) ys)
    rev = (\xs. rev' RNil xs)
    reverse' 
      [_] RNil = Nil
      [_] (RSnoc x rxs) = Cons x (reverse' rxs)
    reverse = (\xs. reverse' (rev xs))
    main = reverse (Cons T (Cons F (Cons T (Cons F Nil))))
  in main

### Intermediate representation ###

let subst = \w. w
  in let T = constructor 0
    in let F = constructor 0
      in let Nil = constructor 0
        in let Cons = constructor 2
          in let RNil = constructor 0
            in let RSnoc = constructor 2
              in let rev' = \_pv0. \_pv1.
                case _pv1 of
                  Cons _pv2 _pv3 => (subst ((rev' ((RSnoc _pv2) _pv0)) _pv3))
                  Nil => (subst _pv0)
                in let rev = \xs. ((rev' RNil) xs)
                  in let reverse' = \_pv0.
                    case _pv0 of
                      RNil => Nil
                      RSnoc _pv1 _pv2 => ((Cons _pv1) (reverse' _pv2))
                    in let reverse = \xs. (reverse' (rev xs))
                      in let main = (reverse ((Cons T) ((Cons F) ((Cons T) ((Cons F) Nil)))))
                        in main

### Normal forms ###

unerased:
  
  let
    constructor Bool : Type
    constructor T : Bool
    constructor F : Bool
    constructor List : Type
    constructor Nil : List
    constructor Cons : (x :R: Bool) -> (xs :R: List) -> List
  in Cons F (Cons T (Cons F (Cons T Nil)))

erased:
  
  let
    constructor T : Bool
    constructor F : Bool
    constructor Nil : List
    constructor Cons : (x) -> (xs) -> List
  in Cons F (Cons T (Cons F (Cons T Nil)))

