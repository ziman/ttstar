-- vim: ft=ttstar

### Desugared ###

  let
    constructor Id : (a : Type) -> (x : a) -> (y : a) -> Type
    constructor Refl : (a : Type) -> (x : a) -> Id a x x
    id : (a : Type) -> (_x0 : a) -> a = (\a : Type. (\x : a. x))
    subst : (a : Type) -> (P : (_x1 : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (w : P x) -> P y 
      a : Type P : (_x2 : a) -> Type x : a
        subst a P x [x] [Refl a x] = (\w : P x. w)
    cong : (a : Type) -> (b : Type) -> (f : (_x3 : a) -> b) -> (x : a) -> (y : a) -> (eq : Id a x y) -> Id b (f x) (f y) 
      a : Type b : Type f : (_x4 : a) -> b x : a
        cong a b f x [x] [Refl a x] = Refl b (f x)
    constructor Bool : Type
    constructor T : Bool
    constructor F : Bool
    constructor List : Type
    constructor Nil : List
    constructor Cons : (x :R: Bool) -> (xs :R: List) -> List
    one : (x : Bool) -> List = (\x : Bool. Cons x Nil)
    app : (_x5 : List) -> (_x6 : List) -> List 
      ys : List
        app Nil ys = ys
      x : Bool xs : List ys : List
        app (Cons x xs) ys = Cons x (app xs ys)
    appRightNeutral : (ys : List) -> Id List ys (app ys Nil) 
      appRightNeutral Nil = Refl List Nil
      x : Bool xs : List
        appRightNeutral (Cons x xs) = cong List List (Cons x) xs (app xs Nil) (appRightNeutral xs)
    appAssoc : (xs : List) -> (ys : List) -> (zs : List) -> Id List (app (app xs ys) zs) (app xs (app ys zs)) 
      ys : List zs : List
        appAssoc Nil ys zs = Refl List (app ys zs)
      x : Bool xs : List ys : List zs : List
        appAssoc (Cons x xs) ys zs = cong List List (Cons x) (app (app xs ys) zs) (app xs (app ys zs)) (appAssoc xs ys zs)
    constructor Rev : (_x7 : List) -> Type
    constructor RNil : Rev Nil
    constructor RSnoc : (xs : List) -> (x : Bool) -> (rxs : Rev xs) -> Rev (app xs (one x))
    rev' : (xs : List) -> (rxs : Rev xs) -> (ys : List) -> Rev (app xs ys) 
      xs : List rxs : Rev xs
        rev' xs rxs Nil = subst List Rev xs (app xs Nil) (appRightNeutral xs) rxs
      xs : List rxs : Rev xs y : Bool ys : List
        rev' xs rxs (Cons y ys) = subst List Rev (app (app xs (one y)) ys) (app xs (Cons y ys)) (appAssoc xs (one y) ys) (rev' (app xs (one y)) (RSnoc xs y rxs) ys)
    rev : (xs : List) -> Rev xs = (\xs : List. rev' Nil RNil xs)
    reverse' : (xs : List) -> (rxs : Rev xs) -> List 
      reverse' [Nil] RNil = Nil
      xs : List x : Bool rxs : Rev xs
        reverse' [app xs (one x)] (RSnoc xs x rxs) = Cons x (reverse' xs rxs)
    reverse : (xs : List) -> List = (\xs : List. reverse' xs (rev xs))
    main : List = reverse (Cons T (Cons F (Cons T (Cons F Nil))))
  in main

### Evarified ###

  let
    constructor Id :1: (a :2: Type) -> (x :3: a) -> (y :4: a) -> Type
    constructor Refl :5: (a :6: Type) -> (x :7: a) -> Id -10- a -9- x -8- x
    id :11: (a :12: Type) -> (_x0 :13: a) -> a = (\a :14: Type. (\x :15: a. x))
    subst :16: (a :17: Type) -> (P :18: (_x1 :19: a) -> Type) -> (x :20: a) -> (y :21: a) -> (eq :22: Id -25- a -24- x -23- y) -> (w :26: P -27- x) -> P -28- y 
      a :29: Type P :30: (_x2 :31: a) -> Type x :32: a
        subst -37- a -36- P -35- x -34- [x] -33- [Refl -39- a -38- x] = (\w :40: P -41- x. w)
    cong :42: (a :43: Type) -> (b :44: Type) -> (f :45: (_x3 :46: a) -> b) -> (x :47: a) -> (y :48: a) -> (eq :49: Id -52- a -51- x -50- y) -> Id -55- b -54- (f -56- x) -53- (f -57- y) 
      a :58: Type b :59: Type f :60: (_x4 :61: a) -> b x :62: a
        cong -68- a -67- b -66- f -65- x -64- [x] -63- [Refl -70- a -69- x] = Refl -72- b -71- (f -73- x)
    constructor Bool :74: Type
    constructor T :75: Bool
    constructor F :76: Bool
    constructor List :77: Type
    constructor Nil :78: List
    constructor Cons :79: (x :R: Bool) -> (xs :R: List) -> List
    one :80: (x :81: Bool) -> List = (\x :82: Bool. Cons -84- x -83- Nil)
    app :85: (_x5 :86: List) -> (_x6 :87: List) -> List 
      ys :88: List
        app -90- Nil -89- ys = ys
      x :91: Bool xs :92: List ys :93: List
        app -95- (Cons -97- x -96- xs) -94- ys = Cons -99- x -98- (app -101- xs -100- ys)
    appRightNeutral :102: (ys :103: List) -> Id -106- List -105- ys -104- (app -108- ys -107- Nil) 
      appRightNeutral -109- Nil = Refl -111- List -110- Nil
      x :112: Bool xs :113: List
        appRightNeutral -114- (Cons -116- x -115- xs) = cong -122- List -121- List -120- (Cons -123- x) -119- xs -118- (app -125- xs -124- Nil) -117- (appRightNeutral -126- xs)
    appAssoc :127: (xs :128: List) -> (ys :129: List) -> (zs :130: List) -> Id -133- List -132- (app -135- (app -137- xs -136- ys) -134- zs) -131- (app -139- xs -138- (app -141- ys -140- zs)) 
      ys :142: List zs :143: List
        appAssoc -146- Nil -145- ys -144- zs = Refl -148- List -147- (app -150- ys -149- zs)
      x :151: Bool xs :152: List ys :153: List zs :154: List
        appAssoc -157- (Cons -159- x -158- xs) -156- ys -155- zs = cong -165- List -164- List -163- (Cons -166- x) -162- (app -168- (app -170- xs -169- ys) -167- zs) -161- (app -172- xs -171- (app -174- ys -173- zs)) -160- (appAssoc -177- xs -176- ys -175- zs)
    constructor Rev :178: (_x7 :179: List) -> Type
    constructor RNil :180: Rev -181- Nil
    constructor RSnoc :182: (xs :183: List) -> (x :184: Bool) -> (rxs :185: Rev -186- xs) -> Rev -187- (app -189- xs -188- (one -190- x))
    rev' :191: (xs :192: List) -> (rxs :193: Rev -194- xs) -> (ys :195: List) -> Rev -196- (app -198- xs -197- ys) 
      xs :199: List rxs :200: Rev -201- xs
        rev' -204- xs -203- rxs -202- Nil = subst -210- List -209- Rev -208- xs -207- (app -212- xs -211- Nil) -206- (appRightNeutral -213- xs) -205- rxs
      xs :214: List rxs :215: Rev -216- xs y :217: Bool ys :218: List
        rev' -221- xs -220- rxs -219- (Cons -223- y -222- ys) = subst -229- List -228- Rev -227- (app -231- (app -233- xs -232- (one -234- y)) -230- ys) -226- (app -236- xs -235- (Cons -238- y -237- ys)) -225- (appAssoc -241- xs -240- (one -242- y) -239- ys) -224- (rev' -245- (app -247- xs -246- (one -248- y)) -244- (RSnoc -251- xs -250- y -249- rxs) -243- ys)
    rev :252: (xs :253: List) -> Rev -254- xs = (\xs :255: List. rev' -258- Nil -257- RNil -256- xs)
    reverse' :259: (xs :260: List) -> (rxs :261: Rev -262- xs) -> List 
      reverse' -264- [Nil] -263- RNil = Nil
      xs :265: List x :266: Bool rxs :267: Rev -268- xs
        reverse' -270- [app -272- xs -271- (one -273- x)] -269- (RSnoc -276- xs -275- x -274- rxs) = Cons -278- x -277- (reverse' -280- xs -279- rxs)
    reverse :281: (xs :282: List) -> List = (\xs :283: List. reverse' -285- xs -284- (rev -286- xs))
    main :287: List = reverse -288- (Cons -290- T -289- (Cons -292- F -291- (Cons -294- T -293- (Cons -296- F -295- Nil))))
  in main

### Constraints ###

[] -> [46,83,84,96,97,98,99,115,116,123,158,159,166,222,223,237,238,277,278,287,289,290,291,292,293,294,295,296]
[2] -> [10,25,52,55,106,133]
[3] -> [9,24,51,54,105,132]
[4] -> [8,23,50,53,104,131]
[6] -> [39,70,72,111,148]
[7] -> [38,69,71,110,147]
[8] -> [4,23,50,53,104,131]
[9] -> [3,9]
[10] -> [2,10]
[11] -> [15]
[12] -> [14]
[13] -> [15]
[14] -> [12]
[15] -> [13]
[16] -> [16,40]
[16,33] -> [5]
[16,33,38] -> [32]
[16,33,39] -> [29]
[16,34] -> [32]
[16,35] -> [32]
[16,36] -> [30]
[16,37] -> [29]
[17] -> [37,210,229]
[18] -> [36,209,228]
[19] -> [27,28,31,179]
[20] -> [35,208,227]
[21] -> [34,207,226]
[22] -> [33,206,225]
[23] -> [4,8,104,131]
[24] -> [3]
[25] -> [2]
[26] -> [40,205,224]
[27] -> [19,41,196,201]
[28] -> [19,41,196]
[29] -> [16,37]
[30] -> [16,36]
[31] -> [19,41]
[32] -> [16,35]
[33] -> [22]
[34] -> [21]
[35] -> [20]
[36] -> [18]
[37] -> [17]
[38] -> [7]
[39] -> [6]
[40] -> [26]
[41] -> [27,28,31]
[42] -> [5,42]
[42,63] -> [5]
[42,63,69] -> [62]
[42,63,70] -> [58]
[42,64] -> [62]
[42,65] -> [62]
[42,66] -> [60]
[42,67] -> [59]
[42,68] -> [58]
[42,71] -> [60]
[42,71,73] -> [62]
[42,72] -> [59]
[43] -> [68,122,165]
[44] -> [67,121,164]
[45] -> [66,120,163]
[46] -> [56,57,61]
[47] -> [65,119,162]
[48] -> [64,118,161]
[49] -> [63,117,160]
[50] -> [4,8,104,131]
[51] -> [3]
[52] -> [2]
[53] -> [4,8,104,131]
[54] -> [3,54]
[55] -> [2,55]
[56] -> [46,56]
[57] -> [46,57]
[58] -> [42,68]
[59] -> [42,67]
[60] -> [42,66]
[61] -> [46,73]
[62] -> [42,65]
[63] -> [49]
[64] -> [48]
[65] -> [47]
[66] -> [45]
[67] -> [44]
[68] -> [43]
[69] -> [7]
[70] -> [6]
[71] -> [7]
[72] -> [6]
[73] -> [61]
[80] -> [79]
[80,83] -> [78]
[80,84] -> [82]
[81] -> [82,190,234,242,248,273]
[82] -> [81]
[83] -> [83]
[84] -> [84]
[85] -> [78,79,85,88,90,95]
[85,89] -> [88]
[85,94] -> [93]
[85,95,96] -> [92]
[85,95,97] -> [91]
[85,98] -> [85]
[85,98,100] -> [93]
[85,98,101] -> [92]
[85,99] -> [91]
[86] -> [90,95,101,108,125,135,137,139,141,150,168,170,172,174,189,198,212,231,233,236,247,272]
[87] -> [89,94,100,107,124,134,136,138,140,149,167,169,171,173,188,197,211,230,232,235,246,271]
[88] -> [85,89]
[89] -> [87]
[90] -> [86]
[91] -> [85,95,97]
[92] -> [85,95,96]
[93] -> [85,94]
[94] -> [87]
[95] -> [86]
[98] -> [98]
[99] -> [99]
[100] -> [87,100]
[101] -> [86,101]
[102] -> [5,42,78,79,102,109,114]
[102,110] -> [78]
[102,111] -> [77]
[102,114,115] -> [113]
[102,114,116] -> [112]
[102,117] -> [102]
[102,117,126] -> [113]
[102,118] -> [85]
[102,118,124] -> [78]
[102,118,125] -> [113]
[102,119] -> [113]
[102,120] -> [79]
[102,120,123] -> [112]
[102,121] -> [77]
[102,122] -> [77]
[103] -> [109,114,126,213]
[104] -> [4,8,23,50,53]
[105] -> [3,105]
[106] -> [2,106]
[107] -> [87,107]
[108] -> [86,108]
[109] -> [103]
[110] -> [7]
[111] -> [6]
[112] -> [102,114,116]
[113] -> [102,114,115]
[114] -> [103]
[115] -> [115]
[116] -> [116]
[117] -> [49]
[118] -> [48]
[119] -> [47]
[120] -> [45]
[121] -> [44]
[122] -> [43]
[124] -> [87]
[125] -> [86]
[126] -> [103]
[127] -> [5,42,78,79,127,146,157]
[127,144] -> [143]
[127,145] -> [142]
[127,147] -> [85]
[127,147,149] -> [143]
[127,147,150] -> [142]
[127,148] -> [77]
[127,155] -> [154]
[127,156] -> [153]
[127,157,158] -> [152]
[127,157,159] -> [151]
[127,160] -> [127]
[127,160,175] -> [154]
[127,160,176] -> [153]
[127,160,177] -> [152]
[127,161] -> [85]
[127,161,171] -> [85]
[127,161,171,173] -> [154]
[127,161,171,174] -> [153]
[127,161,172] -> [152]
[127,162] -> [85]
[127,162,167] -> [154]
[127,162,168] -> [85]
[127,162,168,169] -> [153]
[127,162,168,170] -> [152]
[127,163] -> [79]
[127,163,166] -> [151]
[127,164] -> [77]
[127,165] -> [77]
[128] -> [146,157,177,241]
[129] -> [145,156,176,240]
[130] -> [144,155,175,239]
[131] -> [4,8,23,50,53]
[132] -> [3,132]
[133] -> [2,133]
[134] -> [87,134]
[135] -> [86,135]
[136] -> [87,136]
[137] -> [86,137]
[138] -> [87,138]
[139] -> [86,139]
[140] -> [87,140]
[141] -> [86,141]
[142] -> [127,145]
[143] -> [127,144]
[144] -> [130]
[145] -> [129]
[146] -> [128]
[147] -> [7]
[148] -> [6]
[149] -> [87]
[150] -> [86]
[151] -> [127,157,159]
[152] -> [127,157,158]
[153] -> [127,156]
[154] -> [127,155]
[155] -> [130]
[156] -> [129]
[157] -> [128]
[160] -> [49]
[161] -> [48]
[162] -> [47]
[163] -> [45]
[164] -> [44]
[165] -> [43]
[167] -> [87]
[168] -> [86]
[169] -> [87]
[170] -> [86]
[171] -> [87]
[172] -> [86]
[173] -> [87]
[174] -> [86]
[175] -> [130]
[176] -> [129]
[177] -> [128]
[179] -> [19,181,186,187,194,196,201,216,254,262,268]
[181] -> [179,194,262]
[183] -> [251,276]
[184] -> [250,275]
[185] -> [249,274]
[186] -> [179,216,268]
[187] -> [179,194,262]
[188] -> [87,188]
[189] -> [86,189]
[190] -> [81]
[191] -> [16,78,79,191,202,219]
[191,203] -> [200]
[191,204] -> [199]
[191,205] -> [200]
[191,206] -> [102]
[191,206,213] -> [199]
[191,207] -> [85]
[191,207,211] -> [78]
[191,207,212] -> [199]
[191,208] -> [199]
[191,209] -> [178]
[191,210] -> [77]
[191,219,222] -> [218]
[191,219,223] -> [217]
[191,220] -> [215]
[191,221] -> [214]
[191,224] -> [191]
[191,224,243] -> [218]
[191,224,244] -> [182]
[191,224,244,249] -> [215]
[191,224,244,250] -> [217]
[191,224,244,251] -> [214]
[191,224,245] -> [85]
[191,224,245,246] -> [80]
[191,224,245,246,248] -> [217]
[191,224,245,247] -> [214]
[191,225] -> [127]
[191,225,239] -> [218]
[191,225,240] -> [80]
[191,225,240,242] -> [217]
[191,225,241] -> [214]
[191,226] -> [85]
[191,226,235] -> [79]
[191,226,235,237] -> [218]
[191,226,235,238] -> [217]
[191,226,236] -> [214]
[191,227] -> [85]
[191,227,230] -> [218]
[191,227,231] -> [85]
[191,227,231,232] -> [80]
[191,227,231,232,234] -> [217]
[191,227,231,233] -> [214]
[191,228] -> [178]
[191,229] -> [77]
[192] -> [204,221,245,258]
[193] -> [203,220,244,257]
[194] -> [179,181,187,201,216]
[195] -> [202,219,243,256]
[196] -> [27,28,179,254]
[197] -> [87,197]
[198] -> [86,198]
[199] -> [191,204]
[200] -> [191,203]
[201] -> [27,179,194]
[202] -> [195]
[203] -> [193]
[204] -> [192]
[205] -> [26]
[206] -> [22]
[207] -> [21]
[208] -> [20]
[209] -> [18]
[210] -> [17]
[211] -> [87]
[212] -> [86]
[213] -> [103]
[214] -> [191,221]
[215] -> [191,220]
[216] -> [179,186,194]
[217] -> [191,219,223]
[218] -> [191,219,222]
[219] -> [195]
[220] -> [193]
[221] -> [192]
[222] -> [222]
[223] -> [223]
[224] -> [26]
[225] -> [22]
[226] -> [21]
[227] -> [20]
[228] -> [18]
[229] -> [17]
[230] -> [87]
[231] -> [86]
[232] -> [87]
[233] -> [86]
[234] -> [81]
[235] -> [87]
[236] -> [86]
[239] -> [130]
[240] -> [129]
[241] -> [128]
[242] -> [81]
[243] -> [195]
[244] -> [193]
[245] -> [192]
[246] -> [87,246]
[247] -> [86,247]
[248] -> [81]
[249] -> [185]
[250] -> [184]
[251] -> [183]
[252] -> [191]
[252,256] -> [255]
[252,257] -> [180]
[252,258] -> [78]
[253] -> [255,286]
[254] -> [179,196,262]
[255] -> [253]
[256] -> [195]
[257] -> [193]
[258] -> [192]
[259] -> [78,79,180,182,259,263,269]
[259,264] -> [78]
[259,269,274] -> [267]
[259,269,275] -> [266]
[259,269,276] -> [265]
[259,270] -> [85]
[259,270,271] -> [80]
[259,270,271,273] -> [266]
[259,270,272] -> [265]
[259,277] -> [259]
[259,277,279] -> [267]
[259,277,280] -> [265]
[259,278] -> [266]
[260] -> [264,270,280,285]
[261] -> [263,269,279,284]
[262] -> [179,181,187,254,268]
[263] -> [261]
[264] -> [260]
[265] -> [259,269,276]
[266] -> [259,269,275]
[267] -> [259,269,274]
[268] -> [179,186,262]
[269] -> [261]
[270] -> [260]
[271] -> [87]
[272] -> [86]
[273] -> [81]
[274] -> [185]
[275] -> [184]
[276] -> [183]
[279] -> [261]
[280] -> [260]
[281] -> [259]
[281,284] -> [252]
[281,284,286] -> [283]
[281,285] -> [283]
[282] -> [283,288]
[283] -> [282]
[284] -> [261]
[285] -> [260]
[286] -> [253]
[287] -> [281]
[287,288] -> [79]
[287,288,289] -> [79]
[287,288,289,291] -> [79]
[287,288,289,291,293] -> [79]
[287,288,289,291,293,295] -> [78]
[287,288,289,291,293,296] -> [76]
[287,288,289,291,294] -> [75]
[287,288,289,292] -> [76]
[287,288,290] -> [75]
[288] -> [282]

### Solution ###

[16,26,40,46,56,57,61,73,75,76,78,79,83,84,96,97,98,99,115,116,123,158,159,166,180,182,184,185,191,193,195,200,202,203,205,215,217,218,219,220,222,223,224,237,238,243,244,249,250,252,253,255,256,257,259,261,263,266,267,269,274,275,277,278,279,281,282,283,284,286,287,288,289,290,291,292,293,294,295,296,R]

### Annotated ###

  let
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    id :E: (a :E: Type) -> (_x0 :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    subst :R: (a :E: Type) -> (P :E: (_x1 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (w :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x2 :E: a) -> Type x :E: a
        subst -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\w :R: P -E- x. w)
    cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_x3 :R: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -R- x) -E- (f -R- y) 
      a :E: Type b :E: Type f :E: (_x4 :R: a) -> b x :E: a
        cong -E- a -E- b -E- f -E- x -E- [x] -E- [Refl -E- a -E- x] = Refl -E- b -E- (f -R- x)
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor List :E: Type
    constructor Nil :R: List
    constructor Cons :R: (x :R: Bool) -> (xs :R: List) -> List
    one :E: (x :E: Bool) -> List = (\x :E: Bool. Cons -R- x -R- Nil)
    app :E: (_x5 :E: List) -> (_x6 :E: List) -> List 
      ys :E: List
        app -E- Nil -E- ys = ys
      x :E: Bool xs :E: List ys :E: List
        app -E- (Cons -R- x -R- xs) -E- ys = Cons -R- x -R- (app -E- xs -E- ys)
    appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) 
      appRightNeutral -E- Nil = Refl -E- List -E- Nil
      x :E: Bool xs :E: List
        appRightNeutral -E- (Cons -R- x -R- xs) = cong -E- List -E- List -E- (Cons -R- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)
    appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) 
      ys :E: List zs :E: List
        appAssoc -E- Nil -E- ys -E- zs = Refl -E- List -E- (app -E- ys -E- zs)
      x :E: Bool xs :E: List ys :E: List zs :E: List
        appAssoc -E- (Cons -R- x -R- xs) -E- ys -E- zs = cong -E- List -E- List -E- (Cons -R- x) -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs -E- ys -E- zs)
    constructor Rev :E: (_x7 :E: List) -> Type
    constructor RNil :R: Rev -E- Nil
    constructor RSnoc :R: (xs :E: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))
    rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -E- xs -E- ys) 
      xs :E: List rxs :R: Rev -E- xs
        rev' -E- xs -R- rxs -R- Nil = subst -E- List -E- Rev -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs) -R- rxs
      xs :E: List rxs :R: Rev -E- xs y :R: Bool ys :R: List
        rev' -E- xs -R- rxs -R- (Cons -R- y -R- ys) = subst -E- List -E- Rev -E- (app -E- (app -E- xs -E- (one -E- y)) -E- ys) -E- (app -E- xs -E- (Cons -R- y -R- ys)) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys) -R- (rev' -E- (app -E- xs -E- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys)
    rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)
    reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List 
      reverse' -E- [Nil] -R- RNil = Nil
      xs :E: List x :R: Bool rxs :R: Rev -E- xs
        reverse' -E- [app -E- xs -E- (one -E- x)] -R- (RSnoc -E- xs -R- x -R- rxs) = Cons -R- x -R- (reverse' -E- xs -R- rxs)
    reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))
    main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))
  in main

### Specialised ###

  let
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    id :E: (a :E: Type) -> (_x0 :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    subst :R: (a :E: Type) -> (P :E: (_x1 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (w :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x2 :E: a) -> Type x :E: a
        subst -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\w :R: P -E- x. w)
    cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_x3 :R: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -R- x) -E- (f -R- y) 
      a :E: Type b :E: Type f :E: (_x4 :R: a) -> b x :E: a
        cong -E- a -E- b -E- f -E- x -E- [x] -E- [Refl -E- a -E- x] = Refl -E- b -E- (f -R- x)
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor List :E: Type
    constructor Nil :R: List
    constructor Cons :R: (x :R: Bool) -> (xs :R: List) -> List
    one :E: (x :E: Bool) -> List = (\x :E: Bool. Cons -R- x -R- Nil)
    app :E: (_x5 :E: List) -> (_x6 :E: List) -> List 
      ys :E: List
        app -E- Nil -E- ys = ys
      x :E: Bool xs :E: List ys :E: List
        app -E- (Cons -R- x -R- xs) -E- ys = Cons -R- x -R- (app -E- xs -E- ys)
    appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) 
      appRightNeutral -E- Nil = Refl -E- List -E- Nil
      x :E: Bool xs :E: List
        appRightNeutral -E- (Cons -R- x -R- xs) = cong -E- List -E- List -E- (Cons -R- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)
    appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) 
      ys :E: List zs :E: List
        appAssoc -E- Nil -E- ys -E- zs = Refl -E- List -E- (app -E- ys -E- zs)
      x :E: Bool xs :E: List ys :E: List zs :E: List
        appAssoc -E- (Cons -R- x -R- xs) -E- ys -E- zs = cong -E- List -E- List -E- (Cons -R- x) -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs -E- ys -E- zs)
    constructor Rev :E: (_x7 :E: List) -> Type
    constructor RNil :R: Rev -E- Nil
    constructor RSnoc :R: (xs :E: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))
    rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -E- xs -E- ys) 
      xs :E: List rxs :R: Rev -E- xs
        rev' -E- xs -R- rxs -R- Nil = subst -E- List -E- Rev -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs) -R- rxs
      xs :E: List rxs :R: Rev -E- xs y :R: Bool ys :R: List
        rev' -E- xs -R- rxs -R- (Cons -R- y -R- ys) = subst -E- List -E- Rev -E- (app -E- (app -E- xs -E- (one -E- y)) -E- ys) -E- (app -E- xs -E- (Cons -R- y -R- ys)) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys) -R- (rev' -E- (app -E- xs -E- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys)
    rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)
    reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List 
      reverse' -E- [Nil] -R- RNil = Nil
      xs :E: List x :R: Bool rxs :R: Rev -E- xs
        reverse' -E- [app -E- xs -E- (one -E- x)] -R- (RSnoc -E- xs -R- x -R- rxs) = Cons -R- x -R- (reverse' -E- xs -R- rxs)
    reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))
    main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))
  in main

### Final annotation ###

  let
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    id :E: (a :E: Type) -> (_x0 :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    subst :R: (a :E: Type) -> (P :E: (_x1 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (w :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x2 :E: a) -> Type x :E: a
        subst -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\w :R: P -E- x. w)
    cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_x3 :R: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -R- x) -E- (f -R- y) 
      a :E: Type b :E: Type f :E: (_x4 :R: a) -> b x :E: a
        cong -E- a -E- b -E- f -E- x -E- [x] -E- [Refl -E- a -E- x] = Refl -E- b -E- (f -R- x)
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor List :E: Type
    constructor Nil :R: List
    constructor Cons :R: (x :R: Bool) -> (xs :R: List) -> List
    one :E: (x :E: Bool) -> List = (\x :E: Bool. Cons -R- x -R- Nil)
    app :E: (_x5 :E: List) -> (_x6 :E: List) -> List 
      ys :E: List
        app -E- Nil -E- ys = ys
      x :E: Bool xs :E: List ys :E: List
        app -E- (Cons -R- x -R- xs) -E- ys = Cons -R- x -R- (app -E- xs -E- ys)
    appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) 
      appRightNeutral -E- Nil = Refl -E- List -E- Nil
      x :E: Bool xs :E: List
        appRightNeutral -E- (Cons -R- x -R- xs) = cong -E- List -E- List -E- (Cons -R- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)
    appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) 
      ys :E: List zs :E: List
        appAssoc -E- Nil -E- ys -E- zs = Refl -E- List -E- (app -E- ys -E- zs)
      x :E: Bool xs :E: List ys :E: List zs :E: List
        appAssoc -E- (Cons -R- x -R- xs) -E- ys -E- zs = cong -E- List -E- List -E- (Cons -R- x) -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs -E- ys -E- zs)
    constructor Rev :E: (_x7 :E: List) -> Type
    constructor RNil :R: Rev -E- Nil
    constructor RSnoc :R: (xs :E: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))
    rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -E- xs -E- ys) 
      xs :E: List rxs :R: Rev -E- xs
        rev' -E- xs -R- rxs -R- Nil = subst -E- List -E- Rev -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs) -R- rxs
      xs :E: List rxs :R: Rev -E- xs y :R: Bool ys :R: List
        rev' -E- xs -R- rxs -R- (Cons -R- y -R- ys) = subst -E- List -E- Rev -E- (app -E- (app -E- xs -E- (one -E- y)) -E- ys) -E- (app -E- xs -E- (Cons -R- y -R- ys)) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys) -R- (rev' -E- (app -E- xs -E- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys)
    rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)
    reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List 
      reverse' -E- [Nil] -R- RNil = Nil
      xs :E: List x :R: Bool rxs :R: Rev -E- xs
        reverse' -E- [app -E- xs -E- (one -E- x)] -R- (RSnoc -E- xs -R- x -R- rxs) = Cons -R- x -R- (reverse' -E- xs -R- rxs)
    reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))
    main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    subst 
      subst = (\w. w)
    constructor T : Bool
    constructor F : Bool
    constructor Nil : List
    constructor Cons : (x) -> (xs) -> List
    constructor RNil : Rev
    constructor RSnoc : (x) -> (rxs) -> Rev
    rev' 
      rev' rxs Nil = subst rxs
      rev' rxs (Cons y ys) = subst (rev' (RSnoc y rxs) ys)
    rev = (\xs. rev' RNil xs)
    reverse' 
      reverse' RNil = Nil
      reverse' (RSnoc x rxs) = Cons x (reverse' rxs)
    reverse = (\xs. reverse' (rev xs))
    main = reverse (Cons T (Cons F (Cons T (Cons F Nil))))
  in main

### Intermediate representation ###

let subst = \w. w
  in let T = constructor 0
    in let F = constructor 0
      in let Nil = constructor 0
        in let Cons = constructor 2
          in let RNil = constructor 0
            in let RSnoc = constructor 2
              in let rev' = \_pv0. \_pv1.
                case _pv1 of
                  Cons _pv2 _pv3 => (subst ((rev' ((RSnoc _pv2) _pv0)) _pv3))
                  Nil => (subst _pv0)
                in let rev = \xs. ((rev' RNil) xs)
                  in let reverse' = \_pv0.
                    case _pv0 of
                      RNil => Nil
                      RSnoc _pv1 _pv2 => ((Cons _pv1) (reverse' _pv2))
                    in let reverse = \xs. (reverse' (rev xs))
                      in let main = (reverse ((Cons T) ((Cons F) ((Cons T) ((Cons F) Nil)))))
                        in main

### Normal forms ###

unerased:
  
  let
    constructor Bool : Type
    constructor T : Bool
    constructor F : Bool
    constructor List : Type
    constructor Nil : List
    constructor Cons : (x :R: Bool) -> (xs :R: List) -> List
  in Cons F (Cons T (Cons F (Cons T Nil)))

erased:
  
  let
    constructor T : Bool
    constructor F : Bool
    constructor Nil : List
    constructor Cons : (x) -> (xs) -> List
  in Cons F (Cons T (Cons F (Cons T Nil)))

