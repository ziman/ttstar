(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (T `(T))
    (F `(F))
    (Nil `(Nil))
    (Cons (lambda (x)
      (lambda (xs)
        `(Cons ,x ,xs))))
    (RNil `(RNil))
    (RSnoc (lambda (x)
      (lambda (rxs)
        `(RSnoc ,x ,rxs))))
    (rev_ (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((rxs ('Nil))
            rxs)
          ((rxs ('Cons y ys))
            ((rev_ ((RSnoc y) rxs)) ys))))))
    (rev (lambda (xs)
      ((rev_ RNil) xs)))
    (reverse_ (lambda (_e0)
      (match (list _e0)
        ((('RNil))
          Nil)
        ((('RSnoc x rxs))
          ((Cons x) (reverse_ rxs))))))
    (reverse_TT (lambda (xs)
      (reverse_ (rev xs))))
    (main (reverse_TT ((Cons T) ((Cons F) ((Cons T) ((Cons F) Nil))))))
  )
    main))
