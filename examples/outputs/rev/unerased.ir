-- vim: ft=ttstar
let Id = constructor 3
  in let Refl = constructor 2
    in let id = \a. \x. x
      in let subst = \_pv0. \_pv1. \_pv2. \_pv3. \_pv4.
        \w. w
        in let cong = \_pv0. \_pv1. \_pv2. \_pv3. \_pv4. \_pv5.
          ((Refl _pv1) (_pv2 _pv3))
          in let Bool = constructor 0
            in let T = constructor 0
              in let F = constructor 0
                in let List = constructor 0
                  in let Nil = constructor 0
                    in let Cons = constructor 2
                      in let one = \x. ((Cons x) Nil)
                        in let app = \_pv0. \_pv1.
                          case _pv0 of
                            Cons _pv2 _pv3 => ((Cons _pv2) ((app _pv3) _pv1))
                            Nil => _pv1
                          in let appRightNeutral = \_pv0.
                            case _pv0 of
                              Cons _pv1 _pv2 => ((((((cong List) List) (Cons _pv1)) _pv2) ((app _pv2) Nil)) (appRightNeutral _pv2))
                              Nil => ((Refl List) Nil)
                            in let appAssoc = \_pv0. \_pv1. \_pv2.
                              case _pv0 of
                                Cons _pv3 _pv4 => ((((((cong List) List) (Cons _pv3)) ((app ((app _pv4) _pv1)) _pv2)) ((app _pv4) ((app _pv1) _pv2))) (((appAssoc _pv4) _pv1) _pv2))
                                Nil => ((Refl List) ((app _pv1) _pv2))
                              in let Rev = constructor 1
                                in let RNil = constructor 0
                                  in let RSnoc = constructor 3
                                    in let rev' = \_pv0. \_pv1. \_pv2.
                                      case _pv2 of
                                        Cons _pv3 _pv4 => ((((((subst List) Rev) ((app ((app _pv0) (one _pv3))) _pv4)) ((app _pv0) ((Cons _pv3) _pv4))) (((appAssoc _pv0) (one _pv3)) _pv4)) (((rev' ((app _pv0) (one _pv3))) (((RSnoc _pv0) _pv3) _pv1)) _pv4))
                                        Nil => ((((((subst List) Rev) _pv0) ((app _pv0) Nil)) (appRightNeutral _pv0)) _pv1)
                                      in let rev = \xs. (((rev' Nil) RNil) xs)
                                        in let reverse' = \_pv0. \_pv1.
                                          case _pv1 of
                                            RNil => Nil
                                            RSnoc _pv2 _pv3 _pv4 => ((Cons _pv3) ((reverse' _pv2) _pv4))
                                          in let reverse = \xs. ((reverse' xs) (rev xs))
                                            in let main = (reverse ((Cons T) ((Cons F) ((Cons T) ((Cons F) Nil)))))
                                              in main
