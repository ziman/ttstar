-- vim: ft=ttstar
  let
    postulate Nat : Type
    postulate Z : Nat
    postulate S : (x) -> Nat
    plus 
       Z n = n
       (S m) n = S (plus m n)
    postulate Bool : Type
    postulate True : Bool
    postulate False : Bool
    not 
       True = False
       False = True
    postulate Unit : Type
    postulate MkUnit : Unit
    postulate Pair : (_x3) -> (_x4) -> Type
    postulate MkPair : (a) -> (b) -> (_x5) -> (_x6) -> Pair a b
    fst 
       a b ({_} [_] [_] x y) = x
    snd 
       a b ({_} [_] [_] x y) = y
    postulate Either : (_x9) -> (_x10) -> Type
    postulate Left : (a) -> (b) -> (_x11) -> Either a b
    postulate Right : (a) -> (b) -> (_x12) -> Either a b
    id = (\a. (\x. x))
    postulate Fin : (_x13) -> Type
    postulate FZ : (n) -> Fin (S n)
    postulate FS : (n) -> (_x14) -> Fin (S n)
    postulate Vect : (_x15) -> (_x16) -> Type
    postulate VN : (a) -> Vect Z a
    postulate VC : (n) -> (a) -> (x) -> (xs) -> Vect (S n) a
    isZero 
       Z = True
       (S n) = False
    f 
       Bool = not
       Nat = isZero
       a = (\x. False)
    main = f Bool False
  in main
