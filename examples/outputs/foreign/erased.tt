-- vim: ft=ttstar
  let
    constructor Z : N
    constructor S : (x) -> N
    constructor T : B
    constructor F : B
    constructor Cons : (_x0) -> (_x1) -> List
    constructor Nil : List
    not 
      [_] T = F
      [_] F = T
    foreign input
    genList 
      [_] _ Z = Nil
      [_] b (S n) = Cons b (genList (not b) n)
    constructor Nothing : Maybe
    constructor Just : Maybe
    semiDecEqB 
      [_] T T = Just
      [_] F F = Just
      [_] T F = Nothing
      [_] F T = Nothing
    semiDecEq 
      [_] Nil (Cons _ _) = Nothing
      [_] (Cons _ _) Nil = Nothing
      [_] Nil Nil = Just
      [_] (Cons x xs) (Cons y ys) = 
        let semiDecEq' 
          [_] Nothing _ = Nothing
          [_] _ Nothing = Nothing
          [_] Just Just = Just
        in semiDecEq' (semiDecEqB x y) (semiDecEq xs ys)
    sampleList = genList T input
    main = semiDecEq sampleList sampleList
  in main
