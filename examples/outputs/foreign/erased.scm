(import (chicken process-context))
(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Z `(Z))
    (S (lambda (x)
      `(S ,x)))
    (T `(T))
    (F `(F))
    (Cons (lambda (_x0)
      (lambda (_x1)
        `(Cons ,_x0 ,_x1))))
    (Nil `(Nil))
    (not_TT (lambda (_e0)
      (match (list _e0)
        ((('T))
          F)
        ((('F))
          T))))
    (input (rts-arg-peano 'Z 'S 0))
    (genList (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((b ('Z))
            Nil)
          ((b ('S n))
            ((Cons b) ((genList (not_TT b)) n)))))))
    (Nothing `(Nothing))
    (Just `(Just))
    (semiDecEqB (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((('T) ('T))
            Just)
          ((('F) ('F))
            Just)
          ((('T) ('F))
            Nothing)
          ((('F) ('T))
            Nothing)))))
    (semiDecEq (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((('Nil) ('Cons b ys))
            Nothing)
          ((('Cons b xs) ('Nil))
            Nothing)
          ((('Nil) ('Nil))
            Just)
          ((('Cons x xs) ('Cons y ys))
            (letrec* ((semiDecEq_ (lambda (_e0)
              (lambda (_e1)
                (match (list _e0 _e1)
                  ((('Nothing) pfT)
                    Nothing)
                  ((pfH ('Nothing))
                    Nothing)
                  ((('Just) ('Just))
                    Just))))))
              ((semiDecEq_ ((semiDecEqB x) y)) ((semiDecEq xs) ys))))))))
    (sampleList ((genList T) input))
    (main (match (list)
      (()
        ((semiDecEq sampleList) sampleList))))
  )
    main))
