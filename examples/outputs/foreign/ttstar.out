-- vim: ft=ttstar

### Desugared ###

  let
    constructor N : Type
    constructor Z : N
    constructor S : (x :R: N) -> N
    constructor B : Type
    constructor T : B
    constructor F : B
    constructor List : Type
    constructor Cons : (_x0 : B) -> (_x1 : List) -> List
    constructor Nil : List
    not : (_x2 : B) -> B 
      not T = F
      not F = T
    foreign input : N
    genList : (_x3 : B) -> (_x4 : N) -> List 
      b : B
        genList b Z = Nil
      b : B n : N
        genList b (S n) = Cons b (genList (not b) n)
    constructor Eq : (a : Type) -> (_x5 : a) -> (_x6 : a) -> Type
    constructor Refl : (a : Type) -> (x : a) -> Eq a x x
    constructor Maybe : (_x7 : Type) -> Type
    constructor Nothing : (a : Type) -> Maybe a
    constructor Just : (a : Type) -> (x : a) -> Maybe a
    semiDecEqB : (x : B) -> (y : B) -> Maybe (Eq B x y) 
      semiDecEqB T T = Just (Eq B T T) (Refl B T)
      semiDecEqB F F = Just (Eq B F F) (Refl B F)
      semiDecEqB T F = Nothing (Eq B T F)
      semiDecEqB F T = Nothing (Eq B F T)
    semiDecEq : (xs : List) -> (ys : List) -> Maybe (Eq List xs ys) 
      b : B ys : List
        semiDecEq Nil (Cons b ys) = Nothing (Eq List Nil (Cons b ys))
      b : B xs : List
        semiDecEq (Cons b xs) Nil = Nothing (Eq List (Cons b xs) Nil)
      semiDecEq Nil Nil = Just (Eq List Nil Nil) (Refl List Nil)
      x : B y : B xs : List ys : List
        semiDecEq (Cons x xs) (Cons y ys) = 
          let semiDecEq' : (x : B) -> (y : B) -> (xs : List) -> (ys : List) -> (pfH : Maybe (Eq B x y)) -> (pfT : Maybe (Eq List xs ys)) -> Maybe (Eq List (Cons x xs) (Cons y ys)) 
            x : B y : B xs : List ys : List pfT : Maybe (Eq List xs ys)
              semiDecEq' x y xs ys (Nothing [Eq B x y]) pfT = Nothing (Eq List (Cons x xs) (Cons y ys))
            x : B y : B xs : List ys : List pfH : Maybe (Eq B x y)
              semiDecEq' x y xs ys pfH (Nothing [Eq List xs ys]) = Nothing (Eq List (Cons x xs) (Cons y ys))
            x : B xs : List
              semiDecEq' x [x] xs [xs] (Just [Eq B x x] [Refl B x]) (Just [Eq List xs xs] [Refl List xs]) = Just (Eq List (Cons x xs) (Cons x xs)) (Refl List (Cons x xs))
          in semiDecEq' x y xs ys (semiDecEqB x y) (semiDecEq xs ys)
    sampleList : List = genList T input
    main : Maybe (Eq List sampleList sampleList) 
      main = semiDecEq sampleList sampleList
  in main

### Evarified ###

  let
    constructor N :1: Type
    constructor Z :2: N
    constructor S :3: (x :R: N) -> N
    constructor B :4: Type
    constructor T :5: B
    constructor F :6: B
    constructor List :7: Type
    constructor Cons :8: (_x0 :9: B) -> (_x1 :10: List) -> List
    constructor Nil :11: List
    not :12: (_x2 :13: B) -> B 
      not -14- T = F
      not -15- F = T
    foreign input :16: N
    genList :17: (_x3 :18: B) -> (_x4 :19: N) -> List 
      b :20: B
        genList -22- b -21- Z = Nil
      b :23: B n :24: N
        genList -26- b -25- (S -27- n) = Cons -29- b -28- (genList -31- (not -32- b) -30- n)
    constructor Eq :33: (a :34: Type) -> (_x5 :35: a) -> (_x6 :36: a) -> Type
    constructor Refl :37: (a :38: Type) -> (x :39: a) -> Eq -42- a -41- x -40- x
    constructor Maybe :43: (_x7 :44: Type) -> Type
    constructor Nothing :45: (a :46: Type) -> Maybe -47- a
    constructor Just :48: (a :49: Type) -> (x :50: a) -> Maybe -51- a
    semiDecEqB :52: (x :53: B) -> (y :54: B) -> Maybe -55- (Eq -58- B -57- x -56- y) 
      semiDecEqB -60- T -59- T = Just -62- (Eq -65- B -64- T -63- T) -61- (Refl -67- B -66- T)
      semiDecEqB -69- F -68- F = Just -71- (Eq -74- B -73- F -72- F) -70- (Refl -76- B -75- F)
      semiDecEqB -78- T -77- F = Nothing -79- (Eq -82- B -81- T -80- F)
      semiDecEqB -84- F -83- T = Nothing -85- (Eq -88- B -87- F -86- T)
    semiDecEq :89: (xs :90: List) -> (ys :91: List) -> Maybe -92- (Eq -95- List -94- xs -93- ys) 
      b :96: B ys :97: List
        semiDecEq -99- Nil -98- (Cons -101- b -100- ys) = Nothing -102- (Eq -105- List -104- Nil -103- (Cons -107- b -106- ys))
      b :108: B xs :109: List
        semiDecEq -111- (Cons -113- b -112- xs) -110- Nil = Nothing -114- (Eq -117- List -116- (Cons -119- b -118- xs) -115- Nil)
      semiDecEq -121- Nil -120- Nil = Just -123- (Eq -126- List -125- Nil -124- Nil) -122- (Refl -128- List -127- Nil)
      x :129: B y :130: B xs :131: List ys :132: List
        semiDecEq -134- (Cons -136- x -135- xs) -133- (Cons -138- y -137- ys) = 
          let semiDecEq' :139: (x :140: B) -> (y :141: B) -> (xs :142: List) -> (ys :143: List) -> (pfH :144: Maybe -145- (Eq -148- B -147- x -146- y)) -> (pfT :149: Maybe -150- (Eq -153- List -152- xs -151- ys)) -> Maybe -154- (Eq -157- List -156- (Cons -159- x -158- xs) -155- (Cons -161- y -160- ys)) 
            x :162: B y :163: B xs :164: List ys :165: List pfT :166: Maybe -167- (Eq -170- List -169- xs -168- ys)
              semiDecEq' -176- x -175- y -174- xs -173- ys -172- (Nothing -177- [Eq -180- B -179- x -178- y]) -171- pfT = Nothing -181- (Eq -184- List -183- (Cons -186- x -185- xs) -182- (Cons -188- y -187- ys))
            x :189: B y :190: B xs :191: List ys :192: List pfH :193: Maybe -194- (Eq -197- B -196- x -195- y)
              semiDecEq' -203- x -202- y -201- xs -200- ys -199- pfH -198- (Nothing -204- [Eq -207- List -206- xs -205- ys]) = Nothing -208- (Eq -211- List -210- (Cons -213- x -212- xs) -209- (Cons -215- y -214- ys))
            x :216: B xs :217: List
              semiDecEq' -223- x -222- [x] -221- xs -220- [xs] -219- (Just -225- [Eq -228- B -227- x -226- x] -224- [Refl -230- B -229- x]) -218- (Just -232- [Eq -235- List -234- xs -233- xs] -231- [Refl -237- List -236- xs]) = Just -239- (Eq -242- List -241- (Cons -244- x -243- xs) -240- (Cons -246- x -245- xs)) -238- (Refl -248- List -247- (Cons -250- x -249- xs))
          in semiDecEq' -256- x -255- y -254- xs -253- ys -252- (semiDecEqB -258- x -257- y) -251- (semiDecEq -260- xs -259- ys)
    sampleList :261: List = genList -263- T -262- input
    main :264: Maybe -265- (Eq -268- List -267- sampleList -266- sampleList) 
      main = semiDecEq -270- sampleList -269- sampleList
  in main

### Constraints ###

[] -> [27,R]
[9] -> [29,101,107,113,119,136,138,159,161,186,188,213,215,244,246,250]
[10] -> [28,100,106,112,118,135,137,158,160,185,187,212,214,243,245,249]
[12] -> [5,6,12,14,15]
[13] -> [14,15,32]
[14] -> [13]
[15] -> [13]
[17] -> [2,3,8,11,17,21,25]
[17,22] -> [20]
[17,25] -> [24]
[17,26] -> [23]
[17,28] -> [17]
[17,28,30] -> [24]
[17,28,31] -> [12]
[17,28,31,32] -> [23]
[17,29] -> [23]
[18] -> [22,26,31,263]
[19] -> [21,25,30,262]
[20] -> [17,22]
[21] -> [19]
[22] -> [18]
[23] -> [17,26]
[24] -> [17,25,27]
[25] -> [19]
[26] -> [18]
[28] -> [10]
[29] -> [9]
[30] -> [19]
[31] -> [18]
[32] -> [13]
[34] -> [42,58,65,74,82,88,95,105,117,126,157,180,184,207,211,228,235,242,268]
[35] -> [41,57,64,73,81,87,94,104,116,125,156,179,183,206,210,227,234,241,267]
[36] -> [40,56,63,72,80,86,93,103,115,124,155,178,182,205,209,226,233,240,266]
[38] -> [67,76,128,230,237,248]
[39] -> [66,75,127,229,236,247]
[40] -> [36,63,72,124,226,233,240]
[40,E] -> [39]
[41] -> [35,64,73,125,227,234,241]
[41,E] -> [39]
[42] -> [34,65,74,126,228,235,242]
[42,E] -> [38]
[44] -> [47,51,55,92,154,265]
[46] -> [79,85,102,114,177,181,204,208]
[47] -> [44,55,92,145,150,154]
[47,E] -> [46]
[49] -> [62,71,123,225,232,239]
[50] -> [61,70,122,224,231,238]
[51] -> [44,55,92,145,150,154]
[51,E] -> [49]
[52] -> [5,6,45,48,52,59,60,68,69,77,78,83,84]
[52,61] -> [37]
[52,61,66] -> [5]
[52,61,67] -> [4]
[52,62] -> [33]
[52,62,63] -> [5]
[52,62,64] -> [5]
[52,62,65] -> [4]
[52,70] -> [37]
[52,70,75] -> [6]
[52,70,76] -> [4]
[52,71] -> [33]
[52,71,72] -> [6]
[52,71,73] -> [6]
[52,71,74] -> [4]
[52,79] -> [33]
[52,79,80] -> [6]
[52,79,81] -> [5]
[52,79,82] -> [4]
[52,85] -> [33]
[52,85,86] -> [5]
[52,85,87] -> [6]
[52,85,88] -> [4]
[53] -> [60,69,78,84,258]
[54] -> [59,68,77,83,257]
[55] -> [44,47,51,145]
[55,56,E] -> [54]
[55,57,E] -> [53]
[55,58,E] -> [4]
[55,E] -> [33]
[56] -> [36,63,72,80,86,146]
[57] -> [35,64,73,81,87,147]
[58] -> [34,65,74,82,88,148]
[59] -> [54]
[60] -> [53]
[61] -> [50]
[62] -> [49]
[63] -> [36,40,56]
[64] -> [35,41,57]
[65] -> [34,42,58]
[66] -> [39]
[67] -> [38]
[68] -> [54]
[69] -> [53]
[70] -> [50]
[71] -> [49]
[72] -> [36,40,56]
[73] -> [35,41,57]
[74] -> [34,42,58]
[75] -> [39]
[76] -> [38]
[77] -> [54]
[78] -> [53]
[79] -> [46]
[80] -> [36,56]
[81] -> [35,57]
[82] -> [34,58]
[83] -> [54]
[84] -> [53]
[85] -> [46]
[86] -> [36,56]
[87] -> [35,57]
[88] -> [34,58]
[89] -> [8,11,45,48,89,98,99,110,111,120,121,133,134,139]
[89,98,100] -> [97]
[89,98,101] -> [96]
[89,102] -> [33]
[89,102,103] -> [8]
[89,102,103,106] -> [97]
[89,102,103,107] -> [96]
[89,102,104] -> [11]
[89,102,105] -> [7]
[89,111,112] -> [109]
[89,111,113] -> [108]
[89,114] -> [33]
[89,114,115] -> [11]
[89,114,116] -> [8]
[89,114,116,118] -> [109]
[89,114,116,119] -> [108]
[89,114,117] -> [7]
[89,122] -> [37]
[89,122,127] -> [11]
[89,122,128] -> [7]
[89,123] -> [33]
[89,123,124] -> [11]
[89,123,125] -> [11]
[89,123,126] -> [7]
[89,133,137] -> [132]
[89,133,138] -> [130]
[89,134,135] -> [131]
[89,134,136] -> [129]
[89,251] -> [89]
[89,251,259] -> [132]
[89,251,260] -> [131]
[89,252] -> [52]
[89,252,257] -> [130]
[89,252,258] -> [129]
[89,253] -> [132]
[89,254] -> [131]
[89,255] -> [130]
[89,256] -> [129]
[90] -> [99,111,121,134,260,270]
[91] -> [98,110,120,133,259,269]
[92] -> [44,47,51,150,154,265]
[92,93,E] -> [91]
[92,94,E] -> [90]
[92,95,E] -> [7]
[92,E] -> [33]
[93] -> [36,103,115,124,151,155,266]
[94] -> [35,104,116,125,152,156,267]
[95] -> [34,105,117,126,153,157,268]
[96] -> [89,98,101]
[97] -> [89,98,100]
[98] -> [91]
[99] -> [90]
[100] -> [10,106]
[101] -> [9,107]
[102] -> [46]
[103] -> [36,93]
[104] -> [35,94]
[105] -> [34,95]
[106] -> [10,100]
[107] -> [9,101]
[108] -> [89,111,113]
[109] -> [89,111,112]
[110] -> [91]
[111] -> [90]
[112] -> [10,118]
[113] -> [9,119]
[114] -> [46]
[115] -> [36,93]
[116] -> [35,94]
[117] -> [34,95]
[118] -> [10,112]
[119] -> [9,113]
[120] -> [91]
[121] -> [90]
[122] -> [50]
[123] -> [49]
[124] -> [36,40,93]
[125] -> [35,41,94]
[126] -> [34,42,95]
[127] -> [39]
[128] -> [38]
[129] -> [89,134,136]
[130] -> [89,133,138]
[131] -> [89,134,135]
[132] -> [89,133,137]
[133] -> [91]
[134] -> [90]
[135] -> [10,158]
[136] -> [9,159]
[137] -> [10,160]
[138] -> [9,161]
[139] -> [45,48,139,172,198,218,219]
[139,171] -> [166]
[139,172,177] -> [33]
[139,172,177,178] -> [163]
[139,172,177,179] -> [162]
[139,172,177,180] -> [4]
[139,173] -> [165]
[139,174] -> [164]
[139,175] -> [163]
[139,176] -> [162]
[139,181] -> [33]
[139,181,182] -> [8]
[139,181,182,187] -> [165]
[139,181,182,188] -> [163]
[139,181,183] -> [8]
[139,181,183,185] -> [164]
[139,181,183,186] -> [162]
[139,181,184] -> [7]
[139,198,204] -> [33]
[139,198,204,205] -> [192]
[139,198,204,206] -> [191]
[139,198,204,207] -> [7]
[139,199] -> [193]
[139,200] -> [192]
[139,201] -> [191]
[139,202] -> [190]
[139,203] -> [189]
[139,208] -> [33]
[139,208,209] -> [8]
[139,208,209,214] -> [192]
[139,208,209,215] -> [190]
[139,208,210] -> [8]
[139,208,210,212] -> [191]
[139,208,210,213] -> [189]
[139,208,211] -> [7]
[139,218,231] -> [37]
[139,218,231,236] -> [217]
[139,218,231,237] -> [7]
[139,218,232] -> [33]
[139,218,232,233] -> [217]
[139,218,232,234] -> [217]
[139,218,232,235] -> [7]
[139,219,224] -> [37]
[139,219,224,229] -> [216]
[139,219,224,230] -> [4]
[139,219,225] -> [33]
[139,219,225,226] -> [216]
[139,219,225,227] -> [216]
[139,219,225,228] -> [4]
[139,220] -> [217]
[139,221] -> [217]
[139,222] -> [216]
[139,223] -> [216]
[139,238] -> [37]
[139,238,247] -> [8]
[139,238,247,249] -> [217]
[139,238,247,250] -> [216]
[139,238,248] -> [7]
[139,239] -> [33]
[139,239,240] -> [8]
[139,239,240,245] -> [217]
[139,239,240,246] -> [216]
[139,239,241] -> [8]
[139,239,241,243] -> [217]
[139,239,241,244] -> [216]
[139,239,242] -> [7]
[140] -> [176,203,223,256]
[141] -> [175,202,222,255]
[142] -> [174,201,221,254]
[143] -> [173,200,220,253]
[144] -> [172,199,219,252]
[145] -> [47,51,55,194]
[146] -> [56,178,195,226]
[147] -> [57,179,196,227]
[148] -> [58,180,197,228]
[149] -> [171,198,218,251]
[150] -> [47,51,92,167]
[151] -> [93,168,205,233]
[152] -> [94,169,206,234]
[153] -> [95,170,207,235]
[154] -> [44,47,51,92]
[154,155,160,E] -> [143]
[154,155,161,E] -> [141]
[154,155,E] -> [8]
[154,156,158,E] -> [142]
[154,156,159,E] -> [140]
[154,156,E] -> [8]
[154,157,E] -> [7]
[154,E] -> [33]
[155] -> [36,93,182,209,240]
[156] -> [35,94,183,210,241]
[157] -> [34,95,184,211,242]
[158] -> [10,135,185,212,243]
[159] -> [9,136,186,213,244]
[160] -> [10,137,187,214,245]
[161] -> [9,138,188,215,246]
[162] -> [139,176]
[163] -> [139,175]
[164] -> [139,174]
[165] -> [139,173]
[166] -> [139,171]
[167] -> [150]
[168] -> [151]
[169] -> [152]
[170] -> [153]
[171] -> [149]
[172] -> [144]
[173] -> [143]
[174] -> [142]
[175] -> [141]
[176] -> [140]
[177] -> [46]
[178] -> [36,146]
[179] -> [35,147]
[180] -> [34,148]
[181] -> [46]
[182] -> [36,155]
[183] -> [35,156]
[184] -> [34,157]
[185] -> [10,158]
[186] -> [9,159]
[187] -> [10,160]
[188] -> [9,161]
[189] -> [139,203]
[190] -> [139,202]
[191] -> [139,201]
[192] -> [139,200]
[193] -> [139,199]
[194] -> [145]
[195] -> [146]
[196] -> [147]
[197] -> [148]
[198] -> [149]
[199] -> [144]
[200] -> [143]
[201] -> [142]
[202] -> [141]
[203] -> [140]
[204] -> [46]
[205] -> [36,151]
[206] -> [35,152]
[207] -> [34,153]
[208] -> [46]
[209] -> [36,155]
[210] -> [35,156]
[211] -> [34,157]
[212] -> [10,158]
[213] -> [9,159]
[214] -> [10,160]
[215] -> [9,161]
[216] -> [139,223]
[217] -> [139,221]
[218] -> [149]
[219] -> [144]
[220] -> [143]
[221] -> [142]
[222] -> [141]
[223] -> [140]
[224] -> [50]
[225] -> [49]
[226] -> [36,40,146]
[227] -> [35,41,147]
[228] -> [34,42,148]
[229] -> [39]
[230] -> [38]
[231] -> [50]
[232] -> [49]
[233] -> [36,40,151]
[234] -> [35,41,152]
[235] -> [34,42,153]
[236] -> [39]
[237] -> [38]
[238] -> [50]
[239] -> [49]
[240] -> [36,40,155]
[241] -> [35,41,156]
[242] -> [34,42,157]
[243] -> [10,158,249]
[244] -> [9,159,250]
[245] -> [10,160,249]
[246] -> [9,161,250]
[247] -> [39]
[248] -> [38]
[249] -> [10,243,245]
[250] -> [9,244,246]
[251] -> [149]
[252] -> [144]
[253] -> [143]
[254] -> [142]
[255] -> [141]
[256] -> [140]
[257] -> [54]
[258] -> [53]
[259] -> [91]
[260] -> [90]
[261] -> [17]
[261,262] -> [16]
[261,263] -> [5]
[262] -> [19,262]
[263] -> [18,263]
[264] -> [89,264]
[264,269] -> [261]
[264,270] -> [261]
[265] -> [44,92]
[265,266,E] -> [261]
[265,267,E] -> [261]
[265,268,E] -> [7]
[265,E] -> [33]
[266] -> [36,93]
[267] -> [35,94]
[268] -> [34,95]
[269] -> [91]
[270] -> [90]
[E] -> [1,4,7,33,43,R]
[R] -> [264]

### Solution ###

[2,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,45,48,52,53,54,59,60,68,69,77,78,83,84,89,90,91,96,97,98,99,100,101,106,107,108,109,110,111,112,113,118,119,120,121,129,130,131,132,133,134,135,136,137,138,139,144,149,158,159,160,161,166,171,172,185,186,187,188,193,198,199,212,213,214,215,218,219,243,244,245,246,249,250,251,252,257,258,259,260,261,262,263,264,269,270,R]

### Annotated ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (x :R: N) -> N
    constructor B :E: Type
    constructor T :R: B
    constructor F :R: B
    constructor List :E: Type
    constructor Cons :R: (_x0 :R: B) -> (_x1 :R: List) -> List
    constructor Nil :R: List
    not :R: (_x2 :R: B) -> B 
      not -R- T = F
      not -R- F = T
    foreign input :R: N
    genList :R: (_x3 :R: B) -> (_x4 :R: N) -> List 
      b :R: B
        genList -R- b -R- Z = Nil
      b :R: B n :R: N
        genList -R- b -R- (S -R- n) = Cons -R- b -R- (genList -R- (not -R- b) -R- n)
    constructor Eq :E: (a :E: Type) -> (_x5 :E: a) -> (_x6 :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Eq -E- a -E- x -E- x
    constructor Maybe :E: (_x7 :E: Type) -> Type
    constructor Nothing :R: (a :E: Type) -> Maybe -E- a
    constructor Just :R: (a :E: Type) -> (x :E: a) -> Maybe -E- a
    semiDecEqB :R: (x :R: B) -> (y :R: B) -> Maybe -E- (Eq -E- B -E- x -E- y) 
      semiDecEqB -R- T -R- T = Just -E- (Eq -E- B -E- T -E- T) -E- (Refl -E- B -E- T)
      semiDecEqB -R- F -R- F = Just -E- (Eq -E- B -E- F -E- F) -E- (Refl -E- B -E- F)
      semiDecEqB -R- T -R- F = Nothing -E- (Eq -E- B -E- T -E- F)
      semiDecEqB -R- F -R- T = Nothing -E- (Eq -E- B -E- F -E- T)
    semiDecEq :R: (xs :R: List) -> (ys :R: List) -> Maybe -E- (Eq -E- List -E- xs -E- ys) 
      b :R: B ys :R: List
        semiDecEq -R- Nil -R- (Cons -R- b -R- ys) = Nothing -E- (Eq -E- List -E- Nil -E- (Cons -R- b -R- ys))
      b :R: B xs :R: List
        semiDecEq -R- (Cons -R- b -R- xs) -R- Nil = Nothing -E- (Eq -E- List -E- (Cons -R- b -R- xs) -E- Nil)
      semiDecEq -R- Nil -R- Nil = Just -E- (Eq -E- List -E- Nil -E- Nil) -E- (Refl -E- List -E- Nil)
      x :R: B y :R: B xs :R: List ys :R: List
        semiDecEq -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = 
          let semiDecEq' :R: (x :E: B) -> (y :E: B) -> (xs :E: List) -> (ys :E: List) -> (pfH :R: Maybe -E- (Eq -E- B -E- x -E- y)) -> (pfT :R: Maybe -E- (Eq -E- List -E- xs -E- ys)) -> Maybe -E- (Eq -E- List -E- (Cons -R- x -R- xs) -E- (Cons -R- y -R- ys)) 
            x :E: B y :E: B xs :E: List ys :E: List pfT :R: Maybe -E- (Eq -E- List -E- xs -E- ys)
              semiDecEq' -E- x -E- y -E- xs -E- ys -R- (Nothing -E- [Eq -E- B -E- x -E- y]) -R- pfT = Nothing -E- (Eq -E- List -E- (Cons -R- x -R- xs) -E- (Cons -R- y -R- ys))
            x :E: B y :E: B xs :E: List ys :E: List pfH :R: Maybe -E- (Eq -E- B -E- x -E- y)
              semiDecEq' -E- x -E- y -E- xs -E- ys -R- pfH -R- (Nothing -E- [Eq -E- List -E- xs -E- ys]) = Nothing -E- (Eq -E- List -E- (Cons -R- x -R- xs) -E- (Cons -R- y -R- ys))
            x :E: B xs :E: List
              semiDecEq' -E- x -E- [x] -E- xs -E- [xs] -R- (Just -E- [Eq -E- B -E- x -E- x] -E- [Refl -E- B -E- x]) -R- (Just -E- [Eq -E- List -E- xs -E- xs] -E- [Refl -E- List -E- xs]) = Just -E- (Eq -E- List -E- (Cons -R- x -R- xs) -E- (Cons -R- x -R- xs)) -E- (Refl -E- List -E- (Cons -R- x -R- xs))
          in semiDecEq' -E- x -E- y -E- xs -E- ys -R- (semiDecEqB -R- x -R- y) -R- (semiDecEq -R- xs -R- ys)
    sampleList :R: List = genList -R- T -R- input
    main :R: Maybe -E- (Eq -E- List -E- sampleList -E- sampleList) 
      main = semiDecEq -R- sampleList -R- sampleList
  in main

### Specialised ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (x :R: N) -> N
    constructor B :E: Type
    constructor T :R: B
    constructor F :R: B
    constructor List :E: Type
    constructor Cons :R: (_x0 :R: B) -> (_x1 :R: List) -> List
    constructor Nil :R: List
    not :R: (_x2 :R: B) -> B 
      not -R- T = F
      not -R- F = T
    foreign input :R: N
    genList :R: (_x3 :R: B) -> (_x4 :R: N) -> List 
      b :R: B
        genList -R- b -R- Z = Nil
      b :R: B n :R: N
        genList -R- b -R- (S -R- n) = Cons -R- b -R- (genList -R- (not -R- b) -R- n)
    constructor Eq :E: (a :E: Type) -> (_x5 :E: a) -> (_x6 :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Eq -E- a -E- x -E- x
    constructor Maybe :E: (_x7 :E: Type) -> Type
    constructor Nothing :R: (a :E: Type) -> Maybe -E- a
    constructor Just :R: (a :E: Type) -> (x :E: a) -> Maybe -E- a
    semiDecEqB :R: (x :R: B) -> (y :R: B) -> Maybe -E- (Eq -E- B -E- x -E- y) 
      semiDecEqB -R- T -R- T = Just -E- (Eq -E- B -E- T -E- T) -E- (Refl -E- B -E- T)
      semiDecEqB -R- F -R- F = Just -E- (Eq -E- B -E- F -E- F) -E- (Refl -E- B -E- F)
      semiDecEqB -R- T -R- F = Nothing -E- (Eq -E- B -E- T -E- F)
      semiDecEqB -R- F -R- T = Nothing -E- (Eq -E- B -E- F -E- T)
    semiDecEq :R: (xs :R: List) -> (ys :R: List) -> Maybe -E- (Eq -E- List -E- xs -E- ys) 
      b :R: B ys :R: List
        semiDecEq -R- Nil -R- (Cons -R- b -R- ys) = Nothing -E- (Eq -E- List -E- Nil -E- (Cons -R- b -R- ys))
      b :R: B xs :R: List
        semiDecEq -R- (Cons -R- b -R- xs) -R- Nil = Nothing -E- (Eq -E- List -E- (Cons -R- b -R- xs) -E- Nil)
      semiDecEq -R- Nil -R- Nil = Just -E- (Eq -E- List -E- Nil -E- Nil) -E- (Refl -E- List -E- Nil)
      x :R: B y :R: B xs :R: List ys :R: List
        semiDecEq -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = 
          let semiDecEq' :R: (x :E: B) -> (y :E: B) -> (xs :E: List) -> (ys :E: List) -> (pfH :R: Maybe -E- (Eq -E- B -E- x -E- y)) -> (pfT :R: Maybe -E- (Eq -E- List -E- xs -E- ys)) -> Maybe -E- (Eq -E- List -E- (Cons -R- x -R- xs) -E- (Cons -R- y -R- ys)) 
            x :E: B y :E: B xs :E: List ys :E: List pfT :R: Maybe -E- (Eq -E- List -E- xs -E- ys)
              semiDecEq' -E- x -E- y -E- xs -E- ys -R- (Nothing -E- [Eq -E- B -E- x -E- y]) -R- pfT = Nothing -E- (Eq -E- List -E- (Cons -R- x -R- xs) -E- (Cons -R- y -R- ys))
            x :E: B y :E: B xs :E: List ys :E: List pfH :R: Maybe -E- (Eq -E- B -E- x -E- y)
              semiDecEq' -E- x -E- y -E- xs -E- ys -R- pfH -R- (Nothing -E- [Eq -E- List -E- xs -E- ys]) = Nothing -E- (Eq -E- List -E- (Cons -R- x -R- xs) -E- (Cons -R- y -R- ys))
            x :E: B xs :E: List
              semiDecEq' -E- x -E- [x] -E- xs -E- [xs] -R- (Just -E- [Eq -E- B -E- x -E- x] -E- [Refl -E- B -E- x]) -R- (Just -E- [Eq -E- List -E- xs -E- xs] -E- [Refl -E- List -E- xs]) = Just -E- (Eq -E- List -E- (Cons -R- x -R- xs) -E- (Cons -R- x -R- xs)) -E- (Refl -E- List -E- (Cons -R- x -R- xs))
          in semiDecEq' -E- x -E- y -E- xs -E- ys -R- (semiDecEqB -R- x -R- y) -R- (semiDecEq -R- xs -R- ys)
    sampleList :R: List = genList -R- T -R- input
    main :R: Maybe -E- (Eq -E- List -E- sampleList -E- sampleList) 
      main = semiDecEq -R- sampleList -R- sampleList
  in main

### Final annotation ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (x :R: N) -> N
    constructor B :E: Type
    constructor T :R: B
    constructor F :R: B
    constructor List :E: Type
    constructor Cons :R: (_x0 :R: B) -> (_x1 :R: List) -> List
    constructor Nil :R: List
    not :R: (_x2 :R: B) -> B 
      not -R- T = F
      not -R- F = T
    foreign input :R: N
    genList :R: (_x3 :R: B) -> (_x4 :R: N) -> List 
      b :R: B
        genList -R- b -R- Z = Nil
      b :R: B n :R: N
        genList -R- b -R- (S -R- n) = Cons -R- b -R- (genList -R- (not -R- b) -R- n)
    constructor Eq :E: (a :E: Type) -> (_x5 :E: a) -> (_x6 :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Eq -E- a -E- x -E- x
    constructor Maybe :E: (_x7 :E: Type) -> Type
    constructor Nothing :R: (a :E: Type) -> Maybe -E- a
    constructor Just :R: (a :E: Type) -> (x :E: a) -> Maybe -E- a
    semiDecEqB :R: (x :R: B) -> (y :R: B) -> Maybe -E- (Eq -E- B -E- x -E- y) 
      semiDecEqB -R- T -R- T = Just -E- (Eq -E- B -E- T -E- T) -E- (Refl -E- B -E- T)
      semiDecEqB -R- F -R- F = Just -E- (Eq -E- B -E- F -E- F) -E- (Refl -E- B -E- F)
      semiDecEqB -R- T -R- F = Nothing -E- (Eq -E- B -E- T -E- F)
      semiDecEqB -R- F -R- T = Nothing -E- (Eq -E- B -E- F -E- T)
    semiDecEq :R: (xs :R: List) -> (ys :R: List) -> Maybe -E- (Eq -E- List -E- xs -E- ys) 
      b :R: B ys :R: List
        semiDecEq -R- Nil -R- (Cons -R- b -R- ys) = Nothing -E- (Eq -E- List -E- Nil -E- (Cons -R- b -R- ys))
      b :R: B xs :R: List
        semiDecEq -R- (Cons -R- b -R- xs) -R- Nil = Nothing -E- (Eq -E- List -E- (Cons -R- b -R- xs) -E- Nil)
      semiDecEq -R- Nil -R- Nil = Just -E- (Eq -E- List -E- Nil -E- Nil) -E- (Refl -E- List -E- Nil)
      x :R: B y :R: B xs :R: List ys :R: List
        semiDecEq -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = 
          let semiDecEq' :R: (x :E: B) -> (y :E: B) -> (xs :E: List) -> (ys :E: List) -> (pfH :R: Maybe -E- (Eq -E- B -E- x -E- y)) -> (pfT :R: Maybe -E- (Eq -E- List -E- xs -E- ys)) -> Maybe -E- (Eq -E- List -E- (Cons -R- x -R- xs) -E- (Cons -R- y -R- ys)) 
            x :E: B y :E: B xs :E: List ys :E: List pfT :R: Maybe -E- (Eq -E- List -E- xs -E- ys)
              semiDecEq' -E- x -E- y -E- xs -E- ys -R- (Nothing -E- [Eq -E- B -E- x -E- y]) -R- pfT = Nothing -E- (Eq -E- List -E- (Cons -R- x -R- xs) -E- (Cons -R- y -R- ys))
            x :E: B y :E: B xs :E: List ys :E: List pfH :R: Maybe -E- (Eq -E- B -E- x -E- y)
              semiDecEq' -E- x -E- y -E- xs -E- ys -R- pfH -R- (Nothing -E- [Eq -E- List -E- xs -E- ys]) = Nothing -E- (Eq -E- List -E- (Cons -R- x -R- xs) -E- (Cons -R- y -R- ys))
            x :E: B xs :E: List
              semiDecEq' -E- x -E- [x] -E- xs -E- [xs] -R- (Just -E- [Eq -E- B -E- x -E- x] -E- [Refl -E- B -E- x]) -R- (Just -E- [Eq -E- List -E- xs -E- xs] -E- [Refl -E- List -E- xs]) = Just -E- (Eq -E- List -E- (Cons -R- x -R- xs) -E- (Cons -R- x -R- xs)) -E- (Refl -E- List -E- (Cons -R- x -R- xs))
          in semiDecEq' -E- x -E- y -E- xs -E- ys -R- (semiDecEqB -R- x -R- y) -R- (semiDecEq -R- xs -R- ys)
    sampleList :R: List = genList -R- T -R- input
    main :R: Maybe -E- (Eq -E- List -E- sampleList -E- sampleList) 
      main = semiDecEq -R- sampleList -R- sampleList
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor Z : N
    constructor S : (x) -> N
    constructor T : B
    constructor F : B
    constructor Cons : (_x0) -> (_x1) -> List
    constructor Nil : List
    not 
      not T = F
      not F = T
    foreign input
    genList 
      genList b Z = Nil
      genList b (S n) = Cons b (genList (not b) n)
    constructor Nothing : Maybe
    constructor Just : Maybe
    semiDecEqB 
      semiDecEqB T T = Just
      semiDecEqB F F = Just
      semiDecEqB T F = Nothing
      semiDecEqB F T = Nothing
    semiDecEq 
      semiDecEq Nil (Cons b ys) = Nothing
      semiDecEq (Cons b xs) Nil = Nothing
      semiDecEq Nil Nil = Just
      semiDecEq (Cons x xs) (Cons y ys) = 
        let semiDecEq' 
          semiDecEq' Nothing pfT = Nothing
          semiDecEq' pfH Nothing = Nothing
          semiDecEq' Just Just = Just
        in semiDecEq' (semiDecEqB x y) (semiDecEq xs ys)
    sampleList = genList T input
    main 
      main = semiDecEq sampleList sampleList
  in main

### Intermediate representation ###

let Z = constructor 0
  in let S = constructor 1
    in let T = constructor 0
      in let F = constructor 0
        in let Cons = constructor 2
          in let Nil = constructor 0
            in let not = \_pv0.
              case _pv0 of
                F => T
                T => F
              in let input = foreign "(rts-arg-peano 'Z 'S 0)"
                in let genList = \_pv0. \_pv1.
                  case _pv1 of
                    S _pv2 => ((Cons _pv0) ((genList (not _pv0)) _pv2))
                    Z => Nil
                  in let Nothing = constructor 0
                    in let Just = constructor 0
                      in let semiDecEqB = \_pv0. \_pv1.
                        case _pv0 of
                          F => case _pv1 of
                            F => Just
                            T => Nothing
                          T => case _pv1 of
                            F => Nothing
                            T => Just
                        in let semiDecEq = \_pv0. \_pv1.
                          case _pv0 of
                            Cons _pv2 _pv3 => case _pv1 of
                              Cons _pv4 _pv5 => let semiDecEq' = \_pv6. \_pv7.
                                case _pv6 of
                                  Nothing => Nothing
                                  _ => case _pv7 of
                                    Nothing => Nothing
                                    _ => Just
                                in ((semiDecEq' ((semiDecEqB _pv2) _pv4)) ((semiDecEq _pv3) _pv5))
                              Nil => Nothing
                            Nil => case _pv1 of
                              Cons _pv2 _pv3 => Nothing
                              Nil => Just
                          in let sampleList = ((genList T) input)
                            in let main = ((semiDecEq sampleList) sampleList)
                              in main

### Normal forms ###

unerased:
  
  let
    constructor N : Type
    constructor Z : N
    constructor S : (x :R: N) -> N
    constructor B : Type
    constructor T : B
    constructor F : B
    constructor List : Type
    constructor Cons : (_x0 : B) -> (_x1 : List) -> List
    constructor Nil : List
    not : (_x2 : B) -> B 
      not T = F
      not F = T
    foreign input : N
    genList : (_x3 : B) -> (_x4 : N) -> List 
      b : B
        genList b Z = Nil
      b : B n : N
        genList b (S n) = Cons b (genList (not b) n)
    constructor Eq : (a : Type) -> (_x5 : a) -> (_x6 : a) -> Type
    constructor Refl : (a : Type) -> (x : a) -> Eq a x x
    constructor Maybe : (_x7 : Type) -> Type
    constructor Nothing : (a : Type) -> Maybe a
    constructor Just : (a : Type) -> (x : a) -> Maybe a
    semiDecEqB : (x : B) -> (y : B) -> Maybe (Eq B x y) 
      semiDecEqB T T = Just (Eq B T T) (Refl B T)
      semiDecEqB F F = Just (Eq B F F) (Refl B F)
      semiDecEqB T F = Nothing (Eq B T F)
      semiDecEqB F T = Nothing (Eq B F T)
    semiDecEq : (xs : List) -> (ys : List) -> Maybe (Eq List xs ys) 
      b : B ys : List
        semiDecEq Nil (Cons b ys) = Nothing (Eq List Nil (Cons b ys))
      b : B xs : List
        semiDecEq (Cons b xs) Nil = Nothing (Eq List (Cons b xs) Nil)
      semiDecEq Nil Nil = Just (Eq List Nil Nil) (Refl List Nil)
      x : B y : B xs : List ys : List
        semiDecEq (Cons x xs) (Cons y ys) = 
          let semiDecEq' : (x : B) -> (y : B) -> (xs : List) -> (ys : List) -> (pfH : Maybe (Eq B x y)) -> (pfT : Maybe (Eq List xs ys)) -> Maybe (Eq List (Cons x xs) (Cons y ys)) 
            x : B y : B xs : List ys : List pfT : Maybe (Eq List xs ys)
              semiDecEq' x y xs ys (Nothing [Eq B x y]) pfT = Nothing (Eq List (Cons x xs) (Cons y ys))
            x : B y : B xs : List ys : List pfH : Maybe (Eq B x y)
              semiDecEq' x y xs ys pfH (Nothing [Eq List xs ys]) = Nothing (Eq List (Cons x xs) (Cons y ys))
            x : B xs : List
              semiDecEq' x [x] xs [xs] (Just [Eq B x x] [Refl B x]) (Just [Eq List xs xs] [Refl List xs]) = Just (Eq List (Cons x xs) (Cons x xs)) (Refl List (Cons x xs))
          in semiDecEq' x y xs ys (semiDecEqB x y) (semiDecEq xs ys)
    sampleList : List = genList T input
    main : Maybe (Eq List sampleList sampleList) 
      main = semiDecEq sampleList sampleList
  in main

erased:
  
  let
    constructor Z : N
    constructor S : (x) -> N
    constructor T : B
    constructor F : B
    constructor Cons : (_x0) -> (_x1) -> List
    constructor Nil : List
    not 
      not T = F
      not F = T
    foreign input
    genList 
      genList b Z = Nil
      genList b (S n) = Cons b (genList (not b) n)
    constructor Nothing : Maybe
    constructor Just : Maybe
    semiDecEqB 
      semiDecEqB T T = Just
      semiDecEqB F F = Just
      semiDecEqB T F = Nothing
      semiDecEqB F T = Nothing
    semiDecEq 
      semiDecEq Nil (Cons b ys) = Nothing
      semiDecEq (Cons b xs) Nil = Nothing
      semiDecEq Nil Nil = Just
      semiDecEq (Cons x xs) (Cons y ys) = 
        let semiDecEq' 
          semiDecEq' Nothing pfT = Nothing
          semiDecEq' pfH Nothing = Nothing
          semiDecEq' Just Just = Just
        in semiDecEq' (semiDecEqB x y) (semiDecEq xs ys)
    sampleList = genList T input
    main 
      main = semiDecEq sampleList sampleList
  in main

