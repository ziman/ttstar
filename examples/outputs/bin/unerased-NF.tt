-- vim: ft=ttstar

  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x) -> Nat
    plus 
      plus Z n = n
      plus (S m) n = S (plus m n)
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    constructor Id : (a) -> (x) -> (y) -> Type
    constructor Refl : (a) -> (x) -> Id a x x
    subst 
      subst a P x [_] ([_] [_] [_]) = (\z. z)
    constructor Bit : (_x0) -> Type
    constructor I : Bit 1
    constructor O : Bit Z
    double 
      double Z = Z
      double (S n) = S (S (double n))
    constructor Bin : (width) -> (value) -> Type
    constructor N : Bin Z Z
    constructor C : (width) -> (lsbVal) -> (lsb) -> (restVal) -> (rest) -> Bin (S width) (plus lsbVal (double restVal))
    constructor TwoBits : (_x2) -> (_x3) -> (_x4) -> Type
    constructor TB : (c) -> (x) -> (y) -> (hi') -> (hi) -> (lo') -> (lo) -> (pf) -> TwoBits c x y
    adb 
      adb [_] [_] [_] O O O = TB Z Z Z Z O Z O (Refl Nat Z)
      adb [_] [_] [_] I O O = TB 1 Z Z Z O 1 I (Refl Nat 1)
      adb [_] [_] [_] O I O = TB Z 1 Z Z O 1 I (Refl Nat 1)
      adb [_] [_] [_] O O I = TB Z Z 1 Z O 1 I (Refl Nat 1)
      adb [_] [_] [_] I I O = TB 1 1 Z 1 I Z O (Refl Nat 2)
      adb [_] [_] [_] I O I = TB 1 Z 1 1 I Z O (Refl Nat 2)
      adb [_] [_] [_] O I I = TB Z 1 1 1 I Z O (Refl Nat 2)
      adb [_] [_] [_] I I I = TB 1 1 1 1 I 1 I (Refl Nat 3)
    add' 
      add' [_] c [_] [_] cb N N = C Z c cb Z N
      add' ([_] w) c [_] [_] cb (C [_] xb' xb xn' xn) (C [_] yb' yb yn' yn) = 
        let f 
          f ([_] [_] [_] [_] hi' hi lo' lo pf) = 
            let
              x = plus lo' (double (plus hi' (plus xn' yn')))
              y = plus c (plus (plus xb' (double xn')) (plus yb' (double yn')))
              postulate eq : Id Nat x y
            in subst Nat (Bin (S (S w))) (plus lo' (double (plus hi' (plus xn' yn')))) (plus c (plus (plus xb' (double xn')) (plus yb' (double yn')))) eq (C (S w) lo' lo (plus hi' (plus xn' yn')) (add' w hi' xn' yn' hi xn yn))
        in f (adb c xb' yb' cb xb yb)
    foreign inputSize
    binVal 
      binVal b Z = Z
      binVal True (S n) = S (double (binVal False n))
      binVal False (S n) = double (binVal True n)
    mkBin 
      mkBin b Z = N
      mkBin True (S n) = C n 1 I (binVal False n) (mkBin False n)
      mkBin False (S n) = C n Z O (binVal True n) (mkBin True n)
  in add' inputSize Z (binVal True inputSize) (binVal False inputSize) O (mkBin True inputSize) (mkBin False inputSize)
