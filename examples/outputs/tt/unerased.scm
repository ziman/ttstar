(import (chicken process-context))
(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Nat `(Nat))
    (Z `(Z))
    (S (lambda (x)
      `(S ,x)))
    (plus (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((('Z) n)
            n)
          ((('S m) n)
            (S ((plus m) n)))))))
    (times (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((('Z) n)
            Z)
          ((('S m) n)
            ((plus n) ((times m) n)))))))
    (Bool `(Bool))
    (True `(True))
    (False `(False))
    (not_TT (lambda (_e0)
      (match (list _e0)
        ((('True))
          False)
        ((('False))
          True))))
    (Unit `(Unit))
    (MkUnit `(MkUnit))
    (Pair (lambda (_x5)
      (lambda (_x6)
        `(Pair ,_x5 ,_x6))))
    (MkPair (lambda (a)
      (lambda (b)
        (lambda (_x7)
          (lambda (_x8)
            `(MkPair ,a ,b ,_x7 ,_x8))))))
    (fst (lambda (_e0)
      (lambda (_e1)
        (lambda (_e2)
          (match (list _e0 _e1 _e2)
            ((a b (_ _ _ x y))
              x))))))
    (snd (lambda (_e0)
      (lambda (_e1)
        (lambda (_e2)
          (match (list _e0 _e1 _e2)
            ((a b (_ _ _ x y))
              y))))))
    (Either (lambda (_x11)
      (lambda (_x12)
        `(Either ,_x11 ,_x12))))
    (Left (lambda (a)
      (lambda (b)
        (lambda (_x13)
          `(Left ,a ,b ,_x13)))))
    (Right (lambda (a)
      (lambda (b)
        (lambda (_x14)
          `(Right ,a ,b ,_x14)))))
    (id (lambda (a)
      (lambda (x)
        x)))
    (Fin (lambda (_x15)
      `(Fin ,_x15)))
    (FZ (lambda (n)
      `(FZ ,n)))
    (FS (lambda (n)
      (lambda (_x16)
        `(FS ,n ,_x16))))
    (Vect (lambda (_x17)
      (lambda (_x18)
        `(Vect ,_x17 ,_x18))))
    (VN (lambda (a)
      `(VN ,a)))
    (VC (lambda (n)
      (lambda (a)
        (lambda (x)
          (lambda (xs)
            `(VC ,n ,a ,x ,xs))))))
    (TT (lambda (_x0)
      `(TT ,_x0)))
    (V (lambda (n)
      (lambda (_x1)
        `(V ,n ,_x1))))
    (Lam (lambda (n)
      (lambda (_x2)
        `(Lam ,n ,_x2))))
    (App (lambda (n)
      (lambda (_x3)
        (lambda (_x4)
          `(App ,n ,_x3 ,_x4)))))
    (env (lambda (_e0)
      (lambda (_e1)
        (lambda (_e2)
          (lambda (_e3)
            (match (list _e0 _e1 _e2 _e3)
              ((_ n ('VC _ _ x xs) ('FZ m))
                x)
              ((_ n ('VC _ _ x xs) ('FS m i))
                ((((env m) n) xs) i))))))))
    (extendMap (lambda (_e0)
      (lambda (_e1)
        (lambda (_e2)
          (lambda (_e3)
            (match (list _e0 _e1 _e2 _e3)
              ((m n f ('FZ _))
                (FZ n))
              ((m n f ('FS _ i))
                ((FS n) (f i)))))))))
    (mapVars (lambda (_e0)
      (lambda (_e1)
        (lambda (_e2)
          (lambda (_e3)
            (match (list _e0 _e1 _e2 _e3)
              ((m n f ('V _ i))
                ((V n) (f i)))
              ((m n f ('Lam _ x))
                ((Lam n) ((((mapVars (S m)) (S n)) (((extendMap m) n) f)) x)))
              ((m n f ('App _ g x))
                (((App n) ((((mapVars m) n) f) g)) ((((mapVars m) n) f) x)))))))))
    (extendSubst (lambda (_e0)
      (lambda (_e1)
        (lambda (_e2)
          (lambda (_e3)
            (match (list _e0 _e1 _e2 _e3)
              ((m n f ('FZ _))
                ((V (S n)) (FZ n)))
              ((m n f ('FS _ i))
                ((((mapVars n) (S n)) (FS n)) (f i)))))))))
    (substVars (lambda (_e0)
      (lambda (_e1)
        (lambda (_e2)
          (lambda (_e3)
            (match (list _e0 _e1 _e2 _e3)
              ((m n f ('V _ i))
                (f i))
              ((m n f ('Lam _ x))
                ((Lam n) ((((substVars (S m)) (S n)) (((extendSubst m) n) f)) x)))
              ((m n f ('App _ g x))
                (((App n) ((((substVars m) n) f) g)) ((((substVars m) n) f) x)))))))))
    (testTm (((App (S Z)) ((Lam (S Z)) (((App (S (S Z))) ((V (S (S Z))) (FZ (S Z)))) ((V (S (S Z))) ((FS (S Z)) (FZ Z)))))) ((Lam (S Z)) (((App (S (S Z))) ((V (S (S Z))) ((FS (S Z)) (FZ Z)))) ((V (S (S Z))) (FZ (S Z)))))))
    (example1 ((((substVars (S Z)) Z) (((env (S Z)) Z) ((((VC Z) (TT Z)) ((Lam Z) ((V (S Z)) (FZ Z)))) (VN (TT Z))))) testTm))
    (substTop (lambda (_e0)
      (lambda (_e1)
        (lambda (_e2)
          (match (list _e0 _e1 _e2)
            ((n tm ('FZ _))
              tm)
            ((n tm ('FS _ i))
              ((V n) i)))))))
    (nf (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((m ('V _ i))
            ((V m) i))
          ((m ('Lam _ x))
            ((Lam m) ((nf (S m)) x)))
          ((m ('App _ f x))
            (letrec* ((g (lambda (_e0)
              (match (list _e0)
                ((('Lam _ y))
                  ((nf m) ((((substVars (S m)) m) ((substTop m) ((nf m) x))) y)))
                ((f_)
                  (((App m) f_) ((nf m) x)))))))
              (g ((nf m) f))))))))
    (example2 ((nf (S Z)) testTm))
    (Result `(Result))
    (R (lambda (x)
      (lambda (y)
        `(R ,x ,y))))
    (main ((R example1) example2))
  )
    main))
