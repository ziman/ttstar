-- vim: ft=ttstar

  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x) -> Nat
    plus 
      plus Z n = n
      plus (S m) n = S (plus m n)
    times 
      times Z n = Z
      times (S m) n = plus n (times m n)
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    not 
      not True = False
      not False = True
    constructor Unit : Type
    constructor MkUnit : Unit
    constructor Pair : (_x5) -> (_x6) -> Type
    constructor MkPair : (a) -> (b) -> (_x7) -> (_x8) -> Pair a b
    fst 
      fst a b ([_] [_] [_] x y) = x
    snd 
      snd a b ([_] [_] [_] x y) = y
    constructor Either : (_x11) -> (_x12) -> Type
    constructor Left : (a) -> (b) -> (_x13) -> Either a b
    constructor Right : (a) -> (b) -> (_x14) -> Either a b
    id = (\a. (\x. x))
    constructor Fin : (_x15) -> Type
    constructor FZ : (n) -> Fin (S n)
    constructor FS : (n) -> (_x16) -> Fin (S n)
    constructor Vect : (_x17) -> (_x18) -> Type
    constructor VN : (a) -> Vect Z a
    constructor VC : (n) -> (a) -> (x) -> (xs) -> Vect (S n) a
    constructor TT : (_x0) -> Type
    constructor V : (n) -> (_x1) -> TT n
    constructor Lam : (n) -> (_x2) -> TT n
    constructor App : (n) -> (_x3) -> (_x4) -> TT n
    env 
      env [_] n (VC [_] [_] x xs) (FZ m) = x
      env [_] n (VC [_] [_] x xs) (FS m i) = env m n xs i
    extendMap 
      extendMap m n f (FZ [_]) = FZ n
      extendMap m n f (FS [_] i) = FS n (f i)
    mapVars 
      mapVars m n f (V [_] i) = V n (f i)
      mapVars m n f (Lam [_] x) = Lam n (mapVars (S m) (S n) (extendMap m n f) x)
      mapVars m n f (App [_] g x) = App n (mapVars m n f g) (mapVars m n f x)
    extendSubst 
      extendSubst m n f (FZ [_]) = V (S n) (FZ n)
      extendSubst m n f (FS [_] i) = mapVars n (S n) (FS n) (f i)
    substVars 
      substVars m n f (V [_] i) = f i
      substVars m n f (Lam [_] x) = Lam n (substVars (S m) (S n) (extendSubst m n f) x)
      substVars m n f (App [_] g x) = App n (substVars m n f g) (substVars m n f x)
    testTm = App 1 (Lam 1 (App 2 (V 2 (FZ 1)) (V 2 (FS 1 (FZ Z))))) (Lam 1 (App 2 (V 2 (FS 1 (FZ Z))) (V 2 (FZ 1))))
    example1 = substVars 1 Z (env 1 Z (VC Z (TT Z) (Lam Z (V 1 (FZ Z))) (VN (TT Z)))) testTm
    substTop 
      substTop n tm (FZ [_]) = tm
      substTop n tm (FS [_] i) = V n i
    nf 
      nf m (V [_] i) = V m i
      nf m (Lam [_] x) = Lam m (nf (S m) x)
      nf m (App [_] f x) = 
        let g 
          g (Lam [_] y) = nf m (substVars (S m) m (substTop m (nf m x)) y)
          g f' = App m f' (nf m x)
        in g (nf m f)
    example2 = nf 1 testTm
    constructor Result : Type
    constructor R : (x) -> (y) -> Result
    main = R example1 example2
  in main
