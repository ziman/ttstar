-- vim: ft=ttstar
let Nat = constructor 0
  in let Z = constructor 0
    in let S = constructor 1
      in let plus = \_pv0. \_pv1.
        case _pv0 of
          S _pv2 => (S ((plus _pv2) _pv1))
          Z => _pv1
        in let times = \_pv0. \_pv1.
          case _pv0 of
            S _pv2 => ((plus _pv1) ((times _pv2) _pv1))
            Z => Z
          in let Bool = constructor 0
            in let True = constructor 0
              in let False = constructor 0
                in let not = \_pv0.
                  case _pv0 of
                    False => True
                    True => False
                  in let Unit = constructor 0
                    in let MkUnit = constructor 0
                      in let Pair = constructor 2
                        in let MkPair = constructor 4
                          in let fst = \_pv0. \_pv1. \_pv2.
                            case _pv2 of
                              _ _pv3 _pv4 _pv5 _pv6 => _pv5
                            in let snd = \_pv0. \_pv1. \_pv2.
                              case _pv2 of
                                _ _pv3 _pv4 _pv5 _pv6 => _pv6
                              in let Either = constructor 2
                                in let Left = constructor 3
                                  in let Right = constructor 3
                                    in let id = \a. \x. x
                                      in let Fin = constructor 1
                                        in let FZ = constructor 1
                                          in let FS = constructor 2
                                            in let Vect = constructor 2
                                              in let VN = constructor 1
                                                in let VC = constructor 4
                                                  in let TT = constructor 1
                                                    in let V = constructor 2
                                                      in let Lam = constructor 2
                                                        in let App = constructor 3
                                                          in let env = \_pv0. \_pv1. \_pv2. \_pv3.
                                                            case _pv2 of
                                                              VC _pv4 _pv5 _pv6 _pv7 => case _pv3 of
                                                                FS _pv8 _pv9 => ((((env _pv8) _pv1) _pv7) _pv9)
                                                                FZ _pv8 => _pv6
                                                            in let extendMap = \_pv0. \_pv1. \_pv2. \_pv3.
                                                              case _pv3 of
                                                                FS _pv4 _pv5 => ((FS _pv1) (_pv2 _pv5))
                                                                FZ _pv4 => (FZ _pv1)
                                                              in let mapVars = \_pv0. \_pv1. \_pv2. \_pv3.
                                                                case _pv3 of
                                                                  App _pv4 _pv5 _pv6 => (((App _pv1) ((((mapVars _pv0) _pv1) _pv2) _pv5)) ((((mapVars _pv0) _pv1) _pv2) _pv6))
                                                                  Lam _pv4 _pv5 => ((Lam _pv1) ((((mapVars (S _pv0)) (S _pv1)) (((extendMap _pv0) _pv1) _pv2)) _pv5))
                                                                  V _pv4 _pv5 => ((V _pv1) (_pv2 _pv5))
                                                                in let extendSubst = \_pv0. \_pv1. \_pv2. \_pv3.
                                                                  case _pv3 of
                                                                    FS _pv4 _pv5 => ((((mapVars _pv1) (S _pv1)) (FS _pv1)) (_pv2 _pv5))
                                                                    FZ _pv4 => ((V (S _pv1)) (FZ _pv1))
                                                                  in let substVars = \_pv0. \_pv1. \_pv2. \_pv3.
                                                                    case _pv3 of
                                                                      App _pv4 _pv5 _pv6 => (((App _pv1) ((((substVars _pv0) _pv1) _pv2) _pv5)) ((((substVars _pv0) _pv1) _pv2) _pv6))
                                                                      Lam _pv4 _pv5 => ((Lam _pv1) ((((substVars (S _pv0)) (S _pv1)) (((extendSubst _pv0) _pv1) _pv2)) _pv5))
                                                                      V _pv4 _pv5 => (_pv2 _pv5)
                                                                    in let testTm = (((App (S Z)) ((Lam (S Z)) (((App (S (S Z))) ((V (S (S Z))) (FZ (S Z)))) ((V (S (S Z))) ((FS (S Z)) (FZ Z)))))) ((Lam (S Z)) (((App (S (S Z))) ((V (S (S Z))) ((FS (S Z)) (FZ Z)))) ((V (S (S Z))) (FZ (S Z))))))
                                                                      in let example1 = ((((substVars (S Z)) Z) (((env (S Z)) Z) ((((VC Z) (TT Z)) ((Lam Z) ((V (S Z)) (FZ Z)))) (VN (TT Z))))) testTm)
                                                                        in let substTop = \_pv0. \_pv1. \_pv2.
                                                                          case _pv2 of
                                                                            FS _pv3 _pv4 => ((V _pv0) _pv4)
                                                                            FZ _pv3 => _pv1
                                                                          in let nf = \_pv0. \_pv1.
                                                                            case _pv1 of
                                                                              App _pv2 _pv3 _pv4 => let g = \_pv5.
                                                                                case _pv5 of
                                                                                  Lam _pv6 _pv7 => ((nf _pv0) ((((substVars (S _pv0)) _pv0) ((substTop _pv0) ((nf _pv0) _pv4))) _pv7))
                                                                                  _ => (((App _pv0) _pv5) ((nf _pv0) _pv4))
                                                                                in (g ((nf _pv0) _pv3))
                                                                              Lam _pv2 _pv3 => ((Lam _pv0) ((nf (S _pv0)) _pv3))
                                                                              V _pv2 _pv3 => ((V _pv0) _pv3)
                                                                            in let example2 = ((nf (S Z)) testTm)
                                                                              in let Result = constructor 0
                                                                                in let R = constructor 2
                                                                                  in let main = ((R example1) example2)
                                                                                    in main
