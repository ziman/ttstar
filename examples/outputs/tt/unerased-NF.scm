(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Nat `(Nat))
    (Z `(Z))
    (S (lambda (x)
      `(S ,x)))
    (Fin (lambda (_x13)
      `(Fin ,_x13)))
    (FZ (lambda (n)
      `(FZ ,n)))
    (TT (lambda (_x0)
      `(TT ,_x0)))
    (V (lambda (n)
      (lambda (_x1)
        `(V ,n ,_x1))))
    (Lam (lambda (n)
      (lambda (_x2)
        `(Lam ,n ,_x2))))
    (App (lambda (n)
      (lambda (_x3)
        (lambda (_x4)
          `(App ,n ,_x3 ,_x4)))))
    (Result `(Result))
    (R (lambda (x)
      (lambda (y)
        `(R ,x ,y))))
  )
    ((R (((App Z) ((Lam Z) (((App (S Z)) ((V (S Z)) (FZ Z))) ((Lam (S Z)) ((V (S (S Z))) (FZ (S Z))))))) ((Lam Z) (((App (S Z)) ((Lam (S Z)) ((V (S (S Z))) (FZ (S Z))))) ((V (S Z)) (FZ Z)))))) (((App (S Z)) ((V (S Z)) (FZ Z))) ((V (S Z)) (FZ Z))))))
