-- vim: ft=ttstar

  let
    constructor FZ : Fin
    constructor FS : (_x16) -> Fin
    constructor VN : Vect
    constructor VC : (x) -> (xs) -> Vect
    constructor V : (_x1) -> TT
    constructor Lam : (_x2) -> TT
    constructor App : (_x3) -> (_x4) -> TT
    env 
      env (VC x xs) FZ = x
      env (VC x xs) (FS i) = env xs i
    extendMap 
      extendMap f FZ = FZ
      extendMap f (FS i) = FS (f i)
    mapVars 
      mapVars f (V i) = V (f i)
      mapVars f (Lam x) = Lam (mapVars (extendMap f) x)
      mapVars f (App g x) = App (mapVars f g) (mapVars f x)
    extendSubst 
      extendSubst f FZ = V FZ
      extendSubst f (FS i) = mapVars FS (f i)
    substVars 
      substVars f (V i) = f i
      substVars f (Lam x) = Lam (substVars (extendSubst f) x)
      substVars f (App g x) = App (substVars f g) (substVars f x)
    testTm = App (Lam (App (V FZ) (V (FS FZ)))) (Lam (App (V (FS FZ)) (V FZ)))
    example1 = substVars (env (VC (Lam (V FZ)) VN)) testTm
    substTop 
      substTop tm FZ = tm
      substTop tm (FS i) = V i
    nf 
      nf (V i) = V i
      nf (Lam x) = Lam (nf x)
      nf (App f x) = 
        let g 
          g (Lam y) = nf (substVars (substTop (nf x)) y)
          g f' = App f' (nf x)
        in g (nf f)
    example2 = nf testTm
    constructor R : (x) -> (y) -> Result
    main = R example1 example2
  in main
