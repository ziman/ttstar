-- vim: ft=ttstar

### Desugared ###

  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x :R: Nat) -> Nat
    plus : (_x0 : Nat) -> (_x1 : Nat) -> Nat 
      n : _0
        plus Z n = n
      m : _1 n : _2
        plus (S m) n = S (plus m n)
    times : (_x2 : Nat) -> (_x3 : Nat) -> Nat 
      n : _3
        times Z n = Z
      m : _4 n : _5
        times (S m) n = plus n (times m n)
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    not : (_x4 : Bool) -> Bool 
      not True = False
      not False = True
    constructor Unit : Type
    constructor MkUnit : Unit
    constructor Pair : (_x5 : Type) -> (_x6 : Type) -> Type
    constructor MkPair : (a : _6) -> (b : _7) -> (_x7 : a) -> (_x8 : b) -> Pair a b
    fst : (a : _8) -> (b : _9) -> (_x9 : Pair a b) -> a 
      a : _10 b : _11 x : _12 y : _13
        fst a b ([MkPair] [_14] [_15] x y) = x
    snd : (a : _16) -> (b : _17) -> (_x10 : Pair a b) -> b 
      a : _18 b : _19 x : _20 y : _21
        snd a b ([MkPair] [_22] [_23] x y) = y
    constructor Either : (_x11 : Type) -> (_x12 : Type) -> Type
    constructor Left : (a : _24) -> (b : _25) -> (_x13 : a) -> Either a b
    constructor Right : (a : _26) -> (b : _27) -> (_x14 : b) -> Either a b
    id : (a : Type) -> (x : a) -> a = (\a : Type. (\x : a. x))
    constructor Fin : (_x15 : Nat) -> Type
    constructor FZ : (n : Nat) -> Fin (S n)
    constructor FS : (n : Nat) -> (_x16 : Fin n) -> Fin (S n)
    constructor Vect : (_x17 : Nat) -> (_x18 : Type) -> Type
    constructor VN : (a : _28) -> Vect Z a
    constructor VC : (n : _29) -> (a : _30) -> (_x19 : a) -> (_x20 : Vect n a) -> Vect (S n) a
    constructor List : (_x21 : Type) -> Type
    constructor Nil : (a : _31) -> List a
    constructor Cons : (a : _32) -> (_x22 : a) -> (_x23 : List a) -> List a
    constructor TT : (_x0 : Nat) -> Type
    constructor V : (n : Nat) -> (_x1 : Fin n) -> TT n
    constructor Lam : (n : Nat) -> (_x2 : TT (S n)) -> TT n
    constructor App : (n : Nat) -> (_x3 : TT n) -> (_x4 : TT n) -> TT n
    env : (m : Nat) -> (n : Nat) -> (xs : Vect m (TT n)) -> (_x5 : Fin m) -> TT n 
      m : Nat n : Nat x : TT n xs : Vect m (TT n)
        env [S m] n (VC [m] [TT n] x xs) (FZ m) = x
      m : Nat n : Nat x : TT n xs : Vect m (TT n) i : Fin m
        env [S m] n (VC [m] [TT n] x xs) (FS m i) = env m n xs i
    extendMap : (m : Nat) -> (n : Nat) -> (_x6 : (_x7 : Fin m) -> Fin n) -> (_x8 : Fin (S m)) -> Fin (S n) 
      m : Nat n : Nat f : (_x9 : Fin m) -> Fin n
        extendMap m n f (FZ [m]) = FZ n
      m : Nat n : Nat f : (_x10 : Fin m) -> Fin n i : Fin m
        extendMap m n f (FS [m] i) = FS n (f i)
    mapVars : (m : Nat) -> (n : Nat) -> (_x11 : (_x12 : Fin m) -> Fin n) -> (_x13 : TT m) -> TT n 
      m : Nat n : Nat f : (_x14 : Fin m) -> Fin n i : Fin m
        mapVars m n f (V [m] i) = V n (f i)
      m : Nat n : Nat f : (_x15 : Fin m) -> Fin n x : TT (S m)
        mapVars m n f (Lam [m] x) = Lam n (mapVars (S m) (S n) (extendMap m n f) x)
      m : Nat n : Nat f : (_x16 : Fin m) -> Fin n g : TT m x : TT m
        mapVars m n f (App [m] g x) = App n (mapVars m n f g) (mapVars m n f x)
    extendSubst : (m : Nat) -> (n : Nat) -> (_x17 : (_x18 : Fin m) -> TT n) -> (_x19 : Fin (S m)) -> TT (S n) 
      m : Nat n : Nat f : (_x20 : Fin m) -> TT n
        extendSubst m n f (FZ [m]) = V (S n) (FZ n)
      m : Nat n : Nat f : (_x21 : Fin m) -> TT n i : Fin m
        extendSubst m n f (FS [m] i) = mapVars n (S n) (FS n) (f i)
    substVars : (m : Nat) -> (n : Nat) -> (_x22 : (_x23 : Fin m) -> TT n) -> (_x24 : TT m) -> TT n 
      m : Nat n : Nat f : (_x25 : Fin m) -> TT n i : Fin m
        substVars m n f (V [m] i) = f i
      m : Nat n : Nat f : (_x26 : Fin m) -> TT n x : TT (S m)
        substVars m n f (Lam [m] x) = Lam n (substVars (S m) (S n) (extendSubst m n f) x)
      m : Nat n : Nat f : (_x27 : Fin m) -> TT n g : TT m x : TT m
        substVars m n f (App [m] g x) = App n (substVars m n f g) (substVars m n f x)
    testTm : TT 1 = App 1 (Lam 1 (App 2 (V 2 (FZ 1)) (V 2 (FS 1 (FZ Z))))) (Lam 1 (App 2 (V 2 (FS 1 (FZ Z))) (V 2 (FZ 1))))
    example1 : TT Z = substVars 1 Z (env 1 Z (VC Z (TT Z) (Lam Z (V 1 (FZ Z))) (VN (TT Z)))) testTm
    substTop : (n : Nat) -> (_x28 : TT n) -> (_x29 : Fin (S n)) -> TT n 
      n : Nat tm : TT n
        substTop n tm (FZ [n]) = tm
      n : Nat tm : TT n i : Fin n
        substTop n tm (FS [n] i) = V n i
    nf : (m : Nat) -> (_x30 : TT m) -> TT m 
      m : Nat i : Fin m
        nf m (V [m] i) = V m i
      m : Nat x : TT (S m)
        nf m (Lam [m] x) = Lam m (nf (S m) x)
      m : Nat f : TT m x : TT m
        nf m (App [m] f x) = 
          let g : (_x31 : TT m) -> TT m 
            y : TT (S m)
              g (Lam [m] y) = nf m (substVars (S m) m (substTop m (nf m x)) y)
            f' : TT m
              g f' = App m f' (nf m x)
          in g (nf m f)
    example2 : TT 1 = nf 1 testTm
    constructor Result : Type
    constructor R : (x :R: TT Z) -> (y :R: TT 1) -> Result
    main : Result = R example1 example2
  in main

### Elaborated ###

  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x :R: Nat) -> Nat
    plus : (_x0 : Nat) -> (_x1 : Nat) -> Nat 
      n : Nat
        plus Z n = n
      m : Nat n : Nat
        plus (S m) n = S (plus m n)
    times : (_x2 : Nat) -> (_x3 : Nat) -> Nat 
      n : Nat
        times Z n = Z
      m : Nat n : Nat
        times (S m) n = plus n (times m n)
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    not : (_x4 : Bool) -> Bool 
      not True = False
      not False = True
    constructor Unit : Type
    constructor MkUnit : Unit
    constructor Pair : (_x5 : Type) -> (_x6 : Type) -> Type
    constructor MkPair : (a : Type) -> (b : Type) -> (_x7 : a) -> (_x8 : b) -> Pair a b
    fst : (a : Type) -> (b : Type) -> (_x9 : Pair a b) -> a 
      a : Type b : Type x : a y : b
        fst a b ([MkPair] [a] [b] x y) = x
    snd : (a : Type) -> (b : Type) -> (_x10 : Pair a b) -> b 
      a : Type b : Type x : a y : b
        snd a b ([MkPair] [a] [b] x y) = y
    constructor Either : (_x11 : Type) -> (_x12 : Type) -> Type
    constructor Left : (a : Type) -> (b : Type) -> (_x13 : a) -> Either a b
    constructor Right : (a : Type) -> (b : Type) -> (_x14 : b) -> Either a b
    id : (a : Type) -> (x : a) -> a = (\a : Type. (\x : a. x))
    constructor Fin : (_x15 : Nat) -> Type
    constructor FZ : (n : Nat) -> Fin (S n)
    constructor FS : (n : Nat) -> (_x16 : Fin n) -> Fin (S n)
    constructor Vect : (_x17 : Nat) -> (_x18 : Type) -> Type
    constructor VN : (a : Type) -> Vect Z a
    constructor VC : (n : Nat) -> (a : Type) -> (_x19 : a) -> (_x20 : Vect n a) -> Vect (S n) a
    constructor List : (_x21 : Type) -> Type
    constructor Nil : (a : Type) -> List a
    constructor Cons : (a : Type) -> (_x22 : a) -> (_x23 : List a) -> List a
    constructor TT : (_x0 : Nat) -> Type
    constructor V : (n : Nat) -> (_x1 : Fin n) -> TT n
    constructor Lam : (n : Nat) -> (_x2 : TT (S n)) -> TT n
    constructor App : (n : Nat) -> (_x3 : TT n) -> (_x4 : TT n) -> TT n
    env : (m : Nat) -> (n : Nat) -> (xs : Vect m (TT n)) -> (_x5 : Fin m) -> TT n 
      m : Nat n : Nat x : TT n xs : Vect m (TT n)
        env [S m] n (VC [m] [TT n] x xs) (FZ m) = x
      m : Nat n : Nat x : TT n xs : Vect m (TT n) i : Fin m
        env [S m] n (VC [m] [TT n] x xs) (FS m i) = env m n xs i
    extendMap : (m : Nat) -> (n : Nat) -> (_x6 : (_x7 : Fin m) -> Fin n) -> (_x8 : Fin (S m)) -> Fin (S n) 
      m : Nat n : Nat f : (_x9 : Fin m) -> Fin n
        extendMap m n f (FZ [m]) = FZ n
      m : Nat n : Nat f : (_x10 : Fin m) -> Fin n i : Fin m
        extendMap m n f (FS [m] i) = FS n (f i)
    mapVars : (m : Nat) -> (n : Nat) -> (_x11 : (_x12 : Fin m) -> Fin n) -> (_x13 : TT m) -> TT n 
      m : Nat n : Nat f : (_x14 : Fin m) -> Fin n i : Fin m
        mapVars m n f (V [m] i) = V n (f i)
      m : Nat n : Nat f : (_x15 : Fin m) -> Fin n x : TT (S m)
        mapVars m n f (Lam [m] x) = Lam n (mapVars (S m) (S n) (extendMap m n f) x)
      m : Nat n : Nat f : (_x16 : Fin m) -> Fin n g : TT m x : TT m
        mapVars m n f (App [m] g x) = App n (mapVars m n f g) (mapVars m n f x)
    extendSubst : (m : Nat) -> (n : Nat) -> (_x17 : (_x18 : Fin m) -> TT n) -> (_x19 : Fin (S m)) -> TT (S n) 
      m : Nat n : Nat f : (_x20 : Fin m) -> TT n
        extendSubst m n f (FZ [m]) = V (S n) (FZ n)
      m : Nat n : Nat f : (_x21 : Fin m) -> TT n i : Fin m
        extendSubst m n f (FS [m] i) = mapVars n (S n) (FS n) (f i)
    substVars : (m : Nat) -> (n : Nat) -> (_x22 : (_x23 : Fin m) -> TT n) -> (_x24 : TT m) -> TT n 
      m : Nat n : Nat f : (_x25 : Fin m) -> TT n i : Fin m
        substVars m n f (V [m] i) = f i
      m : Nat n : Nat f : (_x26 : Fin m) -> TT n x : TT (S m)
        substVars m n f (Lam [m] x) = Lam n (substVars (S m) (S n) (extendSubst m n f) x)
      m : Nat n : Nat f : (_x27 : Fin m) -> TT n g : TT m x : TT m
        substVars m n f (App [m] g x) = App n (substVars m n f g) (substVars m n f x)
    testTm : TT 1 = App 1 (Lam 1 (App 2 (V 2 (FZ 1)) (V 2 (FS 1 (FZ Z))))) (Lam 1 (App 2 (V 2 (FS 1 (FZ Z))) (V 2 (FZ 1))))
    example1 : TT Z = substVars 1 Z (env 1 Z (VC Z (TT Z) (Lam Z (V 1 (FZ Z))) (VN (TT Z)))) testTm
    substTop : (n : Nat) -> (_x28 : TT n) -> (_x29 : Fin (S n)) -> TT n 
      n : Nat tm : TT n
        substTop n tm (FZ [n]) = tm
      n : Nat tm : TT n i : Fin n
        substTop n tm (FS [n] i) = V n i
    nf : (m : Nat) -> (_x30 : TT m) -> TT m 
      m : Nat i : Fin m
        nf m (V [m] i) = V m i
      m : Nat x : TT (S m)
        nf m (Lam [m] x) = Lam m (nf (S m) x)
      m : Nat f : TT m x : TT m
        nf m (App [m] f x) = 
          let g : (_x31 : TT m) -> TT m 
            y : TT (S m)
              g (Lam [m] y) = nf m (substVars (S m) m (substTop m (nf m x)) y)
            f' : TT m
              g f' = App m f' (nf m x)
          in g (nf m f)
    example2 : TT 1 = nf 1 testTm
    constructor Result : Type
    constructor R : (x :R: TT Z) -> (y :R: TT 1) -> Result
    main : Result = R example1 example2
  in main

### Evarified ###

  let
    constructor Nat :1: Type
    constructor Z :2: Nat
    constructor S :3: (x :R: Nat) -> Nat
    plus :4: (_x0 :5: Nat) -> (_x1 :6: Nat) -> Nat 
      n :7: Nat
        plus -9- Z -8- n = n
      m :10: Nat n :11: Nat
        plus -13- (S -14- m) -12- n = S -15- (plus -17- m -16- n)
    times :18: (_x2 :19: Nat) -> (_x3 :20: Nat) -> Nat 
      n :21: Nat
        times -23- Z -22- n = Z
      m :24: Nat n :25: Nat
        times -27- (S -28- m) -26- n = plus -30- n -29- (times -32- m -31- n)
    constructor Bool :33: Type
    constructor True :34: Bool
    constructor False :35: Bool
    not :36: (_x4 :37: Bool) -> Bool 
      not -38- True = False
      not -39- False = True
    constructor Unit :40: Type
    constructor MkUnit :41: Unit
    constructor Pair :42: (_x5 :43: Type) -> (_x6 :44: Type) -> Type
    constructor MkPair :45: (a :46: Type) -> (b :47: Type) -> (_x7 :48: a) -> (_x8 :49: b) -> Pair -51- a -50- b
    fst :52: (a :53: Type) -> (b :54: Type) -> (_x9 :55: Pair -57- a -56- b) -> a 
      a :58: Type b :59: Type x :60: a y :61: b
        fst -64- a -63- b -62- ([MkPair] -68- [a] -67- [b] -66- x -65- y) = x
    snd :69: (a :70: Type) -> (b :71: Type) -> (_x10 :72: Pair -74- a -73- b) -> b 
      a :75: Type b :76: Type x :77: a y :78: b
        snd -81- a -80- b -79- ([MkPair] -85- [a] -84- [b] -83- x -82- y) = y
    constructor Either :86: (_x11 :87: Type) -> (_x12 :88: Type) -> Type
    constructor Left :89: (a :90: Type) -> (b :91: Type) -> (_x13 :92: a) -> Either -94- a -93- b
    constructor Right :95: (a :96: Type) -> (b :97: Type) -> (_x14 :98: b) -> Either -100- a -99- b
    id :101: (a :102: Type) -> (x :103: a) -> a = (\a :104: Type. (\x :105: a. x))
    constructor Fin :106: (_x15 :107: Nat) -> Type
    constructor FZ :108: (n :109: Nat) -> Fin -110- (S -111- n)
    constructor FS :112: (n :113: Nat) -> (_x16 :114: Fin -115- n) -> Fin -116- (S -117- n)
    constructor Vect :118: (_x17 :119: Nat) -> (_x18 :120: Type) -> Type
    constructor VN :121: (a :122: Type) -> Vect -124- Z -123- a
    constructor VC :125: (n :126: Nat) -> (a :127: Type) -> (_x19 :128: a) -> (_x20 :129: Vect -131- n -130- a) -> Vect -133- (S -134- n) -132- a
    constructor List :135: (_x21 :136: Type) -> Type
    constructor Nil :137: (a :138: Type) -> List -139- a
    constructor Cons :140: (a :141: Type) -> (_x22 :142: a) -> (_x23 :143: List -144- a) -> List -145- a
    constructor TT :146: (_x0 :147: Nat) -> Type
    constructor V :148: (n :149: Nat) -> (_x1 :150: Fin -151- n) -> TT -152- n
    constructor Lam :153: (n :154: Nat) -> (_x2 :155: TT -156- (S -157- n)) -> TT -158- n
    constructor App :159: (n :160: Nat) -> (_x3 :161: TT -162- n) -> (_x4 :163: TT -164- n) -> TT -165- n
    env :166: (m :167: Nat) -> (n :168: Nat) -> (xs :169: Vect -171- m -170- (TT -172- n)) -> (_x5 :173: Fin -174- m) -> TT -175- n 
      m :176: Nat n :177: Nat x :178: TT -179- n xs :180: Vect -182- m -181- (TT -183- n)
        env -187- [S -188- m] -186- n -185- (VC -192- [m] -191- [TT -193- n] -190- x -189- xs) -184- (FZ -194- m) = x
      m :195: Nat n :196: Nat x :197: TT -198- n xs :199: Vect -201- m -200- (TT -202- n) i :203: Fin -204- m
        env -208- [S -209- m] -207- n -206- (VC -213- [m] -212- [TT -214- n] -211- x -210- xs) -205- (FS -216- m -215- i) = env -220- m -219- n -218- xs -217- i
    extendMap :221: (m :222: Nat) -> (n :223: Nat) -> (_x6 :224: (_x7 :225: Fin -226- m) -> Fin -227- n) -> (_x8 :228: Fin -229- (S -230- m)) -> Fin -231- (S -232- n) 
      m :233: Nat n :234: Nat f :235: (_x9 :236: Fin -237- m) -> Fin -238- n
        extendMap -242- m -241- n -240- f -239- (FZ -243- [m]) = FZ -244- n
      m :245: Nat n :246: Nat f :247: (_x10 :248: Fin -249- m) -> Fin -250- n i :251: Fin -252- m
        extendMap -256- m -255- n -254- f -253- (FS -258- [m] -257- i) = FS -260- n -259- (f -261- i)
    mapVars :262: (m :263: Nat) -> (n :264: Nat) -> (_x11 :265: (_x12 :266: Fin -267- m) -> Fin -268- n) -> (_x13 :269: TT -270- m) -> TT -271- n 
      m :272: Nat n :273: Nat f :274: (_x14 :275: Fin -276- m) -> Fin -277- n i :278: Fin -279- m
        mapVars -283- m -282- n -281- f -280- (V -285- [m] -284- i) = V -287- n -286- (f -288- i)
      m :289: Nat n :290: Nat f :291: (_x15 :292: Fin -293- m) -> Fin -294- n x :295: TT -296- (S -297- m)
        mapVars -301- m -300- n -299- f -298- (Lam -303- [m] -302- x) = Lam -305- n -304- (mapVars -309- (S -310- m) -308- (S -311- n) -307- (extendMap -314- m -313- n -312- f) -306- x)
      m :315: Nat n :316: Nat f :317: (_x16 :318: Fin -319- m) -> Fin -320- n g :321: TT -322- m x :323: TT -324- m
        mapVars -328- m -327- n -326- f -325- (App -331- [m] -330- g -329- x) = App -334- n -333- (mapVars -338- m -337- n -336- f -335- g) -332- (mapVars -342- m -341- n -340- f -339- x)
    extendSubst :343: (m :344: Nat) -> (n :345: Nat) -> (_x17 :346: (_x18 :347: Fin -348- m) -> TT -349- n) -> (_x19 :350: Fin -351- (S -352- m)) -> TT -353- (S -354- n) 
      m :355: Nat n :356: Nat f :357: (_x20 :358: Fin -359- m) -> TT -360- n
        extendSubst -364- m -363- n -362- f -361- (FZ -365- [m]) = V -367- (S -368- n) -366- (FZ -369- n)
      m :370: Nat n :371: Nat f :372: (_x21 :373: Fin -374- m) -> TT -375- n i :376: Fin -377- m
        extendSubst -381- m -380- n -379- f -378- (FS -383- [m] -382- i) = mapVars -387- n -386- (S -388- n) -385- (FS -389- n) -384- (f -390- i)
    substVars :391: (m :392: Nat) -> (n :393: Nat) -> (_x22 :394: (_x23 :395: Fin -396- m) -> TT -397- n) -> (_x24 :398: TT -399- m) -> TT -400- n 
      m :401: Nat n :402: Nat f :403: (_x25 :404: Fin -405- m) -> TT -406- n i :407: Fin -408- m
        substVars -412- m -411- n -410- f -409- (V -414- [m] -413- i) = f -415- i
      m :416: Nat n :417: Nat f :418: (_x26 :419: Fin -420- m) -> TT -421- n x :422: TT -423- (S -424- m)
        substVars -428- m -427- n -426- f -425- (Lam -430- [m] -429- x) = Lam -432- n -431- (substVars -436- (S -437- m) -435- (S -438- n) -434- (extendSubst -441- m -440- n -439- f) -433- x)
      m :442: Nat n :443: Nat f :444: (_x27 :445: Fin -446- m) -> TT -447- n g :448: TT -449- m x :450: TT -451- m
        substVars -455- m -454- n -453- f -452- (App -458- [m] -457- g -456- x) = App -461- n -460- (substVars -465- m -464- n -463- f -462- g) -459- (substVars -469- m -468- n -467- f -466- x)
    testTm :470: TT -471- 1 = App -475- 1 -474- (Lam -478- 1 -477- (App -482- 2 -481- (V -486- 2 -485- (FZ -489- 1)) -480- (V -492- 2 -491- (FS -496- 1 -495- (FZ -498- Z))))) -473- (Lam -500- 1 -499- (App -504- 2 -503- (V -508- 2 -507- (FS -512- 1 -511- (FZ -514- Z))) -502- (V -516- 2 -515- (FZ -519- 1))))
    example1 :521: TT -522- Z = substVars -526- 1 -525- Z -524- (env -530- 1 -529- Z -528- (VC -535- Z -534- (TT -536- Z) -533- (Lam -538- Z -537- (V -540- 1 -539- (FZ -542- Z))) -532- (VN -543- (TT -544- Z)))) -523- testTm
    substTop :545: (n :546: Nat) -> (_x28 :547: TT -548- n) -> (_x29 :549: Fin -550- (S -551- n)) -> TT -552- n 
      n :553: Nat tm :554: TT -555- n
        substTop -558- n -557- tm -556- (FZ -559- [n]) = tm
      n :560: Nat tm :561: TT -562- n i :563: Fin -564- n
        substTop -567- n -566- tm -565- (FS -569- [n] -568- i) = V -571- n -570- i
    nf :572: (m :573: Nat) -> (_x30 :574: TT -575- m) -> TT -576- m 
      m :577: Nat i :578: Fin -579- m
        nf -581- m -580- (V -583- [m] -582- i) = V -585- m -584- i
      m :586: Nat x :587: TT -588- (S -589- m)
        nf -591- m -590- (Lam -593- [m] -592- x) = Lam -595- m -594- (nf -597- (S -598- m) -596- x)
      m :599: Nat f :600: TT -601- m x :602: TT -603- m
        nf -605- m -604- (App -608- [m] -607- f -606- x) = 
          let g :609: (_x31 :610: TT -611- m) -> TT -612- m 
            y :613: TT -614- (S -615- m)
              g -616- (Lam -618- [m] -617- y) = nf -620- m -619- (substVars -624- (S -625- m) -623- m -622- (substTop -627- m -626- (nf -629- m -628- x)) -621- y)
            f' :630: TT -631- m
              g -632- f' = App -635- m -634- f' -633- (nf -637- m -636- x)
          in g -638- (nf -640- m -639- f)
    example2 :641: TT -642- 1 = nf -645- 1 -644- testTm
    constructor Result :647: Type
    constructor R :648: (x :R: TT -649- Z) -> (y :R: TT -650- 1) -> Result
    main :652: Result = R -654- example1 -653- example2
  in main

### Constraints ###

[] -> [14,15,28,111,117,134,157,188,209,230,232,297,310,311,352,354,368,388,424,437,438,472,476,479,483,484,487,488,490,493,494,497,501,505,506,509,510,513,517,518,520,527,531,541,551,589,598,615,625,643,646,651,652,653,654]
[4] -> [2,3,7,9,13]
[4,8] -> [7]
[4,12] -> [11]
[4,13,14] -> [10]
[4,15,16] -> [11]
[4,15,17] -> [10]
[5] -> [9,13,17,30]
[6] -> [8,12,16,29]
[7] -> [4,8]
[8] -> [6]
[9] -> [5]
[10] -> [4,13,14]
[11] -> [4,12]
[12] -> [6]
[13] -> [5]
[16] -> [6]
[17] -> [5]
[18] -> [2,3,4,23,27]
[18,22] -> [21]
[18,26] -> [25]
[18,27,28] -> [24]
[18,29,31] -> [25]
[18,29,32] -> [24]
[18,30] -> [25]
[19] -> [23,27,32]
[20] -> [22,26,31]
[21] -> [18,22]
[22] -> [20]
[23] -> [19]
[24] -> [18,27,28]
[25] -> [18,26]
[26] -> [20]
[27] -> [19]
[29] -> [6]
[30] -> [5]
[31] -> [20]
[32] -> [19]
[36] -> [34,35,38,39]
[37] -> [38,39]
[38] -> [37]
[39] -> [37]
[43] -> [51,57,74]
[44] -> [50,56,73]
[46] -> [68,85]
[47] -> [67,84]
[48] -> [66,83]
[49] -> [65,82]
[50] -> [44,56,73]
[51] -> [43]
[52] -> [60]
[52,62] -> [45]
[52,62,65] -> [61]
[52,62,66] -> [60]
[52,62,67] -> [59]
[52,62,68] -> [58]
[52,63] -> [59]
[52,64] -> [58]
[53] -> [64]
[54] -> [63]
[55] -> [62]
[56] -> [44,50]
[57] -> [43]
[58] -> [52,64]
[59] -> [52,63]
[60] -> [52,62,66]
[61] -> [52,62,65]
[62] -> [55]
[63] -> [54]
[64] -> [53]
[65] -> [49]
[66] -> [48]
[67] -> [47]
[68] -> [46]
[69] -> [78]
[69,79] -> [45]
[69,79,82] -> [78]
[69,79,83] -> [77]
[69,79,84] -> [76]
[69,79,85] -> [75]
[69,80] -> [76]
[69,81] -> [75]
[70] -> [81]
[71] -> [80]
[72] -> [79]
[73] -> [44,50]
[74] -> [43]
[75] -> [69,81]
[76] -> [69,80]
[77] -> [69,79,83]
[78] -> [69,79,82]
[79] -> [72]
[80] -> [71]
[81] -> [70]
[82] -> [49]
[83] -> [48]
[84] -> [47]
[85] -> [46]
[87] -> [94,100]
[88] -> [93,99]
[93] -> [88]
[94] -> [87]
[99] -> [88]
[100] -> [87]
[101] -> [105]
[102] -> [104]
[103] -> [105]
[104] -> [102]
[105] -> [103]
[107] -> [110,115,116,151,174,204,226,227,229,231,237,238,249,250,252,267,268,276,277,279,293,294,319,320,348,351,359,374,377,396,405,408,420,446,550,564,579]
[109] -> [194,243,244,365,369,489,498,514,519,542,559]
[110] -> [107,115,151,174,229,231,351,550]
[113] -> [216,258,260,383,389,496,512,569]
[114] -> [215,257,259,266,382,495,511,568]
[115] -> [107,110,204,250,252,267,377,564]
[116] -> [107,151,174,229,231,268,351,550]
[119] -> [124,131,133,171,182,201]
[120] -> [123,130,132,170,181,200]
[122] -> [543]
[123] -> [120,130]
[124] -> [119]
[126] -> [192,213,535]
[127] -> [191,212,534]
[128] -> [190,211,533]
[129] -> [189,210,532]
[130] -> [120,123,181,200]
[131] -> [119]
[132] -> [120,170]
[133] -> [119]
[136] -> [139,144,145]
[139] -> [136]
[144] -> [136]
[145] -> [136]
[147] -> [152,156,158,162,164,165,172,175,179,183,193,198,202,214,270,271,296,322,324,349,353,360,375,397,399,400,406,421,423,447,449,451,471,522,536,544,548,552,555,562,575,576,588,601,603,611,612,614,631,642,649,650]
[149] -> [285,287,367,414,486,492,508,516,540,571,583,585]
[150] -> [284,286,366,413,485,491,507,515,539,570,582,584]
[151] -> [107,110,116,277,279,408,564,579]
[152] -> [147,156,162,164,270,271,353,399,552,575,576]
[154] -> [303,305,430,432,478,500,538,593,595,618]
[155] -> [302,304,429,431,477,499,537,592,594,617]
[156] -> [147,152,165,271,296,400,423,576,588,614]
[158] -> [147,162,164,270,271,399,400,536,575,576,611]
[160] -> [331,334,458,461,475,482,504,608,635]
[161] -> [330,333,457,460,474,481,503,607,634]
[162] -> [147,152,158,271,322,400,449,601,631]
[163] -> [329,332,456,459,473,480,502,606,633]
[164] -> [147,152,158,271,324,400,451,576,603]
[165] -> [147,156,270,271,399,400,471,575,612]
[166] -> [108,112,125,178,184,185,205,206]
[166,184,194] -> [176]
[166,185,189] -> [180]
[166,185,190] -> [178]
[166,185,191] -> [146]
[166,185,191,193] -> [177]
[166,185,192] -> [176]
[166,186] -> [177]
[166,187] -> [3]
[166,187,188] -> [176]
[166,205,215] -> [203]
[166,205,216] -> [195]
[166,206,210] -> [199]
[166,206,211] -> [197]
[166,206,212] -> [146]
[166,206,212,214] -> [196]
[166,206,213] -> [195]
[166,207] -> [196]
[166,208] -> [3]
[166,208,209] -> [195]
[166,217] -> [203]
[166,218] -> [199]
[166,219] -> [196]
[166,220] -> [195]
[167] -> [187,208,220,530]
[168] -> [186,207,219,529]
[169] -> [185,206,218,528]
[170] -> [120,132,200]
[171] -> [119]
[172] -> [147]
[173] -> [184,205,217,395]
[174] -> [107,110,116,204,396]
[175] -> [147,179,397]
[176] -> [166,184,194]
[177] -> [166,186]
[178] -> [166,185,190]
[179] -> [147,175,193]
[180] -> [166,185,189]
[181] -> [120,130]
[182] -> [119]
[183] -> [147]
[184] -> [173]
[185] -> [169]
[186] -> [168]
[187] -> [167]
[189] -> [129]
[190] -> [128]
[191] -> [127]
[192] -> [126]
[193] -> [147,179]
[194] -> [109]
[195] -> [166,205,216]
[196] -> [166,207]
[197] -> [166,206,211]
[198] -> [147,214]
[199] -> [166,206,210]
[200] -> [120,130,170]
[201] -> [119]
[202] -> [147]
[203] -> [166,205,215]
[204] -> [107,115,174]
[205] -> [173]
[206] -> [169]
[207] -> [168]
[208] -> [167]
[210] -> [129]
[211] -> [128]
[212] -> [127]
[213] -> [126]
[214] -> [147,198]
[215] -> [114]
[216] -> [113]
[217] -> [173]
[218] -> [169]
[219] -> [168]
[220] -> [167]
[221] -> [108,112,239,253]
[221,239,243] -> [233]
[221,240] -> [235]
[221,241] -> [234]
[221,242] -> [233]
[221,244] -> [234]
[221,253,257] -> [251]
[221,253,258] -> [245]
[221,254] -> [247]
[221,255] -> [246]
[221,256] -> [245]
[221,259] -> [247]
[221,259,261] -> [251]
[221,260] -> [246]
[222] -> [242,256,314]
[223] -> [241,255,313]
[224] -> [240,254,312]
[225] -> [236,248,292]
[226] -> [107,237,249,293]
[227] -> [107,238,250,294]
[228] -> [239,253,266]
[229] -> [107,110,116,267]
[231] -> [107,110,116,268]
[233] -> [221,242]
[234] -> [221,241]
[235] -> [221,240]
[236] -> [225]
[237] -> [107,226]
[238] -> [107,227]
[239] -> [228]
[240] -> [224]
[241] -> [223]
[242] -> [222]
[243] -> [109]
[244] -> [109]
[245] -> [221,256]
[246] -> [221,255]
[247] -> [221,254]
[248] -> [225,261]
[249] -> [107,226,252]
[250] -> [107,115,227]
[251] -> [221,253,257]
[252] -> [107,115,249]
[253] -> [228]
[254] -> [224]
[255] -> [223]
[256] -> [222]
[257] -> [114]
[258] -> [113]
[259] -> [114]
[260] -> [113]
[261] -> [248]
[262] -> [148,153,159,280,298,325]
[262,280,284] -> [278]
[262,280,285] -> [272]
[262,281] -> [274]
[262,282] -> [273]
[262,283] -> [272]
[262,286] -> [274]
[262,286,288] -> [278]
[262,287] -> [273]
[262,298,302] -> [295]
[262,298,303] -> [289]
[262,299] -> [291]
[262,300] -> [290]
[262,301] -> [289]
[262,304,306] -> [295]
[262,304,307] -> [221]
[262,304,307,312] -> [291]
[262,304,307,313] -> [290]
[262,304,307,314] -> [289]
[262,304,308] -> [3]
[262,304,308,311] -> [290]
[262,304,309] -> [3]
[262,304,309,310] -> [289]
[262,305] -> [290]
[262,325,329] -> [323]
[262,325,330] -> [321]
[262,325,331] -> [315]
[262,326] -> [317]
[262,327] -> [316]
[262,328] -> [315]
[262,332,339] -> [323]
[262,332,340] -> [317]
[262,332,341] -> [316]
[262,332,342] -> [315]
[262,333,335] -> [321]
[262,333,336] -> [317]
[262,333,337] -> [316]
[262,333,338] -> [315]
[262,334] -> [316]
[263] -> [283,301,309,328,338,342,387]
[264] -> [282,300,308,327,337,341,386]
[265] -> [281,299,307,326,336,340,385]
[266] -> [114,228,275,292,318]
[267] -> [107,115,229,276,293,319]
[268] -> [107,116,231,277,294,320]
[269] -> [280,298,306,325,335,339,384]
[270] -> [147,152,158,165,296,322,324,375]
[271] -> [147,152,156,158,162,164,165,353]
[272] -> [262,283]
[273] -> [262,282]
[274] -> [262,281]
[275] -> [266,288]
[276] -> [107,267,279]
[277] -> [107,151,268]
[278] -> [262,280,284]
[279] -> [107,151,276]
[280] -> [269]
[281] -> [265]
[282] -> [264]
[283] -> [263]
[284] -> [150]
[285] -> [149]
[286] -> [150]
[287] -> [149]
[288] -> [275]
[289] -> [262,301]
[290] -> [262,300]
[291] -> [262,299]
[292] -> [225,266]
[293] -> [107,226,267]
[294] -> [107,227,268]
[295] -> [262,298,302]
[296] -> [147,156,270]
[298] -> [269]
[299] -> [265]
[300] -> [264]
[301] -> [263]
[302] -> [155]
[303] -> [154]
[304] -> [155]
[305] -> [154]
[306] -> [269]
[307] -> [265]
[308] -> [264]
[309] -> [263]
[312] -> [224]
[313] -> [223]
[314] -> [222]
[315] -> [262,328]
[316] -> [262,327]
[317] -> [262,326]
[318] -> [266]
[319] -> [107,267]
[320] -> [107,268]
[321] -> [262,325,330]
[322] -> [147,162,270]
[323] -> [262,325,329]
[324] -> [147,164,270]
[325] -> [269]
[326] -> [265]
[327] -> [264]
[328] -> [263]
[329] -> [163]
[330] -> [161]
[331] -> [160]
[332] -> [163]
[333] -> [161]
[334] -> [160]
[335] -> [269]
[336] -> [265]
[337] -> [264]
[338] -> [263]
[339] -> [269]
[340] -> [265]
[341] -> [264]
[342] -> [263]
[343] -> [108,112,148,262,361,378]
[343,361,365] -> [355]
[343,362] -> [357]
[343,363] -> [356]
[343,364] -> [355]
[343,366] -> [108]
[343,366,369] -> [356]
[343,367] -> [3]
[343,367,368] -> [356]
[343,378,382] -> [376]
[343,378,383] -> [370]
[343,379] -> [372]
[343,380] -> [371]
[343,381] -> [370]
[343,384] -> [372]
[343,384,390] -> [376]
[343,385] -> [112]
[343,385,389] -> [371]
[343,386] -> [3]
[343,386,388] -> [371]
[343,387] -> [371]
[344] -> [364,381,441]
[345] -> [363,380,440]
[346] -> [362,379,439]
[347] -> [358,373,419]
[348] -> [107,359,374,420]
[349] -> [147,360,375,421]
[350] -> [361,378,395]
[351] -> [107,110,116,396]
[353] -> [147,152,271,397]
[355] -> [343,364]
[356] -> [343,363]
[357] -> [343,362]
[358] -> [347]
[359] -> [107,348]
[360] -> [147,349]
[361] -> [350]
[362] -> [346]
[363] -> [345]
[364] -> [344]
[365] -> [109]
[366] -> [150]
[367] -> [149]
[369] -> [109]
[370] -> [343,381]
[371] -> [343,380]
[372] -> [343,379]
[373] -> [347,390]
[374] -> [107,348,377]
[375] -> [147,270,349]
[376] -> [343,378,382]
[377] -> [107,115,374]
[378] -> [350]
[379] -> [346]
[380] -> [345]
[381] -> [344]
[382] -> [114]
[383] -> [113]
[384] -> [269]
[385] -> [265]
[386] -> [264]
[387] -> [263]
[389] -> [113]
[390] -> [373]
[391] -> [148,153,159,403,409,425,452]
[391,409,413] -> [407]
[391,409,414] -> [401]
[391,410] -> [403]
[391,411] -> [402]
[391,412] -> [401]
[391,415] -> [407]
[391,425,429] -> [422]
[391,425,430] -> [416]
[391,426] -> [418]
[391,427] -> [417]
[391,428] -> [416]
[391,431,433] -> [422]
[391,431,434] -> [343]
[391,431,434,439] -> [418]
[391,431,434,440] -> [417]
[391,431,434,441] -> [416]
[391,431,435] -> [3]
[391,431,435,438] -> [417]
[391,431,436] -> [3]
[391,431,436,437] -> [416]
[391,432] -> [417]
[391,452,456] -> [450]
[391,452,457] -> [448]
[391,452,458] -> [442]
[391,453] -> [444]
[391,454] -> [443]
[391,455] -> [442]
[391,459,466] -> [450]
[391,459,467] -> [444]
[391,459,468] -> [443]
[391,459,469] -> [442]
[391,460,462] -> [448]
[391,460,463] -> [444]
[391,460,464] -> [443]
[391,460,465] -> [442]
[391,461] -> [443]
[392] -> [412,428,436,455,465,469,526,624]
[393] -> [411,427,435,454,464,468,525,623]
[394] -> [410,426,434,453,463,467,524,622]
[395] -> [173,350,404,419,445,549]
[396] -> [107,174,351,405,420,446,550]
[397] -> [147,175,353,406,421,447,552]
[398] -> [409,425,433,452,462,466,523,621]
[399] -> [147,152,158,165,423,449,451,471,614]
[400] -> [147,156,158,162,164,165,406,522,575]
[401] -> [391,412]
[402] -> [391,411]
[403] -> [391,410]
[404] -> [395,415]
[405] -> [107,396,408]
[406] -> [147,397,400]
[407] -> [391,409,413]
[408] -> [107,151,405]
[409] -> [398]
[410] -> [394]
[411] -> [393]
[412] -> [392]
[413] -> [150]
[414] -> [149]
[415] -> [404]
[416] -> [391,428]
[417] -> [391,427]
[418] -> [391,426]
[419] -> [347,395]
[420] -> [107,348,396]
[421] -> [147,349,397]
[422] -> [391,425,429]
[423] -> [147,156,399]
[425] -> [398]
[426] -> [394]
[427] -> [393]
[428] -> [392]
[429] -> [155]
[430] -> [154]
[431] -> [155]
[432] -> [154]
[433] -> [398]
[434] -> [394]
[435] -> [393]
[436] -> [392]
[439] -> [346]
[440] -> [345]
[441] -> [344]
[442] -> [391,455]
[443] -> [391,454]
[444] -> [391,453]
[445] -> [395]
[446] -> [107,396]
[447] -> [147,397]
[448] -> [391,452,457]
[449] -> [147,162,399]
[450] -> [391,452,456]
[451] -> [147,164,399]
[452] -> [398]
[453] -> [394]
[454] -> [393]
[455] -> [392]
[456] -> [163]
[457] -> [161]
[458] -> [160]
[459] -> [163]
[460] -> [161]
[461] -> [160]
[462] -> [398]
[463] -> [394]
[464] -> [393]
[465] -> [392]
[466] -> [398]
[467] -> [394]
[468] -> [393]
[469] -> [392]
[470] -> [159]
[470,473] -> [153]
[470,473,499] -> [159]
[470,473,499,502] -> [148]
[470,473,499,502,515] -> [108]
[470,473,499,502,515,519] -> [3]
[470,473,499,502,515,519,520] -> [2]
[470,473,499,502,516] -> [3]
[470,473,499,502,516,517] -> [3]
[470,473,499,502,516,517,518] -> [2]
[470,473,499,503] -> [148]
[470,473,499,503,507] -> [112]
[470,473,499,503,507,511] -> [108]
[470,473,499,503,507,511,514] -> [2]
[470,473,499,503,507,512] -> [3]
[470,473,499,503,507,512,513] -> [2]
[470,473,499,503,508] -> [3]
[470,473,499,503,508,509] -> [3]
[470,473,499,503,508,509,510] -> [2]
[470,473,499,504] -> [3]
[470,473,499,504,505] -> [3]
[470,473,499,504,505,506] -> [2]
[470,473,500] -> [3]
[470,473,500,501] -> [2]
[470,474] -> [153]
[470,474,477] -> [159]
[470,474,477,480] -> [148]
[470,474,477,480,491] -> [112]
[470,474,477,480,491,495] -> [108]
[470,474,477,480,491,495,498] -> [2]
[470,474,477,480,491,496] -> [3]
[470,474,477,480,491,496,497] -> [2]
[470,474,477,480,492] -> [3]
[470,474,477,480,492,493] -> [3]
[470,474,477,480,492,493,494] -> [2]
[470,474,477,481] -> [148]
[470,474,477,481,485] -> [108]
[470,474,477,481,485,489] -> [3]
[470,474,477,481,485,489,490] -> [2]
[470,474,477,481,486] -> [3]
[470,474,477,481,486,487] -> [3]
[470,474,477,481,486,487,488] -> [2]
[470,474,477,482] -> [3]
[470,474,477,482,483] -> [3]
[470,474,477,482,483,484] -> [2]
[470,474,478] -> [3]
[470,474,478,479] -> [2]
[470,475] -> [3]
[470,475,476] -> [2]
[471] -> [147,165,399,575]
[473] -> [163]
[474] -> [161]
[475] -> [160]
[477] -> [155]
[478] -> [154]
[480] -> [163]
[481] -> [161]
[482] -> [160]
[485] -> [150]
[486] -> [149]
[489] -> [109]
[491] -> [150]
[492] -> [149]
[495] -> [114]
[496] -> [113]
[498] -> [109]
[499] -> [155]
[500] -> [154]
[502] -> [163]
[503] -> [161]
[504] -> [160]
[507] -> [150]
[508] -> [149]
[511] -> [114]
[512] -> [113]
[514] -> [109]
[515] -> [150]
[516] -> [149]
[519] -> [109]
[521] -> [391]
[521,523] -> [470]
[521,524] -> [166]
[521,524,528] -> [125]
[521,524,528,532] -> [121]
[521,524,528,532,543] -> [146]
[521,524,528,532,543,544] -> [2]
[521,524,528,533] -> [153]
[521,524,528,533,537] -> [148]
[521,524,528,533,537,539] -> [108]
[521,524,528,533,537,539,542] -> [2]
[521,524,528,533,537,540] -> [3]
[521,524,528,533,537,540,541] -> [2]
[521,524,528,533,538] -> [2]
[521,524,528,534] -> [146]
[521,524,528,534,536] -> [2]
[521,524,528,535] -> [2]
[521,524,529] -> [2]
[521,524,530] -> [3]
[521,524,530,531] -> [2]
[521,525] -> [2]
[521,526] -> [3]
[521,526,527] -> [2]
[522] -> [147,400,649]
[523] -> [398]
[524] -> [394]
[525] -> [393]
[526] -> [392]
[528] -> [169]
[529] -> [168]
[530] -> [167]
[532] -> [129]
[533] -> [128]
[534] -> [127]
[535] -> [126]
[536] -> [147,158]
[537] -> [155]
[538] -> [154]
[539] -> [150]
[540] -> [149]
[542] -> [109]
[543] -> [122]
[544] -> [147]
[545] -> [108,112,148,554,556,565]
[545,556,559] -> [553]
[545,557] -> [554]
[545,558] -> [553]
[545,565,568] -> [563]
[545,565,569] -> [560]
[545,566] -> [561]
[545,567] -> [560]
[545,570] -> [563]
[545,571] -> [560]
[546] -> [558,567,627]
[547] -> [557,566,626]
[548] -> [147,555,562,576]
[549] -> [395,556,565]
[550] -> [107,110,116,396]
[552] -> [147,152,397,555]
[553] -> [545,558]
[554] -> [545,557]
[555] -> [147,548,552]
[556] -> [549]
[557] -> [547]
[558] -> [546]
[559] -> [109]
[560] -> [545,567]
[561] -> [545,566]
[562] -> [147,548]
[563] -> [545,565,568]
[564] -> [107,115,151]
[565] -> [549]
[566] -> [547]
[567] -> [546]
[568] -> [114]
[569] -> [113]
[570] -> [150]
[571] -> [149]
[572] -> [148,153,159,580,590,604,609]
[572,580,582] -> [578]
[572,580,583] -> [577]
[572,581] -> [577]
[572,584] -> [578]
[572,585] -> [577]
[572,590,592] -> [587]
[572,590,593] -> [586]
[572,591] -> [586]
[572,594,596] -> [587]
[572,594,597] -> [3]
[572,594,597,598] -> [586]
[572,595] -> [586]
[572,604,606] -> [602]
[572,604,607] -> [600]
[572,604,608] -> [599]
[572,605] -> [599]
[572,638,639] -> [600]
[572,638,640] -> [599]
[573] -> [581,591,597,605,620,629,637,640,645]
[574] -> [580,590,596,604,619,628,636,639,644]
[575] -> [147,152,158,165,400,471,588,601,603]
[576] -> [147,152,156,158,164,548,611,612,642]
[577] -> [572,581]
[578] -> [572,580,582]
[579] -> [107,151]
[580] -> [574]
[581] -> [573]
[582] -> [150]
[583] -> [149]
[584] -> [150]
[585] -> [149]
[586] -> [572,591]
[587] -> [572,590,592]
[588] -> [147,156,575]
[590] -> [574]
[591] -> [573]
[592] -> [155]
[593] -> [154]
[594] -> [155]
[595] -> [154]
[596] -> [574]
[597] -> [573]
[599] -> [572,605]
[600] -> [572,604,607]
[601] -> [147,162,575]
[602] -> [572,604,606]
[603] -> [147,164,575]
[604] -> [574]
[605] -> [573]
[606] -> [163]
[607] -> [161]
[608] -> [160]
[609] -> [153,159,572,616]
[609,616,617] -> [613]
[609,616,618] -> [599]
[609,619] -> [391]
[609,619,621] -> [613]
[609,619,622] -> [545]
[609,619,622,626] -> [572]
[609,619,622,626,628] -> [602]
[609,619,622,626,629] -> [599]
[609,619,622,627] -> [599]
[609,619,623] -> [599]
[609,619,624] -> [3]
[609,619,624,625] -> [599]
[609,620] -> [599]
[609,632] -> [630]
[609,633] -> [572]
[609,633,636] -> [602]
[609,633,637] -> [599]
[609,634] -> [630]
[609,635] -> [599]
[610] -> [616,632,638]
[611] -> [147,158,576,631]
[612] -> [147,165,576]
[613] -> [609,616,617]
[614] -> [147,156,399]
[616] -> [610]
[617] -> [155]
[618] -> [154]
[619] -> [574]
[620] -> [573]
[621] -> [398]
[622] -> [394]
[623] -> [393]
[624] -> [392]
[626] -> [547]
[627] -> [546]
[628] -> [574]
[629] -> [573]
[630] -> [609,632]
[631] -> [147,162,611]
[632] -> [610]
[633] -> [163]
[634] -> [161]
[635] -> [160]
[636] -> [574]
[637] -> [573]
[638] -> [610]
[639] -> [574]
[640] -> [573]
[641] -> [572]
[641,644] -> [470]
[641,645] -> [3]
[641,645,646] -> [2]
[642] -> [147,576,650]
[644] -> [574]
[645] -> [573]
[649] -> [147,522]
[650] -> [147,642]
[652] -> [648]
[652,653] -> [641]
[652,654] -> [521]

### Solution ###

[14,15,28,108,111,112,114,117,121,125,128,129,134,148,150,153,155,157,159,161,163,166,169,173,178,180,184,185,188,189,190,197,199,203,205,206,209,210,211,215,217,218,221,224,225,228,230,232,235,236,239,240,247,248,251,253,254,257,259,261,262,265,266,269,274,275,278,280,281,284,286,288,291,292,295,297,298,299,302,304,306,307,310,311,312,317,318,321,323,325,326,329,330,332,333,335,336,339,340,343,346,347,350,352,354,357,358,361,362,366,368,372,373,376,378,379,382,384,385,388,390,391,394,395,398,403,404,407,409,410,413,415,418,419,422,424,425,426,429,431,433,434,437,438,439,444,445,448,450,452,453,456,457,459,460,462,463,466,467,470,472,473,474,476,477,479,480,481,483,484,485,487,488,490,491,493,494,495,497,499,501,502,503,505,506,507,509,510,511,513,515,517,518,520,521,523,524,527,528,531,532,533,537,539,541,545,547,549,551,554,556,557,561,563,565,566,568,570,572,574,578,580,582,584,587,589,590,592,594,596,598,600,602,604,606,607,609,610,613,615,616,617,619,621,622,625,626,628,630,632,633,634,636,638,639,641,643,644,646,648,651,652,653,654,R]

### Annotated ###

  let
    constructor Nat :E: Type
    constructor Z :E: Nat
    constructor S :E: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      n :E: Nat
        plus -E- Z -E- n = n
      m :E: Nat n :E: Nat
        plus -E- (S -R- m) -E- n = S -R- (plus -E- m -E- n)
    times :E: (_x2 :E: Nat) -> (_x3 :E: Nat) -> Nat 
      n :E: Nat
        times -E- Z -E- n = Z
      m :E: Nat n :E: Nat
        times -E- (S -R- m) -E- n = plus -E- n -E- (times -E- m -E- n)
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    not :E: (_x4 :E: Bool) -> Bool 
      not -E- True = False
      not -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :E: Unit
    constructor Pair :E: (_x5 :E: Type) -> (_x6 :E: Type) -> Type
    constructor MkPair :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: a) -> (_x8 :E: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x9 :E: Pair -E- a -E- b) -> a 
      a :E: Type b :E: Type x :E: a y :E: b
        fst -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = x
    snd :E: (a :E: Type) -> (b :E: Type) -> (_x10 :E: Pair -E- a -E- b) -> b 
      a :E: Type b :E: Type x :E: a y :E: b
        snd -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = y
    constructor Either :E: (_x11 :E: Type) -> (_x12 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x13 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x14 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x15 :E: Nat) -> Type
    constructor FZ :R: (n :E: Nat) -> Fin -E- (S -R- n)
    constructor FS :R: (n :E: Nat) -> (_x16 :R: Fin -E- n) -> Fin -E- (S -R- n)
    constructor Vect :E: (_x17 :E: Nat) -> (_x18 :E: Type) -> Type
    constructor VN :R: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :R: (n :E: Nat) -> (a :E: Type) -> (_x19 :R: a) -> (_x20 :R: Vect -E- n -E- a) -> Vect -E- (S -R- n) -E- a
    constructor List :E: (_x21 :E: Type) -> Type
    constructor Nil :E: (a :E: Type) -> List -E- a
    constructor Cons :E: (a :E: Type) -> (_x22 :E: a) -> (_x23 :E: List -E- a) -> List -E- a
    constructor TT :E: (_x0 :E: Nat) -> Type
    constructor V :R: (n :E: Nat) -> (_x1 :R: Fin -E- n) -> TT -E- n
    constructor Lam :R: (n :E: Nat) -> (_x2 :R: TT -E- (S -R- n)) -> TT -E- n
    constructor App :R: (n :E: Nat) -> (_x3 :R: TT -E- n) -> (_x4 :R: TT -E- n) -> TT -E- n
    env :R: (m :E: Nat) -> (n :E: Nat) -> (xs :R: Vect -E- m -E- (TT -E- n)) -> (_x5 :R: Fin -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat x :R: TT -E- n xs :R: Vect -E- m -E- (TT -E- n)
        env -E- [S -R- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FZ -E- m) = x
      m :E: Nat n :E: Nat x :R: TT -E- n xs :R: Vect -E- m -E- (TT -E- n) i :R: Fin -E- m
        env -E- [S -R- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FS -E- m -R- i) = env -E- m -E- n -R- xs -R- i
    extendMap :R: (m :E: Nat) -> (n :E: Nat) -> (_x6 :R: (_x7 :R: Fin -E- m) -> Fin -E- n) -> (_x8 :R: Fin -E- (S -R- m)) -> Fin -E- (S -R- n) 
      m :E: Nat n :E: Nat f :R: (_x9 :R: Fin -E- m) -> Fin -E- n
        extendMap -E- m -E- n -R- f -R- (FZ -E- [m]) = FZ -E- n
      m :E: Nat n :E: Nat f :R: (_x10 :R: Fin -E- m) -> Fin -E- n i :R: Fin -E- m
        extendMap -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = FS -E- n -R- (f -R- i)
    mapVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x11 :R: (_x12 :R: Fin -E- m) -> Fin -E- n) -> (_x13 :R: TT -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat f :R: (_x14 :R: Fin -E- m) -> Fin -E- n i :R: Fin -E- m
        mapVars -E- m -E- n -R- f -R- (V -E- [m] -R- i) = V -E- n -R- (f -R- i)
      m :E: Nat n :E: Nat f :R: (_x15 :R: Fin -E- m) -> Fin -E- n x :R: TT -E- (S -R- m)
        mapVars -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (mapVars -E- (S -R- m) -E- (S -R- n) -R- (extendMap -E- m -E- n -R- f) -R- x)
      m :E: Nat n :E: Nat f :R: (_x16 :R: Fin -E- m) -> Fin -E- n g :R: TT -E- m x :R: TT -E- m
        mapVars -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (mapVars -E- m -E- n -R- f -R- g) -R- (mapVars -E- m -E- n -R- f -R- x)
    extendSubst :R: (m :E: Nat) -> (n :E: Nat) -> (_x17 :R: (_x18 :R: Fin -E- m) -> TT -E- n) -> (_x19 :R: Fin -E- (S -R- m)) -> TT -E- (S -R- n) 
      m :E: Nat n :E: Nat f :R: (_x20 :R: Fin -E- m) -> TT -E- n
        extendSubst -E- m -E- n -R- f -R- (FZ -E- [m]) = V -E- (S -R- n) -R- (FZ -E- n)
      m :E: Nat n :E: Nat f :R: (_x21 :R: Fin -E- m) -> TT -E- n i :R: Fin -E- m
        extendSubst -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = mapVars -E- n -E- (S -R- n) -R- (FS -E- n) -R- (f -R- i)
    substVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x22 :R: (_x23 :R: Fin -E- m) -> TT -E- n) -> (_x24 :R: TT -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat f :R: (_x25 :R: Fin -E- m) -> TT -E- n i :R: Fin -E- m
        substVars -E- m -E- n -R- f -R- (V -E- [m] -R- i) = f -R- i
      m :E: Nat n :E: Nat f :R: (_x26 :R: Fin -E- m) -> TT -E- n x :R: TT -E- (S -R- m)
        substVars -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (substVars -E- (S -R- m) -E- (S -R- n) -R- (extendSubst -E- m -E- n -R- f) -R- x)
      m :E: Nat n :E: Nat f :R: (_x27 :R: Fin -E- m) -> TT -E- n g :R: TT -E- m x :R: TT -E- m
        substVars -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (substVars -E- m -E- n -R- f -R- g) -R- (substVars -E- m -E- n -R- f -R- x)
    testTm :R: TT -E- 1 = App -E- 1 -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FZ -E- 1)) -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))) -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (V -E- 2 -R- (FZ -E- 1))))
    example1 :R: TT -E- Z = substVars -E- 1 -E- Z -R- (env -E- 1 -E- Z -R- (VC -E- Z -E- (TT -E- Z) -R- (Lam -E- Z -R- (V -E- 1 -R- (FZ -E- Z))) -R- (VN -E- (TT -E- Z)))) -R- testTm
    substTop :R: (n :E: Nat) -> (_x28 :R: TT -E- n) -> (_x29 :R: Fin -E- (S -R- n)) -> TT -E- n 
      n :E: Nat tm :R: TT -E- n
        substTop -E- n -R- tm -R- (FZ -E- [n]) = tm
      n :E: Nat tm :R: TT -E- n i :R: Fin -E- n
        substTop -E- n -R- tm -R- (FS -E- [n] -R- i) = V -E- n -R- i
    nf :R: (m :E: Nat) -> (_x30 :R: TT -E- m) -> TT -E- m 
      m :E: Nat i :R: Fin -E- m
        nf -E- m -R- (V -E- [m] -R- i) = V -E- m -R- i
      m :E: Nat x :R: TT -E- (S -R- m)
        nf -E- m -R- (Lam -E- [m] -R- x) = Lam -E- m -R- (nf -E- (S -R- m) -R- x)
      m :E: Nat f :R: TT -E- m x :R: TT -E- m
        nf -E- m -R- (App -E- [m] -R- f -R- x) = 
          let g :R: (_x31 :R: TT -E- m) -> TT -E- m 
            y :R: TT -E- (S -R- m)
              g -R- (Lam -E- [m] -R- y) = nf -E- m -R- (substVars -E- (S -R- m) -E- m -R- (substTop -E- m -R- (nf -E- m -R- x)) -R- y)
            f' :R: TT -E- m
              g -R- f' = App -E- m -R- f' -R- (nf -E- m -R- x)
          in g -R- (nf -E- m -R- f)
    example2 :R: TT -E- 1 = nf -E- 1 -R- testTm
    constructor Result :E: Type
    constructor R :R: (x :R: TT -E- Z) -> (y :R: TT -E- 1) -> Result
    main :R: Result = R -R- example1 -R- example2
  in main

### Specialised ###

  let
    constructor Nat :E: Type
    constructor Z :E: Nat
    constructor S :E: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      n :E: Nat
        plus -E- Z -E- n = n
      m :E: Nat n :E: Nat
        plus -E- (S -R- m) -E- n = S -R- (plus -E- m -E- n)
    times :E: (_x2 :E: Nat) -> (_x3 :E: Nat) -> Nat 
      n :E: Nat
        times -E- Z -E- n = Z
      m :E: Nat n :E: Nat
        times -E- (S -R- m) -E- n = plus -E- n -E- (times -E- m -E- n)
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    not :E: (_x4 :E: Bool) -> Bool 
      not -E- True = False
      not -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :E: Unit
    constructor Pair :E: (_x5 :E: Type) -> (_x6 :E: Type) -> Type
    constructor MkPair :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: a) -> (_x8 :E: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x9 :E: Pair -E- a -E- b) -> a 
      a :E: Type b :E: Type x :E: a y :E: b
        fst -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = x
    snd :E: (a :E: Type) -> (b :E: Type) -> (_x10 :E: Pair -E- a -E- b) -> b 
      a :E: Type b :E: Type x :E: a y :E: b
        snd -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = y
    constructor Either :E: (_x11 :E: Type) -> (_x12 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x13 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x14 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x15 :E: Nat) -> Type
    constructor FZ :R: (n :E: Nat) -> Fin -E- (S -R- n)
    constructor FS :R: (n :E: Nat) -> (_x16 :R: Fin -E- n) -> Fin -E- (S -R- n)
    constructor Vect :E: (_x17 :E: Nat) -> (_x18 :E: Type) -> Type
    constructor VN :R: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :R: (n :E: Nat) -> (a :E: Type) -> (_x19 :R: a) -> (_x20 :R: Vect -E- n -E- a) -> Vect -E- (S -R- n) -E- a
    constructor List :E: (_x21 :E: Type) -> Type
    constructor Nil :E: (a :E: Type) -> List -E- a
    constructor Cons :E: (a :E: Type) -> (_x22 :E: a) -> (_x23 :E: List -E- a) -> List -E- a
    constructor TT :E: (_x0 :E: Nat) -> Type
    constructor V :R: (n :E: Nat) -> (_x1 :R: Fin -E- n) -> TT -E- n
    constructor Lam :R: (n :E: Nat) -> (_x2 :R: TT -E- (S -R- n)) -> TT -E- n
    constructor App :R: (n :E: Nat) -> (_x3 :R: TT -E- n) -> (_x4 :R: TT -E- n) -> TT -E- n
    env :R: (m :E: Nat) -> (n :E: Nat) -> (xs :R: Vect -E- m -E- (TT -E- n)) -> (_x5 :R: Fin -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat x :R: TT -E- n xs :R: Vect -E- m -E- (TT -E- n)
        env -E- [S -R- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FZ -E- m) = x
      m :E: Nat n :E: Nat x :R: TT -E- n xs :R: Vect -E- m -E- (TT -E- n) i :R: Fin -E- m
        env -E- [S -R- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FS -E- m -R- i) = env -E- m -E- n -R- xs -R- i
    extendMap :R: (m :E: Nat) -> (n :E: Nat) -> (_x6 :R: (_x7 :R: Fin -E- m) -> Fin -E- n) -> (_x8 :R: Fin -E- (S -R- m)) -> Fin -E- (S -R- n) 
      m :E: Nat n :E: Nat f :R: (_x9 :R: Fin -E- m) -> Fin -E- n
        extendMap -E- m -E- n -R- f -R- (FZ -E- [m]) = FZ -E- n
      m :E: Nat n :E: Nat f :R: (_x10 :R: Fin -E- m) -> Fin -E- n i :R: Fin -E- m
        extendMap -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = FS -E- n -R- (f -R- i)
    mapVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x11 :R: (_x12 :R: Fin -E- m) -> Fin -E- n) -> (_x13 :R: TT -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat f :R: (_x14 :R: Fin -E- m) -> Fin -E- n i :R: Fin -E- m
        mapVars -E- m -E- n -R- f -R- (V -E- [m] -R- i) = V -E- n -R- (f -R- i)
      m :E: Nat n :E: Nat f :R: (_x15 :R: Fin -E- m) -> Fin -E- n x :R: TT -E- (S -R- m)
        mapVars -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (mapVars -E- (S -R- m) -E- (S -R- n) -R- (extendMap -E- m -E- n -R- f) -R- x)
      m :E: Nat n :E: Nat f :R: (_x16 :R: Fin -E- m) -> Fin -E- n g :R: TT -E- m x :R: TT -E- m
        mapVars -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (mapVars -E- m -E- n -R- f -R- g) -R- (mapVars -E- m -E- n -R- f -R- x)
    extendSubst :R: (m :E: Nat) -> (n :E: Nat) -> (_x17 :R: (_x18 :R: Fin -E- m) -> TT -E- n) -> (_x19 :R: Fin -E- (S -R- m)) -> TT -E- (S -R- n) 
      m :E: Nat n :E: Nat f :R: (_x20 :R: Fin -E- m) -> TT -E- n
        extendSubst -E- m -E- n -R- f -R- (FZ -E- [m]) = V -E- (S -R- n) -R- (FZ -E- n)
      m :E: Nat n :E: Nat f :R: (_x21 :R: Fin -E- m) -> TT -E- n i :R: Fin -E- m
        extendSubst -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = mapVars -E- n -E- (S -R- n) -R- (FS -E- n) -R- (f -R- i)
    substVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x22 :R: (_x23 :R: Fin -E- m) -> TT -E- n) -> (_x24 :R: TT -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat f :R: (_x25 :R: Fin -E- m) -> TT -E- n i :R: Fin -E- m
        substVars -E- m -E- n -R- f -R- (V -E- [m] -R- i) = f -R- i
      m :E: Nat n :E: Nat f :R: (_x26 :R: Fin -E- m) -> TT -E- n x :R: TT -E- (S -R- m)
        substVars -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (substVars -E- (S -R- m) -E- (S -R- n) -R- (extendSubst -E- m -E- n -R- f) -R- x)
      m :E: Nat n :E: Nat f :R: (_x27 :R: Fin -E- m) -> TT -E- n g :R: TT -E- m x :R: TT -E- m
        substVars -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (substVars -E- m -E- n -R- f -R- g) -R- (substVars -E- m -E- n -R- f -R- x)
    testTm :R: TT -E- 1 = App -E- 1 -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FZ -E- 1)) -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))) -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (V -E- 2 -R- (FZ -E- 1))))
    example1 :R: TT -E- Z = substVars -E- 1 -E- Z -R- (env -E- 1 -E- Z -R- (VC -E- Z -E- (TT -E- Z) -R- (Lam -E- Z -R- (V -E- 1 -R- (FZ -E- Z))) -R- (VN -E- (TT -E- Z)))) -R- testTm
    substTop :R: (n :E: Nat) -> (_x28 :R: TT -E- n) -> (_x29 :R: Fin -E- (S -R- n)) -> TT -E- n 
      n :E: Nat tm :R: TT -E- n
        substTop -E- n -R- tm -R- (FZ -E- [n]) = tm
      n :E: Nat tm :R: TT -E- n i :R: Fin -E- n
        substTop -E- n -R- tm -R- (FS -E- [n] -R- i) = V -E- n -R- i
    nf :R: (m :E: Nat) -> (_x30 :R: TT -E- m) -> TT -E- m 
      m :E: Nat i :R: Fin -E- m
        nf -E- m -R- (V -E- [m] -R- i) = V -E- m -R- i
      m :E: Nat x :R: TT -E- (S -R- m)
        nf -E- m -R- (Lam -E- [m] -R- x) = Lam -E- m -R- (nf -E- (S -R- m) -R- x)
      m :E: Nat f :R: TT -E- m x :R: TT -E- m
        nf -E- m -R- (App -E- [m] -R- f -R- x) = 
          let g :R: (_x31 :R: TT -E- m) -> TT -E- m 
            y :R: TT -E- (S -R- m)
              g -R- (Lam -E- [m] -R- y) = nf -E- m -R- (substVars -E- (S -R- m) -E- m -R- (substTop -E- m -R- (nf -E- m -R- x)) -R- y)
            f' :R: TT -E- m
              g -R- f' = App -E- m -R- f' -R- (nf -E- m -R- x)
          in g -R- (nf -E- m -R- f)
    example2 :R: TT -E- 1 = nf -E- 1 -R- testTm
    constructor Result :E: Type
    constructor R :R: (x :R: TT -E- Z) -> (y :R: TT -E- 1) -> Result
    main :R: Result = R -R- example1 -R- example2
  in main

### Final annotation ###

  let
    constructor Nat :E: Type
    constructor Z :E: Nat
    constructor S :E: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      n :E: Nat
        plus -E- Z -E- n = n
      m :E: Nat n :E: Nat
        plus -E- (S -R- m) -E- n = S -R- (plus -E- m -E- n)
    times :E: (_x2 :E: Nat) -> (_x3 :E: Nat) -> Nat 
      n :E: Nat
        times -E- Z -E- n = Z
      m :E: Nat n :E: Nat
        times -E- (S -R- m) -E- n = plus -E- n -E- (times -E- m -E- n)
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    not :E: (_x4 :E: Bool) -> Bool 
      not -E- True = False
      not -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :E: Unit
    constructor Pair :E: (_x5 :E: Type) -> (_x6 :E: Type) -> Type
    constructor MkPair :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: a) -> (_x8 :E: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x9 :E: Pair -E- a -E- b) -> a 
      a :E: Type b :E: Type x :E: a y :E: b
        fst -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = x
    snd :E: (a :E: Type) -> (b :E: Type) -> (_x10 :E: Pair -E- a -E- b) -> b 
      a :E: Type b :E: Type x :E: a y :E: b
        snd -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = y
    constructor Either :E: (_x11 :E: Type) -> (_x12 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x13 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x14 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x15 :E: Nat) -> Type
    constructor FZ :R: (n :E: Nat) -> Fin -E- (S -R- n)
    constructor FS :R: (n :E: Nat) -> (_x16 :R: Fin -E- n) -> Fin -E- (S -R- n)
    constructor Vect :E: (_x17 :E: Nat) -> (_x18 :E: Type) -> Type
    constructor VN :R: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :R: (n :E: Nat) -> (a :E: Type) -> (_x19 :R: a) -> (_x20 :R: Vect -E- n -E- a) -> Vect -E- (S -R- n) -E- a
    constructor List :E: (_x21 :E: Type) -> Type
    constructor Nil :E: (a :E: Type) -> List -E- a
    constructor Cons :E: (a :E: Type) -> (_x22 :E: a) -> (_x23 :E: List -E- a) -> List -E- a
    constructor TT :E: (_x0 :E: Nat) -> Type
    constructor V :R: (n :E: Nat) -> (_x1 :R: Fin -E- n) -> TT -E- n
    constructor Lam :R: (n :E: Nat) -> (_x2 :R: TT -E- (S -R- n)) -> TT -E- n
    constructor App :R: (n :E: Nat) -> (_x3 :R: TT -E- n) -> (_x4 :R: TT -E- n) -> TT -E- n
    env :R: (m :E: Nat) -> (n :E: Nat) -> (xs :R: Vect -E- m -E- (TT -E- n)) -> (_x5 :R: Fin -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat x :R: TT -E- n xs :R: Vect -E- m -E- (TT -E- n)
        env -E- [S -R- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FZ -E- m) = x
      m :E: Nat n :E: Nat x :R: TT -E- n xs :R: Vect -E- m -E- (TT -E- n) i :R: Fin -E- m
        env -E- [S -R- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FS -E- m -R- i) = env -E- m -E- n -R- xs -R- i
    extendMap :R: (m :E: Nat) -> (n :E: Nat) -> (_x6 :R: (_x7 :R: Fin -E- m) -> Fin -E- n) -> (_x8 :R: Fin -E- (S -R- m)) -> Fin -E- (S -R- n) 
      m :E: Nat n :E: Nat f :R: (_x9 :R: Fin -E- m) -> Fin -E- n
        extendMap -E- m -E- n -R- f -R- (FZ -E- [m]) = FZ -E- n
      m :E: Nat n :E: Nat f :R: (_x10 :R: Fin -E- m) -> Fin -E- n i :R: Fin -E- m
        extendMap -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = FS -E- n -R- (f -R- i)
    mapVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x11 :R: (_x12 :R: Fin -E- m) -> Fin -E- n) -> (_x13 :R: TT -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat f :R: (_x14 :R: Fin -E- m) -> Fin -E- n i :R: Fin -E- m
        mapVars -E- m -E- n -R- f -R- (V -E- [m] -R- i) = V -E- n -R- (f -R- i)
      m :E: Nat n :E: Nat f :R: (_x15 :R: Fin -E- m) -> Fin -E- n x :R: TT -E- (S -R- m)
        mapVars -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (mapVars -E- (S -R- m) -E- (S -R- n) -R- (extendMap -E- m -E- n -R- f) -R- x)
      m :E: Nat n :E: Nat f :R: (_x16 :R: Fin -E- m) -> Fin -E- n g :R: TT -E- m x :R: TT -E- m
        mapVars -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (mapVars -E- m -E- n -R- f -R- g) -R- (mapVars -E- m -E- n -R- f -R- x)
    extendSubst :R: (m :E: Nat) -> (n :E: Nat) -> (_x17 :R: (_x18 :R: Fin -E- m) -> TT -E- n) -> (_x19 :R: Fin -E- (S -R- m)) -> TT -E- (S -R- n) 
      m :E: Nat n :E: Nat f :R: (_x20 :R: Fin -E- m) -> TT -E- n
        extendSubst -E- m -E- n -R- f -R- (FZ -E- [m]) = V -E- (S -R- n) -R- (FZ -E- n)
      m :E: Nat n :E: Nat f :R: (_x21 :R: Fin -E- m) -> TT -E- n i :R: Fin -E- m
        extendSubst -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = mapVars -E- n -E- (S -R- n) -R- (FS -E- n) -R- (f -R- i)
    substVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x22 :R: (_x23 :R: Fin -E- m) -> TT -E- n) -> (_x24 :R: TT -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat f :R: (_x25 :R: Fin -E- m) -> TT -E- n i :R: Fin -E- m
        substVars -E- m -E- n -R- f -R- (V -E- [m] -R- i) = f -R- i
      m :E: Nat n :E: Nat f :R: (_x26 :R: Fin -E- m) -> TT -E- n x :R: TT -E- (S -R- m)
        substVars -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (substVars -E- (S -R- m) -E- (S -R- n) -R- (extendSubst -E- m -E- n -R- f) -R- x)
      m :E: Nat n :E: Nat f :R: (_x27 :R: Fin -E- m) -> TT -E- n g :R: TT -E- m x :R: TT -E- m
        substVars -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (substVars -E- m -E- n -R- f -R- g) -R- (substVars -E- m -E- n -R- f -R- x)
    testTm :R: TT -E- 1 = App -E- 1 -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FZ -E- 1)) -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))) -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (V -E- 2 -R- (FZ -E- 1))))
    example1 :R: TT -E- Z = substVars -E- 1 -E- Z -R- (env -E- 1 -E- Z -R- (VC -E- Z -E- (TT -E- Z) -R- (Lam -E- Z -R- (V -E- 1 -R- (FZ -E- Z))) -R- (VN -E- (TT -E- Z)))) -R- testTm
    substTop :R: (n :E: Nat) -> (_x28 :R: TT -E- n) -> (_x29 :R: Fin -E- (S -R- n)) -> TT -E- n 
      n :E: Nat tm :R: TT -E- n
        substTop -E- n -R- tm -R- (FZ -E- [n]) = tm
      n :E: Nat tm :R: TT -E- n i :R: Fin -E- n
        substTop -E- n -R- tm -R- (FS -E- [n] -R- i) = V -E- n -R- i
    nf :R: (m :E: Nat) -> (_x30 :R: TT -E- m) -> TT -E- m 
      m :E: Nat i :R: Fin -E- m
        nf -E- m -R- (V -E- [m] -R- i) = V -E- m -R- i
      m :E: Nat x :R: TT -E- (S -R- m)
        nf -E- m -R- (Lam -E- [m] -R- x) = Lam -E- m -R- (nf -E- (S -R- m) -R- x)
      m :E: Nat f :R: TT -E- m x :R: TT -E- m
        nf -E- m -R- (App -E- [m] -R- f -R- x) = 
          let g :R: (_x31 :R: TT -E- m) -> TT -E- m 
            y :R: TT -E- (S -R- m)
              g -R- (Lam -E- [m] -R- y) = nf -E- m -R- (substVars -E- (S -R- m) -E- m -R- (substTop -E- m -R- (nf -E- m -R- x)) -R- y)
            f' :R: TT -E- m
              g -R- f' = App -E- m -R- f' -R- (nf -E- m -R- x)
          in g -R- (nf -E- m -R- f)
    example2 :R: TT -E- 1 = nf -E- 1 -R- testTm
    constructor Result :E: Type
    constructor R :R: (x :R: TT -E- Z) -> (y :R: TT -E- 1) -> Result
    main :R: Result = R -R- example1 -R- example2
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor FZ : Fin
    constructor FS : (_x16) -> Fin
    constructor VN : Vect
    constructor VC : (_x19) -> (_x20) -> Vect
    constructor V : (_x1) -> TT
    constructor Lam : (_x2) -> TT
    constructor App : (_x3) -> (_x4) -> TT
    env 
      env (VC x xs) FZ = x
      env (VC x xs) (FS i) = env xs i
    extendMap 
      extendMap f FZ = FZ
      extendMap f (FS i) = FS (f i)
    mapVars 
      mapVars f (V i) = V (f i)
      mapVars f (Lam x) = Lam (mapVars (extendMap f) x)
      mapVars f (App g x) = App (mapVars f g) (mapVars f x)
    extendSubst 
      extendSubst f FZ = V FZ
      extendSubst f (FS i) = mapVars FS (f i)
    substVars 
      substVars f (V i) = f i
      substVars f (Lam x) = Lam (substVars (extendSubst f) x)
      substVars f (App g x) = App (substVars f g) (substVars f x)
    testTm = App (Lam (App (V FZ) (V (FS FZ)))) (Lam (App (V (FS FZ)) (V FZ)))
    example1 = substVars (env (VC (Lam (V FZ)) VN)) testTm
    substTop 
      substTop tm FZ = tm
      substTop tm (FS i) = V i
    nf 
      nf (V i) = V i
      nf (Lam x) = Lam (nf x)
      nf (App f x) = 
        let g 
          g (Lam y) = nf (substVars (substTop (nf x)) y)
          g f' = App f' (nf x)
        in g (nf f)
    example2 = nf testTm
    constructor R : (x) -> (y) -> Result
    main = R example1 example2
  in main

### Intermediate representation ###

let FZ = constructor 0
  in let FS = constructor 1
    in let VN = constructor 0
      in let VC = constructor 2
        in let V = constructor 1
          in let Lam = constructor 1
            in let App = constructor 2
              in let env = \_pv0. \_pv1.
                case _pv0 of
                  VC _pv2 _pv3 => case _pv1 of
                    FS _pv4 => ((env _pv3) _pv4)
                    FZ => _pv2
                in let extendMap = \_pv0. \_pv1.
                  case _pv1 of
                    FS _pv2 => (FS (_pv0 _pv2))
                    FZ => FZ
                  in let mapVars = \_pv0. \_pv1.
                    case _pv1 of
                      App _pv2 _pv3 => ((App ((mapVars _pv0) _pv2)) ((mapVars _pv0) _pv3))
                      Lam _pv2 => (Lam ((mapVars (extendMap _pv0)) _pv2))
                      V _pv2 => (V (_pv0 _pv2))
                    in let extendSubst = \_pv0. \_pv1.
                      case _pv1 of
                        FS _pv2 => ((mapVars FS) (_pv0 _pv2))
                        FZ => (V FZ)
                      in let substVars = \_pv0. \_pv1.
                        case _pv1 of
                          App _pv2 _pv3 => ((App ((substVars _pv0) _pv2)) ((substVars _pv0) _pv3))
                          Lam _pv2 => (Lam ((substVars (extendSubst _pv0)) _pv2))
                          V _pv2 => (_pv0 _pv2)
                        in let testTm = ((App (Lam ((App (V FZ)) (V (FS FZ))))) (Lam ((App (V (FS FZ))) (V FZ))))
                          in let example1 = ((substVars (env ((VC (Lam (V FZ))) VN))) testTm)
                            in let substTop = \_pv0. \_pv1.
                              case _pv1 of
                                FS _pv2 => (V _pv2)
                                FZ => _pv0
                              in let nf = \_pv0.
                                case _pv0 of
                                  App _pv1 _pv2 => let g = \_pv3.
                                    case _pv3 of
                                      Lam _pv4 => (nf ((substVars (substTop (nf _pv2))) _pv4))
                                      _ => ((App _pv3) (nf _pv2))
                                    in (g (nf _pv1))
                                  Lam _pv1 => (Lam (nf _pv1))
                                  V _pv1 => (V _pv1)
                                in let example2 = (nf testTm)
                                  in let R = constructor 2
                                    in let main = ((R example1) example2)
                                      in main

### Normal forms ###

unerased:
  
  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x :R: Nat) -> Nat
    constructor Fin : (_x15 : Nat) -> Type
    constructor FZ : (n : Nat) -> Fin (S n)
    constructor TT : (_x0 : Nat) -> Type
    constructor V : (n : Nat) -> (_x1 : Fin n) -> TT n
    constructor Lam : (n : Nat) -> (_x2 : TT (S n)) -> TT n
    constructor App : (n : Nat) -> (_x3 : TT n) -> (_x4 : TT n) -> TT n
    constructor Result : Type
    constructor R : (x :R: TT Z) -> (y :R: TT 1) -> Result
  in R (App Z (Lam Z (App 1 (V 1 (FZ Z)) (Lam 1 (V 2 (FZ 1))))) (Lam Z (App 1 (Lam 1 (V 2 (FZ 1))) (V 1 (FZ Z))))) (App 1 (V 1 (FZ Z)) (V 1 (FZ Z)))

erased:
  
  let
    constructor FZ : Fin
    constructor V : (_x1) -> TT
    constructor Lam : (_x2) -> TT
    constructor App : (_x3) -> (_x4) -> TT
    constructor R : (x) -> (y) -> Result
  in R (App (Lam (App (V FZ) (Lam (V FZ)))) (Lam (App (Lam (V FZ)) (V FZ)))) (App (V FZ) (V FZ))

