-- vim: ft=ttstar

### Desugared ###

  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x :R: Nat) -> Nat
    plus : (_x0 : Nat) -> (_x1 : Nat) -> Nat 
      n : Nat
        [plus] Z n = n
      m : Nat n : Nat
        [plus] (S m) n = S (plus m n)
    times : (_x2 : Nat) -> (_x3 : Nat) -> Nat 
      n : Nat
        [times] Z n = Z
      m : Nat n : Nat
        [times] (S m) n = plus n (times m n)
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    not : (_x4 : Bool) -> Bool 
      [not] True = False
      [not] False = True
    constructor Unit : Type
    constructor MkUnit : Unit
    constructor Pair : (_x5 : Type) -> (_x6 : Type) -> Type
    constructor MkPair : (a : Type) -> (b : Type) -> (_x7 : a) -> (_x8 : b) -> Pair a b
    fst : (a : Type) -> (b : Type) -> (_x9 : Pair a b) -> a 
      a : Type b : Type x : a y : b
        [fst] a b ([MkPair] [a] [b] x y) = x
    snd : (a : Type) -> (b : Type) -> (_x10 : Pair a b) -> b 
      a : Type b : Type x : a y : b
        [snd] a b ([MkPair] [a] [b] x y) = y
    constructor Either : (_x11 : Type) -> (_x12 : Type) -> Type
    constructor Left : (a : Type) -> (b : Type) -> (_x13 : a) -> Either a b
    constructor Right : (a : Type) -> (b : Type) -> (_x14 : b) -> Either a b
    id : (a : Type) -> (x : a) -> a = (\a : Type. (\x : a. x))
    constructor Fin : (_x15 : Nat) -> Type
    constructor FZ : (n : Nat) -> Fin (S n)
    constructor FS : (n : Nat) -> (_x16 : Fin n) -> Fin (S n)
    constructor Vect : (_x17 : Nat) -> (_x18 : Type) -> Type
    constructor VN : (a : Type) -> Vect Z a
    constructor VC : (n : Nat) -> (a : Type) -> (x : a) -> (xs : Vect n a) -> Vect (S n) a
    constructor TT : (_x0 : Nat) -> Type
    constructor V : (n : Nat) -> (_x1 : Fin n) -> TT n
    constructor Lam : (n : Nat) -> (_x2 : TT (S n)) -> TT n
    constructor App : (n : Nat) -> (_x3 : TT n) -> (_x4 : TT n) -> TT n
    env : (m : Nat) -> (n : Nat) -> (xs : Vect m (TT n)) -> (_x5 : Fin m) -> TT n 
      m : Nat n : Nat x : TT n xs : Vect m (TT n)
        [env] [S m] n (VC [m] [TT n] x xs) (FZ m) = x
      m : Nat n : Nat x : TT n xs : Vect m (TT n) i : Fin m
        [env] [S m] n (VC [m] [TT n] x xs) (FS m i) = env m n xs i
    extendMap : (m : Nat) -> (n : Nat) -> (_x6 : (_x7 : Fin m) -> Fin n) -> (_x8 : Fin (S m)) -> Fin (S n) 
      m : Nat n : Nat f : (_x9 : Fin m) -> Fin n
        [extendMap] m n f (FZ [m]) = FZ n
      m : Nat n : Nat f : (_x10 : Fin m) -> Fin n i : Fin m
        [extendMap] m n f (FS [m] i) = FS n (f i)
    mapVars : (m : Nat) -> (n : Nat) -> (_x11 : (_x12 : Fin m) -> Fin n) -> (_x13 : TT m) -> TT n 
      m : Nat n : Nat f : (_x14 : Fin m) -> Fin n i : Fin m
        [mapVars] m n f (V [m] i) = V n (f i)
      m : Nat n : Nat f : (_x15 : Fin m) -> Fin n x : TT (S m)
        [mapVars] m n f (Lam [m] x) = Lam n (mapVars (S m) (S n) (extendMap m n f) x)
      m : Nat n : Nat f : (_x16 : Fin m) -> Fin n g : TT m x : TT m
        [mapVars] m n f (App [m] g x) = App n (mapVars m n f g) (mapVars m n f x)
    extendSubst : (m : Nat) -> (n : Nat) -> (_x17 : (_x18 : Fin m) -> TT n) -> (_x19 : Fin (S m)) -> TT (S n) 
      m : Nat n : Nat f : (_x20 : Fin m) -> TT n
        [extendSubst] m n f (FZ [m]) = V (S n) (FZ n)
      m : Nat n : Nat f : (_x21 : Fin m) -> TT n i : Fin m
        [extendSubst] m n f (FS [m] i) = mapVars n (S n) (FS n) (f i)
    substVars : (m : Nat) -> (n : Nat) -> (_x22 : (_x23 : Fin m) -> TT n) -> (_x24 : TT m) -> TT n 
      m : Nat n : Nat f : (_x25 : Fin m) -> TT n i : Fin m
        [substVars] m n f (V [m] i) = f i
      m : Nat n : Nat f : (_x26 : Fin m) -> TT n x : TT (S m)
        [substVars] m n f (Lam [m] x) = Lam n (substVars (S m) (S n) (extendSubst m n f) x)
      m : Nat n : Nat f : (_x27 : Fin m) -> TT n g : TT m x : TT m
        [substVars] m n f (App [m] g x) = App n (substVars m n f g) (substVars m n f x)
    testTm : TT 1 = App 1 (Lam 1 (App 2 (V 2 (FZ 1)) (V 2 (FS 1 (FZ Z))))) (Lam 1 (App 2 (V 2 (FS 1 (FZ Z))) (V 2 (FZ 1))))
    example1 : TT Z = substVars 1 Z (env 1 Z (VC Z (TT Z) (Lam Z (V 1 (FZ Z))) (VN (TT Z)))) testTm
    substTop : (n : Nat) -> (_x28 : TT n) -> (_x29 : Fin (S n)) -> TT n 
      n : Nat tm : TT n
        [substTop] n tm (FZ [n]) = tm
      n : Nat tm : TT n i : Fin n
        [substTop] n tm (FS [n] i) = V n i
    nf : (m : Nat) -> (_x30 : TT m) -> TT m 
      m : Nat i : Fin m
        [nf] m (V [m] i) = V m i
      m : Nat x : TT (S m)
        [nf] m (Lam [m] x) = Lam m (nf (S m) x)
      m : Nat f : TT m x : TT m
        [nf] m (App [m] f x) = 
          let g : (_x31 : TT m) -> TT m 
            y : TT (S m)
              [g] (Lam [m] y) = nf m (substVars (S m) m (substTop m (nf m x)) y)
            f' : TT m
              [g] f' = App m f' (nf m x)
          in g (nf m f)
    example2 : TT 1 = nf 1 testTm
    constructor Result : Type
    constructor R : (x :R: TT Z) -> (y :R: TT 1) -> Result
    main : Result = R example1 example2
  in main

### Evarified ###

  let
    constructor Nat :1: Type
    constructor Z :2: Nat
    constructor S :3: (x :R: Nat) -> Nat
    plus :4: (_x0 :5: Nat) -> (_x1 :6: Nat) -> Nat 
      n :7: Nat
        [plus] -9- Z -8- n = n
      m :10: Nat n :11: Nat
        [plus] -13- (S -14- m) -12- n = S -15- (plus -17- m -16- n)
    times :18: (_x2 :19: Nat) -> (_x3 :20: Nat) -> Nat 
      n :21: Nat
        [times] -23- Z -22- n = Z
      m :24: Nat n :25: Nat
        [times] -27- (S -28- m) -26- n = plus -30- n -29- (times -32- m -31- n)
    constructor Bool :33: Type
    constructor True :34: Bool
    constructor False :35: Bool
    not :36: (_x4 :37: Bool) -> Bool 
      [not] -38- True = False
      [not] -39- False = True
    constructor Unit :40: Type
    constructor MkUnit :41: Unit
    constructor Pair :42: (_x5 :43: Type) -> (_x6 :44: Type) -> Type
    constructor MkPair :45: (a :46: Type) -> (b :47: Type) -> (_x7 :48: a) -> (_x8 :49: b) -> Pair -51- a -50- b
    fst :52: (a :53: Type) -> (b :54: Type) -> (_x9 :55: Pair -57- a -56- b) -> a 
      a :58: Type b :59: Type x :60: a y :61: b
        [fst] -64- a -63- b -62- ([MkPair] -68- [a] -67- [b] -66- x -65- y) = x
    snd :69: (a :70: Type) -> (b :71: Type) -> (_x10 :72: Pair -74- a -73- b) -> b 
      a :75: Type b :76: Type x :77: a y :78: b
        [snd] -81- a -80- b -79- ([MkPair] -85- [a] -84- [b] -83- x -82- y) = y
    constructor Either :86: (_x11 :87: Type) -> (_x12 :88: Type) -> Type
    constructor Left :89: (a :90: Type) -> (b :91: Type) -> (_x13 :92: a) -> Either -94- a -93- b
    constructor Right :95: (a :96: Type) -> (b :97: Type) -> (_x14 :98: b) -> Either -100- a -99- b
    id :101: (a :102: Type) -> (x :103: a) -> a = (\a :104: Type. (\x :105: a. x))
    constructor Fin :106: (_x15 :107: Nat) -> Type
    constructor FZ :108: (n :109: Nat) -> Fin -110- (S -111- n)
    constructor FS :112: (n :113: Nat) -> (_x16 :114: Fin -115- n) -> Fin -116- (S -117- n)
    constructor Vect :118: (_x17 :119: Nat) -> (_x18 :120: Type) -> Type
    constructor VN :121: (a :122: Type) -> Vect -124- Z -123- a
    constructor VC :125: (n :126: Nat) -> (a :127: Type) -> (x :128: a) -> (xs :129: Vect -131- n -130- a) -> Vect -133- (S -134- n) -132- a
    constructor TT :135: (_x0 :136: Nat) -> Type
    constructor V :137: (n :138: Nat) -> (_x1 :139: Fin -140- n) -> TT -141- n
    constructor Lam :142: (n :143: Nat) -> (_x2 :144: TT -145- (S -146- n)) -> TT -147- n
    constructor App :148: (n :149: Nat) -> (_x3 :150: TT -151- n) -> (_x4 :152: TT -153- n) -> TT -154- n
    env :155: (m :156: Nat) -> (n :157: Nat) -> (xs :158: Vect -160- m -159- (TT -161- n)) -> (_x5 :162: Fin -163- m) -> TT -164- n 
      m :165: Nat n :166: Nat x :167: TT -168- n xs :169: Vect -171- m -170- (TT -172- n)
        [env] -176- [S -177- m] -175- n -174- (VC -181- [m] -180- [TT -182- n] -179- x -178- xs) -173- (FZ -183- m) = x
      m :184: Nat n :185: Nat x :186: TT -187- n xs :188: Vect -190- m -189- (TT -191- n) i :192: Fin -193- m
        [env] -197- [S -198- m] -196- n -195- (VC -202- [m] -201- [TT -203- n] -200- x -199- xs) -194- (FS -205- m -204- i) = env -209- m -208- n -207- xs -206- i
    extendMap :210: (m :211: Nat) -> (n :212: Nat) -> (_x6 :213: (_x7 :214: Fin -215- m) -> Fin -216- n) -> (_x8 :217: Fin -218- (S -219- m)) -> Fin -220- (S -221- n) 
      m :222: Nat n :223: Nat f :224: (_x9 :225: Fin -226- m) -> Fin -227- n
        [extendMap] -231- m -230- n -229- f -228- (FZ -232- [m]) = FZ -233- n
      m :234: Nat n :235: Nat f :236: (_x10 :237: Fin -238- m) -> Fin -239- n i :240: Fin -241- m
        [extendMap] -245- m -244- n -243- f -242- (FS -247- [m] -246- i) = FS -249- n -248- (f -250- i)
    mapVars :251: (m :252: Nat) -> (n :253: Nat) -> (_x11 :254: (_x12 :255: Fin -256- m) -> Fin -257- n) -> (_x13 :258: TT -259- m) -> TT -260- n 
      m :261: Nat n :262: Nat f :263: (_x14 :264: Fin -265- m) -> Fin -266- n i :267: Fin -268- m
        [mapVars] -272- m -271- n -270- f -269- (V -274- [m] -273- i) = V -276- n -275- (f -277- i)
      m :278: Nat n :279: Nat f :280: (_x15 :281: Fin -282- m) -> Fin -283- n x :284: TT -285- (S -286- m)
        [mapVars] -290- m -289- n -288- f -287- (Lam -292- [m] -291- x) = Lam -294- n -293- (mapVars -298- (S -299- m) -297- (S -300- n) -296- (extendMap -303- m -302- n -301- f) -295- x)
      m :304: Nat n :305: Nat f :306: (_x16 :307: Fin -308- m) -> Fin -309- n g :310: TT -311- m x :312: TT -313- m
        [mapVars] -317- m -316- n -315- f -314- (App -320- [m] -319- g -318- x) = App -323- n -322- (mapVars -327- m -326- n -325- f -324- g) -321- (mapVars -331- m -330- n -329- f -328- x)
    extendSubst :332: (m :333: Nat) -> (n :334: Nat) -> (_x17 :335: (_x18 :336: Fin -337- m) -> TT -338- n) -> (_x19 :339: Fin -340- (S -341- m)) -> TT -342- (S -343- n) 
      m :344: Nat n :345: Nat f :346: (_x20 :347: Fin -348- m) -> TT -349- n
        [extendSubst] -353- m -352- n -351- f -350- (FZ -354- [m]) = V -356- (S -357- n) -355- (FZ -358- n)
      m :359: Nat n :360: Nat f :361: (_x21 :362: Fin -363- m) -> TT -364- n i :365: Fin -366- m
        [extendSubst] -370- m -369- n -368- f -367- (FS -372- [m] -371- i) = mapVars -376- n -375- (S -377- n) -374- (FS -378- n) -373- (f -379- i)
    substVars :380: (m :381: Nat) -> (n :382: Nat) -> (_x22 :383: (_x23 :384: Fin -385- m) -> TT -386- n) -> (_x24 :387: TT -388- m) -> TT -389- n 
      m :390: Nat n :391: Nat f :392: (_x25 :393: Fin -394- m) -> TT -395- n i :396: Fin -397- m
        [substVars] -401- m -400- n -399- f -398- (V -403- [m] -402- i) = f -404- i
      m :405: Nat n :406: Nat f :407: (_x26 :408: Fin -409- m) -> TT -410- n x :411: TT -412- (S -413- m)
        [substVars] -417- m -416- n -415- f -414- (Lam -419- [m] -418- x) = Lam -421- n -420- (substVars -425- (S -426- m) -424- (S -427- n) -423- (extendSubst -430- m -429- n -428- f) -422- x)
      m :431: Nat n :432: Nat f :433: (_x27 :434: Fin -435- m) -> TT -436- n g :437: TT -438- m x :439: TT -440- m
        [substVars] -444- m -443- n -442- f -441- (App -447- [m] -446- g -445- x) = App -450- n -449- (substVars -454- m -453- n -452- f -451- g) -448- (substVars -458- m -457- n -456- f -455- x)
    testTm :459: TT -460- 1 = App -464- 1 -463- (Lam -467- 1 -466- (App -471- 2 -470- (V -475- 2 -474- (FZ -478- 1)) -469- (V -481- 2 -480- (FS -485- 1 -484- (FZ -487- Z))))) -462- (Lam -489- 1 -488- (App -493- 2 -492- (V -497- 2 -496- (FS -501- 1 -500- (FZ -503- Z))) -491- (V -505- 2 -504- (FZ -508- 1))))
    example1 :510: TT -511- Z = substVars -515- 1 -514- Z -513- (env -519- 1 -518- Z -517- (VC -524- Z -523- (TT -525- Z) -522- (Lam -527- Z -526- (V -529- 1 -528- (FZ -531- Z))) -521- (VN -532- (TT -533- Z)))) -512- testTm
    substTop :534: (n :535: Nat) -> (_x28 :536: TT -537- n) -> (_x29 :538: Fin -539- (S -540- n)) -> TT -541- n 
      n :542: Nat tm :543: TT -544- n
        [substTop] -547- n -546- tm -545- (FZ -548- [n]) = tm
      n :549: Nat tm :550: TT -551- n i :552: Fin -553- n
        [substTop] -556- n -555- tm -554- (FS -558- [n] -557- i) = V -560- n -559- i
    nf :561: (m :562: Nat) -> (_x30 :563: TT -564- m) -> TT -565- m 
      m :566: Nat i :567: Fin -568- m
        [nf] -570- m -569- (V -572- [m] -571- i) = V -574- m -573- i
      m :575: Nat x :576: TT -577- (S -578- m)
        [nf] -580- m -579- (Lam -582- [m] -581- x) = Lam -584- m -583- (nf -586- (S -587- m) -585- x)
      m :588: Nat f :589: TT -590- m x :591: TT -592- m
        [nf] -594- m -593- (App -597- [m] -596- f -595- x) = 
          let g :598: (_x31 :599: TT -600- m) -> TT -601- m 
            y :602: TT -603- (S -604- m)
              [g] -605- (Lam -607- [m] -606- y) = nf -609- m -608- (substVars -613- (S -614- m) -612- m -611- (substTop -616- m -615- (nf -618- m -617- x)) -610- y)
            f' :619: TT -620- m
              [g] -621- f' = App -624- m -623- f' -622- (nf -626- m -625- x)
          in g -627- (nf -629- m -628- f)
    example2 :630: TT -631- 1 = nf -634- 1 -633- testTm
    constructor Result :636: Type
    constructor R :637: (x :R: TT -638- Z) -> (y :R: TT -639- 1) -> Result
    main :641: Result = R -643- example1 -642- example2
  in main

### Constraints ###

[] -> [108,112,114,121,125,128,129,137,139,142,144,148,150,152,155,158,162,167,173,174,178,179,188,192,194,195,199,200,204,206,207,210,213,214,217,225,228,229,236,237,240,242,243,246,248,250,251,254,255,258,263,264,267,269,270,273,275,277,280,281,284,287,288,291,293,295,296,301,306,307,310,312,314,315,318,319,321,322,324,325,328,329,332,335,336,339,347,350,351,355,361,362,365,367,368,371,373,374,379,380,383,384,387,392,393,396,398,399,402,404,407,408,411,414,415,418,420,422,423,428,433,434,437,439,441,442,445,446,448,449,451,452,455,456,459,462,463,466,469,470,474,480,484,488,491,492,496,500,504,510,512,513,517,521,522,526,528,534,536,538,543,545,546,552,554,555,557,559,561,563,567,569,571,573,576,579,581,583,585,589,591,593,595,596,598,599,602,605,606,608,610,611,615,617,619,621,622,623,625,627,628,630,633,637,642,643,R]
[109] -> [183,232,233,354,358,478,487,503,508,531,548]
[110] -> [115,140,163,218,220,340,539]
[110,111] -> [177,219,341,357,476,486,502,506,530,540]
[110,111,477] -> [479]
[110,111,479] -> [477]
[110,111,507] -> [509]
[110,111,509] -> [507]
[110,177] -> [111]
[110,219] -> [111]
[110,341] -> [111]
[110,357] -> [111]
[110,476] -> [111]
[110,486] -> [111]
[110,502] -> [111]
[110,506] -> [111]
[110,530] -> [111]
[110,540] -> [111]
[111,220] -> [221]
[113] -> [205,247,249,372,378,485,501,558]
[115] -> [110,193,239,241,256,366,553]
[116] -> [140,163,218,220,257,340,539]
[116,117] -> [198,219,341,377,482,498,540]
[116,117,483] -> [486]
[116,117,486] -> [483]
[116,117,499] -> [502]
[116,117,502] -> [499]
[116,198] -> [117]
[116,219] -> [117]
[116,341] -> [117]
[116,377] -> [117]
[116,482] -> [117]
[116,498] -> [117]
[116,540] -> [117]
[117,220] -> [221]
[122] -> [532]
[123] -> [130]
[123,525] -> [533]
[123,533] -> [525]
[124] -> [131]
[126] -> [181,202,524]
[127] -> [180,201,523]
[130] -> [123,170,189]
[131] -> [124,171,190]
[132] -> [159]
[132,161] -> [182,203,525]
[132,182] -> [161]
[132,203] -> [161]
[132,525] -> [161]
[133] -> [160]
[133,134] -> [177,198,520]
[133,177] -> [134]
[133,198] -> [134]
[133,520] -> [134]
[136,180] -> [182]
[136,201] -> [203]
[136,523] -> [525]
[136,532] -> [533]
[138] -> [274,276,356,403,475,481,497,505,529,560,572,574]
[140] -> [110,116,266,268,397,553,568]
[141] -> [145,151,153,259,260,342,388,541,564,565]
[141,146] -> [530]
[141,472] -> [476,482]
[141,473,476] -> [477]
[141,473,482] -> [483]
[141,476] -> [472]
[141,476,477] -> [473]
[141,482] -> [472]
[141,482,483] -> [473]
[141,494] -> [498,506]
[141,495,498] -> [499]
[141,495,506] -> [507]
[141,498] -> [494]
[141,498,499] -> [495]
[141,506] -> [494]
[141,506,507] -> [495]
[141,530] -> [146]
[143] -> [292,294,419,421,467,489,527,582,584,607]
[145] -> [141,154,260,285,389,412,565,577,603]
[146,154] -> [472,494]
[146,260] -> [300]
[146,285] -> [286]
[146,389] -> [427]
[146,412] -> [413]
[146,565] -> [587]
[146,577] -> [578]
[146,603] -> [604]
[147] -> [151,153,259,260,388,389,525,564,565,600]
[147,465] -> [468,490]
[147,468] -> [465]
[147,490] -> [465]
[149] -> [320,323,447,450,464,471,493,597,624]
[151] -> [141,147,260,311,389,438,590,620]
[153] -> [141,147,260,313,389,440,565,592]
[154] -> [145,259,260,388,389,460,564,601]
[154,468,472] -> [473]
[154,472] -> [146]
[154,472,473] -> [468]
[154,490,494] -> [495]
[154,494] -> [146]
[154,494,495] -> [490]
[156] -> [176,197,209,519]
[157] -> [175,196,208,518]
[159] -> [132,189]
[160] -> [133,190]
[161,189] -> [191]
[163] -> [110,116,193,385]
[163,516] -> [520]
[163,520] -> [516]
[164] -> [164,168,386]
[165] -> [183]
[166] -> [175]
[168] -> [164,182]
[169] -> [178]
[170] -> [130]
[170,172] -> [182]
[170,182] -> [172]
[171] -> [131]
[175] -> [157,R]
[176] -> [3,156,177,R]
[176,177] -> [165,R]
[180] -> [127,135,174]
[180,182] -> [136,166]
[181] -> [126,165,174]
[182] -> [168]
[183] -> [109,173]
[184] -> [205]
[185] -> [196]
[186] -> [200]
[187] -> [203]
[189] -> [130,159]
[189,191] -> [161,203]
[189,203] -> [191]
[190] -> [131,160]
[193] -> [115,163]
[196] -> [157,R]
[197] -> [3,156,198,R]
[197,198] -> [184,R]
[201] -> [127,135,195]
[201,203] -> [136,185]
[202] -> [126,184,195]
[203] -> [187]
[205] -> [113,194]
[208] -> [157,185]
[209] -> [156,184]
[211] -> [231,245,303]
[212] -> [230,244,302]
[215] -> [226,238,282]
[216] -> [227,239,283]
[218] -> [110,116,256]
[218,219] -> [299]
[218,299] -> [219]
[220] -> [110,116,257]
[220,221] -> [111,117,300]
[220,300] -> [221]
[222] -> [231]
[223] -> [230]
[224] -> [229]
[226] -> [215]
[227] -> [216]
[230] -> [212,R]
[231] -> [211,R]
[232] -> [109,222,228]
[233] -> [109,223]
[234] -> [245]
[235] -> [244]
[238] -> [215,241]
[239] -> [115,216]
[241] -> [115,238]
[244] -> [212,R]
[245] -> [211,R]
[247] -> [113,234,242]
[249] -> [113,235]
[252] -> [272,290,298,317,327,331,376]
[253] -> [271,289,297,316,326,330,375]
[256] -> [115,218,265,282,308]
[257] -> [116,220,266,283,309]
[259] -> [141,147,154,285,311,313,364]
[260] -> [141,145,147,151,153,154,342]
[260,300] -> [146]
[261] -> [272]
[262] -> [271]
[265] -> [256,268]
[266] -> [140,257]
[268] -> [140,265]
[271] -> [253,R]
[272] -> [252,R]
[274] -> [138,261,269]
[276] -> [138,262]
[278] -> [290]
[279] -> [289]
[282] -> [215,256]
[283] -> [216,257]
[285] -> [145,259]
[285,286] -> [146,299]
[285,299] -> [286]
[289] -> [253,R]
[290] -> [252,R]
[292] -> [143,278,287]
[294] -> [143,279]
[297] -> [3,253,300]
[297,300] -> [279,R]
[298] -> [3,252,299]
[298,299] -> [278,R]
[302] -> [212,279]
[303] -> [211,278]
[304] -> [317]
[305] -> [316]
[308] -> [256]
[309] -> [257]
[311] -> [151,259]
[313] -> [153,259]
[316] -> [253,R]
[317] -> [252,R]
[320] -> [149,304,314]
[323] -> [149,305]
[326] -> [253,305]
[327] -> [252,304]
[330] -> [253,305]
[331] -> [252,304]
[333] -> [353,370,430]
[334] -> [352,369,429]
[337] -> [348,363,409]
[338] -> [349,364,410]
[340] -> [110,116,385]
[340,341] -> [426]
[340,426] -> [341]
[342] -> [141,260,386]
[342,343] -> [357,377,427]
[342,357] -> [343]
[342,377] -> [343]
[342,427] -> [343]
[344] -> [353]
[345] -> [352]
[346] -> [351]
[348] -> [337]
[349] -> [338]
[352] -> [334,R]
[353] -> [333,R]
[354] -> [109,344,350]
[356] -> [3,138,357]
[356,357] -> [345,R]
[358] -> [109,345]
[359] -> [370]
[360] -> [369]
[363] -> [337,366]
[364] -> [259,338]
[366] -> [115,363]
[369] -> [334,R]
[370] -> [333,R]
[372] -> [113,359,367]
[375] -> [3,253,377]
[375,377] -> [360,R]
[376] -> [252,360]
[378] -> [113,360]
[381] -> [401,417,425,444,454,458,515,613]
[382] -> [400,416,424,443,453,457,514,612]
[385] -> [163,340,394,409,435,539]
[386] -> [164,342,395,410,436,541]
[388] -> [141,147,154,412,438,440,460,603]
[389] -> [145,147,151,153,154,395,511,564]
[389,427] -> [146]
[390] -> [401]
[391] -> [400]
[394] -> [385,397]
[395] -> [386,389]
[397] -> [140,394]
[400] -> [382,R]
[401] -> [381,R]
[403] -> [138,390,398]
[405] -> [417]
[406] -> [416]
[409] -> [337,385]
[410] -> [338,386]
[412] -> [145,388]
[412,413] -> [146,426]
[412,426] -> [413]
[416] -> [382,R]
[417] -> [381,R]
[419] -> [143,405,414]
[421] -> [143,406]
[424] -> [3,382,427]
[424,427] -> [406,R]
[425] -> [3,381,426]
[425,426] -> [405,R]
[429] -> [334,406]
[430] -> [333,405]
[431] -> [444]
[432] -> [443]
[435] -> [385]
[436] -> [386]
[438] -> [151,388]
[440] -> [153,388]
[443] -> [382,R]
[444] -> [381,R]
[447] -> [149,431,441]
[450] -> [149,432]
[453] -> [382,432]
[454] -> [381,431]
[457] -> [382,432]
[458] -> [381,431]
[460] -> [154,388,564]
[460,461] -> [465,516,635]
[460,465] -> [461]
[460,516] -> [461]
[460,635] -> [461]
[464] -> [3,149,465]
[464,465] -> [2,R]
[467] -> [3,143,468]
[467,468] -> [2,R]
[471] -> [3,149,472]
[471,472] -> [3,473,R]
[471,472,473] -> [2,R]
[475] -> [3,138,476]
[475,476] -> [3,477,R]
[475,476,477] -> [2,R]
[478] -> [3,109,479]
[478,479] -> [2,R]
[481] -> [3,138,482]
[481,482] -> [3,483,R]
[481,482,483] -> [2,R]
[485] -> [3,113,486]
[485,486] -> [2,R]
[487] -> [2,109]
[489] -> [3,143,490]
[489,490] -> [2,R]
[493] -> [3,149,494]
[493,494] -> [3,495,R]
[493,494,495] -> [2,R]
[497] -> [3,138,498]
[497,498] -> [3,499,R]
[497,498,499] -> [2,R]
[501] -> [3,113,502]
[501,502] -> [2,R]
[503] -> [2,109]
[505] -> [3,138,506]
[505,506] -> [3,507,R]
[505,506,507] -> [2,R]
[508] -> [3,109,509]
[508,509] -> [2,R]
[511] -> [389,638]
[514] -> [2,382]
[515] -> [3,381,516]
[515,516] -> [2,R]
[518] -> [2,157]
[519] -> [3,156,520]
[519,520] -> [2,R]
[523] -> [127,135]
[523,525] -> [2,136]
[524] -> [2,126]
[525] -> [147]
[527] -> [2,143]
[529] -> [3,138,530]
[529,530] -> [2,R]
[531] -> [2,109]
[532] -> [122,135]
[532,533] -> [2,136]
[535] -> [547,556,616]
[537] -> [544,551,565]
[539] -> [110,116,385]
[539,540] -> [614]
[539,614] -> [540]
[541] -> [141,386,544]
[542] -> [547]
[544] -> [537,541]
[547] -> [535,R]
[548] -> [109,542,545]
[549] -> [556]
[550] -> [555]
[551] -> [537]
[553] -> [115,140]
[556] -> [535,R]
[558] -> [113,549,554]
[560] -> [138,549]
[562] -> [570,580,586,594,609,618,626,629,634]
[564] -> [141,147,154,389,460,577,590,592]
[565] -> [141,145,147,153,537,600,601,631]
[565,587] -> [146]
[566] -> [570]
[568] -> [140]
[570] -> [562,R]
[572] -> [138,566,569]
[574] -> [138,566]
[575] -> [580]
[577] -> [145,564]
[577,578] -> [146,587]
[577,587] -> [578]
[580] -> [562,R]
[582] -> [143,575,579]
[584] -> [143,575]
[586] -> [3,562,587]
[586,587] -> [575,R]
[588] -> [594]
[590] -> [151,564]
[592] -> [153,564]
[594] -> [562,R]
[597] -> [149,588,593]
[600] -> [147,565,620]
[601] -> [154,565]
[603] -> [145,388]
[603,604] -> [146,614]
[603,614] -> [604]
[607] -> [143,588,605]
[609] -> [562,588]
[612] -> [382,588]
[613] -> [3,381,614]
[613,614] -> [588,R]
[616] -> [535,588]
[618] -> [562,588]
[620] -> [151,600]
[624] -> [149,588]
[626] -> [562,588]
[629] -> [562,588]
[631] -> [565,639]
[631,632] -> [635,640]
[631,635] -> [632]
[631,640] -> [632]
[634] -> [3,562,635]
[634,635] -> [2,R]
[638] -> [511]
[639] -> [631]
[R] -> [641]

### Solution ###

[108,112,114,121,125,128,129,137,139,142,144,148,150,152,155,158,162,167,173,174,178,179,188,192,194,195,199,200,204,206,207,210,213,214,217,225,228,229,236,237,240,242,243,246,248,250,251,254,255,258,263,264,267,269,270,273,275,277,280,281,284,287,288,291,293,295,296,301,306,307,310,312,314,315,318,319,321,322,324,325,328,329,332,335,336,339,347,350,351,355,361,362,365,367,368,371,373,374,379,380,383,384,387,392,393,396,398,399,402,404,407,408,411,414,415,418,420,422,423,428,433,434,437,439,441,442,445,446,448,449,451,452,455,456,459,462,463,466,469,470,474,480,484,488,491,492,496,500,504,510,512,513,517,521,522,526,528,534,536,538,543,545,546,552,554,555,557,559,561,563,567,569,571,573,576,579,581,583,585,589,591,593,595,596,598,599,602,605,606,608,610,611,615,617,619,621,622,623,625,627,628,630,633,637,641,642,643,R]

### Annotated ###

  let
    constructor Nat :E: Type
    constructor Z :E: Nat
    constructor S :E: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      n :E: Nat
        [plus] -E- Z -E- n = n
      m :E: Nat n :E: Nat
        [plus] -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    times :E: (_x2 :E: Nat) -> (_x3 :E: Nat) -> Nat 
      n :E: Nat
        [times] -E- Z -E- n = Z
      m :E: Nat n :E: Nat
        [times] -E- (S -E- m) -E- n = plus -E- n -E- (times -E- m -E- n)
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    not :E: (_x4 :E: Bool) -> Bool 
      [not] -E- True = False
      [not] -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :E: Unit
    constructor Pair :E: (_x5 :E: Type) -> (_x6 :E: Type) -> Type
    constructor MkPair :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: a) -> (_x8 :E: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x9 :E: Pair -E- a -E- b) -> a 
      a :E: Type b :E: Type x :E: a y :E: b
        [fst] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = x
    snd :E: (a :E: Type) -> (b :E: Type) -> (_x10 :E: Pair -E- a -E- b) -> b 
      a :E: Type b :E: Type x :E: a y :E: b
        [snd] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = y
    constructor Either :E: (_x11 :E: Type) -> (_x12 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x13 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x14 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x15 :E: Nat) -> Type
    constructor FZ :R: (n :E: Nat) -> Fin -E- (S -E- n)
    constructor FS :R: (n :E: Nat) -> (_x16 :R: Fin -E- n) -> Fin -E- (S -E- n)
    constructor Vect :E: (_x17 :E: Nat) -> (_x18 :E: Type) -> Type
    constructor VN :R: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :R: (n :E: Nat) -> (a :E: Type) -> (x :R: a) -> (xs :R: Vect -E- n -E- a) -> Vect -E- (S -E- n) -E- a
    constructor TT :E: (_x0 :E: Nat) -> Type
    constructor V :R: (n :E: Nat) -> (_x1 :R: Fin -E- n) -> TT -E- n
    constructor Lam :R: (n :E: Nat) -> (_x2 :R: TT -E- (S -E- n)) -> TT -E- n
    constructor App :R: (n :E: Nat) -> (_x3 :R: TT -E- n) -> (_x4 :R: TT -E- n) -> TT -E- n
    env :R: (m :E: Nat) -> (n :E: Nat) -> (xs :R: Vect -E- m -E- (TT -E- n)) -> (_x5 :R: Fin -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat x :R: TT -E- n xs :E: Vect -E- m -E- (TT -E- n)
        [env] -E- [S -E- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FZ -E- m) = x
      m :E: Nat n :E: Nat x :E: TT -E- n xs :R: Vect -E- m -E- (TT -E- n) i :R: Fin -E- m
        [env] -E- [S -E- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FS -E- m -R- i) = env -E- m -E- n -R- xs -R- i
    extendMap :R: (m :E: Nat) -> (n :E: Nat) -> (_x6 :R: (_x7 :R: Fin -E- m) -> Fin -E- n) -> (_x8 :R: Fin -E- (S -E- m)) -> Fin -E- (S -E- n) 
      m :E: Nat n :E: Nat f :E: (_x9 :R: Fin -E- m) -> Fin -E- n
        [extendMap] -E- m -E- n -R- f -R- (FZ -E- [m]) = FZ -E- n
      m :E: Nat n :E: Nat f :R: (_x10 :R: Fin -E- m) -> Fin -E- n i :R: Fin -E- m
        [extendMap] -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = FS -E- n -R- (f -R- i)
    mapVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x11 :R: (_x12 :R: Fin -E- m) -> Fin -E- n) -> (_x13 :R: TT -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat f :R: (_x14 :R: Fin -E- m) -> Fin -E- n i :R: Fin -E- m
        [mapVars] -E- m -E- n -R- f -R- (V -E- [m] -R- i) = V -E- n -R- (f -R- i)
      m :E: Nat n :E: Nat f :R: (_x15 :R: Fin -E- m) -> Fin -E- n x :R: TT -E- (S -E- m)
        [mapVars] -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (mapVars -E- (S -E- m) -E- (S -E- n) -R- (extendMap -E- m -E- n -R- f) -R- x)
      m :E: Nat n :E: Nat f :R: (_x16 :R: Fin -E- m) -> Fin -E- n g :R: TT -E- m x :R: TT -E- m
        [mapVars] -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (mapVars -E- m -E- n -R- f -R- g) -R- (mapVars -E- m -E- n -R- f -R- x)
    extendSubst :R: (m :E: Nat) -> (n :E: Nat) -> (_x17 :R: (_x18 :R: Fin -E- m) -> TT -E- n) -> (_x19 :R: Fin -E- (S -E- m)) -> TT -E- (S -E- n) 
      m :E: Nat n :E: Nat f :E: (_x20 :R: Fin -E- m) -> TT -E- n
        [extendSubst] -E- m -E- n -R- f -R- (FZ -E- [m]) = V -E- (S -E- n) -R- (FZ -E- n)
      m :E: Nat n :E: Nat f :R: (_x21 :R: Fin -E- m) -> TT -E- n i :R: Fin -E- m
        [extendSubst] -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = mapVars -E- n -E- (S -E- n) -R- (FS -E- n) -R- (f -R- i)
    substVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x22 :R: (_x23 :R: Fin -E- m) -> TT -E- n) -> (_x24 :R: TT -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat f :R: (_x25 :R: Fin -E- m) -> TT -E- n i :R: Fin -E- m
        [substVars] -E- m -E- n -R- f -R- (V -E- [m] -R- i) = f -R- i
      m :E: Nat n :E: Nat f :R: (_x26 :R: Fin -E- m) -> TT -E- n x :R: TT -E- (S -E- m)
        [substVars] -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (substVars -E- (S -E- m) -E- (S -E- n) -R- (extendSubst -E- m -E- n -R- f) -R- x)
      m :E: Nat n :E: Nat f :R: (_x27 :R: Fin -E- m) -> TT -E- n g :R: TT -E- m x :R: TT -E- m
        [substVars] -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (substVars -E- m -E- n -R- f -R- g) -R- (substVars -E- m -E- n -R- f -R- x)
    testTm :R: TT -E- 1 = App -E- 1 -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FZ -E- 1)) -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))) -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (V -E- 2 -R- (FZ -E- 1))))
    example1 :R: TT -E- Z = substVars -E- 1 -E- Z -R- (env -E- 1 -E- Z -R- (VC -E- Z -E- (TT -E- Z) -R- (Lam -E- Z -R- (V -E- 1 -R- (FZ -E- Z))) -R- (VN -E- (TT -E- Z)))) -R- testTm
    substTop :R: (n :E: Nat) -> (_x28 :R: TT -E- n) -> (_x29 :R: Fin -E- (S -E- n)) -> TT -E- n 
      n :E: Nat tm :R: TT -E- n
        [substTop] -E- n -R- tm -R- (FZ -E- [n]) = tm
      n :E: Nat tm :E: TT -E- n i :R: Fin -E- n
        [substTop] -E- n -R- tm -R- (FS -E- [n] -R- i) = V -E- n -R- i
    nf :R: (m :E: Nat) -> (_x30 :R: TT -E- m) -> TT -E- m 
      m :E: Nat i :R: Fin -E- m
        [nf] -E- m -R- (V -E- [m] -R- i) = V -E- m -R- i
      m :E: Nat x :R: TT -E- (S -E- m)
        [nf] -E- m -R- (Lam -E- [m] -R- x) = Lam -E- m -R- (nf -E- (S -E- m) -R- x)
      m :E: Nat f :R: TT -E- m x :R: TT -E- m
        [nf] -E- m -R- (App -E- [m] -R- f -R- x) = 
          let g :R: (_x31 :R: TT -E- m) -> TT -E- m 
            y :R: TT -E- (S -E- m)
              [g] -R- (Lam -E- [m] -R- y) = nf -E- m -R- (substVars -E- (S -E- m) -E- m -R- (substTop -E- m -R- (nf -E- m -R- x)) -R- y)
            f' :R: TT -E- m
              [g] -R- f' = App -E- m -R- f' -R- (nf -E- m -R- x)
          in g -R- (nf -E- m -R- f)
    example2 :R: TT -E- 1 = nf -E- 1 -R- testTm
    constructor Result :E: Type
    constructor R :R: (x :R: TT -E- Z) -> (y :R: TT -E- 1) -> Result
    main :R: Result = R -R- example1 -R- example2
  in main

### Specialised ###

  let
    constructor Nat :E: Type
    constructor Z :E: Nat
    constructor S :E: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      n :E: Nat
        [plus] -E- Z -E- n = n
      m :E: Nat n :E: Nat
        [plus] -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    times :E: (_x2 :E: Nat) -> (_x3 :E: Nat) -> Nat 
      n :E: Nat
        [times] -E- Z -E- n = Z
      m :E: Nat n :E: Nat
        [times] -E- (S -E- m) -E- n = plus -E- n -E- (times -E- m -E- n)
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    not :E: (_x4 :E: Bool) -> Bool 
      [not] -E- True = False
      [not] -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :E: Unit
    constructor Pair :E: (_x5 :E: Type) -> (_x6 :E: Type) -> Type
    constructor MkPair :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: a) -> (_x8 :E: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x9 :E: Pair -E- a -E- b) -> a 
      a :E: Type b :E: Type x :E: a y :E: b
        [fst] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = x
    snd :E: (a :E: Type) -> (b :E: Type) -> (_x10 :E: Pair -E- a -E- b) -> b 
      a :E: Type b :E: Type x :E: a y :E: b
        [snd] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = y
    constructor Either :E: (_x11 :E: Type) -> (_x12 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x13 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x14 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x15 :E: Nat) -> Type
    constructor FZ :R: (n :E: Nat) -> Fin -E- (S -E- n)
    constructor FS :R: (n :E: Nat) -> (_x16 :R: Fin -E- n) -> Fin -E- (S -E- n)
    constructor Vect :E: (_x17 :E: Nat) -> (_x18 :E: Type) -> Type
    constructor VN :R: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :R: (n :E: Nat) -> (a :E: Type) -> (x :R: a) -> (xs :R: Vect -E- n -E- a) -> Vect -E- (S -E- n) -E- a
    constructor TT :E: (_x0 :E: Nat) -> Type
    constructor V :R: (n :E: Nat) -> (_x1 :R: Fin -E- n) -> TT -E- n
    constructor Lam :R: (n :E: Nat) -> (_x2 :R: TT -E- (S -E- n)) -> TT -E- n
    constructor App :R: (n :E: Nat) -> (_x3 :R: TT -E- n) -> (_x4 :R: TT -E- n) -> TT -E- n
    env :R: (m :E: Nat) -> (n :E: Nat) -> (xs :R: Vect -E- m -E- (TT -E- n)) -> (_x5 :R: Fin -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat x :R: TT -E- n xs :E: Vect -E- m -E- (TT -E- n)
        [env] -E- [S -E- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FZ -E- m) = x
      m :E: Nat n :E: Nat x :E: TT -E- n xs :R: Vect -E- m -E- (TT -E- n) i :R: Fin -E- m
        [env] -E- [S -E- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FS -E- m -R- i) = env -E- m -E- n -R- xs -R- i
    extendMap :R: (m :E: Nat) -> (n :E: Nat) -> (_x6 :R: (_x7 :R: Fin -E- m) -> Fin -E- n) -> (_x8 :R: Fin -E- (S -E- m)) -> Fin -E- (S -E- n) 
      m :E: Nat n :E: Nat f :E: (_x9 :R: Fin -E- m) -> Fin -E- n
        [extendMap] -E- m -E- n -R- f -R- (FZ -E- [m]) = FZ -E- n
      m :E: Nat n :E: Nat f :R: (_x10 :R: Fin -E- m) -> Fin -E- n i :R: Fin -E- m
        [extendMap] -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = FS -E- n -R- (f -R- i)
    mapVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x11 :R: (_x12 :R: Fin -E- m) -> Fin -E- n) -> (_x13 :R: TT -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat f :R: (_x14 :R: Fin -E- m) -> Fin -E- n i :R: Fin -E- m
        [mapVars] -E- m -E- n -R- f -R- (V -E- [m] -R- i) = V -E- n -R- (f -R- i)
      m :E: Nat n :E: Nat f :R: (_x15 :R: Fin -E- m) -> Fin -E- n x :R: TT -E- (S -E- m)
        [mapVars] -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (mapVars -E- (S -E- m) -E- (S -E- n) -R- (extendMap -E- m -E- n -R- f) -R- x)
      m :E: Nat n :E: Nat f :R: (_x16 :R: Fin -E- m) -> Fin -E- n g :R: TT -E- m x :R: TT -E- m
        [mapVars] -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (mapVars -E- m -E- n -R- f -R- g) -R- (mapVars -E- m -E- n -R- f -R- x)
    extendSubst :R: (m :E: Nat) -> (n :E: Nat) -> (_x17 :R: (_x18 :R: Fin -E- m) -> TT -E- n) -> (_x19 :R: Fin -E- (S -E- m)) -> TT -E- (S -E- n) 
      m :E: Nat n :E: Nat f :E: (_x20 :R: Fin -E- m) -> TT -E- n
        [extendSubst] -E- m -E- n -R- f -R- (FZ -E- [m]) = V -E- (S -E- n) -R- (FZ -E- n)
      m :E: Nat n :E: Nat f :R: (_x21 :R: Fin -E- m) -> TT -E- n i :R: Fin -E- m
        [extendSubst] -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = mapVars -E- n -E- (S -E- n) -R- (FS -E- n) -R- (f -R- i)
    substVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x22 :R: (_x23 :R: Fin -E- m) -> TT -E- n) -> (_x24 :R: TT -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat f :R: (_x25 :R: Fin -E- m) -> TT -E- n i :R: Fin -E- m
        [substVars] -E- m -E- n -R- f -R- (V -E- [m] -R- i) = f -R- i
      m :E: Nat n :E: Nat f :R: (_x26 :R: Fin -E- m) -> TT -E- n x :R: TT -E- (S -E- m)
        [substVars] -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (substVars -E- (S -E- m) -E- (S -E- n) -R- (extendSubst -E- m -E- n -R- f) -R- x)
      m :E: Nat n :E: Nat f :R: (_x27 :R: Fin -E- m) -> TT -E- n g :R: TT -E- m x :R: TT -E- m
        [substVars] -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (substVars -E- m -E- n -R- f -R- g) -R- (substVars -E- m -E- n -R- f -R- x)
    testTm :R: TT -E- 1 = App -E- 1 -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FZ -E- 1)) -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))) -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (V -E- 2 -R- (FZ -E- 1))))
    example1 :R: TT -E- Z = substVars -E- 1 -E- Z -R- (env -E- 1 -E- Z -R- (VC -E- Z -E- (TT -E- Z) -R- (Lam -E- Z -R- (V -E- 1 -R- (FZ -E- Z))) -R- (VN -E- (TT -E- Z)))) -R- testTm
    substTop :R: (n :E: Nat) -> (_x28 :R: TT -E- n) -> (_x29 :R: Fin -E- (S -E- n)) -> TT -E- n 
      n :E: Nat tm :R: TT -E- n
        [substTop] -E- n -R- tm -R- (FZ -E- [n]) = tm
      n :E: Nat tm :E: TT -E- n i :R: Fin -E- n
        [substTop] -E- n -R- tm -R- (FS -E- [n] -R- i) = V -E- n -R- i
    nf :R: (m :E: Nat) -> (_x30 :R: TT -E- m) -> TT -E- m 
      m :E: Nat i :R: Fin -E- m
        [nf] -E- m -R- (V -E- [m] -R- i) = V -E- m -R- i
      m :E: Nat x :R: TT -E- (S -E- m)
        [nf] -E- m -R- (Lam -E- [m] -R- x) = Lam -E- m -R- (nf -E- (S -E- m) -R- x)
      m :E: Nat f :R: TT -E- m x :R: TT -E- m
        [nf] -E- m -R- (App -E- [m] -R- f -R- x) = 
          let g :R: (_x31 :R: TT -E- m) -> TT -E- m 
            y :R: TT -E- (S -E- m)
              [g] -R- (Lam -E- [m] -R- y) = nf -E- m -R- (substVars -E- (S -E- m) -E- m -R- (substTop -E- m -R- (nf -E- m -R- x)) -R- y)
            f' :R: TT -E- m
              [g] -R- f' = App -E- m -R- f' -R- (nf -E- m -R- x)
          in g -R- (nf -E- m -R- f)
    example2 :R: TT -E- 1 = nf -E- 1 -R- testTm
    constructor Result :E: Type
    constructor R :R: (x :R: TT -E- Z) -> (y :R: TT -E- 1) -> Result
    main :R: Result = R -R- example1 -R- example2
  in main

### Final annotation ###

  let
    constructor Nat :E: Type
    constructor Z :E: Nat
    constructor S :E: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      n :E: Nat
        [plus] -E- Z -E- n = n
      m :E: Nat n :E: Nat
        [plus] -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    times :E: (_x2 :E: Nat) -> (_x3 :E: Nat) -> Nat 
      n :E: Nat
        [times] -E- Z -E- n = Z
      m :E: Nat n :E: Nat
        [times] -E- (S -E- m) -E- n = plus -E- n -E- (times -E- m -E- n)
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    not :E: (_x4 :E: Bool) -> Bool 
      [not] -E- True = False
      [not] -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :E: Unit
    constructor Pair :E: (_x5 :E: Type) -> (_x6 :E: Type) -> Type
    constructor MkPair :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: a) -> (_x8 :E: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x9 :E: Pair -E- a -E- b) -> a 
      a :E: Type b :E: Type x :E: a y :E: b
        [fst] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = x
    snd :E: (a :E: Type) -> (b :E: Type) -> (_x10 :E: Pair -E- a -E- b) -> b 
      a :E: Type b :E: Type x :E: a y :E: b
        [snd] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = y
    constructor Either :E: (_x11 :E: Type) -> (_x12 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x13 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x14 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x15 :E: Nat) -> Type
    constructor FZ :R: (n :E: Nat) -> Fin -E- (S -E- n)
    constructor FS :R: (n :E: Nat) -> (_x16 :R: Fin -E- n) -> Fin -E- (S -E- n)
    constructor Vect :E: (_x17 :E: Nat) -> (_x18 :E: Type) -> Type
    constructor VN :R: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :R: (n :E: Nat) -> (a :E: Type) -> (x :R: a) -> (xs :R: Vect -E- n -E- a) -> Vect -E- (S -E- n) -E- a
    constructor TT :E: (_x0 :E: Nat) -> Type
    constructor V :R: (n :E: Nat) -> (_x1 :R: Fin -E- n) -> TT -E- n
    constructor Lam :R: (n :E: Nat) -> (_x2 :R: TT -E- (S -E- n)) -> TT -E- n
    constructor App :R: (n :E: Nat) -> (_x3 :R: TT -E- n) -> (_x4 :R: TT -E- n) -> TT -E- n
    env :R: (m :E: Nat) -> (n :E: Nat) -> (xs :R: Vect -E- m -E- (TT -E- n)) -> (_x5 :R: Fin -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat x :R: TT -E- n xs :E: Vect -E- m -E- (TT -E- n)
        [env] -E- [S -E- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FZ -E- m) = x
      m :E: Nat n :E: Nat x :E: TT -E- n xs :R: Vect -E- m -E- (TT -E- n) i :R: Fin -E- m
        [env] -E- [S -E- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FS -E- m -R- i) = env -E- m -E- n -R- xs -R- i
    extendMap :R: (m :E: Nat) -> (n :E: Nat) -> (_x6 :R: (_x7 :R: Fin -E- m) -> Fin -E- n) -> (_x8 :R: Fin -E- (S -E- m)) -> Fin -E- (S -E- n) 
      m :E: Nat n :E: Nat f :E: (_x9 :R: Fin -E- m) -> Fin -E- n
        [extendMap] -E- m -E- n -R- f -R- (FZ -E- [m]) = FZ -E- n
      m :E: Nat n :E: Nat f :R: (_x10 :R: Fin -E- m) -> Fin -E- n i :R: Fin -E- m
        [extendMap] -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = FS -E- n -R- (f -R- i)
    mapVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x11 :R: (_x12 :R: Fin -E- m) -> Fin -E- n) -> (_x13 :R: TT -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat f :R: (_x14 :R: Fin -E- m) -> Fin -E- n i :R: Fin -E- m
        [mapVars] -E- m -E- n -R- f -R- (V -E- [m] -R- i) = V -E- n -R- (f -R- i)
      m :E: Nat n :E: Nat f :R: (_x15 :R: Fin -E- m) -> Fin -E- n x :R: TT -E- (S -E- m)
        [mapVars] -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (mapVars -E- (S -E- m) -E- (S -E- n) -R- (extendMap -E- m -E- n -R- f) -R- x)
      m :E: Nat n :E: Nat f :R: (_x16 :R: Fin -E- m) -> Fin -E- n g :R: TT -E- m x :R: TT -E- m
        [mapVars] -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (mapVars -E- m -E- n -R- f -R- g) -R- (mapVars -E- m -E- n -R- f -R- x)
    extendSubst :R: (m :E: Nat) -> (n :E: Nat) -> (_x17 :R: (_x18 :R: Fin -E- m) -> TT -E- n) -> (_x19 :R: Fin -E- (S -E- m)) -> TT -E- (S -E- n) 
      m :E: Nat n :E: Nat f :E: (_x20 :R: Fin -E- m) -> TT -E- n
        [extendSubst] -E- m -E- n -R- f -R- (FZ -E- [m]) = V -E- (S -E- n) -R- (FZ -E- n)
      m :E: Nat n :E: Nat f :R: (_x21 :R: Fin -E- m) -> TT -E- n i :R: Fin -E- m
        [extendSubst] -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = mapVars -E- n -E- (S -E- n) -R- (FS -E- n) -R- (f -R- i)
    substVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x22 :R: (_x23 :R: Fin -E- m) -> TT -E- n) -> (_x24 :R: TT -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat f :R: (_x25 :R: Fin -E- m) -> TT -E- n i :R: Fin -E- m
        [substVars] -E- m -E- n -R- f -R- (V -E- [m] -R- i) = f -R- i
      m :E: Nat n :E: Nat f :R: (_x26 :R: Fin -E- m) -> TT -E- n x :R: TT -E- (S -E- m)
        [substVars] -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (substVars -E- (S -E- m) -E- (S -E- n) -R- (extendSubst -E- m -E- n -R- f) -R- x)
      m :E: Nat n :E: Nat f :R: (_x27 :R: Fin -E- m) -> TT -E- n g :R: TT -E- m x :R: TT -E- m
        [substVars] -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (substVars -E- m -E- n -R- f -R- g) -R- (substVars -E- m -E- n -R- f -R- x)
    testTm :R: TT -E- 1 = App -E- 1 -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FZ -E- 1)) -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))) -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (V -E- 2 -R- (FZ -E- 1))))
    example1 :R: TT -E- Z = substVars -E- 1 -E- Z -R- (env -E- 1 -E- Z -R- (VC -E- Z -E- (TT -E- Z) -R- (Lam -E- Z -R- (V -E- 1 -R- (FZ -E- Z))) -R- (VN -E- (TT -E- Z)))) -R- testTm
    substTop :R: (n :E: Nat) -> (_x28 :R: TT -E- n) -> (_x29 :R: Fin -E- (S -E- n)) -> TT -E- n 
      n :E: Nat tm :R: TT -E- n
        [substTop] -E- n -R- tm -R- (FZ -E- [n]) = tm
      n :E: Nat tm :E: TT -E- n i :R: Fin -E- n
        [substTop] -E- n -R- tm -R- (FS -E- [n] -R- i) = V -E- n -R- i
    nf :R: (m :E: Nat) -> (_x30 :R: TT -E- m) -> TT -E- m 
      m :E: Nat i :R: Fin -E- m
        [nf] -E- m -R- (V -E- [m] -R- i) = V -E- m -R- i
      m :E: Nat x :R: TT -E- (S -E- m)
        [nf] -E- m -R- (Lam -E- [m] -R- x) = Lam -E- m -R- (nf -E- (S -E- m) -R- x)
      m :E: Nat f :R: TT -E- m x :R: TT -E- m
        [nf] -E- m -R- (App -E- [m] -R- f -R- x) = 
          let g :R: (_x31 :R: TT -E- m) -> TT -E- m 
            y :R: TT -E- (S -E- m)
              [g] -R- (Lam -E- [m] -R- y) = nf -E- m -R- (substVars -E- (S -E- m) -E- m -R- (substTop -E- m -R- (nf -E- m -R- x)) -R- y)
            f' :R: TT -E- m
              [g] -R- f' = App -E- m -R- f' -R- (nf -E- m -R- x)
          in g -R- (nf -E- m -R- f)
    example2 :R: TT -E- 1 = nf -E- 1 -R- testTm
    constructor Result :E: Type
    constructor R :R: (x :R: TT -E- Z) -> (y :R: TT -E- 1) -> Result
    main :R: Result = R -R- example1 -R- example2
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor FZ : Fin
    constructor FS : (_x16) -> Fin
    constructor VN : Vect
    constructor VC : (x) -> (xs) -> Vect
    constructor V : (_x1) -> TT
    constructor Lam : (_x2) -> TT
    constructor App : (_x3) -> (_x4) -> TT
    env 
      [_] (VC x _) FZ = x
      [_] (VC _ xs) (FS i) = env xs i
    extendMap 
      [_] _ FZ = FZ
      [_] f (FS i) = FS (f i)
    mapVars 
      [_] f (V i) = V (f i)
      [_] f (Lam x) = Lam (mapVars (extendMap f) x)
      [_] f (App g x) = App (mapVars f g) (mapVars f x)
    extendSubst 
      [_] _ FZ = V FZ
      [_] f (FS i) = mapVars FS (f i)
    substVars 
      [_] f (V i) = f i
      [_] f (Lam x) = Lam (substVars (extendSubst f) x)
      [_] f (App g x) = App (substVars f g) (substVars f x)
    testTm = App (Lam (App (V FZ) (V (FS FZ)))) (Lam (App (V (FS FZ)) (V FZ)))
    example1 = substVars (env (VC (Lam (V FZ)) VN)) testTm
    substTop 
      [_] tm FZ = tm
      [_] _ (FS i) = V i
    nf 
      [_] (V i) = V i
      [_] (Lam x) = Lam (nf x)
      [_] (App f x) = 
        let g 
          [_] (Lam y) = nf (substVars (substTop (nf x)) y)
          [_] f' = App f' (nf x)
        in g (nf f)
    example2 = nf testTm
    constructor R : (x) -> (y) -> Result
    main = R example1 example2
  in main

### Intermediate representation ###

let FZ = constructor 0
  in let FS = constructor 1
    in let VN = constructor 0
      in let VC = constructor 2
        in let V = constructor 1
          in let Lam = constructor 1
            in let App = constructor 2
              in let env = \_pv0. \_pv1.
                case _pv0 of
                  VC _pv2 _pv3 => case _pv1 of
                    FS _pv4 => ((env _pv3) _pv4)
                    FZ => _pv2
                in let extendMap = \_pv0. \_pv1.
                  case _pv1 of
                    FS _pv2 => (FS (_pv0 _pv2))
                    FZ => FZ
                  in let mapVars = \_pv0. \_pv1.
                    case _pv1 of
                      App _pv2 _pv3 => ((App ((mapVars _pv0) _pv2)) ((mapVars _pv0) _pv3))
                      Lam _pv2 => (Lam ((mapVars (extendMap _pv0)) _pv2))
                      V _pv2 => (V (_pv0 _pv2))
                    in let extendSubst = \_pv0. \_pv1.
                      case _pv1 of
                        FS _pv2 => ((mapVars FS) (_pv0 _pv2))
                        FZ => (V FZ)
                      in let substVars = \_pv0. \_pv1.
                        case _pv1 of
                          App _pv2 _pv3 => ((App ((substVars _pv0) _pv2)) ((substVars _pv0) _pv3))
                          Lam _pv2 => (Lam ((substVars (extendSubst _pv0)) _pv2))
                          V _pv2 => (_pv0 _pv2)
                        in let testTm = ((App (Lam ((App (V FZ)) (V (FS FZ))))) (Lam ((App (V (FS FZ))) (V FZ))))
                          in let example1 = ((substVars (env ((VC (Lam (V FZ))) VN))) testTm)
                            in let substTop = \_pv0. \_pv1.
                              case _pv1 of
                                FS _pv2 => (V _pv2)
                                FZ => _pv0
                              in let nf = \_pv0.
                                case _pv0 of
                                  App _pv1 _pv2 => let g = \_pv3.
                                    case _pv3 of
                                      Lam _pv4 => (nf ((substVars (substTop (nf _pv2))) _pv4))
                                      _ => ((App _pv3) (nf _pv2))
                                    in (g (nf _pv1))
                                  Lam _pv1 => (Lam (nf _pv1))
                                  V _pv1 => (V _pv1)
                                in let example2 = (nf testTm)
                                  in let R = constructor 2
                                    in let main = ((R example1) example2)
                                      in main

### Normal forms ###

unerased:
  
  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x :R: Nat) -> Nat
    constructor Fin : (_x15 : Nat) -> Type
    constructor FZ : (n : Nat) -> Fin (S n)
    constructor TT : (_x0 : Nat) -> Type
    constructor V : (n : Nat) -> (_x1 : Fin n) -> TT n
    constructor Lam : (n : Nat) -> (_x2 : TT (S n)) -> TT n
    constructor App : (n : Nat) -> (_x3 : TT n) -> (_x4 : TT n) -> TT n
    constructor Result : Type
    constructor R : (x :R: TT Z) -> (y :R: TT 1) -> Result
  in R (App Z (Lam Z (App 1 (V 1 (FZ Z)) (Lam 1 (V 2 (FZ 1))))) (Lam Z (App 1 (Lam 1 (V 2 (FZ 1))) (V 1 (FZ Z))))) (App 1 (V 1 (FZ Z)) (V 1 (FZ Z)))

erased:
  
  let
    constructor FZ : Fin
    constructor V : (_x1) -> TT
    constructor Lam : (_x2) -> TT
    constructor App : (_x3) -> (_x4) -> TT
    constructor R : (x) -> (y) -> Result
  in R (App (Lam (App (V FZ) (Lam (V FZ)))) (Lam (App (Lam (V FZ)) (V FZ)))) (App (V FZ) (V FZ))

