-- vim: ft=ttstar

### Desugared ###

  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x :R: Nat) -> Nat
    plus : (_x0 : Nat) -> (_x1 : Nat) -> Nat 
      n : Nat
        plus Z n = n
      m : Nat n : Nat
        plus (S m) n = S (plus m n)
    times : (_x2 : Nat) -> (_x3 : Nat) -> Nat 
      n : Nat
        times Z n = Z
      m : Nat n : Nat
        times (S m) n = plus n (times m n)
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    not : (_x4 : Bool) -> Bool 
      not True = False
      not False = True
    constructor Unit : Type
    constructor MkUnit : Unit
    constructor Pair : (_x5 : Type) -> (_x6 : Type) -> Type
    constructor MkPair : (a : Type) -> (b : Type) -> (_x7 : a) -> (_x8 : b) -> Pair a b
    fst : (a : Type) -> (b : Type) -> (_x9 : Pair a b) -> a 
      a : Type b : Type x : a y : b
        fst a b ([MkPair] [a] [b] x y) = x
    snd : (a : Type) -> (b : Type) -> (_x10 : Pair a b) -> b 
      a : Type b : Type x : a y : b
        snd a b ([MkPair] [a] [b] x y) = y
    constructor Either : (_x11 : Type) -> (_x12 : Type) -> Type
    constructor Left : (a : Type) -> (b : Type) -> (_x13 : a) -> Either a b
    constructor Right : (a : Type) -> (b : Type) -> (_x14 : b) -> Either a b
    id : (a : Type) -> (x : a) -> a = (\a : Type. (\x : a. x))
    constructor Fin : (_x15 : Nat) -> Type
    constructor FZ : (n : Nat) -> Fin (S n)
    constructor FS : (n : Nat) -> (_x16 : Fin n) -> Fin (S n)
    constructor Vect : (_x17 : Nat) -> (_x18 : Type) -> Type
    constructor VN : (a : Type) -> Vect Z a
    constructor VC : (n : Nat) -> (a : Type) -> (x : a) -> (xs : Vect n a) -> Vect (S n) a
    constructor TT : (_x0 : Nat) -> Type
    constructor V : (n : Nat) -> (_x1 : Fin n) -> TT n
    constructor Lam : (n : Nat) -> (_x2 : TT (S n)) -> TT n
    constructor App : (n : Nat) -> (_x3 : TT n) -> (_x4 : TT n) -> TT n
    env : (m : Nat) -> (n : Nat) -> (xs : Vect m (TT n)) -> (_x5 : Fin m) -> TT n 
      m : Nat n : Nat x : TT n xs : Vect m (TT n)
        env [S m] n (VC [m] [TT n] x xs) (FZ m) = x
      m : Nat n : Nat x : TT n xs : Vect m (TT n) i : Fin m
        env [S m] n (VC [m] [TT n] x xs) (FS m i) = env m n xs i
    extendMap : (m : Nat) -> (n : Nat) -> (_x6 : (_x7 : Fin m) -> Fin n) -> (_x8 : Fin (S m)) -> Fin (S n) 
      m : Nat n : Nat f : (_x9 : Fin m) -> Fin n
        extendMap m n f (FZ [m]) = FZ n
      m : Nat n : Nat f : (_x10 : Fin m) -> Fin n i : Fin m
        extendMap m n f (FS [m] i) = FS n (f i)
    mapVars : (m : Nat) -> (n : Nat) -> (_x11 : (_x12 : Fin m) -> Fin n) -> (_x13 : TT m) -> TT n 
      m : Nat n : Nat f : (_x14 : Fin m) -> Fin n i : Fin m
        mapVars m n f (V [m] i) = V n (f i)
      m : Nat n : Nat f : (_x15 : Fin m) -> Fin n x : TT (S m)
        mapVars m n f (Lam [m] x) = Lam n (mapVars (S m) (S n) (extendMap m n f) x)
      m : Nat n : Nat f : (_x16 : Fin m) -> Fin n g : TT m x : TT m
        mapVars m n f (App [m] g x) = App n (mapVars m n f g) (mapVars m n f x)
    extendSubst : (m : Nat) -> (n : Nat) -> (_x17 : (_x18 : Fin m) -> TT n) -> (_x19 : Fin (S m)) -> TT (S n) 
      m : Nat n : Nat f : (_x20 : Fin m) -> TT n
        extendSubst m n f (FZ [m]) = V (S n) (FZ n)
      m : Nat n : Nat f : (_x21 : Fin m) -> TT n i : Fin m
        extendSubst m n f (FS [m] i) = mapVars n (S n) (FS n) (f i)
    substVars : (m : Nat) -> (n : Nat) -> (_x22 : (_x23 : Fin m) -> TT n) -> (_x24 : TT m) -> TT n 
      m : Nat n : Nat f : (_x25 : Fin m) -> TT n i : Fin m
        substVars m n f (V [m] i) = f i
      m : Nat n : Nat f : (_x26 : Fin m) -> TT n x : TT (S m)
        substVars m n f (Lam [m] x) = Lam n (substVars (S m) (S n) (extendSubst m n f) x)
      m : Nat n : Nat f : (_x27 : Fin m) -> TT n g : TT m x : TT m
        substVars m n f (App [m] g x) = App n (substVars m n f g) (substVars m n f x)
    testTm : TT 1 = App 1 (Lam 1 (App 2 (V 2 (FZ 1)) (V 2 (FS 1 (FZ Z))))) (Lam 1 (App 2 (V 2 (FS 1 (FZ Z))) (V 2 (FZ 1))))
    example1 : TT Z = substVars 1 Z (env 1 Z (VC Z (TT Z) (Lam Z (V 1 (FZ Z))) (VN (TT Z)))) testTm
    substTop : (n : Nat) -> (_x28 : TT n) -> (_x29 : Fin (S n)) -> TT n 
      n : Nat tm : TT n
        substTop n tm (FZ [n]) = tm
      n : Nat tm : TT n i : Fin n
        substTop n tm (FS [n] i) = V n i
    nf : (m : Nat) -> (_x30 : TT m) -> TT m 
      m : Nat i : Fin m
        nf m (V [m] i) = V m i
      m : Nat x : TT (S m)
        nf m (Lam [m] x) = Lam m (nf (S m) x)
      m : Nat f : TT m x : TT m
        nf m (App [m] f x) = 
          let g : (_x31 : TT m) -> TT m 
            y : TT (S m)
              g (Lam [m] y) = nf m (substVars (S m) m (substTop m (nf m x)) y)
            f' : TT m
              g f' = App m f' (nf m x)
          in g (nf m f)
    example2 : TT 1 = nf 1 testTm
    constructor Result : Type
    constructor R : (x :R: TT Z) -> (y :R: TT 1) -> Result
    main : Result = R example1 example2
  in main

### Evarified ###

  let
    constructor Nat :1: Type
    constructor Z :2: Nat
    constructor S :3: (x :R: Nat) -> Nat
    plus :4: (_x0 :5: Nat) -> (_x1 :6: Nat) -> Nat 
      n :7: Nat
        plus -9- Z -8- n = n
      m :10: Nat n :11: Nat
        plus -13- (S -14- m) -12- n = S -15- (plus -17- m -16- n)
    times :18: (_x2 :19: Nat) -> (_x3 :20: Nat) -> Nat 
      n :21: Nat
        times -23- Z -22- n = Z
      m :24: Nat n :25: Nat
        times -27- (S -28- m) -26- n = plus -30- n -29- (times -32- m -31- n)
    constructor Bool :33: Type
    constructor True :34: Bool
    constructor False :35: Bool
    not :36: (_x4 :37: Bool) -> Bool 
      not -38- True = False
      not -39- False = True
    constructor Unit :40: Type
    constructor MkUnit :41: Unit
    constructor Pair :42: (_x5 :43: Type) -> (_x6 :44: Type) -> Type
    constructor MkPair :45: (a :46: Type) -> (b :47: Type) -> (_x7 :48: a) -> (_x8 :49: b) -> Pair -51- a -50- b
    fst :52: (a :53: Type) -> (b :54: Type) -> (_x9 :55: Pair -57- a -56- b) -> a 
      a :58: Type b :59: Type x :60: a y :61: b
        fst -64- a -63- b -62- ([MkPair] -68- [a] -67- [b] -66- x -65- y) = x
    snd :69: (a :70: Type) -> (b :71: Type) -> (_x10 :72: Pair -74- a -73- b) -> b 
      a :75: Type b :76: Type x :77: a y :78: b
        snd -81- a -80- b -79- ([MkPair] -85- [a] -84- [b] -83- x -82- y) = y
    constructor Either :86: (_x11 :87: Type) -> (_x12 :88: Type) -> Type
    constructor Left :89: (a :90: Type) -> (b :91: Type) -> (_x13 :92: a) -> Either -94- a -93- b
    constructor Right :95: (a :96: Type) -> (b :97: Type) -> (_x14 :98: b) -> Either -100- a -99- b
    id :101: (a :102: Type) -> (x :103: a) -> a = (\a :104: Type. (\x :105: a. x))
    constructor Fin :106: (_x15 :107: Nat) -> Type
    constructor FZ :108: (n :109: Nat) -> Fin -110- (S -111- n)
    constructor FS :112: (n :113: Nat) -> (_x16 :114: Fin -115- n) -> Fin -116- (S -117- n)
    constructor Vect :118: (_x17 :119: Nat) -> (_x18 :120: Type) -> Type
    constructor VN :121: (a :122: Type) -> Vect -124- Z -123- a
    constructor VC :125: (n :126: Nat) -> (a :127: Type) -> (x :128: a) -> (xs :129: Vect -131- n -130- a) -> Vect -133- (S -134- n) -132- a
    constructor TT :135: (_x0 :136: Nat) -> Type
    constructor V :137: (n :138: Nat) -> (_x1 :139: Fin -140- n) -> TT -141- n
    constructor Lam :142: (n :143: Nat) -> (_x2 :144: TT -145- (S -146- n)) -> TT -147- n
    constructor App :148: (n :149: Nat) -> (_x3 :150: TT -151- n) -> (_x4 :152: TT -153- n) -> TT -154- n
    env :155: (m :156: Nat) -> (n :157: Nat) -> (xs :158: Vect -160- m -159- (TT -161- n)) -> (_x5 :162: Fin -163- m) -> TT -164- n 
      m :165: Nat n :166: Nat x :167: TT -168- n xs :169: Vect -171- m -170- (TT -172- n)
        env -176- [S -177- m] -175- n -174- (VC -181- [m] -180- [TT -182- n] -179- x -178- xs) -173- (FZ -183- m) = x
      m :184: Nat n :185: Nat x :186: TT -187- n xs :188: Vect -190- m -189- (TT -191- n) i :192: Fin -193- m
        env -197- [S -198- m] -196- n -195- (VC -202- [m] -201- [TT -203- n] -200- x -199- xs) -194- (FS -205- m -204- i) = env -209- m -208- n -207- xs -206- i
    extendMap :210: (m :211: Nat) -> (n :212: Nat) -> (_x6 :213: (_x7 :214: Fin -215- m) -> Fin -216- n) -> (_x8 :217: Fin -218- (S -219- m)) -> Fin -220- (S -221- n) 
      m :222: Nat n :223: Nat f :224: (_x9 :225: Fin -226- m) -> Fin -227- n
        extendMap -231- m -230- n -229- f -228- (FZ -232- [m]) = FZ -233- n
      m :234: Nat n :235: Nat f :236: (_x10 :237: Fin -238- m) -> Fin -239- n i :240: Fin -241- m
        extendMap -245- m -244- n -243- f -242- (FS -247- [m] -246- i) = FS -249- n -248- (f -250- i)
    mapVars :251: (m :252: Nat) -> (n :253: Nat) -> (_x11 :254: (_x12 :255: Fin -256- m) -> Fin -257- n) -> (_x13 :258: TT -259- m) -> TT -260- n 
      m :261: Nat n :262: Nat f :263: (_x14 :264: Fin -265- m) -> Fin -266- n i :267: Fin -268- m
        mapVars -272- m -271- n -270- f -269- (V -274- [m] -273- i) = V -276- n -275- (f -277- i)
      m :278: Nat n :279: Nat f :280: (_x15 :281: Fin -282- m) -> Fin -283- n x :284: TT -285- (S -286- m)
        mapVars -290- m -289- n -288- f -287- (Lam -292- [m] -291- x) = Lam -294- n -293- (mapVars -298- (S -299- m) -297- (S -300- n) -296- (extendMap -303- m -302- n -301- f) -295- x)
      m :304: Nat n :305: Nat f :306: (_x16 :307: Fin -308- m) -> Fin -309- n g :310: TT -311- m x :312: TT -313- m
        mapVars -317- m -316- n -315- f -314- (App -320- [m] -319- g -318- x) = App -323- n -322- (mapVars -327- m -326- n -325- f -324- g) -321- (mapVars -331- m -330- n -329- f -328- x)
    extendSubst :332: (m :333: Nat) -> (n :334: Nat) -> (_x17 :335: (_x18 :336: Fin -337- m) -> TT -338- n) -> (_x19 :339: Fin -340- (S -341- m)) -> TT -342- (S -343- n) 
      m :344: Nat n :345: Nat f :346: (_x20 :347: Fin -348- m) -> TT -349- n
        extendSubst -353- m -352- n -351- f -350- (FZ -354- [m]) = V -356- (S -357- n) -355- (FZ -358- n)
      m :359: Nat n :360: Nat f :361: (_x21 :362: Fin -363- m) -> TT -364- n i :365: Fin -366- m
        extendSubst -370- m -369- n -368- f -367- (FS -372- [m] -371- i) = mapVars -376- n -375- (S -377- n) -374- (FS -378- n) -373- (f -379- i)
    substVars :380: (m :381: Nat) -> (n :382: Nat) -> (_x22 :383: (_x23 :384: Fin -385- m) -> TT -386- n) -> (_x24 :387: TT -388- m) -> TT -389- n 
      m :390: Nat n :391: Nat f :392: (_x25 :393: Fin -394- m) -> TT -395- n i :396: Fin -397- m
        substVars -401- m -400- n -399- f -398- (V -403- [m] -402- i) = f -404- i
      m :405: Nat n :406: Nat f :407: (_x26 :408: Fin -409- m) -> TT -410- n x :411: TT -412- (S -413- m)
        substVars -417- m -416- n -415- f -414- (Lam -419- [m] -418- x) = Lam -421- n -420- (substVars -425- (S -426- m) -424- (S -427- n) -423- (extendSubst -430- m -429- n -428- f) -422- x)
      m :431: Nat n :432: Nat f :433: (_x27 :434: Fin -435- m) -> TT -436- n g :437: TT -438- m x :439: TT -440- m
        substVars -444- m -443- n -442- f -441- (App -447- [m] -446- g -445- x) = App -450- n -449- (substVars -454- m -453- n -452- f -451- g) -448- (substVars -458- m -457- n -456- f -455- x)
    testTm :459: TT -460- 1 = App -464- 1 -463- (Lam -467- 1 -466- (App -471- 2 -470- (V -475- 2 -474- (FZ -478- 1)) -469- (V -481- 2 -480- (FS -485- 1 -484- (FZ -487- Z))))) -462- (Lam -489- 1 -488- (App -493- 2 -492- (V -497- 2 -496- (FS -501- 1 -500- (FZ -503- Z))) -491- (V -505- 2 -504- (FZ -508- 1))))
    example1 :510: TT -511- Z = substVars -515- 1 -514- Z -513- (env -519- 1 -518- Z -517- (VC -524- Z -523- (TT -525- Z) -522- (Lam -527- Z -526- (V -529- 1 -528- (FZ -531- Z))) -521- (VN -532- (TT -533- Z)))) -512- testTm
    substTop :534: (n :535: Nat) -> (_x28 :536: TT -537- n) -> (_x29 :538: Fin -539- (S -540- n)) -> TT -541- n 
      n :542: Nat tm :543: TT -544- n
        substTop -547- n -546- tm -545- (FZ -548- [n]) = tm
      n :549: Nat tm :550: TT -551- n i :552: Fin -553- n
        substTop -556- n -555- tm -554- (FS -558- [n] -557- i) = V -560- n -559- i
    nf :561: (m :562: Nat) -> (_x30 :563: TT -564- m) -> TT -565- m 
      m :566: Nat i :567: Fin -568- m
        nf -570- m -569- (V -572- [m] -571- i) = V -574- m -573- i
      m :575: Nat x :576: TT -577- (S -578- m)
        nf -580- m -579- (Lam -582- [m] -581- x) = Lam -584- m -583- (nf -586- (S -587- m) -585- x)
      m :588: Nat f :589: TT -590- m x :591: TT -592- m
        nf -594- m -593- (App -597- [m] -596- f -595- x) = 
          let g :598: (_x31 :599: TT -600- m) -> TT -601- m 
            y :602: TT -603- (S -604- m)
              g -605- (Lam -607- [m] -606- y) = nf -609- m -608- (substVars -613- (S -614- m) -612- m -611- (substTop -616- m -615- (nf -618- m -617- x)) -610- y)
            f' :619: TT -620- m
              g -621- f' = App -624- m -623- f' -622- (nf -626- m -625- x)
          in g -627- (nf -629- m -628- f)
    example2 :630: TT -631- 1 = nf -634- 1 -633- testTm
    constructor Result :636: Type
    constructor R :637: (x :R: TT -638- Z) -> (y :R: TT -639- 1) -> Result
    main :641: Result = R -643- example1 -642- example2
  in main

### Constraints ###

[] -> [14,15,28,111,117,134,146,177,198,219,221,286,299,300,341,343,357,377,413,426,427,461,465,468,472,473,476,477,479,482,483,486,490,494,495,498,499,502,506,507,509,516,520,530,540,578,587,604,614,632,635,640,641,642,643]
[4] -> [2,3,7,9,13]
[4,8] -> [7]
[4,12] -> [11]
[4,13,14] -> [10]
[4,15,16] -> [11]
[4,15,17] -> [10]
[5] -> [9,13,17,30]
[6] -> [8,12,16,29]
[7] -> [4,8]
[8] -> [6]
[9] -> [5]
[10] -> [4,13,14]
[11] -> [4,12]
[12] -> [6]
[13] -> [5]
[16] -> [6]
[17] -> [5]
[18] -> [2,3,4,23,27]
[18,22] -> [21]
[18,26] -> [25]
[18,27,28] -> [24]
[18,29,31] -> [25]
[18,29,32] -> [24]
[18,30] -> [25]
[19] -> [23,27,32]
[20] -> [22,26,31]
[21] -> [18,22]
[22] -> [20]
[23] -> [19]
[24] -> [18,27,28]
[25] -> [18,26]
[26] -> [20]
[27] -> [19]
[29] -> [6]
[30] -> [5]
[31] -> [20]
[32] -> [19]
[36] -> [34,35,38,39]
[37] -> [38,39]
[38] -> [37]
[39] -> [37]
[43] -> [51,57,74]
[44] -> [50,56,73]
[46] -> [68,85]
[47] -> [67,84]
[48] -> [66,83]
[49] -> [65,82]
[50] -> [44,56,73]
[51] -> [43]
[52] -> [60]
[52,62] -> [45]
[52,62,65] -> [61]
[52,62,66] -> [60]
[52,62,67] -> [59]
[52,62,68] -> [58]
[52,63] -> [59]
[52,64] -> [58]
[53] -> [64]
[54] -> [63]
[55] -> [62]
[56] -> [44,50]
[57] -> [43]
[58] -> [52,64]
[59] -> [52,63]
[60] -> [52,62,66]
[61] -> [52,62,65]
[62] -> [55]
[63] -> [54]
[64] -> [53]
[65] -> [49]
[66] -> [48]
[67] -> [47]
[68] -> [46]
[69] -> [78]
[69,79] -> [45]
[69,79,82] -> [78]
[69,79,83] -> [77]
[69,79,84] -> [76]
[69,79,85] -> [75]
[69,80] -> [76]
[69,81] -> [75]
[70] -> [81]
[71] -> [80]
[72] -> [79]
[73] -> [44,50]
[74] -> [43]
[75] -> [69,81]
[76] -> [69,80]
[77] -> [69,79,83]
[78] -> [69,79,82]
[79] -> [72]
[80] -> [71]
[81] -> [70]
[82] -> [49]
[83] -> [48]
[84] -> [47]
[85] -> [46]
[87] -> [94,100]
[88] -> [93,99]
[93] -> [88]
[94] -> [87]
[99] -> [88]
[100] -> [87]
[101] -> [105]
[102] -> [104]
[103] -> [105]
[104] -> [102]
[105] -> [103]
[107] -> [110,115,116,140,163,193,215,216,218,220,226,227,238,239,241,256,257,265,266,268,282,283,308,309,337,340,348,363,366,385,394,397,409,435,539,553,568]
[109] -> [183,232,233,354,358,478,487,503,508,531,548]
[110] -> [107,115,140,163,218,220,340,539]
[113] -> [205,247,249,372,378,485,501,558]
[114] -> [204,246,248,255,371,484,500,557]
[115] -> [107,110,193,239,241,256,366,553]
[116] -> [107,140,163,218,220,257,340,539]
[119] -> [124,131,133,160,171,190]
[120] -> [123,130,132,159,170,189]
[122] -> [532]
[123] -> [120,130]
[124] -> [119]
[126] -> [181,202,524]
[127] -> [180,201,523]
[128] -> [179,200,522]
[129] -> [178,199,521]
[130] -> [120,123,170,189]
[131] -> [119]
[132] -> [120,159]
[133] -> [119]
[136] -> [141,145,147,151,153,154,161,164,168,172,182,187,191,203,259,260,285,311,313,338,342,349,364,386,388,389,395,410,412,436,438,440,460,511,525,533,537,541,544,551,564,565,577,590,592,600,601,603,620,631,638,639]
[138] -> [274,276,356,403,475,481,497,505,529,560,572,574]
[139] -> [273,275,355,402,474,480,496,504,528,559,571,573]
[140] -> [107,110,116,266,268,397,553,568]
[141] -> [136,145,151,153,259,260,342,388,541,564,565]
[143] -> [292,294,419,421,467,489,527,582,584,607]
[144] -> [291,293,418,420,466,488,526,581,583,606]
[145] -> [136,141,154,260,285,389,412,565,577,603]
[147] -> [136,151,153,259,260,388,389,525,564,565,600]
[149] -> [320,323,447,450,464,471,493,597,624]
[150] -> [319,322,446,449,463,470,492,596,623]
[151] -> [136,141,147,260,311,389,438,590,620]
[152] -> [318,321,445,448,462,469,491,595,622]
[153] -> [136,141,147,260,313,389,440,565,592]
[154] -> [136,145,259,260,388,389,460,564,601]
[155] -> [108,112,125,167,173,174,194,195]
[155,173,183] -> [165]
[155,174,178] -> [169]
[155,174,179] -> [167]
[155,174,180] -> [135]
[155,174,180,182] -> [166]
[155,174,181] -> [165]
[155,175] -> [166]
[155,176] -> [3]
[155,176,177] -> [165]
[155,194,204] -> [192]
[155,194,205] -> [184]
[155,195,199] -> [188]
[155,195,200] -> [186]
[155,195,201] -> [135]
[155,195,201,203] -> [185]
[155,195,202] -> [184]
[155,196] -> [185]
[155,197] -> [3]
[155,197,198] -> [184]
[155,206] -> [192]
[155,207] -> [188]
[155,208] -> [185]
[155,209] -> [184]
[156] -> [176,197,209,519]
[157] -> [175,196,208,518]
[158] -> [174,195,207,517]
[159] -> [120,132,189]
[160] -> [119]
[161] -> [136]
[162] -> [173,194,206,384]
[163] -> [107,110,116,193,385]
[164] -> [136,168,386]
[165] -> [155,173,183]
[166] -> [155,175]
[167] -> [155,174,179]
[168] -> [136,164,182]
[169] -> [155,174,178]
[170] -> [120,130]
[171] -> [119]
[172] -> [136]
[173] -> [162]
[174] -> [158]
[175] -> [157]
[176] -> [156]
[178] -> [129]
[179] -> [128]
[180] -> [127]
[181] -> [126]
[182] -> [136,168]
[183] -> [109]
[184] -> [155,194,205]
[185] -> [155,196]
[186] -> [155,195,200]
[187] -> [136,203]
[188] -> [155,195,199]
[189] -> [120,130,159]
[190] -> [119]
[191] -> [136]
[192] -> [155,194,204]
[193] -> [107,115,163]
[194] -> [162]
[195] -> [158]
[196] -> [157]
[197] -> [156]
[199] -> [129]
[200] -> [128]
[201] -> [127]
[202] -> [126]
[203] -> [136,187]
[204] -> [114]
[205] -> [113]
[206] -> [162]
[207] -> [158]
[208] -> [157]
[209] -> [156]
[210] -> [108,112,228,242]
[210,228,232] -> [222]
[210,229] -> [224]
[210,230] -> [223]
[210,231] -> [222]
[210,233] -> [223]
[210,242,246] -> [240]
[210,242,247] -> [234]
[210,243] -> [236]
[210,244] -> [235]
[210,245] -> [234]
[210,248] -> [236]
[210,248,250] -> [240]
[210,249] -> [235]
[211] -> [231,245,303]
[212] -> [230,244,302]
[213] -> [229,243,301]
[214] -> [225,237,281]
[215] -> [107,226,238,282]
[216] -> [107,227,239,283]
[217] -> [228,242,255]
[218] -> [107,110,116,256]
[220] -> [107,110,116,257]
[222] -> [210,231]
[223] -> [210,230]
[224] -> [210,229]
[225] -> [214]
[226] -> [107,215]
[227] -> [107,216]
[228] -> [217]
[229] -> [213]
[230] -> [212]
[231] -> [211]
[232] -> [109]
[233] -> [109]
[234] -> [210,245]
[235] -> [210,244]
[236] -> [210,243]
[237] -> [214,250]
[238] -> [107,215,241]
[239] -> [107,115,216]
[240] -> [210,242,246]
[241] -> [107,115,238]
[242] -> [217]
[243] -> [213]
[244] -> [212]
[245] -> [211]
[246] -> [114]
[247] -> [113]
[248] -> [114]
[249] -> [113]
[250] -> [237]
[251] -> [137,142,148,269,287,314]
[251,269,273] -> [267]
[251,269,274] -> [261]
[251,270] -> [263]
[251,271] -> [262]
[251,272] -> [261]
[251,275] -> [263]
[251,275,277] -> [267]
[251,276] -> [262]
[251,287,291] -> [284]
[251,287,292] -> [278]
[251,288] -> [280]
[251,289] -> [279]
[251,290] -> [278]
[251,293,295] -> [284]
[251,293,296] -> [210]
[251,293,296,301] -> [280]
[251,293,296,302] -> [279]
[251,293,296,303] -> [278]
[251,293,297] -> [3]
[251,293,297,300] -> [279]
[251,293,298] -> [3]
[251,293,298,299] -> [278]
[251,294] -> [279]
[251,314,318] -> [312]
[251,314,319] -> [310]
[251,314,320] -> [304]
[251,315] -> [306]
[251,316] -> [305]
[251,317] -> [304]
[251,321,328] -> [312]
[251,321,329] -> [306]
[251,321,330] -> [305]
[251,321,331] -> [304]
[251,322,324] -> [310]
[251,322,325] -> [306]
[251,322,326] -> [305]
[251,322,327] -> [304]
[251,323] -> [305]
[252] -> [272,290,298,317,327,331,376]
[253] -> [271,289,297,316,326,330,375]
[254] -> [270,288,296,315,325,329,374]
[255] -> [114,217,264,281,307]
[256] -> [107,115,218,265,282,308]
[257] -> [107,116,220,266,283,309]
[258] -> [269,287,295,314,324,328,373]
[259] -> [136,141,147,154,285,311,313,364]
[260] -> [136,141,145,147,151,153,154,342]
[261] -> [251,272]
[262] -> [251,271]
[263] -> [251,270]
[264] -> [255,277]
[265] -> [107,256,268]
[266] -> [107,140,257]
[267] -> [251,269,273]
[268] -> [107,140,265]
[269] -> [258]
[270] -> [254]
[271] -> [253]
[272] -> [252]
[273] -> [139]
[274] -> [138]
[275] -> [139]
[276] -> [138]
[277] -> [264]
[278] -> [251,290]
[279] -> [251,289]
[280] -> [251,288]
[281] -> [214,255]
[282] -> [107,215,256]
[283] -> [107,216,257]
[284] -> [251,287,291]
[285] -> [136,145,259]
[287] -> [258]
[288] -> [254]
[289] -> [253]
[290] -> [252]
[291] -> [144]
[292] -> [143]
[293] -> [144]
[294] -> [143]
[295] -> [258]
[296] -> [254]
[297] -> [253]
[298] -> [252]
[301] -> [213]
[302] -> [212]
[303] -> [211]
[304] -> [251,317]
[305] -> [251,316]
[306] -> [251,315]
[307] -> [255]
[308] -> [107,256]
[309] -> [107,257]
[310] -> [251,314,319]
[311] -> [136,151,259]
[312] -> [251,314,318]
[313] -> [136,153,259]
[314] -> [258]
[315] -> [254]
[316] -> [253]
[317] -> [252]
[318] -> [152]
[319] -> [150]
[320] -> [149]
[321] -> [152]
[322] -> [150]
[323] -> [149]
[324] -> [258]
[325] -> [254]
[326] -> [253]
[327] -> [252]
[328] -> [258]
[329] -> [254]
[330] -> [253]
[331] -> [252]
[332] -> [108,112,137,251,350,367]
[332,350,354] -> [344]
[332,351] -> [346]
[332,352] -> [345]
[332,353] -> [344]
[332,355] -> [108]
[332,355,358] -> [345]
[332,356] -> [3]
[332,356,357] -> [345]
[332,367,371] -> [365]
[332,367,372] -> [359]
[332,368] -> [361]
[332,369] -> [360]
[332,370] -> [359]
[332,373] -> [361]
[332,373,379] -> [365]
[332,374] -> [112]
[332,374,378] -> [360]
[332,375] -> [3]
[332,375,377] -> [360]
[332,376] -> [360]
[333] -> [353,370,430]
[334] -> [352,369,429]
[335] -> [351,368,428]
[336] -> [347,362,408]
[337] -> [107,348,363,409]
[338] -> [136,349,364,410]
[339] -> [350,367,384]
[340] -> [107,110,116,385]
[342] -> [136,141,260,386]
[344] -> [332,353]
[345] -> [332,352]
[346] -> [332,351]
[347] -> [336]
[348] -> [107,337]
[349] -> [136,338]
[350] -> [339]
[351] -> [335]
[352] -> [334]
[353] -> [333]
[354] -> [109]
[355] -> [139]
[356] -> [138]
[358] -> [109]
[359] -> [332,370]
[360] -> [332,369]
[361] -> [332,368]
[362] -> [336,379]
[363] -> [107,337,366]
[364] -> [136,259,338]
[365] -> [332,367,371]
[366] -> [107,115,363]
[367] -> [339]
[368] -> [335]
[369] -> [334]
[370] -> [333]
[371] -> [114]
[372] -> [113]
[373] -> [258]
[374] -> [254]
[375] -> [253]
[376] -> [252]
[378] -> [113]
[379] -> [362]
[380] -> [137,142,148,392,398,414,441]
[380,398,402] -> [396]
[380,398,403] -> [390]
[380,399] -> [392]
[380,400] -> [391]
[380,401] -> [390]
[380,404] -> [396]
[380,414,418] -> [411]
[380,414,419] -> [405]
[380,415] -> [407]
[380,416] -> [406]
[380,417] -> [405]
[380,420,422] -> [411]
[380,420,423] -> [332]
[380,420,423,428] -> [407]
[380,420,423,429] -> [406]
[380,420,423,430] -> [405]
[380,420,424] -> [3]
[380,420,424,427] -> [406]
[380,420,425] -> [3]
[380,420,425,426] -> [405]
[380,421] -> [406]
[380,441,445] -> [439]
[380,441,446] -> [437]
[380,441,447] -> [431]
[380,442] -> [433]
[380,443] -> [432]
[380,444] -> [431]
[380,448,455] -> [439]
[380,448,456] -> [433]
[380,448,457] -> [432]
[380,448,458] -> [431]
[380,449,451] -> [437]
[380,449,452] -> [433]
[380,449,453] -> [432]
[380,449,454] -> [431]
[380,450] -> [432]
[381] -> [401,417,425,444,454,458,515,613]
[382] -> [400,416,424,443,453,457,514,612]
[383] -> [399,415,423,442,452,456,513,611]
[384] -> [162,339,393,408,434,538]
[385] -> [107,163,340,394,409,435,539]
[386] -> [136,164,342,395,410,436,541]
[387] -> [398,414,422,441,451,455,512,610]
[388] -> [136,141,147,154,412,438,440,460,603]
[389] -> [136,145,147,151,153,154,395,511,564]
[390] -> [380,401]
[391] -> [380,400]
[392] -> [380,399]
[393] -> [384,404]
[394] -> [107,385,397]
[395] -> [136,386,389]
[396] -> [380,398,402]
[397] -> [107,140,394]
[398] -> [387]
[399] -> [383]
[400] -> [382]
[401] -> [381]
[402] -> [139]
[403] -> [138]
[404] -> [393]
[405] -> [380,417]
[406] -> [380,416]
[407] -> [380,415]
[408] -> [336,384]
[409] -> [107,337,385]
[410] -> [136,338,386]
[411] -> [380,414,418]
[412] -> [136,145,388]
[414] -> [387]
[415] -> [383]
[416] -> [382]
[417] -> [381]
[418] -> [144]
[419] -> [143]
[420] -> [144]
[421] -> [143]
[422] -> [387]
[423] -> [383]
[424] -> [382]
[425] -> [381]
[428] -> [335]
[429] -> [334]
[430] -> [333]
[431] -> [380,444]
[432] -> [380,443]
[433] -> [380,442]
[434] -> [384]
[435] -> [107,385]
[436] -> [136,386]
[437] -> [380,441,446]
[438] -> [136,151,388]
[439] -> [380,441,445]
[440] -> [136,153,388]
[441] -> [387]
[442] -> [383]
[443] -> [382]
[444] -> [381]
[445] -> [152]
[446] -> [150]
[447] -> [149]
[448] -> [152]
[449] -> [150]
[450] -> [149]
[451] -> [387]
[452] -> [383]
[453] -> [382]
[454] -> [381]
[455] -> [387]
[456] -> [383]
[457] -> [382]
[458] -> [381]
[459] -> [148]
[459,462] -> [142]
[459,462,488] -> [148]
[459,462,488,491] -> [137]
[459,462,488,491,504] -> [108]
[459,462,488,491,504,508] -> [3]
[459,462,488,491,504,508,509] -> [2]
[459,462,488,491,505] -> [3]
[459,462,488,491,505,506] -> [3]
[459,462,488,491,505,506,507] -> [2]
[459,462,488,492] -> [137]
[459,462,488,492,496] -> [112]
[459,462,488,492,496,500] -> [108]
[459,462,488,492,496,500,503] -> [2]
[459,462,488,492,496,501] -> [3]
[459,462,488,492,496,501,502] -> [2]
[459,462,488,492,497] -> [3]
[459,462,488,492,497,498] -> [3]
[459,462,488,492,497,498,499] -> [2]
[459,462,488,493] -> [3]
[459,462,488,493,494] -> [3]
[459,462,488,493,494,495] -> [2]
[459,462,489] -> [3]
[459,462,489,490] -> [2]
[459,463] -> [142]
[459,463,466] -> [148]
[459,463,466,469] -> [137]
[459,463,466,469,480] -> [112]
[459,463,466,469,480,484] -> [108]
[459,463,466,469,480,484,487] -> [2]
[459,463,466,469,480,485] -> [3]
[459,463,466,469,480,485,486] -> [2]
[459,463,466,469,481] -> [3]
[459,463,466,469,481,482] -> [3]
[459,463,466,469,481,482,483] -> [2]
[459,463,466,470] -> [137]
[459,463,466,470,474] -> [108]
[459,463,466,470,474,478] -> [3]
[459,463,466,470,474,478,479] -> [2]
[459,463,466,470,475] -> [3]
[459,463,466,470,475,476] -> [3]
[459,463,466,470,475,476,477] -> [2]
[459,463,466,471] -> [3]
[459,463,466,471,472] -> [3]
[459,463,466,471,472,473] -> [2]
[459,463,467] -> [3]
[459,463,467,468] -> [2]
[459,464] -> [3]
[459,464,465] -> [2]
[460] -> [136,154,388,564]
[462] -> [152]
[463] -> [150]
[464] -> [149]
[466] -> [144]
[467] -> [143]
[469] -> [152]
[470] -> [150]
[471] -> [149]
[474] -> [139]
[475] -> [138]
[478] -> [109]
[480] -> [139]
[481] -> [138]
[484] -> [114]
[485] -> [113]
[487] -> [109]
[488] -> [144]
[489] -> [143]
[491] -> [152]
[492] -> [150]
[493] -> [149]
[496] -> [139]
[497] -> [138]
[500] -> [114]
[501] -> [113]
[503] -> [109]
[504] -> [139]
[505] -> [138]
[508] -> [109]
[510] -> [380]
[510,512] -> [459]
[510,513] -> [155]
[510,513,517] -> [125]
[510,513,517,521] -> [121]
[510,513,517,521,532] -> [135]
[510,513,517,521,532,533] -> [2]
[510,513,517,522] -> [142]
[510,513,517,522,526] -> [137]
[510,513,517,522,526,528] -> [108]
[510,513,517,522,526,528,531] -> [2]
[510,513,517,522,526,529] -> [3]
[510,513,517,522,526,529,530] -> [2]
[510,513,517,522,527] -> [2]
[510,513,517,523] -> [135]
[510,513,517,523,525] -> [2]
[510,513,517,524] -> [2]
[510,513,518] -> [2]
[510,513,519] -> [3]
[510,513,519,520] -> [2]
[510,514] -> [2]
[510,515] -> [3]
[510,515,516] -> [2]
[511] -> [136,389,638]
[512] -> [387]
[513] -> [383]
[514] -> [382]
[515] -> [381]
[517] -> [158]
[518] -> [157]
[519] -> [156]
[521] -> [129]
[522] -> [128]
[523] -> [127]
[524] -> [126]
[525] -> [136,147]
[526] -> [144]
[527] -> [143]
[528] -> [139]
[529] -> [138]
[531] -> [109]
[532] -> [122]
[533] -> [136]
[534] -> [108,112,137,543,545,554]
[534,545,548] -> [542]
[534,546] -> [543]
[534,547] -> [542]
[534,554,557] -> [552]
[534,554,558] -> [549]
[534,555] -> [550]
[534,556] -> [549]
[534,559] -> [552]
[534,560] -> [549]
[535] -> [547,556,616]
[536] -> [546,555,615]
[537] -> [136,544,551,565]
[538] -> [384,545,554]
[539] -> [107,110,116,385]
[541] -> [136,141,386,544]
[542] -> [534,547]
[543] -> [534,546]
[544] -> [136,537,541]
[545] -> [538]
[546] -> [536]
[547] -> [535]
[548] -> [109]
[549] -> [534,556]
[550] -> [534,555]
[551] -> [136,537]
[552] -> [534,554,557]
[553] -> [107,115,140]
[554] -> [538]
[555] -> [536]
[556] -> [535]
[557] -> [114]
[558] -> [113]
[559] -> [139]
[560] -> [138]
[561] -> [137,142,148,569,579,593,598]
[561,569,571] -> [567]
[561,569,572] -> [566]
[561,570] -> [566]
[561,573] -> [567]
[561,574] -> [566]
[561,579,581] -> [576]
[561,579,582] -> [575]
[561,580] -> [575]
[561,583,585] -> [576]
[561,583,586] -> [3]
[561,583,586,587] -> [575]
[561,584] -> [575]
[561,593,595] -> [591]
[561,593,596] -> [589]
[561,593,597] -> [588]
[561,594] -> [588]
[561,627,628] -> [589]
[561,627,629] -> [588]
[562] -> [570,580,586,594,609,618,626,629,634]
[563] -> [569,579,585,593,608,617,625,628,633]
[564] -> [136,141,147,154,389,460,577,590,592]
[565] -> [136,141,145,147,153,537,600,601,631]
[566] -> [561,570]
[567] -> [561,569,571]
[568] -> [107,140]
[569] -> [563]
[570] -> [562]
[571] -> [139]
[572] -> [138]
[573] -> [139]
[574] -> [138]
[575] -> [561,580]
[576] -> [561,579,581]
[577] -> [136,145,564]
[579] -> [563]
[580] -> [562]
[581] -> [144]
[582] -> [143]
[583] -> [144]
[584] -> [143]
[585] -> [563]
[586] -> [562]
[588] -> [561,594]
[589] -> [561,593,596]
[590] -> [136,151,564]
[591] -> [561,593,595]
[592] -> [136,153,564]
[593] -> [563]
[594] -> [562]
[595] -> [152]
[596] -> [150]
[597] -> [149]
[598] -> [142,148,561,605]
[598,605,606] -> [602]
[598,605,607] -> [588]
[598,608] -> [380]
[598,608,610] -> [602]
[598,608,611] -> [534]
[598,608,611,615] -> [561]
[598,608,611,615,617] -> [591]
[598,608,611,615,618] -> [588]
[598,608,611,616] -> [588]
[598,608,612] -> [588]
[598,608,613] -> [3]
[598,608,613,614] -> [588]
[598,609] -> [588]
[598,621] -> [619]
[598,622] -> [561]
[598,622,625] -> [591]
[598,622,626] -> [588]
[598,623] -> [619]
[598,624] -> [588]
[599] -> [605,621,627]
[600] -> [136,147,565,620]
[601] -> [136,154,565]
[602] -> [598,605,606]
[603] -> [136,145,388]
[605] -> [599]
[606] -> [144]
[607] -> [143]
[608] -> [563]
[609] -> [562]
[610] -> [387]
[611] -> [383]
[612] -> [382]
[613] -> [381]
[615] -> [536]
[616] -> [535]
[617] -> [563]
[618] -> [562]
[619] -> [598,621]
[620] -> [136,151,600]
[621] -> [599]
[622] -> [152]
[623] -> [150]
[624] -> [149]
[625] -> [563]
[626] -> [562]
[627] -> [599]
[628] -> [563]
[629] -> [562]
[630] -> [561]
[630,633] -> [459]
[630,634] -> [3]
[630,634,635] -> [2]
[631] -> [136,565,639]
[633] -> [563]
[634] -> [562]
[638] -> [136,511]
[639] -> [136,631]
[641] -> [637]
[641,642] -> [630]
[641,643] -> [510]

### Solution ###

[14,15,28,108,111,112,114,117,121,125,128,129,134,137,139,142,144,146,148,150,152,155,158,162,167,169,173,174,177,178,179,186,188,192,194,195,198,199,200,204,206,207,210,213,214,217,219,221,224,225,228,229,236,237,240,242,243,246,248,250,251,254,255,258,263,264,267,269,270,273,275,277,280,281,284,286,287,288,291,293,295,296,299,300,301,306,307,310,312,314,315,318,319,321,322,324,325,328,329,332,335,336,339,341,343,346,347,350,351,355,357,361,362,365,367,368,371,373,374,377,379,380,383,384,387,392,393,396,398,399,402,404,407,408,411,413,414,415,418,420,422,423,426,427,428,433,434,437,439,441,442,445,446,448,449,451,452,455,456,459,461,462,463,465,466,468,469,470,472,473,474,476,477,479,480,482,483,484,486,488,490,491,492,494,495,496,498,499,500,502,504,506,507,509,510,512,513,516,517,520,521,522,526,528,530,534,536,538,540,543,545,546,550,552,554,555,557,559,561,563,567,569,571,573,576,578,579,581,583,585,587,589,591,593,595,596,598,599,602,604,605,606,608,610,611,614,615,617,619,621,622,623,625,627,628,630,632,633,635,637,640,641,642,643,R]

### Annotated ###

  let
    constructor Nat :E: Type
    constructor Z :E: Nat
    constructor S :E: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      n :E: Nat
        plus -E- Z -E- n = n
      m :E: Nat n :E: Nat
        plus -E- (S -R- m) -E- n = S -R- (plus -E- m -E- n)
    times :E: (_x2 :E: Nat) -> (_x3 :E: Nat) -> Nat 
      n :E: Nat
        times -E- Z -E- n = Z
      m :E: Nat n :E: Nat
        times -E- (S -R- m) -E- n = plus -E- n -E- (times -E- m -E- n)
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    not :E: (_x4 :E: Bool) -> Bool 
      not -E- True = False
      not -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :E: Unit
    constructor Pair :E: (_x5 :E: Type) -> (_x6 :E: Type) -> Type
    constructor MkPair :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: a) -> (_x8 :E: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x9 :E: Pair -E- a -E- b) -> a 
      a :E: Type b :E: Type x :E: a y :E: b
        fst -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = x
    snd :E: (a :E: Type) -> (b :E: Type) -> (_x10 :E: Pair -E- a -E- b) -> b 
      a :E: Type b :E: Type x :E: a y :E: b
        snd -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = y
    constructor Either :E: (_x11 :E: Type) -> (_x12 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x13 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x14 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x15 :E: Nat) -> Type
    constructor FZ :R: (n :E: Nat) -> Fin -E- (S -R- n)
    constructor FS :R: (n :E: Nat) -> (_x16 :R: Fin -E- n) -> Fin -E- (S -R- n)
    constructor Vect :E: (_x17 :E: Nat) -> (_x18 :E: Type) -> Type
    constructor VN :R: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :R: (n :E: Nat) -> (a :E: Type) -> (x :R: a) -> (xs :R: Vect -E- n -E- a) -> Vect -E- (S -R- n) -E- a
    constructor TT :E: (_x0 :E: Nat) -> Type
    constructor V :R: (n :E: Nat) -> (_x1 :R: Fin -E- n) -> TT -E- n
    constructor Lam :R: (n :E: Nat) -> (_x2 :R: TT -E- (S -R- n)) -> TT -E- n
    constructor App :R: (n :E: Nat) -> (_x3 :R: TT -E- n) -> (_x4 :R: TT -E- n) -> TT -E- n
    env :R: (m :E: Nat) -> (n :E: Nat) -> (xs :R: Vect -E- m -E- (TT -E- n)) -> (_x5 :R: Fin -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat x :R: TT -E- n xs :R: Vect -E- m -E- (TT -E- n)
        env -E- [S -R- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FZ -E- m) = x
      m :E: Nat n :E: Nat x :R: TT -E- n xs :R: Vect -E- m -E- (TT -E- n) i :R: Fin -E- m
        env -E- [S -R- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FS -E- m -R- i) = env -E- m -E- n -R- xs -R- i
    extendMap :R: (m :E: Nat) -> (n :E: Nat) -> (_x6 :R: (_x7 :R: Fin -E- m) -> Fin -E- n) -> (_x8 :R: Fin -E- (S -R- m)) -> Fin -E- (S -R- n) 
      m :E: Nat n :E: Nat f :R: (_x9 :R: Fin -E- m) -> Fin -E- n
        extendMap -E- m -E- n -R- f -R- (FZ -E- [m]) = FZ -E- n
      m :E: Nat n :E: Nat f :R: (_x10 :R: Fin -E- m) -> Fin -E- n i :R: Fin -E- m
        extendMap -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = FS -E- n -R- (f -R- i)
    mapVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x11 :R: (_x12 :R: Fin -E- m) -> Fin -E- n) -> (_x13 :R: TT -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat f :R: (_x14 :R: Fin -E- m) -> Fin -E- n i :R: Fin -E- m
        mapVars -E- m -E- n -R- f -R- (V -E- [m] -R- i) = V -E- n -R- (f -R- i)
      m :E: Nat n :E: Nat f :R: (_x15 :R: Fin -E- m) -> Fin -E- n x :R: TT -E- (S -R- m)
        mapVars -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (mapVars -E- (S -R- m) -E- (S -R- n) -R- (extendMap -E- m -E- n -R- f) -R- x)
      m :E: Nat n :E: Nat f :R: (_x16 :R: Fin -E- m) -> Fin -E- n g :R: TT -E- m x :R: TT -E- m
        mapVars -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (mapVars -E- m -E- n -R- f -R- g) -R- (mapVars -E- m -E- n -R- f -R- x)
    extendSubst :R: (m :E: Nat) -> (n :E: Nat) -> (_x17 :R: (_x18 :R: Fin -E- m) -> TT -E- n) -> (_x19 :R: Fin -E- (S -R- m)) -> TT -E- (S -R- n) 
      m :E: Nat n :E: Nat f :R: (_x20 :R: Fin -E- m) -> TT -E- n
        extendSubst -E- m -E- n -R- f -R- (FZ -E- [m]) = V -E- (S -R- n) -R- (FZ -E- n)
      m :E: Nat n :E: Nat f :R: (_x21 :R: Fin -E- m) -> TT -E- n i :R: Fin -E- m
        extendSubst -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = mapVars -E- n -E- (S -R- n) -R- (FS -E- n) -R- (f -R- i)
    substVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x22 :R: (_x23 :R: Fin -E- m) -> TT -E- n) -> (_x24 :R: TT -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat f :R: (_x25 :R: Fin -E- m) -> TT -E- n i :R: Fin -E- m
        substVars -E- m -E- n -R- f -R- (V -E- [m] -R- i) = f -R- i
      m :E: Nat n :E: Nat f :R: (_x26 :R: Fin -E- m) -> TT -E- n x :R: TT -E- (S -R- m)
        substVars -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (substVars -E- (S -R- m) -E- (S -R- n) -R- (extendSubst -E- m -E- n -R- f) -R- x)
      m :E: Nat n :E: Nat f :R: (_x27 :R: Fin -E- m) -> TT -E- n g :R: TT -E- m x :R: TT -E- m
        substVars -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (substVars -E- m -E- n -R- f -R- g) -R- (substVars -E- m -E- n -R- f -R- x)
    testTm :R: TT -E- 1 = App -E- 1 -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FZ -E- 1)) -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))) -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (V -E- 2 -R- (FZ -E- 1))))
    example1 :R: TT -E- Z = substVars -E- 1 -E- Z -R- (env -E- 1 -E- Z -R- (VC -E- Z -E- (TT -E- Z) -R- (Lam -E- Z -R- (V -E- 1 -R- (FZ -E- Z))) -R- (VN -E- (TT -E- Z)))) -R- testTm
    substTop :R: (n :E: Nat) -> (_x28 :R: TT -E- n) -> (_x29 :R: Fin -E- (S -R- n)) -> TT -E- n 
      n :E: Nat tm :R: TT -E- n
        substTop -E- n -R- tm -R- (FZ -E- [n]) = tm
      n :E: Nat tm :R: TT -E- n i :R: Fin -E- n
        substTop -E- n -R- tm -R- (FS -E- [n] -R- i) = V -E- n -R- i
    nf :R: (m :E: Nat) -> (_x30 :R: TT -E- m) -> TT -E- m 
      m :E: Nat i :R: Fin -E- m
        nf -E- m -R- (V -E- [m] -R- i) = V -E- m -R- i
      m :E: Nat x :R: TT -E- (S -R- m)
        nf -E- m -R- (Lam -E- [m] -R- x) = Lam -E- m -R- (nf -E- (S -R- m) -R- x)
      m :E: Nat f :R: TT -E- m x :R: TT -E- m
        nf -E- m -R- (App -E- [m] -R- f -R- x) = 
          let g :R: (_x31 :R: TT -E- m) -> TT -E- m 
            y :R: TT -E- (S -R- m)
              g -R- (Lam -E- [m] -R- y) = nf -E- m -R- (substVars -E- (S -R- m) -E- m -R- (substTop -E- m -R- (nf -E- m -R- x)) -R- y)
            f' :R: TT -E- m
              g -R- f' = App -E- m -R- f' -R- (nf -E- m -R- x)
          in g -R- (nf -E- m -R- f)
    example2 :R: TT -E- 1 = nf -E- 1 -R- testTm
    constructor Result :E: Type
    constructor R :R: (x :R: TT -E- Z) -> (y :R: TT -E- 1) -> Result
    main :R: Result = R -R- example1 -R- example2
  in main

### Specialised ###

  let
    constructor Nat :E: Type
    constructor Z :E: Nat
    constructor S :E: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      n :E: Nat
        plus -E- Z -E- n = n
      m :E: Nat n :E: Nat
        plus -E- (S -R- m) -E- n = S -R- (plus -E- m -E- n)
    times :E: (_x2 :E: Nat) -> (_x3 :E: Nat) -> Nat 
      n :E: Nat
        times -E- Z -E- n = Z
      m :E: Nat n :E: Nat
        times -E- (S -R- m) -E- n = plus -E- n -E- (times -E- m -E- n)
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    not :E: (_x4 :E: Bool) -> Bool 
      not -E- True = False
      not -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :E: Unit
    constructor Pair :E: (_x5 :E: Type) -> (_x6 :E: Type) -> Type
    constructor MkPair :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: a) -> (_x8 :E: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x9 :E: Pair -E- a -E- b) -> a 
      a :E: Type b :E: Type x :E: a y :E: b
        fst -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = x
    snd :E: (a :E: Type) -> (b :E: Type) -> (_x10 :E: Pair -E- a -E- b) -> b 
      a :E: Type b :E: Type x :E: a y :E: b
        snd -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = y
    constructor Either :E: (_x11 :E: Type) -> (_x12 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x13 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x14 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x15 :E: Nat) -> Type
    constructor FZ :R: (n :E: Nat) -> Fin -E- (S -R- n)
    constructor FS :R: (n :E: Nat) -> (_x16 :R: Fin -E- n) -> Fin -E- (S -R- n)
    constructor Vect :E: (_x17 :E: Nat) -> (_x18 :E: Type) -> Type
    constructor VN :R: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :R: (n :E: Nat) -> (a :E: Type) -> (x :R: a) -> (xs :R: Vect -E- n -E- a) -> Vect -E- (S -R- n) -E- a
    constructor TT :E: (_x0 :E: Nat) -> Type
    constructor V :R: (n :E: Nat) -> (_x1 :R: Fin -E- n) -> TT -E- n
    constructor Lam :R: (n :E: Nat) -> (_x2 :R: TT -E- (S -R- n)) -> TT -E- n
    constructor App :R: (n :E: Nat) -> (_x3 :R: TT -E- n) -> (_x4 :R: TT -E- n) -> TT -E- n
    env :R: (m :E: Nat) -> (n :E: Nat) -> (xs :R: Vect -E- m -E- (TT -E- n)) -> (_x5 :R: Fin -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat x :R: TT -E- n xs :R: Vect -E- m -E- (TT -E- n)
        env -E- [S -R- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FZ -E- m) = x
      m :E: Nat n :E: Nat x :R: TT -E- n xs :R: Vect -E- m -E- (TT -E- n) i :R: Fin -E- m
        env -E- [S -R- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FS -E- m -R- i) = env -E- m -E- n -R- xs -R- i
    extendMap :R: (m :E: Nat) -> (n :E: Nat) -> (_x6 :R: (_x7 :R: Fin -E- m) -> Fin -E- n) -> (_x8 :R: Fin -E- (S -R- m)) -> Fin -E- (S -R- n) 
      m :E: Nat n :E: Nat f :R: (_x9 :R: Fin -E- m) -> Fin -E- n
        extendMap -E- m -E- n -R- f -R- (FZ -E- [m]) = FZ -E- n
      m :E: Nat n :E: Nat f :R: (_x10 :R: Fin -E- m) -> Fin -E- n i :R: Fin -E- m
        extendMap -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = FS -E- n -R- (f -R- i)
    mapVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x11 :R: (_x12 :R: Fin -E- m) -> Fin -E- n) -> (_x13 :R: TT -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat f :R: (_x14 :R: Fin -E- m) -> Fin -E- n i :R: Fin -E- m
        mapVars -E- m -E- n -R- f -R- (V -E- [m] -R- i) = V -E- n -R- (f -R- i)
      m :E: Nat n :E: Nat f :R: (_x15 :R: Fin -E- m) -> Fin -E- n x :R: TT -E- (S -R- m)
        mapVars -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (mapVars -E- (S -R- m) -E- (S -R- n) -R- (extendMap -E- m -E- n -R- f) -R- x)
      m :E: Nat n :E: Nat f :R: (_x16 :R: Fin -E- m) -> Fin -E- n g :R: TT -E- m x :R: TT -E- m
        mapVars -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (mapVars -E- m -E- n -R- f -R- g) -R- (mapVars -E- m -E- n -R- f -R- x)
    extendSubst :R: (m :E: Nat) -> (n :E: Nat) -> (_x17 :R: (_x18 :R: Fin -E- m) -> TT -E- n) -> (_x19 :R: Fin -E- (S -R- m)) -> TT -E- (S -R- n) 
      m :E: Nat n :E: Nat f :R: (_x20 :R: Fin -E- m) -> TT -E- n
        extendSubst -E- m -E- n -R- f -R- (FZ -E- [m]) = V -E- (S -R- n) -R- (FZ -E- n)
      m :E: Nat n :E: Nat f :R: (_x21 :R: Fin -E- m) -> TT -E- n i :R: Fin -E- m
        extendSubst -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = mapVars -E- n -E- (S -R- n) -R- (FS -E- n) -R- (f -R- i)
    substVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x22 :R: (_x23 :R: Fin -E- m) -> TT -E- n) -> (_x24 :R: TT -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat f :R: (_x25 :R: Fin -E- m) -> TT -E- n i :R: Fin -E- m
        substVars -E- m -E- n -R- f -R- (V -E- [m] -R- i) = f -R- i
      m :E: Nat n :E: Nat f :R: (_x26 :R: Fin -E- m) -> TT -E- n x :R: TT -E- (S -R- m)
        substVars -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (substVars -E- (S -R- m) -E- (S -R- n) -R- (extendSubst -E- m -E- n -R- f) -R- x)
      m :E: Nat n :E: Nat f :R: (_x27 :R: Fin -E- m) -> TT -E- n g :R: TT -E- m x :R: TT -E- m
        substVars -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (substVars -E- m -E- n -R- f -R- g) -R- (substVars -E- m -E- n -R- f -R- x)
    testTm :R: TT -E- 1 = App -E- 1 -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FZ -E- 1)) -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))) -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (V -E- 2 -R- (FZ -E- 1))))
    example1 :R: TT -E- Z = substVars -E- 1 -E- Z -R- (env -E- 1 -E- Z -R- (VC -E- Z -E- (TT -E- Z) -R- (Lam -E- Z -R- (V -E- 1 -R- (FZ -E- Z))) -R- (VN -E- (TT -E- Z)))) -R- testTm
    substTop :R: (n :E: Nat) -> (_x28 :R: TT -E- n) -> (_x29 :R: Fin -E- (S -R- n)) -> TT -E- n 
      n :E: Nat tm :R: TT -E- n
        substTop -E- n -R- tm -R- (FZ -E- [n]) = tm
      n :E: Nat tm :R: TT -E- n i :R: Fin -E- n
        substTop -E- n -R- tm -R- (FS -E- [n] -R- i) = V -E- n -R- i
    nf :R: (m :E: Nat) -> (_x30 :R: TT -E- m) -> TT -E- m 
      m :E: Nat i :R: Fin -E- m
        nf -E- m -R- (V -E- [m] -R- i) = V -E- m -R- i
      m :E: Nat x :R: TT -E- (S -R- m)
        nf -E- m -R- (Lam -E- [m] -R- x) = Lam -E- m -R- (nf -E- (S -R- m) -R- x)
      m :E: Nat f :R: TT -E- m x :R: TT -E- m
        nf -E- m -R- (App -E- [m] -R- f -R- x) = 
          let g :R: (_x31 :R: TT -E- m) -> TT -E- m 
            y :R: TT -E- (S -R- m)
              g -R- (Lam -E- [m] -R- y) = nf -E- m -R- (substVars -E- (S -R- m) -E- m -R- (substTop -E- m -R- (nf -E- m -R- x)) -R- y)
            f' :R: TT -E- m
              g -R- f' = App -E- m -R- f' -R- (nf -E- m -R- x)
          in g -R- (nf -E- m -R- f)
    example2 :R: TT -E- 1 = nf -E- 1 -R- testTm
    constructor Result :E: Type
    constructor R :R: (x :R: TT -E- Z) -> (y :R: TT -E- 1) -> Result
    main :R: Result = R -R- example1 -R- example2
  in main

### Final annotation ###

  let
    constructor Nat :E: Type
    constructor Z :E: Nat
    constructor S :E: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      n :E: Nat
        plus -E- Z -E- n = n
      m :E: Nat n :E: Nat
        plus -E- (S -R- m) -E- n = S -R- (plus -E- m -E- n)
    times :E: (_x2 :E: Nat) -> (_x3 :E: Nat) -> Nat 
      n :E: Nat
        times -E- Z -E- n = Z
      m :E: Nat n :E: Nat
        times -E- (S -R- m) -E- n = plus -E- n -E- (times -E- m -E- n)
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    not :E: (_x4 :E: Bool) -> Bool 
      not -E- True = False
      not -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :E: Unit
    constructor Pair :E: (_x5 :E: Type) -> (_x6 :E: Type) -> Type
    constructor MkPair :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: a) -> (_x8 :E: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x9 :E: Pair -E- a -E- b) -> a 
      a :E: Type b :E: Type x :E: a y :E: b
        fst -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = x
    snd :E: (a :E: Type) -> (b :E: Type) -> (_x10 :E: Pair -E- a -E- b) -> b 
      a :E: Type b :E: Type x :E: a y :E: b
        snd -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = y
    constructor Either :E: (_x11 :E: Type) -> (_x12 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x13 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x14 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x15 :E: Nat) -> Type
    constructor FZ :R: (n :E: Nat) -> Fin -E- (S -R- n)
    constructor FS :R: (n :E: Nat) -> (_x16 :R: Fin -E- n) -> Fin -E- (S -R- n)
    constructor Vect :E: (_x17 :E: Nat) -> (_x18 :E: Type) -> Type
    constructor VN :R: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :R: (n :E: Nat) -> (a :E: Type) -> (x :R: a) -> (xs :R: Vect -E- n -E- a) -> Vect -E- (S -R- n) -E- a
    constructor TT :E: (_x0 :E: Nat) -> Type
    constructor V :R: (n :E: Nat) -> (_x1 :R: Fin -E- n) -> TT -E- n
    constructor Lam :R: (n :E: Nat) -> (_x2 :R: TT -E- (S -R- n)) -> TT -E- n
    constructor App :R: (n :E: Nat) -> (_x3 :R: TT -E- n) -> (_x4 :R: TT -E- n) -> TT -E- n
    env :R: (m :E: Nat) -> (n :E: Nat) -> (xs :R: Vect -E- m -E- (TT -E- n)) -> (_x5 :R: Fin -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat x :R: TT -E- n xs :R: Vect -E- m -E- (TT -E- n)
        env -E- [S -R- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FZ -E- m) = x
      m :E: Nat n :E: Nat x :R: TT -E- n xs :R: Vect -E- m -E- (TT -E- n) i :R: Fin -E- m
        env -E- [S -R- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FS -E- m -R- i) = env -E- m -E- n -R- xs -R- i
    extendMap :R: (m :E: Nat) -> (n :E: Nat) -> (_x6 :R: (_x7 :R: Fin -E- m) -> Fin -E- n) -> (_x8 :R: Fin -E- (S -R- m)) -> Fin -E- (S -R- n) 
      m :E: Nat n :E: Nat f :R: (_x9 :R: Fin -E- m) -> Fin -E- n
        extendMap -E- m -E- n -R- f -R- (FZ -E- [m]) = FZ -E- n
      m :E: Nat n :E: Nat f :R: (_x10 :R: Fin -E- m) -> Fin -E- n i :R: Fin -E- m
        extendMap -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = FS -E- n -R- (f -R- i)
    mapVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x11 :R: (_x12 :R: Fin -E- m) -> Fin -E- n) -> (_x13 :R: TT -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat f :R: (_x14 :R: Fin -E- m) -> Fin -E- n i :R: Fin -E- m
        mapVars -E- m -E- n -R- f -R- (V -E- [m] -R- i) = V -E- n -R- (f -R- i)
      m :E: Nat n :E: Nat f :R: (_x15 :R: Fin -E- m) -> Fin -E- n x :R: TT -E- (S -R- m)
        mapVars -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (mapVars -E- (S -R- m) -E- (S -R- n) -R- (extendMap -E- m -E- n -R- f) -R- x)
      m :E: Nat n :E: Nat f :R: (_x16 :R: Fin -E- m) -> Fin -E- n g :R: TT -E- m x :R: TT -E- m
        mapVars -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (mapVars -E- m -E- n -R- f -R- g) -R- (mapVars -E- m -E- n -R- f -R- x)
    extendSubst :R: (m :E: Nat) -> (n :E: Nat) -> (_x17 :R: (_x18 :R: Fin -E- m) -> TT -E- n) -> (_x19 :R: Fin -E- (S -R- m)) -> TT -E- (S -R- n) 
      m :E: Nat n :E: Nat f :R: (_x20 :R: Fin -E- m) -> TT -E- n
        extendSubst -E- m -E- n -R- f -R- (FZ -E- [m]) = V -E- (S -R- n) -R- (FZ -E- n)
      m :E: Nat n :E: Nat f :R: (_x21 :R: Fin -E- m) -> TT -E- n i :R: Fin -E- m
        extendSubst -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = mapVars -E- n -E- (S -R- n) -R- (FS -E- n) -R- (f -R- i)
    substVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x22 :R: (_x23 :R: Fin -E- m) -> TT -E- n) -> (_x24 :R: TT -E- m) -> TT -E- n 
      m :E: Nat n :E: Nat f :R: (_x25 :R: Fin -E- m) -> TT -E- n i :R: Fin -E- m
        substVars -E- m -E- n -R- f -R- (V -E- [m] -R- i) = f -R- i
      m :E: Nat n :E: Nat f :R: (_x26 :R: Fin -E- m) -> TT -E- n x :R: TT -E- (S -R- m)
        substVars -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (substVars -E- (S -R- m) -E- (S -R- n) -R- (extendSubst -E- m -E- n -R- f) -R- x)
      m :E: Nat n :E: Nat f :R: (_x27 :R: Fin -E- m) -> TT -E- n g :R: TT -E- m x :R: TT -E- m
        substVars -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (substVars -E- m -E- n -R- f -R- g) -R- (substVars -E- m -E- n -R- f -R- x)
    testTm :R: TT -E- 1 = App -E- 1 -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FZ -E- 1)) -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))) -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (V -E- 2 -R- (FZ -E- 1))))
    example1 :R: TT -E- Z = substVars -E- 1 -E- Z -R- (env -E- 1 -E- Z -R- (VC -E- Z -E- (TT -E- Z) -R- (Lam -E- Z -R- (V -E- 1 -R- (FZ -E- Z))) -R- (VN -E- (TT -E- Z)))) -R- testTm
    substTop :R: (n :E: Nat) -> (_x28 :R: TT -E- n) -> (_x29 :R: Fin -E- (S -R- n)) -> TT -E- n 
      n :E: Nat tm :R: TT -E- n
        substTop -E- n -R- tm -R- (FZ -E- [n]) = tm
      n :E: Nat tm :R: TT -E- n i :R: Fin -E- n
        substTop -E- n -R- tm -R- (FS -E- [n] -R- i) = V -E- n -R- i
    nf :R: (m :E: Nat) -> (_x30 :R: TT -E- m) -> TT -E- m 
      m :E: Nat i :R: Fin -E- m
        nf -E- m -R- (V -E- [m] -R- i) = V -E- m -R- i
      m :E: Nat x :R: TT -E- (S -R- m)
        nf -E- m -R- (Lam -E- [m] -R- x) = Lam -E- m -R- (nf -E- (S -R- m) -R- x)
      m :E: Nat f :R: TT -E- m x :R: TT -E- m
        nf -E- m -R- (App -E- [m] -R- f -R- x) = 
          let g :R: (_x31 :R: TT -E- m) -> TT -E- m 
            y :R: TT -E- (S -R- m)
              g -R- (Lam -E- [m] -R- y) = nf -E- m -R- (substVars -E- (S -R- m) -E- m -R- (substTop -E- m -R- (nf -E- m -R- x)) -R- y)
            f' :R: TT -E- m
              g -R- f' = App -E- m -R- f' -R- (nf -E- m -R- x)
          in g -R- (nf -E- m -R- f)
    example2 :R: TT -E- 1 = nf -E- 1 -R- testTm
    constructor Result :E: Type
    constructor R :R: (x :R: TT -E- Z) -> (y :R: TT -E- 1) -> Result
    main :R: Result = R -R- example1 -R- example2
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor FZ : Fin
    constructor FS : (_x16) -> Fin
    constructor VN : Vect
    constructor VC : (x) -> (xs) -> Vect
    constructor V : (_x1) -> TT
    constructor Lam : (_x2) -> TT
    constructor App : (_x3) -> (_x4) -> TT
    env 
      env (VC x xs) FZ = x
      env (VC x xs) (FS i) = env xs i
    extendMap 
      extendMap f FZ = FZ
      extendMap f (FS i) = FS (f i)
    mapVars 
      mapVars f (V i) = V (f i)
      mapVars f (Lam x) = Lam (mapVars (extendMap f) x)
      mapVars f (App g x) = App (mapVars f g) (mapVars f x)
    extendSubst 
      extendSubst f FZ = V FZ
      extendSubst f (FS i) = mapVars FS (f i)
    substVars 
      substVars f (V i) = f i
      substVars f (Lam x) = Lam (substVars (extendSubst f) x)
      substVars f (App g x) = App (substVars f g) (substVars f x)
    testTm = App (Lam (App (V FZ) (V (FS FZ)))) (Lam (App (V (FS FZ)) (V FZ)))
    example1 = substVars (env (VC (Lam (V FZ)) VN)) testTm
    substTop 
      substTop tm FZ = tm
      substTop tm (FS i) = V i
    nf 
      nf (V i) = V i
      nf (Lam x) = Lam (nf x)
      nf (App f x) = 
        let g 
          g (Lam y) = nf (substVars (substTop (nf x)) y)
          g f' = App f' (nf x)
        in g (nf f)
    example2 = nf testTm
    constructor R : (x) -> (y) -> Result
    main = R example1 example2
  in main

### Intermediate representation ###

let FZ = constructor 0
  in let FS = constructor 1
    in let VN = constructor 0
      in let VC = constructor 2
        in let V = constructor 1
          in let Lam = constructor 1
            in let App = constructor 2
              in let env = \_pv0. \_pv1.
                case _pv0 of
                  VC _pv2 _pv3 => case _pv1 of
                    FS _pv4 => ((env _pv3) _pv4)
                    FZ => _pv2
                in let extendMap = \_pv0. \_pv1.
                  case _pv1 of
                    FS _pv2 => (FS (_pv0 _pv2))
                    FZ => FZ
                  in let mapVars = \_pv0. \_pv1.
                    case _pv1 of
                      App _pv2 _pv3 => ((App ((mapVars _pv0) _pv2)) ((mapVars _pv0) _pv3))
                      Lam _pv2 => (Lam ((mapVars (extendMap _pv0)) _pv2))
                      V _pv2 => (V (_pv0 _pv2))
                    in let extendSubst = \_pv0. \_pv1.
                      case _pv1 of
                        FS _pv2 => ((mapVars FS) (_pv0 _pv2))
                        FZ => (V FZ)
                      in let substVars = \_pv0. \_pv1.
                        case _pv1 of
                          App _pv2 _pv3 => ((App ((substVars _pv0) _pv2)) ((substVars _pv0) _pv3))
                          Lam _pv2 => (Lam ((substVars (extendSubst _pv0)) _pv2))
                          V _pv2 => (_pv0 _pv2)
                        in let testTm = ((App (Lam ((App (V FZ)) (V (FS FZ))))) (Lam ((App (V (FS FZ))) (V FZ))))
                          in let example1 = ((substVars (env ((VC (Lam (V FZ))) VN))) testTm)
                            in let substTop = \_pv0. \_pv1.
                              case _pv1 of
                                FS _pv2 => (V _pv2)
                                FZ => _pv0
                              in let nf = \_pv0.
                                case _pv0 of
                                  App _pv1 _pv2 => let g = \_pv3.
                                    case _pv3 of
                                      Lam _pv4 => (nf ((substVars (substTop (nf _pv2))) _pv4))
                                      _ => ((App _pv3) (nf _pv2))
                                    in (g (nf _pv1))
                                  Lam _pv1 => (Lam (nf _pv1))
                                  V _pv1 => (V _pv1)
                                in let example2 = (nf testTm)
                                  in let R = constructor 2
                                    in let main = ((R example1) example2)
                                      in main

### Normal forms ###

unerased:
  
  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x :R: Nat) -> Nat
    constructor Fin : (_x15 : Nat) -> Type
    constructor FZ : (n : Nat) -> Fin (S n)
    constructor TT : (_x0 : Nat) -> Type
    constructor V : (n : Nat) -> (_x1 : Fin n) -> TT n
    constructor Lam : (n : Nat) -> (_x2 : TT (S n)) -> TT n
    constructor App : (n : Nat) -> (_x3 : TT n) -> (_x4 : TT n) -> TT n
    constructor Result : Type
    constructor R : (x :R: TT Z) -> (y :R: TT 1) -> Result
  in R (App Z (Lam Z (App 1 (V 1 (FZ Z)) (Lam 1 (V 2 (FZ 1))))) (Lam Z (App 1 (Lam 1 (V 2 (FZ 1))) (V 1 (FZ Z))))) (App 1 (V 1 (FZ Z)) (V 1 (FZ Z)))

erased:
  
  let
    constructor FZ : Fin
    constructor V : (_x1) -> TT
    constructor Lam : (_x2) -> TT
    constructor App : (_x3) -> (_x4) -> TT
    constructor R : (x) -> (y) -> Result
  in R (App (Lam (App (V FZ) (Lam (V FZ)))) (Lam (App (Lam (V FZ)) (V FZ)))) (App (V FZ) (V FZ))

