(import (chicken process-context))
(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (FZ `(FZ))
    (V (lambda (_x1)
      `(V ,_x1)))
    (Lam (lambda (_x2)
      `(Lam ,_x2)))
    (App (lambda (_x3)
      (lambda (_x4)
        `(App ,_x3 ,_x4))))
    (R (lambda (x)
      (lambda (y)
        `(R ,x ,y))))
  )
    ((R ((App (Lam ((App (V FZ)) (Lam (V FZ))))) (Lam ((App (Lam (V FZ))) (V FZ))))) ((App (V FZ)) (V FZ)))))
