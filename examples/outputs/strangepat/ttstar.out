-- vim: ft=ttstar

### Desugared ###

  let
    constructor Bool : Type
    constructor T : Bool
    constructor F : Bool
    constructor Pair : Type
    constructor P : (_x0 : Bool) -> (_x1 : Bool) -> Pair
    fst : (_x2 : (_x3 : Bool) -> Pair) -> Bool 
      y : Bool
        fst (P y) = y
    main : Bool = fst (P T)
  in main

### Evarified ###

  let
    constructor Bool :1: Type
    constructor T :2: Bool
    constructor F :3: Bool
    constructor Pair :4: Type
    constructor P :5: (_x0 :6: Bool) -> (_x1 :7: Bool) -> Pair
    fst :8: (_x2 :9: (_x3 :10: Bool) -> Pair) -> Bool 
      y :11: Bool
        fst -12- (P -13- y) = y
    main :14: Bool = fst -15- (P -16- T)
  in main

### Constraints ###

[] -> [14]
[6] -> [13,16]
[7] -> [10]
[8] -> [5,8,11,12]
[8,12,13] -> [11]
[9] -> [12,15]
[10] -> [7]
[11] -> [8,12,13]
[12] -> [9]
[13] -> [6]
[14] -> [8]
[14,15] -> [5]
[14,15,16] -> [2]
[15] -> [9]
[16] -> [6]

### Solution ###

[2,5,6,8,9,11,12,13,14,15,16,R]

### Annotated ###

  let
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :E: Bool
    constructor Pair :E: Type
    constructor P :R: (_x0 :R: Bool) -> (_x1 :E: Bool) -> Pair
    fst :R: (_x2 :R: (_x3 :E: Bool) -> Pair) -> Bool 
      y :R: Bool
        fst -R- (P -R- y) = y
    main :R: Bool = fst -R- (P -R- T)
  in main

### Specialised ###

  let
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :E: Bool
    constructor Pair :E: Type
    constructor P :R: (_x0 :R: Bool) -> (_x1 :E: Bool) -> Pair
    fst :R: (_x2 :R: (_x3 :E: Bool) -> Pair) -> Bool 
      y :R: Bool
        fst -R- (P -R- y) = y
    main :R: Bool = fst -R- (P -R- T)
  in main

### Final annotation ###

  let
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :E: Bool
    constructor Pair :E: Type
    constructor P :R: (_x0 :R: Bool) -> (_x1 :E: Bool) -> Pair
    fst :R: (_x2 :R: (_x3 :E: Bool) -> Pair) -> Bool 
      y :R: Bool
        fst -R- (P -R- y) = y
    main :R: Bool = fst -R- (P -R- T)
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor T : Bool
    constructor P : (_x0) -> Pair
    fst 
      fst (P y) = y
    main = fst (P T)
  in main

### Intermediate representation ###

let T = constructor 0
  in let P = constructor 1
    in let fst = \_pv0.
      case _pv0 of
        P _pv1 => _pv1
      in let main = (fst (P T))
        in main

### Normal forms ###

unerased:
  
  let
    constructor Bool : Type
    constructor T : Bool
  in T

erased:
  
  let constructor T : Bool
  in T

