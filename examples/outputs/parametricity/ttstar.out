-- vim: ft=ttstar

### Desugared ###

  let
    constructor Id : (a : Type) -> (x : a) -> (y : a) -> Type
    constructor Refl : (a : Type) -> (x : a) -> Id a x x
    constL : (a : Type) -> (x : a) -> (y : a) -> a = (\a : Type. (\x : a. (\y : a. x)))
    constR : (a : Type) -> (x : a) -> (y : a) -> a = (\a : Type. (\x : a. (\y : a. y)))
    constructor B : Type
    constructor T : B
    constructor F : B
    f : (g : (a :E: Type) -> (x :E: a) -> (y :R: a) -> a) -> B = (\g : (a :E: Type) -> (x :E: a) -> (y :R: a) -> a. g B T F)
    main : B = f constR
  in main

### Elaborated ###

  let
    constructor Id : (a : Type) -> (x : a) -> (y : a) -> Type
    constructor Refl : (a : Type) -> (x : a) -> Id a x x
    constL : (a : Type) -> (x : a) -> (y : a) -> a = (\a : Type. (\x : a. (\y : a. x)))
    constR : (a : Type) -> (x : a) -> (y : a) -> a = (\a : Type. (\x : a. (\y : a. y)))
    constructor B : Type
    constructor T : B
    constructor F : B
    f : (g : (a :E: Type) -> (x :E: a) -> (y :R: a) -> a) -> B = (\g : (a :E: Type) -> (x :E: a) -> (y :R: a) -> a. g B T F)
    main : B = f constR
  in main

### Evarified ###

  let
    constructor Id :1: (a :2: Type) -> (x :3: a) -> (y :4: a) -> Type
    constructor Refl :5: (a :6: Type) -> (x :7: a) -> Id -10- a -9- x -8- x
    constL :11: (a :12: Type) -> (x :13: a) -> (y :14: a) -> a = (\a :15: Type. (\x :16: a. (\y :17: a. x)))
    constR :18: (a :19: Type) -> (x :20: a) -> (y :21: a) -> a = (\a :22: Type. (\x :23: a. (\y :24: a. y)))
    constructor B :25: Type
    constructor T :26: B
    constructor F :27: B
    f :28: (g :29: (a :E: Type) -> (x :E: a) -> (y :R: a) -> a) -> B = (\g :30: (a :E: Type) -> (x :E: a) -> (y :R: a) -> a. g -33- B -32- T -31- F)
    main :34: B = f -35- constR
  in main

### Constraints ###

[] -> [21,31,34]
[2] -> [10]
[3] -> [9]
[4] -> [8]
[8] -> [4]
[9] -> [3]
[10] -> [2]
[11] -> [16]
[12] -> [15]
[13] -> [16]
[14] -> [17]
[15] -> [12]
[16] -> [13]
[17] -> [14]
[18] -> [24]
[19] -> [22,E]
[20] -> [23,E]
[21] -> [24]
[22] -> [19]
[23] -> [20]
[24] -> [21]
[28] -> [30]
[28,31] -> [27]
[28,32] -> [26]
[28,33] -> [25]
[29] -> [30,35]
[30] -> [29]
[32] -> [E]
[33] -> [E]
[34] -> [28]
[34,35] -> [18]
[35] -> [29]

### Solution ###

[18,21,24,27,28,29,30,31,34,35,R]

### Annotated ###

  let
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    constL :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> a = (\a :E: Type. (\x :E: a. (\y :E: a. x)))
    constR :R: (a :E: Type) -> (x :E: a) -> (y :R: a) -> a = (\a :E: Type. (\x :E: a. (\y :R: a. y)))
    constructor B :E: Type
    constructor T :E: B
    constructor F :R: B
    f :R: (g :R: (a :E: Type) -> (x :E: a) -> (y :R: a) -> a) -> B = (\g :R: (a :E: Type) -> (x :E: a) -> (y :R: a) -> a. g -E- B -E- T -R- F)
    main :R: B = f -R- constR
  in main

### Specialised ###

  let
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    constL :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> a = (\a :E: Type. (\x :E: a. (\y :E: a. x)))
    constR :R: (a :E: Type) -> (x :E: a) -> (y :R: a) -> a = (\a :E: Type. (\x :E: a. (\y :R: a. y)))
    constructor B :E: Type
    constructor T :E: B
    constructor F :R: B
    f :R: (g :R: (a :E: Type) -> (x :E: a) -> (y :R: a) -> a) -> B = (\g :R: (a :E: Type) -> (x :E: a) -> (y :R: a) -> a. g -E- B -E- T -R- F)
    main :R: B = f -R- constR
  in main

### Final annotation ###

  let
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    constL :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> a = (\a :E: Type. (\x :E: a. (\y :E: a. x)))
    constR :R: (a :E: Type) -> (x :E: a) -> (y :R: a) -> a = (\a :E: Type. (\x :E: a. (\y :R: a. y)))
    constructor B :E: Type
    constructor T :E: B
    constructor F :R: B
    f :R: (g :R: (a :E: Type) -> (x :E: a) -> (y :R: a) -> a) -> B = (\g :R: (a :E: Type) -> (x :E: a) -> (y :R: a) -> a. g -E- B -E- T -R- F)
    main :R: B = f -R- constR
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constR = (\y. y)
    constructor F : B
    f = (\g. g F)
    main = f constR
  in main

### Intermediate representation ###

let constR = \y. y
  in let F = constructor 0
    in let f = \g. (g F)
      in let main = (f constR)
        in main

### Normal forms ###

unerased:
  
  let
    constructor B : Type
    constructor F : B
  in F

erased:
  
  let constructor F : B
  in F

