(require-extension matchable)
(define Type #(Type))
(define (number->peano z s i) (if (= i 0) (vector z) (vector s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Z (vector 'Z))
    (S (lambda (_x0)
      (vector 'S _x0)))
    (T (vector 'T))
    (F (vector 'F))
    (Cons (lambda (_x1)
      (lambda (_x2)
        (vector 'Cons _x1 _x2))))
    (Nil (vector 'Nil))
    (Nothing (vector 'Nothing))
    (Just (vector 'Just))
    (not_TT (lambda (_e0)
      (match (list _e0)
        ((#('T))
          F)
        ((#('F))
          T))))
    (subst (match (list)
      (()
        (lambda (w)
          w))))
    (RNil (vector 'RNil))
    (RSnoc (lambda (x)
      (lambda (rxs)
        (vector 'RSnoc x rxs))))
    (rev_ (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((rxs #('Nil))
            (subst rxs))
          ((rxs #('Cons y ys))
            (subst ((rev_ ((RSnoc y) rxs)) ys)))))))
    (reverse_ (lambda (_e0)
      (match (list _e0)
        ((#('RNil))
          Nil)
        ((#('RSnoc x rxs))
          ((Cons x) (reverse_ rxs))))))
    (VNil (vector 'VNil))
    (VOne (vector 'VOne))
    (VTwo (lambda (x)
      (lambda (u)
        (lambda (y)
          (vector 'VTwo x u y)))))
    (length (lambda (_e0)
      (match (list _e0)
        ((#('Nil))
          Z)
        ((#('Cons _ xs))
          (S (length xs))))))
    (build (lambda (_e0)
      (lambda (_e1)
        (lambda (_e2)
          (match (list _e0 _e1 _e2)
            ((#('Z) _ _)
              VNil)
            ((#('S #('Z)) #('Cons _ _) #('Cons _ _))
              VOne)
            ((#('S #('S n)) #('Cons x xs) #('Cons y ys))
              (((VTwo x) (((build n) xs) ys)) y))
            ((#('S _) #('Nil) #('Nil))
              VNil))))))
    (decEq (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((#('T) #('T))
            Just)
          ((#('F) #('F))
            Just)
          ((#('T) #('F))
            Nothing)
          ((#('F) #('T))
            Nothing)))))
    (isPalinV (lambda (_e0)
      (match (list _e0)
        ((#('VNil))
          Just)
        ((#('VOne))
          Just)
        ((#('VTwo x v y))
          (letrec* ((isPalinV_ (lambda (_e0)
            (lambda (_e1)
              (match (list _e0 _e1)
                ((#('Just) #('Just))
                  Just)
                ((_ _)
                  Nothing))))))
            ((isPalinV_ ((decEq x) y)) (isPalinV v)))))))
    (genList (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((_ #('Z))
            Nil)
          ((b #('S n))
            ((Cons b) ((genList (not_TT b)) n)))))))
    (isJust (lambda (_e0)
      (match (list _e0)
        ((#('Just))
          T)
        ((#('Nothing))
          F))))
  )
    (letrec* ((inputSize (rts-arg-peano 'Z 'S 0)))
      (isJust (isPalinV (((build (length ((genList T) inputSize))) ((genList T) inputSize)) (reverse_ ((rev_ RNil) ((genList T) inputSize)))))))))
