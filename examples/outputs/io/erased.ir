-- vim: ft=ttstar
let Z = constructor 0
  in let S = constructor 1
    in let MkPair = constructor 2
      in let snd = \_pv0.
        case _pv0 of
          _ _pv1 _pv2 => _pv2
        in let MkSt = constructor 1
          in let runState = \_pv0.
            case _pv0 of
              _ _pv1 => _pv1
            in let execState = \x. \s. (snd ((runState x) s))
              in let stGet = (MkSt \s. ((MkPair s) s))
                in let stReturn = \x. (MkSt \s. ((MkPair s) x))
                  in let stBind = \_pv0. \_pv1.
                    case _pv0 of
                      _ _pv2 => let stBind3 = \_pv3. \_pv4.
                        case _pv4 of
                          _ _pv5 => (_pv5 _pv3)
                        in let stBind2 = \_pv3. \_pv4.
                          case _pv4 of
                            _ _pv5 _pv6 => ((stBind3 _pv5) (_pv3 _pv6))
                          in (MkSt \s. ((stBind2 _pv1) (_pv2 s)))
                    in let ioReturn = \x. (stReturn x)
                      in let ioBind = \x. \y. ((stBind x) y)
                        in let ioWrapImpure = \impureF. ((stBind stGet) \w. (stReturn (impureF w)))
                          in let unsafePerformIO = \x. let TheWorld = constructor 0
                            in ((execState x) TheWorld)
                            in let intS = foreign "(lambda (x) (+ x 1))"
                              in let intZ = foreign "0"
                                in let printSchemeRepr = \x. let nativePrint = foreign "print"
                                  in (ioWrapImpure \w. (nativePrint x))
                                  in let natToInt = \_pv0.
                                    case _pv0 of
                                      S _pv1 => (intS (natToInt _pv1))
                                      Z => intZ
                                    in let intToNat = foreign "(lambda (x) (number->peano 'Z 'S x))"
                                      in let printNat = \x. (printSchemeRepr (natToInt x))
                                        in let main = (unsafePerformIO ((ioBind (ioReturn (S (S (S (S Z)))))) \v. ((ioBind (printNat v)) \_do0. (printSchemeRepr (intToNat (intS (intS (intS intZ))))))))
                                          in main
