-- vim: ft=ttstar

  let
    constructor Z : Nat
    constructor S : (x) -> Nat
    constructor MkPair : (_x7) -> (_x8) -> Pair
    snd 
      snd ([_] x y) = y
    constructor MkSt : (run) -> State
    runState 
      runState ([_] run) = run
    execState = (\x. (\s. snd (runState x s)))
    stGet = MkSt (\s. MkPair s s)
    stReturn = (\x. MkSt (\s. MkPair s x))
    stBind 
      stBind ([_] f) g = 
        let
          stBind3 
            stBind3 s ([_] f) = f s
          stBind2 
            stBind2 g ([_] s x) = stBind3 s (g x)
        in MkSt (\s. stBind2 g (f s))
    ioReturn = (\x. stReturn x)
    ioBind = (\x. (\y. stBind x y))
    ioWrapImpure = (\impureF. stBind stGet (\w. stReturn (impureF w)))
    unsafePerformIO = (\x. 
      let postulate TheWorld : RealWorld
      in execState x TheWorld)
    foreign intS
    foreign intZ
    printSchemeRepr = (\x. 
      let foreign nativePrint
      in ioWrapImpure (\w. nativePrint x))
    natToInt 
      natToInt Z = intZ
      natToInt (S n) = intS (natToInt n)
    foreign intToNat
    printNat = (\x. printSchemeRepr (natToInt x))
    main = unsafePerformIO (ioBind (ioReturn 4) (\v. ioBind (printNat v) (\_do0. printSchemeRepr (intToNat (intS (intS (intS intZ)))))))
  in main
