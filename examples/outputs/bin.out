-- vim: ft=ttstar

### Desugared ###

  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x :R: Nat) -> Nat
    plus : (_x0 : Nat) -> (_x1 : Nat) -> Nat 
      n : Nat
        [plus] Z n = n
      m : Nat n : Nat
        [plus] (S m) n = S (plus m n)
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    not : (_x2 : Bool) -> Bool 
      [not] True = False
      [not] False = True
    constructor Unit : Type
    constructor MkUnit : Unit
    constructor Pair : (_x3 : Type) -> (_x4 : Type) -> Type
    constructor MkPair : (a : Type) -> (b : Type) -> (_x5 : a) -> (_x6 : b) -> Pair a b
    fst : (a : Type) -> (b : Type) -> (_x7 : Pair a b) -> a 
      a : Type b : Type x : a y : b
        [fst] a b ([MkPair] [a] [b] x y) = x
    snd : (a : Type) -> (b : Type) -> (_x8 : Pair a b) -> b 
      a : Type b : Type x : a y : b
        [snd] a b ([MkPair] [a] [b] x y) = y
    constructor Either : (_x9 : Type) -> (_x10 : Type) -> Type
    constructor Left : (a : Type) -> (b : Type) -> (_x11 : a) -> Either a b
    constructor Right : (a : Type) -> (b : Type) -> (_x12 : b) -> Either a b
    id : (a : Type) -> (x : a) -> a = (\a : Type. (\x : a. x))
    constructor Fin : (_x13 : Nat) -> Type
    constructor FZ : (n : Nat) -> Fin (S n)
    constructor FS : (n : Nat) -> (_x14 : Fin n) -> Fin (S n)
    constructor Vect : (_x15 : Nat) -> (_x16 : Type) -> Type
    constructor VN : (a : Type) -> Vect Z a
    constructor VC : (n : Nat) -> (a : Type) -> (x : a) -> (xs : Vect n a) -> Vect (S n) a
    constructor Id : (a : Type) -> (x : a) -> (y : a) -> Type
    constructor Refl : (a : Type) -> (x : a) -> Id a x x
    subst : (a : Type) -> (P : (_x0 : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (_x1 : P x) -> P y 
      a : Type P : (_x2 : a) -> Type x : a
        [subst] a P x [x] [Refl a x] = (\z : P x. z)
    constructor Bit : (_x0 : Nat) -> Type
    constructor I : Bit 1
    constructor O : Bit Z
    double : (_x1 : Nat) -> Nat 
      [double] Z = Z
      n : Nat
        [double] (S n) = S (S (double n))
    constructor Bin : (width : Nat) -> (value : Nat) -> Type
    constructor N : Bin Z Z
    constructor C : (width : Nat) -> (lsbVal : Nat) -> (lsb :R: Bit lsbVal) -> (restVal : Nat) -> (rest :R: Bin width restVal) -> Bin (S width) (plus lsbVal (double restVal))
    constructor TwoBits : (_x2 : Nat) -> (_x3 : Nat) -> (_x4 : Nat) -> Type
    constructor TB : (c : Nat) -> (x : Nat) -> (y : Nat) -> (hi' : Nat) -> (hi : Bit hi') -> (lo' : Nat) -> (lo : Bit lo') -> (pf : Id Nat (plus c (plus x y)) (plus lo' (double hi'))) -> TwoBits c x y
    adb : (c : Nat) -> (x : Nat) -> (y : Nat) -> (_x5 : Bit c) -> (_x6 : Bit x) -> (_x7 : Bit y) -> TwoBits c x y 
      [adb] [Z] [Z] [Z] O O O = TB Z Z Z Z O Z O (Refl Nat Z)
      [adb] [1] [Z] [Z] I O O = TB 1 Z Z Z O 1 I (Refl Nat 1)
      [adb] [Z] [1] [Z] O I O = TB Z 1 Z Z O 1 I (Refl Nat 1)
      [adb] [Z] [Z] [1] O O I = TB Z Z 1 Z O 1 I (Refl Nat 1)
      [adb] [1] [1] [Z] I I O = TB 1 1 Z 1 I Z O (Refl Nat 2)
      [adb] [1] [Z] [1] I O I = TB 1 Z 1 1 I Z O (Refl Nat 2)
      [adb] [Z] [1] [1] O I I = TB Z 1 1 1 I Z O (Refl Nat 2)
      [adb] [1] [1] [1] I I I = TB 1 1 1 1 I 1 I (Refl Nat 3)
    add' : (w : Nat) -> (c : Nat) -> (x : Nat) -> (y : Nat) -> (_x8 : Bit c) -> (_x9 : Bin w x) -> (_x10 : Bin w y) -> Bin (S w) (plus c (plus x y)) 
      c : Nat cb : Bit c
        [add'] [Z] c [Z] [Z] cb N N = C Z c cb Z N
      w : Nat c : Nat cb : Bit c xb' : Nat xb : Bit xb' xn' : Nat xn : Bin w xn' yb' : Nat yb : Bit yb' yn' : Nat yn : Bin w yn'
        [add'] ([S] w) c [plus xb' (double xn')] [plus yb' (double yn')] cb (C [w] xb' xb xn' xn) (C [w] yb' yb yn' yn) = 
          let f : (_x11 : TwoBits c xb' yb') -> Bin (S (S w)) (plus c (plus (plus xb' (double xn')) (plus yb' (double yn')))) 
            hi' : Nat hi : Bit hi' lo' : Nat lo : Bit lo' pf : Id Nat (plus c (plus xb' yb')) (plus lo' (double hi'))
              [f] ([TB] [c] [xb'] [yb'] hi' hi lo' lo pf) = 
                let postulate eq : Id Nat (plus lo' (double (plus hi' (plus xn' yn')))) (plus c (plus (plus xb' (double xn')) (plus yb' (double yn'))))
                in subst Nat (Bin (S (S w))) (plus lo' (double (plus hi' (plus xn' yn')))) (plus c (plus (plus xb' (double xn')) (plus yb' (double yn')))) eq (C (S w) lo' lo (plus hi' (plus xn' yn')) (add' w hi' xn' yn' hi xn yn))
          in f (adb c xb' yb' cb xb yb)
    add : (w : Nat) -> (x : Nat) -> (y : Nat) -> (bx : Bin w x) -> (by : Bin w y) -> Bin (S w) (plus x y) = (\w : Nat. (\x : Nat. (\y : Nat. (\bx : Bin w x. (\by : Bin w y. add' w Z x y O bx by)))))
    foreign inputSize : Nat
    binVal : (_x12 : Bool) -> (_x13 : Nat) -> Nat 
      b : Bool
        [binVal] b Z = Z
      n : Nat
        [binVal] True (S n) = S (double (binVal False n))
      n : Nat
        [binVal] False (S n) = double (binVal True n)
    mkBin : (b : Bool) -> (w : Nat) -> Bin w (binVal b w) 
      b : Bool
        [mkBin] b Z = N
      n : Nat
        [mkBin] True (S n) = C n 1 I (binVal False n) (mkBin False n)
      n : Nat
        [mkBin] False (S n) = C n Z O (binVal True n) (mkBin True n)
    main : Bin (S inputSize) (plus (binVal True inputSize) (binVal False inputSize)) = 
      let
        x : Bin inputSize (binVal True inputSize) = mkBin True inputSize
        y : Bin inputSize (binVal False inputSize) = mkBin False inputSize
      in add inputSize (binVal True inputSize) (binVal False inputSize) x y
  in main

### Evarified ###

  let
    constructor Nat :1: Type
    constructor Z :2: Nat
    constructor S :3: (x :R: Nat) -> Nat
    plus :4: (_x0 :5: Nat) -> (_x1 :6: Nat) -> Nat 
      n :7: Nat
        [plus] -9- Z -8- n = n
      m :10: Nat n :11: Nat
        [plus] -13- (S -14- m) -12- n = S -15- (plus -17- m -16- n)
    constructor Bool :18: Type
    constructor True :19: Bool
    constructor False :20: Bool
    not :21: (_x2 :22: Bool) -> Bool 
      [not] -23- True = False
      [not] -24- False = True
    constructor Unit :25: Type
    constructor MkUnit :26: Unit
    constructor Pair :27: (_x3 :28: Type) -> (_x4 :29: Type) -> Type
    constructor MkPair :30: (a :31: Type) -> (b :32: Type) -> (_x5 :33: a) -> (_x6 :34: b) -> Pair -36- a -35- b
    fst :37: (a :38: Type) -> (b :39: Type) -> (_x7 :40: Pair -42- a -41- b) -> a 
      a :43: Type b :44: Type x :45: a y :46: b
        [fst] -49- a -48- b -47- ([MkPair] -53- [a] -52- [b] -51- x -50- y) = x
    snd :54: (a :55: Type) -> (b :56: Type) -> (_x8 :57: Pair -59- a -58- b) -> b 
      a :60: Type b :61: Type x :62: a y :63: b
        [snd] -66- a -65- b -64- ([MkPair] -70- [a] -69- [b] -68- x -67- y) = y
    constructor Either :71: (_x9 :72: Type) -> (_x10 :73: Type) -> Type
    constructor Left :74: (a :75: Type) -> (b :76: Type) -> (_x11 :77: a) -> Either -79- a -78- b
    constructor Right :80: (a :81: Type) -> (b :82: Type) -> (_x12 :83: b) -> Either -85- a -84- b
    id :86: (a :87: Type) -> (x :88: a) -> a = (\a :89: Type. (\x :90: a. x))
    constructor Fin :91: (_x13 :92: Nat) -> Type
    constructor FZ :93: (n :94: Nat) -> Fin -95- (S -96- n)
    constructor FS :97: (n :98: Nat) -> (_x14 :99: Fin -100- n) -> Fin -101- (S -102- n)
    constructor Vect :103: (_x15 :104: Nat) -> (_x16 :105: Type) -> Type
    constructor VN :106: (a :107: Type) -> Vect -109- Z -108- a
    constructor VC :110: (n :111: Nat) -> (a :112: Type) -> (x :113: a) -> (xs :114: Vect -116- n -115- a) -> Vect -118- (S -119- n) -117- a
    constructor Id :120: (a :121: Type) -> (x :122: a) -> (y :123: a) -> Type
    constructor Refl :124: (a :125: Type) -> (x :126: a) -> Id -129- a -128- x -127- x
    subst :130: (a :131: Type) -> (P :132: (_x0 :133: a) -> Type) -> (x :134: a) -> (y :135: a) -> (eq :136: Id -139- a -138- x -137- y) -> (_x1 :140: P -141- x) -> P -142- y 
      a :143: Type P :144: (_x2 :145: a) -> Type x :146: a
        [subst] -151- a -150- P -149- x -148- [x] -147- [Refl -153- a -152- x] = (\z :154: P -155- x. z)
    constructor Bit :156: (_x0 :157: Nat) -> Type
    constructor I :158: Bit -159- 1
    constructor O :161: Bit -162- Z
    double :163: (_x1 :164: Nat) -> Nat 
      [double] -165- Z = Z
      n :166: Nat
        [double] -167- (S -168- n) = S -169- (S -170- (double -171- n))
    constructor Bin :172: (width :173: Nat) -> (value :174: Nat) -> Type
    constructor N :175: Bin -177- Z -176- Z
    constructor C :178: (width :179: Nat) -> (lsbVal :180: Nat) -> (lsb :R: Bit -181- lsbVal) -> (restVal :182: Nat) -> (rest :R: Bin -184- width -183- restVal) -> Bin -186- (S -187- width) -185- (plus -189- lsbVal -188- (double -190- restVal))
    constructor TwoBits :191: (_x2 :192: Nat) -> (_x3 :193: Nat) -> (_x4 :194: Nat) -> Type
    constructor TB :195: (c :196: Nat) -> (x :197: Nat) -> (y :198: Nat) -> (hi' :199: Nat) -> (hi :200: Bit -201- hi') -> (lo' :202: Nat) -> (lo :203: Bit -204- lo') -> (pf :205: Id -208- Nat -207- (plus -210- c -209- (plus -212- x -211- y)) -206- (plus -214- lo' -213- (double -215- hi'))) -> TwoBits -218- c -217- x -216- y
    adb :219: (c :220: Nat) -> (x :221: Nat) -> (y :222: Nat) -> (_x5 :223: Bit -224- c) -> (_x6 :225: Bit -226- x) -> (_x7 :227: Bit -228- y) -> TwoBits -231- c -230- x -229- y 
      [adb] -237- [Z] -236- [Z] -235- [Z] -234- O -233- O -232- O = TB -245- Z -244- Z -243- Z -242- Z -241- O -240- Z -239- O -238- (Refl -247- Nat -246- Z)
      [adb] -253- [1] -252- [Z] -251- [Z] -250- I -249- O -248- O = TB -262- 1 -261- Z -260- Z -259- Z -258- O -257- 1 -256- I -255- (Refl -266- Nat -265- 1)
      [adb] -273- [Z] -272- [1] -271- [Z] -270- O -269- I -268- O = TB -282- Z -281- 1 -280- Z -279- Z -278- O -277- 1 -276- I -275- (Refl -286- Nat -285- 1)
      [adb] -293- [Z] -292- [Z] -291- [1] -290- O -289- O -288- I = TB -302- Z -301- Z -300- 1 -299- Z -298- O -297- 1 -296- I -295- (Refl -306- Nat -305- 1)
      [adb] -313- [1] -312- [1] -311- [Z] -310- I -309- I -308- O = TB -323- 1 -322- 1 -321- Z -320- 1 -319- I -318- Z -317- O -316- (Refl -328- Nat -327- 2)
      [adb] -336- [1] -335- [Z] -334- [1] -333- I -332- O -331- I = TB -346- 1 -345- Z -344- 1 -343- 1 -342- I -341- Z -340- O -339- (Refl -351- Nat -350- 2)
      [adb] -359- [Z] -358- [1] -357- [1] -356- O -355- I -354- I = TB -369- Z -368- 1 -367- 1 -366- 1 -365- I -364- Z -363- O -362- (Refl -374- Nat -373- 2)
      [adb] -382- [1] -381- [1] -380- [1] -379- I -378- I -377- I = TB -393- 1 -392- 1 -391- 1 -390- 1 -389- I -388- 1 -387- I -386- (Refl -400- Nat -399- 3)
    add' :404: (w :405: Nat) -> (c :406: Nat) -> (x :407: Nat) -> (y :408: Nat) -> (_x8 :409: Bit -410- c) -> (_x9 :411: Bin -413- w -412- x) -> (_x10 :414: Bin -416- w -415- y) -> Bin -418- (S -419- w) -417- (plus -421- c -420- (plus -423- x -422- y)) 
      c :424: Nat cb :425: Bit -426- c
        [add'] -433- [Z] -432- c -431- [Z] -430- [Z] -429- cb -428- N -427- N = C -438- Z -437- c -436- cb -435- Z -434- N
      w :439: Nat c :440: Nat cb :441: Bit -442- c xb' :443: Nat xb :444: Bit -445- xb' xn' :446: Nat xn :447: Bin -449- w -448- xn' yb' :450: Nat yb :451: Bit -452- yb' yn' :453: Nat yn :454: Bin -456- w -455- yn'
        [add'] -463- ([S] -464- w) -462- c -461- [plus -466- xb' -465- (double -467- xn')] -460- [plus -469- yb' -468- (double -470- yn')] -459- cb -458- (C -475- [w] -474- xb' -473- xb -472- xn' -471- xn) -457- (C -480- [w] -479- yb' -478- yb -477- yn' -476- yn) = 
          let f :481: (_x11 :482: TwoBits -485- c -484- xb' -483- yb') -> Bin -487- (S -488- (S -489- w)) -486- (plus -491- c -490- (plus -493- (plus -495- xb' -494- (double -496- xn')) -492- (plus -498- yb' -497- (double -499- yn')))) 
            hi' :500: Nat hi :501: Bit -502- hi' lo' :503: Nat lo :504: Bit -505- lo' pf :506: Id -509- Nat -508- (plus -511- c -510- (plus -513- xb' -512- yb')) -507- (plus -515- lo' -514- (double -516- hi'))
              [f] -517- ([TB] -525- [c] -524- [xb'] -523- [yb'] -522- hi' -521- hi -520- lo' -519- lo -518- pf) = 
                let postulate eq :526: Id -529- Nat -528- (plus -531- lo' -530- (double -532- (plus -534- hi' -533- (plus -536- xn' -535- yn')))) -527- (plus -538- c -537- (plus -540- (plus -542- xb' -541- (double -543- xn')) -539- (plus -545- yb' -544- (double -546- yn'))))
                in subst -552- Nat -551- (Bin -553- (S -554- (S -555- w))) -550- (plus -557- lo' -556- (double -558- (plus -560- hi' -559- (plus -562- xn' -561- yn')))) -549- (plus -564- c -563- (plus -566- (plus -568- xb' -567- (double -569- xn')) -565- (plus -571- yb' -570- (double -572- yn')))) -548- eq -547- (C -577- (S -578- w) -576- lo' -575- lo -574- (plus -580- hi' -579- (plus -582- xn' -581- yn')) -573- (add' -589- w -588- hi' -587- xn' -586- yn' -585- hi -584- xn -583- yn))
          in f -590- (adb -596- c -595- xb' -594- yb' -593- cb -592- xb -591- yb)
    add :597: (w :598: Nat) -> (x :599: Nat) -> (y :600: Nat) -> (bx :601: Bin -603- w -602- x) -> (by :604: Bin -606- w -605- y) -> Bin -608- (S -609- w) -607- (plus -611- x -610- y) = (\w :612: Nat. (\x :613: Nat. (\y :614: Nat. (\bx :615: Bin -617- w -616- x. (\by :618: Bin -620- w -619- y. add' -627- w -626- Z -625- x -624- y -623- O -622- bx -621- by)))))
    foreign inputSize :628: Nat
    binVal :629: (_x12 :630: Bool) -> (_x13 :631: Nat) -> Nat 
      b :632: Bool
        [binVal] -634- b -633- Z = Z
      n :635: Nat
        [binVal] -637- True -636- (S -638- n) = S -639- (double -640- (binVal -642- False -641- n))
      n :643: Nat
        [binVal] -645- False -644- (S -646- n) = double -647- (binVal -649- True -648- n)
    mkBin :650: (b :651: Bool) -> (w :652: Nat) -> Bin -654- w -653- (binVal -656- b -655- w) 
      b :657: Bool
        [mkBin] -659- b -658- Z = N
      n :660: Nat
        [mkBin] -662- True -661- (S -663- n) = C -668- n -667- 1 -666- I -665- (binVal -671- False -670- n) -664- (mkBin -673- False -672- n)
      n :674: Nat
        [mkBin] -676- False -675- (S -677- n) = C -682- n -681- Z -680- O -679- (binVal -684- True -683- n) -678- (mkBin -686- True -685- n)
    main :687: Bin -689- (S -690- inputSize) -688- (plus -692- (binVal -694- True -693- inputSize) -691- (binVal -696- False -695- inputSize)) = 
      let
        x :697: Bin -699- inputSize -698- (binVal -701- True -700- inputSize) = mkBin -703- True -702- inputSize
        y :704: Bin -706- inputSize -705- (binVal -708- False -707- inputSize) = mkBin -710- False -709- inputSize
      in add -715- inputSize -714- (binVal -717- True -716- inputSize) -713- (binVal -719- False -718- inputSize) -712- x -711- y
  in main

### Constraints ###

[] -> [2,3,19,20,130,140,154,158,161,175,178,195,200,203,219,223,225,227,232,233,234,239,241,248,249,250,256,258,268,269,270,276,278,288,289,290,296,298,308,309,310,317,319,331,332,333,340,342,354,355,356,363,365,377,378,379,387,389,404,409,411,414,425,427,428,429,434,436,441,444,447,451,454,457,458,459,471,473,476,478,481,482,501,504,517,519,521,547,573,575,583,584,585,590,591,592,593,597,601,604,615,618,621,622,623,628,650,651,652,658,659,660,661,662,663,664,666,672,673,674,675,676,677,678,680,685,686,697,702,703,704,709,710,711,712,R]
[5,460] -> [469]
[5,461] -> [466]
[5,549] -> [564]
[5,549,563] -> [566]
[5,549,563,565] -> [571]
[5,549,563,566] -> [568]
[5,550] -> [557]
[5,550,556,558] -> [560]
[5,550,556,558,559] -> [562]
[5,574] -> [580]
[5,574,579] -> [582]
[6,460] -> [468]
[6,461] -> [465]
[6,549] -> [563]
[6,549,563] -> [565]
[6,549,563,565] -> [570]
[6,549,563,566] -> [567]
[6,550] -> [556]
[6,550,556,558] -> [559]
[6,550,556,558,559] -> [561]
[6,574] -> [579]
[6,574,579] -> [581]
[15,127,255] -> [267]
[15,127,275] -> [287]
[15,127,295] -> [307]
[15,127,386] -> [401]
[15,128,255] -> [267]
[15,128,275] -> [287]
[15,128,316] -> [329]
[15,128,316,329] -> [330]
[15,128,339] -> [352]
[15,128,362] -> [375]
[15,128,386] -> [401]
[15,128,386,401] -> [402]
[15,653] -> [639]
[125,147] -> [153]
[125,238] -> [247]
[125,255] -> [266]
[125,275] -> [286]
[125,295] -> [306]
[125,316] -> [328]
[125,339] -> [351]
[125,362] -> [374]
[125,386] -> [400]
[126,147] -> [152]
[126,238] -> [246]
[126,255] -> [265]
[126,275] -> [285]
[126,295] -> [305]
[126,316] -> [327]
[126,339] -> [350]
[126,362] -> [373]
[126,386] -> [399]
[127,147] -> [137]
[127,169,316] -> [329]
[127,169,339] -> [352]
[127,169,362] -> [375]
[127,169,386,401] -> [402]
[127,170,316,329] -> [330]
[127,170,339,352] -> [353]
[127,170,362,375] -> [376]
[127,170,386,401,402] -> [403]
[127,238] -> [206]
[127,255] -> [206]
[127,255,267] -> [15]
[127,275] -> [206]
[127,275,287] -> [15]
[127,295] -> [206]
[127,295,307] -> [15]
[127,316] -> [206]
[127,316,329] -> [169]
[127,316,329,330] -> [170]
[127,339] -> [206]
[127,339,352] -> [169]
[127,339,352,353] -> [170]
[127,362] -> [206]
[127,362,375] -> [169]
[127,362,375,376] -> [170]
[127,386] -> [206]
[127,386,401] -> [15]
[127,386,401,402] -> [169]
[127,386,401,402,403] -> [170]
[128,147] -> [138]
[128,238] -> [207]
[128,255] -> [207]
[128,255,267] -> [15]
[128,275] -> [207]
[128,275,287] -> [15]
[128,295] -> [207]
[128,295,303] -> [307]
[128,295,307] -> [303]
[128,316] -> [207]
[128,316,329] -> [15]
[128,316,329,330] -> [15]
[128,339] -> [207]
[128,339,348,352] -> [353]
[128,339,352] -> [15]
[128,339,352,353] -> [348]
[128,362] -> [207]
[128,362,371,375] -> [376]
[128,362,375] -> [15]
[128,362,375,376] -> [371]
[128,386] -> [207]
[128,386,396,401,402] -> [403]
[128,386,401] -> [15]
[128,386,401,402] -> [15]
[128,386,401,402,403] -> [396]
[129,147] -> [139]
[129,238] -> [208]
[129,255] -> [208]
[129,275] -> [208]
[129,295] -> [208]
[129,316] -> [208]
[129,339] -> [208]
[129,362] -> [208]
[129,386] -> [208]
[131] -> [151,552]
[132] -> [150,551]
[133,150] -> [145]
[133,551] -> [174]
[134] -> [149,550]
[135] -> [148,549]
[136] -> [147,548]
[137,147] -> [127]
[137,548] -> [527]
[138,147] -> [128]
[138,548] -> [528]
[139,147] -> [129]
[139,548] -> [529]
[141] -> [155,185]
[142] -> [155,486]
[143] -> [151]
[144] -> [150]
[145,150] -> [133]
[146] -> [149]
[147] -> [124,136]
[147,152] -> [126,146]
[147,153] -> [125,143]
[148] -> [135,146]
[149] -> [134]
[150] -> [132]
[151] -> [131]
[155] -> [141,142]
[159] -> [181,201,204,224,226,228]
[159,160] -> [254,264,274,284,294,304,314,315,326,337,338,349,360,361,372,383,384,385,397,398,669]
[159,254] -> [160]
[159,264] -> [160]
[159,274] -> [160]
[159,284] -> [160]
[159,294] -> [160]
[159,304] -> [160]
[159,314] -> [160]
[159,315] -> [160]
[159,326] -> [160]
[159,337] -> [160]
[159,338] -> [160]
[159,349] -> [160]
[159,360] -> [160]
[159,361] -> [160]
[159,372] -> [160]
[159,383] -> [160]
[159,384] -> [160]
[159,385] -> [160]
[159,397] -> [160]
[159,398] -> [160]
[159,669] -> [160]
[162] -> [181,201,204,224,226,228,410]
[164,460,468] -> [470]
[164,461,465] -> [467]
[164,549,563,565,570] -> [572]
[164,549,563,566,567] -> [569]
[164,550,556] -> [558]
[173,551] -> [553]
[174,551] -> [133]
[176] -> [183,412,415,653]
[177] -> [184,413,416,654]
[179] -> [438,475,480,577,668,682]
[180] -> [437,474,479,576,667,681]
[181] -> [159,162,426,445,452,505]
[182] -> [435,472,477,574,665,679]
[183] -> [176,417,448,455,653]
[184] -> [177,418,449,456,654]
[185] -> [141,412,415,417,653]
[185,188] -> [465,468,556]
[185,188,190] -> [467,470,558]
[185,188,190,559] -> [579]
[185,188,190,560] -> [580]
[185,188,190,561,579] -> [581]
[185,188,190,562,579] -> [582]
[185,188,190,579] -> [559]
[185,188,190,579,581] -> [561]
[185,188,190,579,582] -> [562]
[185,188,190,580] -> [560]
[185,188,467] -> [190]
[185,188,470] -> [190]
[185,188,558] -> [190]
[185,189] -> [466,469,557]
[185,465] -> [188]
[185,466] -> [189]
[185,468] -> [188]
[185,469] -> [189]
[185,556] -> [188]
[185,557] -> [189]
[186] -> [413,416,418,553,654]
[186,187] -> [464,554]
[186,187,555] -> [578]
[186,187,578] -> [555]
[186,464] -> [187]
[186,554] -> [187]
[187,418] -> [419]
[188,417] -> [420]
[189,417] -> [421]
[190,639,653] -> [640]
[190,653] -> [647]
[196] -> [245,262,282,302,323,346,369,393,525]
[197] -> [244,261,281,301,322,345,368,392,524]
[198] -> [243,260,280,300,321,344,367,391,523]
[199] -> [242,259,279,299,320,343,366,390,522]
[201] -> [159,162,502]
[202] -> [240,257,277,297,318,341,364,388,520]
[204] -> [159,162,505]
[205] -> [238,255,275,295,316,339,362,386,518]
[206,238] -> [127]
[206,255] -> [127]
[206,275] -> [127]
[206,295] -> [127]
[206,316] -> [127]
[206,339] -> [127]
[206,362] -> [127]
[206,386] -> [127]
[206,518] -> [507]
[207,238] -> [128]
[207,255] -> [128]
[207,275] -> [128]
[207,295] -> [128]
[207,316] -> [128]
[207,339] -> [128]
[207,362] -> [128]
[207,386] -> [128]
[207,518] -> [508]
[208,238] -> [129]
[208,255] -> [129]
[208,275] -> [129]
[208,295] -> [129]
[208,316] -> [129]
[208,339] -> [129]
[208,362] -> [129]
[208,386] -> [129]
[208,518] -> [509]
[209,508,518] -> [510]
[210,508,518] -> [511]
[211,508,510,518] -> [512]
[212,508,510,518] -> [513]
[213,507,518] -> [514]
[214,507,518] -> [515]
[215,507,514,518] -> [516]
[216] -> [229,483]
[217] -> [230,484]
[218] -> [231,485]
[220] -> [237,253,273,293,313,336,359,382,596]
[221] -> [236,252,272,292,312,335,358,381,595]
[222] -> [235,251,271,291,311,334,357,380,594]
[224] -> [159,162,442]
[226] -> [159,162,445]
[228] -> [159,162,452]
[229] -> [216,483]
[229,294] -> [303]
[229,303] -> [294]
[229,338] -> [348]
[229,348] -> [338]
[229,361] -> [371]
[229,371] -> [361]
[229,385] -> [396]
[229,396] -> [385]
[230] -> [217,484]
[230,274] -> [283]
[230,283] -> [274]
[230,315] -> [325]
[230,325] -> [315]
[230,360] -> [370]
[230,370] -> [360]
[230,384] -> [395]
[230,395] -> [384]
[231] -> [218,485]
[231,254] -> [263]
[231,263] -> [254]
[231,314] -> [324]
[231,324] -> [314]
[231,337] -> [347]
[231,347] -> [337]
[231,383] -> [394]
[231,394] -> [383]
[235] -> [222]
[236] -> [221]
[237] -> [220]
[238] -> [124,205]
[238,246] -> [126]
[238,247] -> [1,125]
[240] -> [202]
[242] -> [199]
[243] -> [198]
[244] -> [197]
[245] -> [196]
[251] -> [222]
[252] -> [221]
[253] -> [220,254]
[255] -> [124,205]
[255,265] -> [126,267]
[255,266] -> [1,125]
[257] -> [202,264]
[259] -> [199]
[260] -> [198]
[261] -> [197]
[262] -> [196,263]
[271] -> [222]
[272] -> [221,274]
[273] -> [220]
[275] -> [124,205]
[275,285] -> [126,287]
[275,286] -> [1,125]
[277] -> [202,284]
[279] -> [199]
[280] -> [198]
[281] -> [197,283]
[282] -> [196]
[291] -> [222,294]
[292] -> [221]
[293] -> [220]
[295] -> [124,205]
[295,305] -> [126,307]
[295,306] -> [1,125]
[297] -> [202,304]
[299] -> [199]
[300] -> [198,303]
[301] -> [197]
[302] -> [196]
[311] -> [222]
[312] -> [221,315]
[313] -> [220,314]
[316] -> [124,205]
[316,327] -> [126,329]
[316,327,329] -> [330]
[316,328] -> [1,125]
[318] -> [202]
[320] -> [199,326]
[321] -> [198]
[322] -> [197,325]
[323] -> [196,324]
[334] -> [222,338]
[335] -> [221]
[336] -> [220,337]
[339] -> [124,205]
[339,350] -> [126,352]
[339,350,352] -> [353]
[339,351] -> [1,125]
[341] -> [202]
[343] -> [199,349]
[344] -> [198,348]
[345] -> [197]
[346] -> [196,347]
[357] -> [222,361]
[358] -> [221,360]
[359] -> [220]
[362] -> [124,205]
[362,373] -> [126,375]
[362,373,375] -> [376]
[362,374] -> [1,125]
[364] -> [202]
[366] -> [199,372]
[367] -> [198,371]
[368] -> [197,370]
[369] -> [196]
[380] -> [222,385]
[381] -> [221,384]
[382] -> [220,383]
[386] -> [124,205]
[386,399] -> [126,401]
[386,399,401] -> [402]
[386,399,401,402] -> [403]
[386,400] -> [1,125]
[388] -> [202,398]
[390] -> [199,397]
[391] -> [198,396]
[392] -> [197,395]
[393] -> [196,394]
[405] -> [433,463,589,627]
[406] -> [432,462,588,626]
[407] -> [431,461,587,625]
[408] -> [430,460,586,624]
[410] -> [162,426,442,502]
[412] -> [176,185,448,616]
[413] -> [177,186,449,617]
[415] -> [176,185,455,619]
[416] -> [177,186,456,620]
[417] -> [183,185,486,607]
[417,420] -> [188,490,579]
[417,420,422] -> [492,581]
[417,420,422,468] -> [497]
[417,420,422,468,470] -> [499]
[417,420,422,468,499] -> [470]
[417,420,422,469] -> [498]
[417,420,422,497] -> [468]
[417,420,422,498] -> [469]
[417,420,423] -> [493,582]
[417,420,423,465] -> [494]
[417,420,423,465,467] -> [496]
[417,420,423,465,496] -> [467]
[417,420,423,466] -> [495]
[417,420,423,494] -> [465]
[417,420,423,495] -> [466]
[417,420,492] -> [422]
[417,420,493] -> [423]
[417,420,581] -> [422]
[417,420,582] -> [423]
[417,421] -> [189,491,580]
[417,490] -> [420]
[417,491] -> [421]
[417,579] -> [420]
[417,580] -> [421]
[418] -> [184,186,487,608]
[418,419] -> [187,488,578]
[418,419,464] -> [489]
[418,419,489] -> [464]
[418,488] -> [419]
[418,578] -> [419]
[419,608] -> [609]
[422,607] -> [610]
[423,607] -> [611]
[424] -> [432]
[426] -> [181,410]
[430] -> [408]
[431] -> [407]
[432] -> [406]
[433] -> [405]
[435] -> [182]
[437] -> [180,424]
[438] -> [179]
[439] -> [464]
[440] -> [462]
[442] -> [224,410]
[443] -> [474]
[445] -> [181,226]
[446] -> [472]
[448] -> [183,412]
[449] -> [184,413]
[450] -> [479]
[452] -> [181,228]
[453] -> [477]
[455] -> [183,415]
[456] -> [184,416]
[460] -> [4,5,6,7,8,9,10,11,12,13,14,15,16,17,408]
[460,468] -> [6,163,164,165,166,167,168,169,170,171]
[460,468,470] -> [164,453]
[460,469] -> [5,450]
[461] -> [4,5,6,7,8,9,10,11,12,13,14,15,16,17,407]
[461,465] -> [6,163,164,165,166,167,168,169,170,171]
[461,465,467] -> [164,446]
[461,466] -> [5,443]
[462] -> [406]
[463] -> [405,464]
[464] -> [463]
[472] -> [182]
[474] -> [180]
[475] -> [179,439]
[477] -> [182]
[479] -> [180]
[480] -> [179,439]
[483] -> [216,229]
[484] -> [217,230]
[485] -> [218,231]
[486] -> [142,417]
[486,490] -> [563]
[486,490,492] -> [565]
[486,490,492,497] -> [570]
[486,490,492,497,499] -> [572]
[486,490,492,497,572] -> [499]
[486,490,492,498] -> [571]
[486,490,492,570] -> [497]
[486,490,492,571] -> [498]
[486,490,493] -> [566]
[486,490,493,494] -> [567]
[486,490,493,494,496] -> [569]
[486,490,493,494,569] -> [496]
[486,490,493,495] -> [568]
[486,490,493,567] -> [494]
[486,490,493,568] -> [495]
[486,490,565] -> [492]
[486,490,566] -> [493]
[486,491] -> [564]
[486,563] -> [490]
[486,564] -> [491]
[487] -> [418,553]
[487,488] -> [554]
[487,488,489] -> [555]
[487,488,555] -> [489]
[487,554] -> [488]
[500] -> [522]
[502] -> [201,410]
[503] -> [520]
[505] -> [181,204]
[506] -> [518]
[507,514,516,518] -> [215]
[507,514,518] -> [213]
[507,515,518] -> [214]
[507,518] -> [206]
[508,510,512,518] -> [211]
[508,510,513,518] -> [212]
[508,510,518] -> [209]
[508,511,518] -> [210]
[508,518] -> [207]
[509,518] -> [208]
[518] -> [205]
[520] -> [202]
[522] -> [199]
[523] -> [198,450]
[524] -> [197,443]
[525] -> [196,440]
[527,537,539,544,546,548] -> [572]
[527,537,539,544,548] -> [570]
[527,537,539,544,548,572] -> [546]
[527,537,539,545,548] -> [571]
[527,537,539,548] -> [565]
[527,537,539,548,570] -> [544]
[527,537,539,548,571] -> [545]
[527,537,540,541,543,548] -> [569]
[527,537,540,541,548] -> [567]
[527,537,540,541,548,569] -> [543]
[527,537,540,542,548] -> [568]
[527,537,540,548] -> [566]
[527,537,540,548,567] -> [541]
[527,537,540,548,568] -> [542]
[527,537,548] -> [563]
[527,537,548,565] -> [539]
[527,537,548,566] -> [540]
[527,538,548] -> [564]
[527,548] -> [137]
[527,548,563] -> [537]
[527,548,564] -> [538]
[528,530,532,533,535,548] -> [561]
[528,530,532,533,536,548] -> [562]
[528,530,532,533,548] -> [559]
[528,530,532,533,548,561] -> [535]
[528,530,532,533,548,562] -> [536]
[528,530,532,534,548] -> [560]
[528,530,532,548] -> [558]
[528,530,532,548,559] -> [533]
[528,530,532,548,560] -> [534]
[528,530,548] -> [556]
[528,530,548,558] -> [532]
[528,531,548] -> [557]
[528,548] -> [138]
[528,548,556] -> [530]
[528,548,557] -> [531]
[529,548] -> [139]
[548] -> [136,526]
[549] -> [4,5,6,7,8,9,10,11,12,13,14,15,16,17,135]
[549,563] -> [4,5,6,7,8,9,10,11,12,13,14,15,16,17]
[549,563,565] -> [4,5,6,7,8,9,10,11,12,13,14,15,16,17]
[549,563,565,570] -> [6,163,164,165,166,167,168,169,170,171]
[549,563,565,570,572] -> [164,453]
[549,563,565,571] -> [5,450]
[549,563,566] -> [4,5,6,7,8,9,10,11,12,13,14,15,16,17]
[549,563,566,567] -> [6,163,164,165,166,167,168,169,170,171]
[549,563,566,567,569] -> [164,446]
[549,563,566,568] -> [5,443]
[549,564] -> [5,440]
[550] -> [4,5,6,7,8,9,10,11,12,13,14,15,16,17,134]
[550,556] -> [6,163,164,165,166,167,168,169,170,171]
[550,556,558] -> [4,5,6,7,8,9,10,11,12,13,14,15,16,17,164]
[550,556,558,559] -> [4,5,6,7,8,9,10,11,12,13,14,15,16,17]
[550,556,558,559,561] -> [6,453]
[550,556,558,559,562] -> [5,446]
[550,556,558,560] -> [5,500]
[550,557] -> [5,503]
[551] -> [132,172]
[551,553] -> [173,554]
[551,553,554] -> [555]
[551,553,554,555] -> [439]
[552] -> [1,131]
[553] -> [186,487]
[574] -> [4,5,6,7,8,9,10,11,12,13,14,15,16,17,182]
[574,579] -> [4,5,6,7,8,9,10,11,12,13,14,15,16,17]
[574,579,581] -> [6,453]
[574,579,582] -> [5,446]
[574,580] -> [5,500]
[576] -> [180,503]
[577] -> [179,578]
[577,578] -> [439]
[586] -> [408,453]
[587] -> [407,446]
[588] -> [406,500]
[589] -> [405,439]
[594] -> [222,450]
[595] -> [221,443]
[596] -> [220,440]
[598] -> [612,715]
[599] -> [613,714]
[600] -> [614,713]
[602] -> [616,698]
[603] -> [617,699]
[605] -> [619,705]
[606] -> [620,706]
[607] -> [417,688]
[607,610] -> [422]
[607,611] -> [423]
[608] -> [418,689]
[608,609] -> [419]
[609,689] -> [690]
[610,688] -> [691]
[611,688] -> [692]
[612] -> [598]
[613] -> [599]
[614] -> [600]
[616] -> [412,602]
[617] -> [413,603]
[619] -> [415,605]
[620] -> [416,606]
[624] -> [408,614]
[625] -> [407,613]
[626] -> [406]
[627] -> [405,612]
[630,665] -> [671]
[630,679] -> [684]
[630,713] -> [719]
[630,714] -> [717]
[631,665] -> [670]
[631,679] -> [683]
[631,713] -> [718]
[631,714] -> [716]
[639,640,641,653] -> [670]
[639,640,642,653] -> [671]
[639,640,653] -> [190]
[639,640,653,670] -> [641]
[639,640,653,671] -> [642]
[639,653] -> [15]
[647,648,653] -> [683]
[647,649,653] -> [684]
[647,653] -> [190]
[647,653,683] -> [648]
[647,653,684] -> [649]
[653] -> [176,183,185,698,705]
[653,655] -> [670,683]
[653,656] -> [671,684]
[653,670] -> [655]
[653,671] -> [656]
[653,683] -> [655]
[653,684] -> [656]
[654] -> [177,184,186,187,699,706]
[655,698] -> [700]
[655,705] -> [707]
[656,698] -> [701]
[656,705] -> [708]
[665] -> [163,164,165,166,167,168,169,170,171,182,629,630,631,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649]
[665,670] -> [631]
[665,671] -> [630]
[667] -> [180,669]
[668] -> [179]
[679] -> [163,164,165,166,167,168,169,170,171,182,629,630,631,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649]
[679,683] -> [631]
[679,684] -> [630]
[681] -> [180]
[682] -> [179]
[688] -> [607]
[688,691] -> [610]
[688,691,695] -> [718]
[688,691,696] -> [719]
[688,691,718] -> [695]
[688,691,719] -> [696]
[688,692] -> [611]
[688,692,693] -> [716]
[688,692,694] -> [717]
[688,692,716] -> [693]
[688,692,717] -> [694]
[689] -> [608]
[689,690] -> [609]
[698] -> [602,653]
[698,700] -> [655,716]
[698,701] -> [656,717]
[698,716] -> [700]
[698,717] -> [701]
[699] -> [603,654]
[705] -> [605,653]
[705,707] -> [655,718]
[705,708] -> [656,719]
[705,718] -> [707]
[705,719] -> [708]
[706] -> [606,654]
[713] -> [163,164,165,166,167,168,169,170,171,600,629,630,631,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649]
[713,718] -> [631]
[713,719] -> [630]
[714] -> [163,164,165,166,167,168,169,170,171,599,629,630,631,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649]
[714,716] -> [631]
[714,717] -> [630]
[715] -> [598]
[R] -> [687]

### Solution ###

[2,3,19,20,130,140,154,158,161,175,178,195,200,203,219,223,225,227,232,233,234,239,241,248,249,250,256,258,268,269,270,276,278,288,289,290,296,298,308,309,310,317,319,331,332,333,340,342,354,355,356,363,365,377,378,379,387,389,404,409,411,414,425,427,428,429,434,436,441,444,447,451,454,457,458,459,471,473,476,478,481,482,501,504,517,519,521,547,573,575,583,584,585,590,591,592,593,597,601,604,615,618,621,622,623,628,650,651,652,658,659,660,661,662,663,664,666,672,673,674,675,676,677,678,680,685,686,687,697,702,703,704,709,710,711,712,R]

### Annotated ###

  let
    constructor Nat :E: Type
    constructor Z :R: Nat
    constructor S :R: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      n :E: Nat
        [plus] -E- Z -E- n = n
      m :E: Nat n :E: Nat
        [plus] -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    constructor Bool :E: Type
    constructor True :R: Bool
    constructor False :R: Bool
    not :E: (_x2 :E: Bool) -> Bool 
      [not] -E- True = False
      [not] -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :E: Unit
    constructor Pair :E: (_x3 :E: Type) -> (_x4 :E: Type) -> Type
    constructor MkPair :E: (a :E: Type) -> (b :E: Type) -> (_x5 :E: a) -> (_x6 :E: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: Pair -E- a -E- b) -> a 
      a :E: Type b :E: Type x :E: a y :E: b
        [fst] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = x
    snd :E: (a :E: Type) -> (b :E: Type) -> (_x8 :E: Pair -E- a -E- b) -> b 
      a :E: Type b :E: Type x :E: a y :E: b
        [snd] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = y
    constructor Either :E: (_x9 :E: Type) -> (_x10 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x11 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x12 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x13 :E: Nat) -> Type
    constructor FZ :E: (n :E: Nat) -> Fin -E- (S -E- n)
    constructor FS :E: (n :E: Nat) -> (_x14 :E: Fin -E- n) -> Fin -E- (S -E- n)
    constructor Vect :E: (_x15 :E: Nat) -> (_x16 :E: Type) -> Type
    constructor VN :E: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :E: (n :E: Nat) -> (a :E: Type) -> (x :E: a) -> (xs :E: Vect -E- n -E- a) -> Vect -E- (S -E- n) -E- a
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    subst :R: (a :E: Type) -> (P :E: (_x0 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (_x1 :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x2 :E: a) -> Type x :E: a
        [subst] -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\z :R: P -E- x. z)
    constructor Bit :E: (_x0 :E: Nat) -> Type
    constructor I :R: Bit -E- 1
    constructor O :R: Bit -E- Z
    double :E: (_x1 :E: Nat) -> Nat 
      [double] -E- Z = Z
      n :E: Nat
        [double] -E- (S -E- n) = S -E- (S -E- (double -E- n))
    constructor Bin :E: (width :E: Nat) -> (value :E: Nat) -> Type
    constructor N :R: Bin -E- Z -E- Z
    constructor C :R: (width :E: Nat) -> (lsbVal :E: Nat) -> (lsb :R: Bit -E- lsbVal) -> (restVal :E: Nat) -> (rest :R: Bin -E- width -E- restVal) -> Bin -E- (S -E- width) -E- (plus -E- lsbVal -E- (double -E- restVal))
    constructor TwoBits :E: (_x2 :E: Nat) -> (_x3 :E: Nat) -> (_x4 :E: Nat) -> Type
    constructor TB :R: (c :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (hi' :E: Nat) -> (hi :R: Bit -E- hi') -> (lo' :E: Nat) -> (lo :R: Bit -E- lo') -> (pf :E: Id -E- Nat -E- (plus -E- c -E- (plus -E- x -E- y)) -E- (plus -E- lo' -E- (double -E- hi'))) -> TwoBits -E- c -E- x -E- y
    adb :R: (c :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (_x5 :R: Bit -E- c) -> (_x6 :R: Bit -E- x) -> (_x7 :R: Bit -E- y) -> TwoBits -E- c -E- x -E- y 
      [adb] -E- [Z] -E- [Z] -E- [Z] -R- O -R- O -R- O = TB -E- Z -E- Z -E- Z -E- Z -R- O -E- Z -R- O -E- (Refl -E- Nat -E- Z)
      [adb] -E- [1] -E- [Z] -E- [Z] -R- I -R- O -R- O = TB -E- 1 -E- Z -E- Z -E- Z -R- O -E- 1 -R- I -E- (Refl -E- Nat -E- 1)
      [adb] -E- [Z] -E- [1] -E- [Z] -R- O -R- I -R- O = TB -E- Z -E- 1 -E- Z -E- Z -R- O -E- 1 -R- I -E- (Refl -E- Nat -E- 1)
      [adb] -E- [Z] -E- [Z] -E- [1] -R- O -R- O -R- I = TB -E- Z -E- Z -E- 1 -E- Z -R- O -E- 1 -R- I -E- (Refl -E- Nat -E- 1)
      [adb] -E- [1] -E- [1] -E- [Z] -R- I -R- I -R- O = TB -E- 1 -E- 1 -E- Z -E- 1 -R- I -E- Z -R- O -E- (Refl -E- Nat -E- 2)
      [adb] -E- [1] -E- [Z] -E- [1] -R- I -R- O -R- I = TB -E- 1 -E- Z -E- 1 -E- 1 -R- I -E- Z -R- O -E- (Refl -E- Nat -E- 2)
      [adb] -E- [Z] -E- [1] -E- [1] -R- O -R- I -R- I = TB -E- Z -E- 1 -E- 1 -E- 1 -R- I -E- Z -R- O -E- (Refl -E- Nat -E- 2)
      [adb] -E- [1] -E- [1] -E- [1] -R- I -R- I -R- I = TB -E- 1 -E- 1 -E- 1 -E- 1 -R- I -E- 1 -R- I -E- (Refl -E- Nat -E- 3)
    add' :R: (w :E: Nat) -> (c :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (_x8 :R: Bit -E- c) -> (_x9 :R: Bin -E- w -E- x) -> (_x10 :R: Bin -E- w -E- y) -> Bin -E- (S -E- w) -E- (plus -E- c -E- (plus -E- x -E- y)) 
      c :E: Nat cb :R: Bit -E- c
        [add'] -E- [Z] -E- c -E- [Z] -E- [Z] -R- cb -R- N -R- N = C -E- Z -E- c -R- cb -E- Z -R- N
      w :E: Nat c :E: Nat cb :R: Bit -E- c xb' :E: Nat xb :R: Bit -E- xb' xn' :E: Nat xn :R: Bin -E- w -E- xn' yb' :E: Nat yb :R: Bit -E- yb' yn' :E: Nat yn :R: Bin -E- w -E- yn'
        [add'] -E- ([S] -E- w) -E- c -E- [plus -E- xb' -E- (double -E- xn')] -E- [plus -E- yb' -E- (double -E- yn')] -R- cb -R- (C -E- [w] -E- xb' -R- xb -E- xn' -R- xn) -R- (C -E- [w] -E- yb' -R- yb -E- yn' -R- yn) = 
          let f :R: (_x11 :R: TwoBits -E- c -E- xb' -E- yb') -> Bin -E- (S -E- (S -E- w)) -E- (plus -E- c -E- (plus -E- (plus -E- xb' -E- (double -E- xn')) -E- (plus -E- yb' -E- (double -E- yn')))) 
            hi' :E: Nat hi :R: Bit -E- hi' lo' :E: Nat lo :R: Bit -E- lo' pf :E: Id -E- Nat -E- (plus -E- c -E- (plus -E- xb' -E- yb')) -E- (plus -E- lo' -E- (double -E- hi'))
              [f] -R- ([TB] -E- [c] -E- [xb'] -E- [yb'] -E- hi' -R- hi -E- lo' -R- lo -E- pf) = 
                let postulate eq :E: Id -E- Nat -E- (plus -E- lo' -E- (double -E- (plus -E- hi' -E- (plus -E- xn' -E- yn')))) -E- (plus -E- c -E- (plus -E- (plus -E- xb' -E- (double -E- xn')) -E- (plus -E- yb' -E- (double -E- yn'))))
                in subst -E- Nat -E- (Bin -E- (S -E- (S -E- w))) -E- (plus -E- lo' -E- (double -E- (plus -E- hi' -E- (plus -E- xn' -E- yn')))) -E- (plus -E- c -E- (plus -E- (plus -E- xb' -E- (double -E- xn')) -E- (plus -E- yb' -E- (double -E- yn')))) -E- eq -R- (C -E- (S -E- w) -E- lo' -R- lo -E- (plus -E- hi' -E- (plus -E- xn' -E- yn')) -R- (add' -E- w -E- hi' -E- xn' -E- yn' -R- hi -R- xn -R- yn))
          in f -R- (adb -E- c -E- xb' -E- yb' -R- cb -R- xb -R- yb)
    add :R: (w :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (bx :R: Bin -E- w -E- x) -> (by :R: Bin -E- w -E- y) -> Bin -E- (S -E- w) -E- (plus -E- x -E- y) = (\w :E: Nat. (\x :E: Nat. (\y :E: Nat. (\bx :R: Bin -E- w -E- x. (\by :R: Bin -E- w -E- y. add' -E- w -E- Z -E- x -E- y -R- O -R- bx -R- by)))))
    foreign inputSize :R: Nat
    binVal :E: (_x12 :E: Bool) -> (_x13 :E: Nat) -> Nat 
      b :E: Bool
        [binVal] -E- b -E- Z = Z
      n :E: Nat
        [binVal] -E- True -E- (S -E- n) = S -E- (double -E- (binVal -E- False -E- n))
      n :E: Nat
        [binVal] -E- False -E- (S -E- n) = double -E- (binVal -E- True -E- n)
    mkBin :R: (b :R: Bool) -> (w :R: Nat) -> Bin -E- w -E- (binVal -E- b -E- w) 
      b :E: Bool
        [mkBin] -R- b -R- Z = N
      n :R: Nat
        [mkBin] -R- True -R- (S -R- n) = C -E- n -E- 1 -R- I -E- (binVal -E- False -E- n) -R- (mkBin -R- False -R- n)
      n :R: Nat
        [mkBin] -R- False -R- (S -R- n) = C -E- n -E- Z -R- O -E- (binVal -E- True -E- n) -R- (mkBin -R- True -R- n)
    main :R: Bin -E- (S -E- inputSize) -E- (plus -E- (binVal -E- True -E- inputSize) -E- (binVal -E- False -E- inputSize)) = 
      let
        x :R: Bin -E- inputSize -E- (binVal -E- True -E- inputSize) = mkBin -R- True -R- inputSize
        y :R: Bin -E- inputSize -E- (binVal -E- False -E- inputSize) = mkBin -R- False -R- inputSize
      in add -E- inputSize -E- (binVal -E- True -E- inputSize) -E- (binVal -E- False -E- inputSize) -R- x -R- y
  in main

### Specialised ###

  let
    constructor Nat :E: Type
    constructor Z :R: Nat
    constructor S :R: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      n :E: Nat
        [plus] -E- Z -E- n = n
      m :E: Nat n :E: Nat
        [plus] -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    constructor Bool :E: Type
    constructor True :R: Bool
    constructor False :R: Bool
    not :E: (_x2 :E: Bool) -> Bool 
      [not] -E- True = False
      [not] -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :E: Unit
    constructor Pair :E: (_x3 :E: Type) -> (_x4 :E: Type) -> Type
    constructor MkPair :E: (a :E: Type) -> (b :E: Type) -> (_x5 :E: a) -> (_x6 :E: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: Pair -E- a -E- b) -> a 
      a :E: Type b :E: Type x :E: a y :E: b
        [fst] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = x
    snd :E: (a :E: Type) -> (b :E: Type) -> (_x8 :E: Pair -E- a -E- b) -> b 
      a :E: Type b :E: Type x :E: a y :E: b
        [snd] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = y
    constructor Either :E: (_x9 :E: Type) -> (_x10 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x11 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x12 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x13 :E: Nat) -> Type
    constructor FZ :E: (n :E: Nat) -> Fin -E- (S -E- n)
    constructor FS :E: (n :E: Nat) -> (_x14 :E: Fin -E- n) -> Fin -E- (S -E- n)
    constructor Vect :E: (_x15 :E: Nat) -> (_x16 :E: Type) -> Type
    constructor VN :E: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :E: (n :E: Nat) -> (a :E: Type) -> (x :E: a) -> (xs :E: Vect -E- n -E- a) -> Vect -E- (S -E- n) -E- a
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    subst :R: (a :E: Type) -> (P :E: (_x0 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (_x1 :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x2 :E: a) -> Type x :E: a
        [subst] -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\z :R: P -E- x. z)
    constructor Bit :E: (_x0 :E: Nat) -> Type
    constructor I :R: Bit -E- 1
    constructor O :R: Bit -E- Z
    double :E: (_x1 :E: Nat) -> Nat 
      [double] -E- Z = Z
      n :E: Nat
        [double] -E- (S -E- n) = S -E- (S -E- (double -E- n))
    constructor Bin :E: (width :E: Nat) -> (value :E: Nat) -> Type
    constructor N :R: Bin -E- Z -E- Z
    constructor C :R: (width :E: Nat) -> (lsbVal :E: Nat) -> (lsb :R: Bit -E- lsbVal) -> (restVal :E: Nat) -> (rest :R: Bin -E- width -E- restVal) -> Bin -E- (S -E- width) -E- (plus -E- lsbVal -E- (double -E- restVal))
    constructor TwoBits :E: (_x2 :E: Nat) -> (_x3 :E: Nat) -> (_x4 :E: Nat) -> Type
    constructor TB :R: (c :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (hi' :E: Nat) -> (hi :R: Bit -E- hi') -> (lo' :E: Nat) -> (lo :R: Bit -E- lo') -> (pf :E: Id -E- Nat -E- (plus -E- c -E- (plus -E- x -E- y)) -E- (plus -E- lo' -E- (double -E- hi'))) -> TwoBits -E- c -E- x -E- y
    adb :R: (c :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (_x5 :R: Bit -E- c) -> (_x6 :R: Bit -E- x) -> (_x7 :R: Bit -E- y) -> TwoBits -E- c -E- x -E- y 
      [adb] -E- [Z] -E- [Z] -E- [Z] -R- O -R- O -R- O = TB -E- Z -E- Z -E- Z -E- Z -R- O -E- Z -R- O -E- (Refl -E- Nat -E- Z)
      [adb] -E- [1] -E- [Z] -E- [Z] -R- I -R- O -R- O = TB -E- 1 -E- Z -E- Z -E- Z -R- O -E- 1 -R- I -E- (Refl -E- Nat -E- 1)
      [adb] -E- [Z] -E- [1] -E- [Z] -R- O -R- I -R- O = TB -E- Z -E- 1 -E- Z -E- Z -R- O -E- 1 -R- I -E- (Refl -E- Nat -E- 1)
      [adb] -E- [Z] -E- [Z] -E- [1] -R- O -R- O -R- I = TB -E- Z -E- Z -E- 1 -E- Z -R- O -E- 1 -R- I -E- (Refl -E- Nat -E- 1)
      [adb] -E- [1] -E- [1] -E- [Z] -R- I -R- I -R- O = TB -E- 1 -E- 1 -E- Z -E- 1 -R- I -E- Z -R- O -E- (Refl -E- Nat -E- 2)
      [adb] -E- [1] -E- [Z] -E- [1] -R- I -R- O -R- I = TB -E- 1 -E- Z -E- 1 -E- 1 -R- I -E- Z -R- O -E- (Refl -E- Nat -E- 2)
      [adb] -E- [Z] -E- [1] -E- [1] -R- O -R- I -R- I = TB -E- Z -E- 1 -E- 1 -E- 1 -R- I -E- Z -R- O -E- (Refl -E- Nat -E- 2)
      [adb] -E- [1] -E- [1] -E- [1] -R- I -R- I -R- I = TB -E- 1 -E- 1 -E- 1 -E- 1 -R- I -E- 1 -R- I -E- (Refl -E- Nat -E- 3)
    add' :R: (w :E: Nat) -> (c :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (_x8 :R: Bit -E- c) -> (_x9 :R: Bin -E- w -E- x) -> (_x10 :R: Bin -E- w -E- y) -> Bin -E- (S -E- w) -E- (plus -E- c -E- (plus -E- x -E- y)) 
      c :E: Nat cb :R: Bit -E- c
        [add'] -E- [Z] -E- c -E- [Z] -E- [Z] -R- cb -R- N -R- N = C -E- Z -E- c -R- cb -E- Z -R- N
      w :E: Nat c :E: Nat cb :R: Bit -E- c xb' :E: Nat xb :R: Bit -E- xb' xn' :E: Nat xn :R: Bin -E- w -E- xn' yb' :E: Nat yb :R: Bit -E- yb' yn' :E: Nat yn :R: Bin -E- w -E- yn'
        [add'] -E- ([S] -E- w) -E- c -E- [plus -E- xb' -E- (double -E- xn')] -E- [plus -E- yb' -E- (double -E- yn')] -R- cb -R- (C -E- [w] -E- xb' -R- xb -E- xn' -R- xn) -R- (C -E- [w] -E- yb' -R- yb -E- yn' -R- yn) = 
          let f :R: (_x11 :R: TwoBits -E- c -E- xb' -E- yb') -> Bin -E- (S -E- (S -E- w)) -E- (plus -E- c -E- (plus -E- (plus -E- xb' -E- (double -E- xn')) -E- (plus -E- yb' -E- (double -E- yn')))) 
            hi' :E: Nat hi :R: Bit -E- hi' lo' :E: Nat lo :R: Bit -E- lo' pf :E: Id -E- Nat -E- (plus -E- c -E- (plus -E- xb' -E- yb')) -E- (plus -E- lo' -E- (double -E- hi'))
              [f] -R- ([TB] -E- [c] -E- [xb'] -E- [yb'] -E- hi' -R- hi -E- lo' -R- lo -E- pf) = 
                let postulate eq :E: Id -E- Nat -E- (plus -E- lo' -E- (double -E- (plus -E- hi' -E- (plus -E- xn' -E- yn')))) -E- (plus -E- c -E- (plus -E- (plus -E- xb' -E- (double -E- xn')) -E- (plus -E- yb' -E- (double -E- yn'))))
                in subst -E- Nat -E- (Bin -E- (S -E- (S -E- w))) -E- (plus -E- lo' -E- (double -E- (plus -E- hi' -E- (plus -E- xn' -E- yn')))) -E- (plus -E- c -E- (plus -E- (plus -E- xb' -E- (double -E- xn')) -E- (plus -E- yb' -E- (double -E- yn')))) -E- eq -R- (C -E- (S -E- w) -E- lo' -R- lo -E- (plus -E- hi' -E- (plus -E- xn' -E- yn')) -R- (add' -E- w -E- hi' -E- xn' -E- yn' -R- hi -R- xn -R- yn))
          in f -R- (adb -E- c -E- xb' -E- yb' -R- cb -R- xb -R- yb)
    add :R: (w :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (bx :R: Bin -E- w -E- x) -> (by :R: Bin -E- w -E- y) -> Bin -E- (S -E- w) -E- (plus -E- x -E- y) = (\w :E: Nat. (\x :E: Nat. (\y :E: Nat. (\bx :R: Bin -E- w -E- x. (\by :R: Bin -E- w -E- y. add' -E- w -E- Z -E- x -E- y -R- O -R- bx -R- by)))))
    foreign inputSize :R: Nat
    binVal :E: (_x12 :E: Bool) -> (_x13 :E: Nat) -> Nat 
      b :E: Bool
        [binVal] -E- b -E- Z = Z
      n :E: Nat
        [binVal] -E- True -E- (S -E- n) = S -E- (double -E- (binVal -E- False -E- n))
      n :E: Nat
        [binVal] -E- False -E- (S -E- n) = double -E- (binVal -E- True -E- n)
    mkBin :R: (b :R: Bool) -> (w :R: Nat) -> Bin -E- w -E- (binVal -E- b -E- w) 
      b :E: Bool
        [mkBin] -R- b -R- Z = N
      n :R: Nat
        [mkBin] -R- True -R- (S -R- n) = C -E- n -E- 1 -R- I -E- (binVal -E- False -E- n) -R- (mkBin -R- False -R- n)
      n :R: Nat
        [mkBin] -R- False -R- (S -R- n) = C -E- n -E- Z -R- O -E- (binVal -E- True -E- n) -R- (mkBin -R- True -R- n)
    main :R: Bin -E- (S -E- inputSize) -E- (plus -E- (binVal -E- True -E- inputSize) -E- (binVal -E- False -E- inputSize)) = 
      let
        x :R: Bin -E- inputSize -E- (binVal -E- True -E- inputSize) = mkBin -R- True -R- inputSize
        y :R: Bin -E- inputSize -E- (binVal -E- False -E- inputSize) = mkBin -R- False -R- inputSize
      in add -E- inputSize -E- (binVal -E- True -E- inputSize) -E- (binVal -E- False -E- inputSize) -R- x -R- y
  in main

### Final annotation ###

  let
    constructor Nat :E: Type
    constructor Z :R: Nat
    constructor S :R: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      n :E: Nat
        [plus] -E- Z -E- n = n
      m :E: Nat n :E: Nat
        [plus] -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    constructor Bool :E: Type
    constructor True :R: Bool
    constructor False :R: Bool
    not :E: (_x2 :E: Bool) -> Bool 
      [not] -E- True = False
      [not] -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :E: Unit
    constructor Pair :E: (_x3 :E: Type) -> (_x4 :E: Type) -> Type
    constructor MkPair :E: (a :E: Type) -> (b :E: Type) -> (_x5 :E: a) -> (_x6 :E: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: Pair -E- a -E- b) -> a 
      a :E: Type b :E: Type x :E: a y :E: b
        [fst] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = x
    snd :E: (a :E: Type) -> (b :E: Type) -> (_x8 :E: Pair -E- a -E- b) -> b 
      a :E: Type b :E: Type x :E: a y :E: b
        [snd] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = y
    constructor Either :E: (_x9 :E: Type) -> (_x10 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x11 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x12 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x13 :E: Nat) -> Type
    constructor FZ :E: (n :E: Nat) -> Fin -E- (S -E- n)
    constructor FS :E: (n :E: Nat) -> (_x14 :E: Fin -E- n) -> Fin -E- (S -E- n)
    constructor Vect :E: (_x15 :E: Nat) -> (_x16 :E: Type) -> Type
    constructor VN :E: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :E: (n :E: Nat) -> (a :E: Type) -> (x :E: a) -> (xs :E: Vect -E- n -E- a) -> Vect -E- (S -E- n) -E- a
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    subst :R: (a :E: Type) -> (P :E: (_x0 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (_x1 :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x2 :E: a) -> Type x :E: a
        [subst] -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\z :R: P -E- x. z)
    constructor Bit :E: (_x0 :E: Nat) -> Type
    constructor I :R: Bit -E- 1
    constructor O :R: Bit -E- Z
    double :E: (_x1 :E: Nat) -> Nat 
      [double] -E- Z = Z
      n :E: Nat
        [double] -E- (S -E- n) = S -E- (S -E- (double -E- n))
    constructor Bin :E: (width :E: Nat) -> (value :E: Nat) -> Type
    constructor N :R: Bin -E- Z -E- Z
    constructor C :R: (width :E: Nat) -> (lsbVal :E: Nat) -> (lsb :R: Bit -E- lsbVal) -> (restVal :E: Nat) -> (rest :R: Bin -E- width -E- restVal) -> Bin -E- (S -E- width) -E- (plus -E- lsbVal -E- (double -E- restVal))
    constructor TwoBits :E: (_x2 :E: Nat) -> (_x3 :E: Nat) -> (_x4 :E: Nat) -> Type
    constructor TB :R: (c :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (hi' :E: Nat) -> (hi :R: Bit -E- hi') -> (lo' :E: Nat) -> (lo :R: Bit -E- lo') -> (pf :E: Id -E- Nat -E- (plus -E- c -E- (plus -E- x -E- y)) -E- (plus -E- lo' -E- (double -E- hi'))) -> TwoBits -E- c -E- x -E- y
    adb :R: (c :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (_x5 :R: Bit -E- c) -> (_x6 :R: Bit -E- x) -> (_x7 :R: Bit -E- y) -> TwoBits -E- c -E- x -E- y 
      [adb] -E- [Z] -E- [Z] -E- [Z] -R- O -R- O -R- O = TB -E- Z -E- Z -E- Z -E- Z -R- O -E- Z -R- O -E- (Refl -E- Nat -E- Z)
      [adb] -E- [1] -E- [Z] -E- [Z] -R- I -R- O -R- O = TB -E- 1 -E- Z -E- Z -E- Z -R- O -E- 1 -R- I -E- (Refl -E- Nat -E- 1)
      [adb] -E- [Z] -E- [1] -E- [Z] -R- O -R- I -R- O = TB -E- Z -E- 1 -E- Z -E- Z -R- O -E- 1 -R- I -E- (Refl -E- Nat -E- 1)
      [adb] -E- [Z] -E- [Z] -E- [1] -R- O -R- O -R- I = TB -E- Z -E- Z -E- 1 -E- Z -R- O -E- 1 -R- I -E- (Refl -E- Nat -E- 1)
      [adb] -E- [1] -E- [1] -E- [Z] -R- I -R- I -R- O = TB -E- 1 -E- 1 -E- Z -E- 1 -R- I -E- Z -R- O -E- (Refl -E- Nat -E- 2)
      [adb] -E- [1] -E- [Z] -E- [1] -R- I -R- O -R- I = TB -E- 1 -E- Z -E- 1 -E- 1 -R- I -E- Z -R- O -E- (Refl -E- Nat -E- 2)
      [adb] -E- [Z] -E- [1] -E- [1] -R- O -R- I -R- I = TB -E- Z -E- 1 -E- 1 -E- 1 -R- I -E- Z -R- O -E- (Refl -E- Nat -E- 2)
      [adb] -E- [1] -E- [1] -E- [1] -R- I -R- I -R- I = TB -E- 1 -E- 1 -E- 1 -E- 1 -R- I -E- 1 -R- I -E- (Refl -E- Nat -E- 3)
    add' :R: (w :E: Nat) -> (c :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (_x8 :R: Bit -E- c) -> (_x9 :R: Bin -E- w -E- x) -> (_x10 :R: Bin -E- w -E- y) -> Bin -E- (S -E- w) -E- (plus -E- c -E- (plus -E- x -E- y)) 
      c :E: Nat cb :R: Bit -E- c
        [add'] -E- [Z] -E- c -E- [Z] -E- [Z] -R- cb -R- N -R- N = C -E- Z -E- c -R- cb -E- Z -R- N
      w :E: Nat c :E: Nat cb :R: Bit -E- c xb' :E: Nat xb :R: Bit -E- xb' xn' :E: Nat xn :R: Bin -E- w -E- xn' yb' :E: Nat yb :R: Bit -E- yb' yn' :E: Nat yn :R: Bin -E- w -E- yn'
        [add'] -E- ([S] -E- w) -E- c -E- [plus -E- xb' -E- (double -E- xn')] -E- [plus -E- yb' -E- (double -E- yn')] -R- cb -R- (C -E- [w] -E- xb' -R- xb -E- xn' -R- xn) -R- (C -E- [w] -E- yb' -R- yb -E- yn' -R- yn) = 
          let f :R: (_x11 :R: TwoBits -E- c -E- xb' -E- yb') -> Bin -E- (S -E- (S -E- w)) -E- (plus -E- c -E- (plus -E- (plus -E- xb' -E- (double -E- xn')) -E- (plus -E- yb' -E- (double -E- yn')))) 
            hi' :E: Nat hi :R: Bit -E- hi' lo' :E: Nat lo :R: Bit -E- lo' pf :E: Id -E- Nat -E- (plus -E- c -E- (plus -E- xb' -E- yb')) -E- (plus -E- lo' -E- (double -E- hi'))
              [f] -R- ([TB] -E- [c] -E- [xb'] -E- [yb'] -E- hi' -R- hi -E- lo' -R- lo -E- pf) = 
                let postulate eq :E: Id -E- Nat -E- (plus -E- lo' -E- (double -E- (plus -E- hi' -E- (plus -E- xn' -E- yn')))) -E- (plus -E- c -E- (plus -E- (plus -E- xb' -E- (double -E- xn')) -E- (plus -E- yb' -E- (double -E- yn'))))
                in subst -E- Nat -E- (Bin -E- (S -E- (S -E- w))) -E- (plus -E- lo' -E- (double -E- (plus -E- hi' -E- (plus -E- xn' -E- yn')))) -E- (plus -E- c -E- (plus -E- (plus -E- xb' -E- (double -E- xn')) -E- (plus -E- yb' -E- (double -E- yn')))) -E- eq -R- (C -E- (S -E- w) -E- lo' -R- lo -E- (plus -E- hi' -E- (plus -E- xn' -E- yn')) -R- (add' -E- w -E- hi' -E- xn' -E- yn' -R- hi -R- xn -R- yn))
          in f -R- (adb -E- c -E- xb' -E- yb' -R- cb -R- xb -R- yb)
    add :R: (w :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (bx :R: Bin -E- w -E- x) -> (by :R: Bin -E- w -E- y) -> Bin -E- (S -E- w) -E- (plus -E- x -E- y) = (\w :E: Nat. (\x :E: Nat. (\y :E: Nat. (\bx :R: Bin -E- w -E- x. (\by :R: Bin -E- w -E- y. add' -E- w -E- Z -E- x -E- y -R- O -R- bx -R- by)))))
    foreign inputSize :R: Nat
    binVal :E: (_x12 :E: Bool) -> (_x13 :E: Nat) -> Nat 
      b :E: Bool
        [binVal] -E- b -E- Z = Z
      n :E: Nat
        [binVal] -E- True -E- (S -E- n) = S -E- (double -E- (binVal -E- False -E- n))
      n :E: Nat
        [binVal] -E- False -E- (S -E- n) = double -E- (binVal -E- True -E- n)
    mkBin :R: (b :R: Bool) -> (w :R: Nat) -> Bin -E- w -E- (binVal -E- b -E- w) 
      b :E: Bool
        [mkBin] -R- b -R- Z = N
      n :R: Nat
        [mkBin] -R- True -R- (S -R- n) = C -E- n -E- 1 -R- I -E- (binVal -E- False -E- n) -R- (mkBin -R- False -R- n)
      n :R: Nat
        [mkBin] -R- False -R- (S -R- n) = C -E- n -E- Z -R- O -E- (binVal -E- True -E- n) -R- (mkBin -R- True -R- n)
    main :R: Bin -E- (S -E- inputSize) -E- (plus -E- (binVal -E- True -E- inputSize) -E- (binVal -E- False -E- inputSize)) = 
      let
        x :R: Bin -E- inputSize -E- (binVal -E- True -E- inputSize) = mkBin -R- True -R- inputSize
        y :R: Bin -E- inputSize -E- (binVal -E- False -E- inputSize) = mkBin -R- False -R- inputSize
      in add -E- inputSize -E- (binVal -E- True -E- inputSize) -E- (binVal -E- False -E- inputSize) -R- x -R- y
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor Z : Nat
    constructor S : (x) -> Nat
    constructor True : Bool
    constructor False : Bool
    subst = (\z. z)
    constructor I : Bit
    constructor O : Bit
    constructor N : Bin
    constructor C : (lsb) -> (rest) -> Bin
    constructor TB : (hi) -> (lo) -> TwoBits
    adb 
      [_] O O O = TB O O
      [_] I O O = TB O I
      [_] O I O = TB O I
      [_] O O I = TB O I
      [_] I I O = TB I O
      [_] I O I = TB I O
      [_] O I I = TB I O
      [_] I I I = TB I I
    add' 
      [_] cb N N = C cb N
      [_] cb (C xb xn) (C yb yn) = 
        let f 
          [_] ([_] hi lo) = subst (C lo (add' hi xn yn))
        in f (adb cb xb yb)
    add = (\bx. (\by. add' O bx by))
    foreign inputSize
    mkBin 
      [_] _ Z = N
      [_] True (S n) = C I (mkBin False n)
      [_] False (S n) = C O (mkBin True n)
    main = 
      let
        x = mkBin True inputSize
        y = mkBin False inputSize
      in add x y
  in main

### Normal forms ###

unerased:
  
  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x :R: Nat) -> Nat
    plus : (_x0 : Nat) -> (_x1 : Nat) -> Nat 
      n : Nat
        [plus] Z n = n
      m : Nat n : Nat
        [plus] (S m) n = S (plus m n)
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    constructor Id : (a : Type) -> (x : a) -> (y : a) -> Type
    constructor Refl : (a : Type) -> (x : a) -> Id a x x
    subst : (a : Type) -> (P : (_x0 : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (_x1 : P x) -> P y 
      a : Type P : (_x2 : a) -> Type x : a
        [subst] a P x [x] [Refl a x] = (\z : P x. z)
    constructor Bit : (_x0 : Nat) -> Type
    constructor I : Bit 1
    constructor O : Bit Z
    double : (_x1 : Nat) -> Nat 
      [double] Z = Z
      n : Nat
        [double] (S n) = S (S (double n))
    constructor Bin : (width : Nat) -> (value : Nat) -> Type
    constructor N : Bin Z Z
    constructor C : (width : Nat) -> (lsbVal : Nat) -> (lsb :R: Bit lsbVal) -> (restVal : Nat) -> (rest :R: Bin width restVal) -> Bin (S width) (plus lsbVal (double restVal))
    constructor TwoBits : (_x2 : Nat) -> (_x3 : Nat) -> (_x4 : Nat) -> Type
    constructor TB : (c : Nat) -> (x : Nat) -> (y : Nat) -> (hi' : Nat) -> (hi : Bit hi') -> (lo' : Nat) -> (lo : Bit lo') -> (pf : Id Nat (plus c (plus x y)) (plus lo' (double hi'))) -> TwoBits c x y
    adb : (c : Nat) -> (x : Nat) -> (y : Nat) -> (_x5 : Bit c) -> (_x6 : Bit x) -> (_x7 : Bit y) -> TwoBits c x y 
      [adb] [Z] [Z] [Z] O O O = TB Z Z Z Z O Z O (Refl Nat Z)
      [adb] [1] [Z] [Z] I O O = TB 1 Z Z Z O 1 I (Refl Nat 1)
      [adb] [Z] [1] [Z] O I O = TB Z 1 Z Z O 1 I (Refl Nat 1)
      [adb] [Z] [Z] [1] O O I = TB Z Z 1 Z O 1 I (Refl Nat 1)
      [adb] [1] [1] [Z] I I O = TB 1 1 Z 1 I Z O (Refl Nat 2)
      [adb] [1] [Z] [1] I O I = TB 1 Z 1 1 I Z O (Refl Nat 2)
      [adb] [Z] [1] [1] O I I = TB Z 1 1 1 I Z O (Refl Nat 2)
      [adb] [1] [1] [1] I I I = TB 1 1 1 1 I 1 I (Refl Nat 3)
    add' : (w : Nat) -> (c : Nat) -> (x : Nat) -> (y : Nat) -> (_x8 : Bit c) -> (_x9 : Bin w x) -> (_x10 : Bin w y) -> Bin (S w) (plus c (plus x y)) 
      c : Nat cb : Bit c
        [add'] [Z] c [Z] [Z] cb N N = C Z c cb Z N
      w : Nat c : Nat cb : Bit c xb' : Nat xb : Bit xb' xn' : Nat xn : Bin w xn' yb' : Nat yb : Bit yb' yn' : Nat yn : Bin w yn'
        [add'] ([S] w) c [plus xb' (double xn')] [plus yb' (double yn')] cb (C [w] xb' xb xn' xn) (C [w] yb' yb yn' yn) = 
          let f : (_x11 : TwoBits c xb' yb') -> Bin (S (S w)) (plus c (plus (plus xb' (double xn')) (plus yb' (double yn')))) 
            hi' : Nat hi : Bit hi' lo' : Nat lo : Bit lo' pf : Id Nat (plus c (plus xb' yb')) (plus lo' (double hi'))
              [f] ([TB] [c] [xb'] [yb'] hi' hi lo' lo pf) = 
                let postulate eq : Id Nat (plus lo' (double (plus hi' (plus xn' yn')))) (plus c (plus (plus xb' (double xn')) (plus yb' (double yn'))))
                in subst Nat (Bin (S (S w))) (plus lo' (double (plus hi' (plus xn' yn')))) (plus c (plus (plus xb' (double xn')) (plus yb' (double yn')))) eq (C (S w) lo' lo (plus hi' (plus xn' yn')) (add' w hi' xn' yn' hi xn yn))
          in f (adb c xb' yb' cb xb yb)
    foreign inputSize : Nat
    binVal : (_x12 : Bool) -> (_x13 : Nat) -> Nat 
      b : Bool
        [binVal] b Z = Z
      n : Nat
        [binVal] True (S n) = S (double (binVal False n))
      n : Nat
        [binVal] False (S n) = double (binVal True n)
    mkBin : (b : Bool) -> (w : Nat) -> Bin w (binVal b w) 
      b : Bool
        [mkBin] b Z = N
      n : Nat
        [mkBin] True (S n) = C n 1 I (binVal False n) (mkBin False n)
      n : Nat
        [mkBin] False (S n) = C n Z O (binVal True n) (mkBin True n)
  in add' inputSize Z (binVal True inputSize) (binVal False inputSize) O (mkBin True inputSize) (mkBin False inputSize)

erased:
  
  let
    constructor Z : Nat
    constructor S : (x) -> Nat
    constructor True : Bool
    constructor False : Bool
    subst = (\z. z)
    constructor I : Bit
    constructor O : Bit
    constructor N : Bin
    constructor C : (lsb) -> (rest) -> Bin
    constructor TB : (hi) -> (lo) -> TwoBits
    adb 
      [_] O O O = TB O O
      [_] I O O = TB O I
      [_] O I O = TB O I
      [_] O O I = TB O I
      [_] I I O = TB I O
      [_] I O I = TB I O
      [_] O I I = TB I O
      [_] I I I = TB I I
    add' 
      [_] cb N N = C cb N
      [_] cb (C xb xn) (C yb yn) = 
        let f 
          [_] ([_] hi lo) = subst (C lo (add' hi xn yn))
        in f (adb cb xb yb)
    foreign inputSize
    mkBin 
      [_] _ Z = N
      [_] True (S n) = C I (mkBin False n)
      [_] False (S n) = C O (mkBin True n)
  in add' O (mkBin True inputSize) (mkBin False inputSize)

