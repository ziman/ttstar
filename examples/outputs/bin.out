-- vim: ft=ttstar

### Desugared ###

  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x :R: Nat) -> Nat
    plus : (_x0 : Nat) -> (_x1 : Nat) -> Nat 
      n : Nat
        [plus] Z n = n
      m : Nat n : Nat
        [plus] (S m) n = S (plus m n)
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    not : (_x2 : Bool) -> Bool 
      [not] True = False
      [not] False = True
    constructor Unit : Type
    constructor MkUnit : Unit
    constructor Pair : (_x3 : Type) -> (_x4 : Type) -> Type
    constructor MkPair : (a : Type) -> (b : Type) -> (_x5 : a) -> (_x6 : b) -> Pair a b
    fst : (a : Type) -> (b : Type) -> (_x7 : Pair a b) -> a 
      a : Type b : Type x : a y : b
        [fst] a b ([MkPair] [a] [b] x y) = x
    snd : (a : Type) -> (b : Type) -> (_x8 : Pair a b) -> b 
      a : Type b : Type x : a y : b
        [snd] a b ([MkPair] [a] [b] x y) = y
    constructor Either : (_x9 : Type) -> (_x10 : Type) -> Type
    constructor Left : (a : Type) -> (b : Type) -> (_x11 : a) -> Either a b
    constructor Right : (a : Type) -> (b : Type) -> (_x12 : b) -> Either a b
    id : (a : Type) -> (x : a) -> a = (\a : Type. (\x : a. x))
    constructor Fin : (_x13 : Nat) -> Type
    constructor FZ : (n : Nat) -> Fin (S n)
    constructor FS : (n : Nat) -> (_x14 : Fin n) -> Fin (S n)
    constructor Vect : (_x15 : Nat) -> (_x16 : Type) -> Type
    constructor VN : (a : Type) -> Vect Z a
    constructor VC : (n : Nat) -> (a : Type) -> (x : a) -> (xs : Vect n a) -> Vect (S n) a
    constructor Id : (a : Type) -> (x : a) -> (y : a) -> Type
    constructor Refl : (a : Type) -> (x : a) -> Id a x x
    subst : (a : Type) -> (P : (_x0 : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (_x1 : P x) -> P y 
      a : Type P : (_x2 : a) -> Type x : a
        [subst] a P x [x] [Refl a x] = (\z : P x. z)
    constructor Bit : (_x0 : Nat) -> Type
    constructor I : Bit 1
    constructor O : Bit Z
    double : (_x1 : Nat) -> Nat 
      [double] Z = Z
      n : Nat
        [double] (S n) = S (S (double n))
    constructor Bin : (width : Nat) -> (value : Nat) -> Type
    constructor N : Bin Z Z
    constructor C : (width : Nat) -> (lsbVal : Nat) -> (lsb :R: Bit lsbVal) -> (restVal : Nat) -> (rest :R: Bin width restVal) -> Bin (S width) (plus lsbVal (double restVal))
    constructor TwoBits : (_x2 : Nat) -> (_x3 : Nat) -> (_x4 : Nat) -> Type
    constructor TB : (c : Nat) -> (x : Nat) -> (y : Nat) -> (hi' : Nat) -> (hi : Bit hi') -> (lo' : Nat) -> (lo : Bit lo') -> (pf : Id Nat (plus c (plus x y)) (plus lo' (double hi'))) -> TwoBits c x y
    adb : (c : Nat) -> (x : Nat) -> (y : Nat) -> (_x5 : Bit c) -> (_x6 : Bit x) -> (_x7 : Bit y) -> TwoBits c x y 
      [adb] [Z] [Z] [Z] O O O = TB Z Z Z Z O Z O (Refl Nat Z)
      [adb] [1] [Z] [Z] I O O = TB 1 Z Z Z O 1 I (Refl Nat 1)
      [adb] [Z] [1] [Z] O I O = TB Z 1 Z Z O 1 I (Refl Nat 1)
      [adb] [Z] [Z] [1] O O I = TB Z Z 1 Z O 1 I (Refl Nat 1)
      [adb] [1] [1] [Z] I I O = TB 1 1 Z 1 I Z O (Refl Nat 2)
      [adb] [1] [Z] [1] I O I = TB 1 Z 1 1 I Z O (Refl Nat 2)
      [adb] [Z] [1] [1] O I I = TB Z 1 1 1 I Z O (Refl Nat 2)
      [adb] [1] [1] [1] I I I = TB 1 1 1 1 I 1 I (Refl Nat 3)
    add' : (w : Nat) -> (c : Nat) -> (x : Nat) -> (y : Nat) -> (_x8 : Bit c) -> (_x9 : Bin w x) -> (_x10 : Bin w y) -> Bin (S w) (plus c (plus x y)) 
      c : Nat cb : Bit c
        [add'] [Z] c [Z] [Z] cb N N = C Z c cb Z N
      w : Nat c : Nat cb : Bit c xb' : Nat xb : Bit xb' xn' : Nat xn : Bin w xn' yb' : Nat yb : Bit yb' yn' : Nat yn : Bin w yn'
        [add'] ([S] w) c [plus xb' (double xn')] [plus yb' (double yn')] cb (C [w] xb' xb xn' xn) (C [w] yb' yb yn' yn) = 
          let f : (_x11 : TwoBits c xb' yb') -> Bin (S (S w)) (plus c (plus (plus xb' (double xn')) (plus yb' (double yn')))) 
            hi' : Nat hi : Bit hi' lo' : Nat lo : Bit lo' pf : Id Nat (plus c (plus xb' yb')) (plus lo' (double hi'))
              [f] ([TB] [c] [xb'] [yb'] hi' hi lo' lo pf) = 
                let postulate eq : Id Nat (plus lo' (double (plus hi' (plus xn' yn')))) (plus c (plus (plus xb' (double xn')) (plus yb' (double yn'))))
                in subst Nat (Bin (S (S w))) (plus lo' (double (plus hi' (plus xn' yn')))) (plus c (plus (plus xb' (double xn')) (plus yb' (double yn')))) eq (C (S w) lo' lo (plus hi' (plus xn' yn')) (add' w hi' xn' yn' hi xn yn))
          in f (adb c xb' yb' cb xb yb)
    add : (w : Nat) -> (x : Nat) -> (y : Nat) -> (bx : Bin w x) -> (by : Bin w y) -> Bin (S w) (plus x y) = (\w : Nat. (\x : Nat. (\y : Nat. (\bx : Bin w x. (\by : Bin w y. add' w Z x y O bx by)))))
    foreign inputSize : Nat
    binVal : (_x12 : Bool) -> (_x13 : Nat) -> Nat 
      b : Bool
        [binVal] b Z = Z
      n : Nat
        [binVal] True (S n) = S (double (binVal False n))
      n : Nat
        [binVal] False (S n) = double (binVal True n)
    mkBin : (b : Bool) -> (w : Nat) -> Bin w (binVal b w) 
      b : Bool
        [mkBin] b Z = N
      n : Nat
        [mkBin] True (S n) = C n 1 I (binVal False n) (mkBin False n)
      n : Nat
        [mkBin] False (S n) = C n Z O (binVal True n) (mkBin True n)
    main : Bin (S inputSize) (plus (binVal True inputSize) (binVal False inputSize)) = 
      let
        x : Bin inputSize (binVal True inputSize) = mkBin True inputSize
        y : Bin inputSize (binVal False inputSize) = mkBin False inputSize
      in add inputSize (binVal True inputSize) (binVal False inputSize) x y
  in main

### Evarified ###

  let
    constructor Nat :1: Type
    constructor Z :2: Nat
    constructor S :3: (x :R: Nat) -> Nat
    plus :4: (_x0 :5: Nat) -> (_x1 :6: Nat) -> Nat 
      n :7: Nat
        [plus] -9- Z -8- n = n
      m :10: Nat n :11: Nat
        [plus] -13- (S -14- m) -12- n = S -15- (plus -17- m -16- n)
    constructor Bool :18: Type
    constructor True :19: Bool
    constructor False :20: Bool
    not :21: (_x2 :22: Bool) -> Bool 
      [not] -23- True = False
      [not] -24- False = True
    constructor Unit :25: Type
    constructor MkUnit :26: Unit
    constructor Pair :27: (_x3 :28: Type) -> (_x4 :29: Type) -> Type
    constructor MkPair :30: (a :31: Type) -> (b :32: Type) -> (_x5 :33: a) -> (_x6 :34: b) -> Pair -36- a -35- b
    fst :37: (a :38: Type) -> (b :39: Type) -> (_x7 :40: Pair -42- a -41- b) -> a 
      a :43: Type b :44: Type x :45: a y :46: b
        [fst] -49- a -48- b -47- ([MkPair] -53- [a] -52- [b] -51- x -50- y) = x
    snd :54: (a :55: Type) -> (b :56: Type) -> (_x8 :57: Pair -59- a -58- b) -> b 
      a :60: Type b :61: Type x :62: a y :63: b
        [snd] -66- a -65- b -64- ([MkPair] -70- [a] -69- [b] -68- x -67- y) = y
    constructor Either :71: (_x9 :72: Type) -> (_x10 :73: Type) -> Type
    constructor Left :74: (a :75: Type) -> (b :76: Type) -> (_x11 :77: a) -> Either -79- a -78- b
    constructor Right :80: (a :81: Type) -> (b :82: Type) -> (_x12 :83: b) -> Either -85- a -84- b
    id :86: (a :87: Type) -> (x :88: a) -> a = (\a :89: Type. (\x :90: a. x))
    constructor Fin :91: (_x13 :92: Nat) -> Type
    constructor FZ :93: (n :94: Nat) -> Fin -95- (S -96- n)
    constructor FS :97: (n :98: Nat) -> (_x14 :99: Fin -100- n) -> Fin -101- (S -102- n)
    constructor Vect :103: (_x15 :104: Nat) -> (_x16 :105: Type) -> Type
    constructor VN :106: (a :107: Type) -> Vect -109- Z -108- a
    constructor VC :110: (n :111: Nat) -> (a :112: Type) -> (x :113: a) -> (xs :114: Vect -116- n -115- a) -> Vect -118- (S -119- n) -117- a
    constructor Id :120: (a :121: Type) -> (x :122: a) -> (y :123: a) -> Type
    constructor Refl :124: (a :125: Type) -> (x :126: a) -> Id -129- a -128- x -127- x
    subst :130: (a :131: Type) -> (P :132: (_x0 :133: a) -> Type) -> (x :134: a) -> (y :135: a) -> (eq :136: Id -139- a -138- x -137- y) -> (_x1 :140: P -141- x) -> P -142- y 
      a :143: Type P :144: (_x2 :145: a) -> Type x :146: a
        [subst] -151- a -150- P -149- x -148- [x] -147- [Refl -153- a -152- x] = (\z :154: P -155- x. z)
    constructor Bit :156: (_x0 :157: Nat) -> Type
    constructor I :158: Bit -159- 1
    constructor O :161: Bit -162- Z
    double :163: (_x1 :164: Nat) -> Nat 
      [double] -165- Z = Z
      n :166: Nat
        [double] -167- (S -168- n) = S -169- (S -170- (double -171- n))
    constructor Bin :172: (width :173: Nat) -> (value :174: Nat) -> Type
    constructor N :175: Bin -177- Z -176- Z
    constructor C :178: (width :179: Nat) -> (lsbVal :180: Nat) -> (lsb :R: Bit -181- lsbVal) -> (restVal :182: Nat) -> (rest :R: Bin -184- width -183- restVal) -> Bin -186- (S -187- width) -185- (plus -189- lsbVal -188- (double -190- restVal))
    constructor TwoBits :191: (_x2 :192: Nat) -> (_x3 :193: Nat) -> (_x4 :194: Nat) -> Type
    constructor TB :195: (c :196: Nat) -> (x :197: Nat) -> (y :198: Nat) -> (hi' :199: Nat) -> (hi :200: Bit -201- hi') -> (lo' :202: Nat) -> (lo :203: Bit -204- lo') -> (pf :205: Id -208- Nat -207- (plus -210- c -209- (plus -212- x -211- y)) -206- (plus -214- lo' -213- (double -215- hi'))) -> TwoBits -218- c -217- x -216- y
    adb :219: (c :220: Nat) -> (x :221: Nat) -> (y :222: Nat) -> (_x5 :223: Bit -224- c) -> (_x6 :225: Bit -226- x) -> (_x7 :227: Bit -228- y) -> TwoBits -231- c -230- x -229- y 
      [adb] -237- [Z] -236- [Z] -235- [Z] -234- O -233- O -232- O = TB -245- Z -244- Z -243- Z -242- Z -241- O -240- Z -239- O -238- (Refl -247- Nat -246- Z)
      [adb] -253- [1] -252- [Z] -251- [Z] -250- I -249- O -248- O = TB -262- 1 -261- Z -260- Z -259- Z -258- O -257- 1 -256- I -255- (Refl -266- Nat -265- 1)
      [adb] -273- [Z] -272- [1] -271- [Z] -270- O -269- I -268- O = TB -282- Z -281- 1 -280- Z -279- Z -278- O -277- 1 -276- I -275- (Refl -286- Nat -285- 1)
      [adb] -293- [Z] -292- [Z] -291- [1] -290- O -289- O -288- I = TB -302- Z -301- Z -300- 1 -299- Z -298- O -297- 1 -296- I -295- (Refl -306- Nat -305- 1)
      [adb] -313- [1] -312- [1] -311- [Z] -310- I -309- I -308- O = TB -323- 1 -322- 1 -321- Z -320- 1 -319- I -318- Z -317- O -316- (Refl -328- Nat -327- 2)
      [adb] -336- [1] -335- [Z] -334- [1] -333- I -332- O -331- I = TB -346- 1 -345- Z -344- 1 -343- 1 -342- I -341- Z -340- O -339- (Refl -351- Nat -350- 2)
      [adb] -359- [Z] -358- [1] -357- [1] -356- O -355- I -354- I = TB -369- Z -368- 1 -367- 1 -366- 1 -365- I -364- Z -363- O -362- (Refl -374- Nat -373- 2)
      [adb] -382- [1] -381- [1] -380- [1] -379- I -378- I -377- I = TB -393- 1 -392- 1 -391- 1 -390- 1 -389- I -388- 1 -387- I -386- (Refl -400- Nat -399- 3)
    add' :404: (w :405: Nat) -> (c :406: Nat) -> (x :407: Nat) -> (y :408: Nat) -> (_x8 :409: Bit -410- c) -> (_x9 :411: Bin -413- w -412- x) -> (_x10 :414: Bin -416- w -415- y) -> Bin -418- (S -419- w) -417- (plus -421- c -420- (plus -423- x -422- y)) 
      c :424: Nat cb :425: Bit -426- c
        [add'] -433- [Z] -432- c -431- [Z] -430- [Z] -429- cb -428- N -427- N = C -438- Z -437- c -436- cb -435- Z -434- N
      w :439: Nat c :440: Nat cb :441: Bit -442- c xb' :443: Nat xb :444: Bit -445- xb' xn' :446: Nat xn :447: Bin -449- w -448- xn' yb' :450: Nat yb :451: Bit -452- yb' yn' :453: Nat yn :454: Bin -456- w -455- yn'
        [add'] -463- ([S] -464- w) -462- c -461- [plus -466- xb' -465- (double -467- xn')] -460- [plus -469- yb' -468- (double -470- yn')] -459- cb -458- (C -475- [w] -474- xb' -473- xb -472- xn' -471- xn) -457- (C -480- [w] -479- yb' -478- yb -477- yn' -476- yn) = 
          let f :481: (_x11 :482: TwoBits -485- c -484- xb' -483- yb') -> Bin -487- (S -488- (S -489- w)) -486- (plus -491- c -490- (plus -493- (plus -495- xb' -494- (double -496- xn')) -492- (plus -498- yb' -497- (double -499- yn')))) 
            hi' :500: Nat hi :501: Bit -502- hi' lo' :503: Nat lo :504: Bit -505- lo' pf :506: Id -509- Nat -508- (plus -511- c -510- (plus -513- xb' -512- yb')) -507- (plus -515- lo' -514- (double -516- hi'))
              [f] -517- ([TB] -525- [c] -524- [xb'] -523- [yb'] -522- hi' -521- hi -520- lo' -519- lo -518- pf) = 
                let postulate eq :526: Id -529- Nat -528- (plus -531- lo' -530- (double -532- (plus -534- hi' -533- (plus -536- xn' -535- yn')))) -527- (plus -538- c -537- (plus -540- (plus -542- xb' -541- (double -543- xn')) -539- (plus -545- yb' -544- (double -546- yn'))))
                in subst -552- Nat -551- (Bin -553- (S -554- (S -555- w))) -550- (plus -557- lo' -556- (double -558- (plus -560- hi' -559- (plus -562- xn' -561- yn')))) -549- (plus -564- c -563- (plus -566- (plus -568- xb' -567- (double -569- xn')) -565- (plus -571- yb' -570- (double -572- yn')))) -548- eq -547- (C -577- (S -578- w) -576- lo' -575- lo -574- (plus -580- hi' -579- (plus -582- xn' -581- yn')) -573- (add' -589- w -588- hi' -587- xn' -586- yn' -585- hi -584- xn -583- yn))
          in f -590- (adb -596- c -595- xb' -594- yb' -593- cb -592- xb -591- yb)
    add :597: (w :598: Nat) -> (x :599: Nat) -> (y :600: Nat) -> (bx :601: Bin -603- w -602- x) -> (by :604: Bin -606- w -605- y) -> Bin -608- (S -609- w) -607- (plus -611- x -610- y) = (\w :612: Nat. (\x :613: Nat. (\y :614: Nat. (\bx :615: Bin -617- w -616- x. (\by :618: Bin -620- w -619- y. add' -627- w -626- Z -625- x -624- y -623- O -622- bx -621- by)))))
    foreign inputSize :628: Nat
    binVal :629: (_x12 :630: Bool) -> (_x13 :631: Nat) -> Nat 
      b :632: Bool
        [binVal] -634- b -633- Z = Z
      n :635: Nat
        [binVal] -637- True -636- (S -638- n) = S -639- (double -640- (binVal -642- False -641- n))
      n :643: Nat
        [binVal] -645- False -644- (S -646- n) = double -647- (binVal -649- True -648- n)
    mkBin :650: (b :651: Bool) -> (w :652: Nat) -> Bin -654- w -653- (binVal -656- b -655- w) 
      b :657: Bool
        [mkBin] -659- b -658- Z = N
      n :660: Nat
        [mkBin] -662- True -661- (S -663- n) = C -668- n -667- 1 -666- I -665- (binVal -671- False -670- n) -664- (mkBin -673- False -672- n)
      n :674: Nat
        [mkBin] -676- False -675- (S -677- n) = C -682- n -681- Z -680- O -679- (binVal -684- True -683- n) -678- (mkBin -686- True -685- n)
    main :687: Bin -689- (S -690- inputSize) -688- (plus -692- (binVal -694- True -693- inputSize) -691- (binVal -696- False -695- inputSize)) = 
      let
        x :697: Bin -699- inputSize -698- (binVal -701- True -700- inputSize) = mkBin -703- True -702- inputSize
        y :704: Bin -706- inputSize -705- (binVal -708- False -707- inputSize) = mkBin -710- False -709- inputSize
      in add -715- inputSize -714- (binVal -717- True -716- inputSize) -713- (binVal -719- False -718- inputSize) -712- x -711- y
  in main

### Constraints ###

[5,15,460] -> [17]
[5,15,461] -> [17]
[5,15,547,574] -> [17]
[5,15,547,574,579] -> [17]
[5,15,549] -> [17]
[5,15,549,563] -> [17]
[5,15,549,563,565] -> [17]
[5,15,549,563,566] -> [17]
[5,15,550] -> [17]
[5,15,550,556,558] -> [17]
[5,15,550,556,558,559] -> [17]
[5,460] -> [469]
[5,460,R] -> [9,13]
[5,461] -> [466]
[5,461,R] -> [9,13]
[5,547,574] -> [580]
[5,547,574,579] -> [582]
[5,547,574,579,R] -> [9,13]
[5,547,574,R] -> [9,13]
[5,549] -> [564]
[5,549,563] -> [566]
[5,549,563,565] -> [571]
[5,549,563,565,R] -> [9,13]
[5,549,563,566] -> [568]
[5,549,563,566,R] -> [9,13]
[5,549,563,R] -> [9,13]
[5,549,R] -> [9,13]
[5,550] -> [557]
[5,550,556,558] -> [560]
[5,550,556,558,559] -> [562]
[5,550,556,558,559,R] -> [9,13]
[5,550,556,558,R] -> [9,13]
[5,550,R] -> [9,13]
[6,15,460] -> [16]
[6,15,461] -> [16]
[6,15,547,574] -> [16]
[6,15,547,574,579] -> [16]
[6,15,549] -> [16]
[6,15,549,563] -> [16]
[6,15,549,563,565] -> [16]
[6,15,549,563,566] -> [16]
[6,15,550] -> [16]
[6,15,550,556,558] -> [16]
[6,15,550,556,558,559] -> [16]
[6,460] -> [468]
[6,460,R] -> [8,12]
[6,461] -> [465]
[6,461,R] -> [8,12]
[6,547,574] -> [579]
[6,547,574,579] -> [581]
[6,547,574,579,R] -> [8,12]
[6,547,574,R] -> [8,12]
[6,549] -> [563]
[6,549,563] -> [565]
[6,549,563,565] -> [570]
[6,549,563,565,R] -> [8,12]
[6,549,563,566] -> [567]
[6,549,563,566,R] -> [8,12]
[6,549,563,R] -> [8,12]
[6,549,R] -> [8,12]
[6,550] -> [556]
[6,550,556,558] -> [559]
[6,550,556,558,559] -> [561]
[6,550,556,558,559,R] -> [8,12]
[6,550,556,558,R] -> [8,12]
[6,550,R] -> [8,12]
[7,460] -> [8]
[7,461] -> [8]
[7,547,574] -> [8]
[7,547,574,579] -> [8]
[7,549] -> [8]
[7,549,563] -> [8]
[7,549,563,565] -> [8]
[7,549,563,566] -> [8]
[7,550] -> [8]
[7,550,556,558] -> [8]
[7,550,556,558,559] -> [8]
[8,460] -> [R]
[8,460,R] -> [6]
[8,461] -> [R]
[8,461,R] -> [6]
[8,547,574] -> [R]
[8,547,574,579] -> [R]
[8,547,574,579,R] -> [6]
[8,547,574,R] -> [6]
[8,549] -> [R]
[8,549,563] -> [R]
[8,549,563,565] -> [R]
[8,549,563,565,R] -> [6]
[8,549,563,566] -> [R]
[8,549,563,566,R] -> [6]
[8,549,563,R] -> [6]
[8,549,R] -> [6]
[8,550] -> [R]
[8,550,556,558] -> [R]
[8,550,556,558,559] -> [R]
[8,550,556,558,559,R] -> [6]
[8,550,556,558,R] -> [6]
[8,550,R] -> [6]
[9,460] -> [R]
[9,460,R] -> [5]
[9,461] -> [R]
[9,461,R] -> [5]
[9,547,574] -> [R]
[9,547,574,579] -> [R]
[9,547,574,579,R] -> [5]
[9,547,574,R] -> [5]
[9,549] -> [R]
[9,549,563] -> [R]
[9,549,563,565] -> [R]
[9,549,563,565,R] -> [5]
[9,549,563,566] -> [R]
[9,549,563,566,R] -> [5]
[9,549,563,R] -> [5]
[9,549,R] -> [5]
[9,550] -> [R]
[9,550,556,558] -> [R]
[9,550,556,558,559] -> [R]
[9,550,556,558,559,R] -> [5]
[9,550,556,558,R] -> [5]
[9,550,R] -> [5]
[10,460] -> [14]
[10,461] -> [14]
[10,547,574] -> [14]
[10,547,574,579] -> [14]
[10,549] -> [14]
[10,549,563] -> [14]
[10,549,563,565] -> [14]
[10,549,563,566] -> [14]
[10,550] -> [14]
[10,550,556,558] -> [14]
[10,550,556,558,559] -> [14]
[11,460] -> [12]
[11,461] -> [12]
[11,547,574] -> [12]
[11,547,574,579] -> [12]
[11,549] -> [12]
[11,549,563] -> [12]
[11,549,563,565] -> [12]
[11,549,563,566] -> [12]
[11,550] -> [12]
[11,550,556,558] -> [12]
[11,550,556,558,559] -> [12]
[12,460] -> [R]
[12,460,R] -> [6]
[12,461] -> [R]
[12,461,R] -> [6]
[12,547,574] -> [R]
[12,547,574,579] -> [R]
[12,547,574,579,R] -> [6]
[12,547,574,R] -> [6]
[12,549] -> [R]
[12,549,563] -> [R]
[12,549,563,565] -> [R]
[12,549,563,565,R] -> [6]
[12,549,563,566] -> [R]
[12,549,563,566,R] -> [6]
[12,549,563,R] -> [6]
[12,549,R] -> [6]
[12,550] -> [R]
[12,550,556,558] -> [R]
[12,550,556,558,559] -> [R]
[12,550,556,558,559,R] -> [6]
[12,550,556,558,R] -> [6]
[12,550,R] -> [6]
[13,14,460] -> [R]
[13,14,461] -> [R]
[13,14,547,574] -> [R]
[13,14,547,574,579] -> [R]
[13,14,549] -> [R]
[13,14,549,563] -> [R]
[13,14,549,563,565] -> [R]
[13,14,549,563,566] -> [R]
[13,14,550] -> [R]
[13,14,550,556,558] -> [R]
[13,14,550,556,558,559] -> [R]
[13,460] -> [R]
[13,460,R] -> [5,14]
[13,461] -> [R]
[13,461,R] -> [5,14]
[13,547,574] -> [R]
[13,547,574,579] -> [R]
[13,547,574,579,R] -> [5,14]
[13,547,574,R] -> [5,14]
[13,549] -> [R]
[13,549,563] -> [R]
[13,549,563,565] -> [R]
[13,549,563,565,R] -> [5,14]
[13,549,563,566] -> [R]
[13,549,563,566,R] -> [5,14]
[13,549,563,R] -> [5,14]
[13,549,R] -> [5,14]
[13,550] -> [R]
[13,550,556,558] -> [R]
[13,550,556,558,559] -> [R]
[13,550,556,558,559,R] -> [5,14]
[13,550,556,558,R] -> [5,14]
[13,550,R] -> [5,14]
[14,460] -> [13]
[14,461] -> [13]
[14,547,574] -> [13]
[14,547,574,579] -> [13]
[14,549] -> [13]
[14,549,563] -> [13]
[14,549,563,565] -> [13]
[14,549,563,566] -> [13]
[14,550] -> [13]
[14,550,556,558] -> [13]
[14,550,556,558,559] -> [13]
[15,16,460] -> [6]
[15,16,460,R] -> [11]
[15,16,461] -> [6]
[15,16,461,R] -> [11]
[15,16,547,574] -> [6]
[15,16,547,574,579] -> [6]
[15,16,547,574,579,R] -> [11]
[15,16,547,574,R] -> [11]
[15,16,549] -> [6]
[15,16,549,563] -> [6]
[15,16,549,563,565] -> [6]
[15,16,549,563,565,R] -> [11]
[15,16,549,563,566] -> [6]
[15,16,549,563,566,R] -> [11]
[15,16,549,563,R] -> [11]
[15,16,549,R] -> [11]
[15,16,550] -> [6]
[15,16,550,556,558] -> [6]
[15,16,550,556,558,559] -> [6]
[15,16,550,556,558,559,R] -> [11]
[15,16,550,556,558,R] -> [11]
[15,16,550,R] -> [11]
[15,17,460] -> [5]
[15,17,460,R] -> [10]
[15,17,461] -> [5]
[15,17,461,R] -> [10]
[15,17,547,574] -> [5]
[15,17,547,574,579] -> [5]
[15,17,547,574,579,R] -> [10]
[15,17,547,574,R] -> [10]
[15,17,549] -> [5]
[15,17,549,563] -> [5]
[15,17,549,563,565] -> [5]
[15,17,549,563,565,R] -> [10]
[15,17,549,563,566] -> [5]
[15,17,549,563,566,R] -> [10]
[15,17,549,563,R] -> [10]
[15,17,549,R] -> [10]
[15,17,550] -> [5]
[15,17,550,556,558] -> [5]
[15,17,550,556,558,559] -> [5]
[15,17,550,556,558,559,R] -> [10]
[15,17,550,556,558,R] -> [10]
[15,17,550,R] -> [10]
[15,127,255,590] -> [267]
[15,127,275,590] -> [287]
[15,127,295,590] -> [307]
[15,127,386,590] -> [401]
[15,128,255,590] -> [267]
[15,128,275,590] -> [287]
[15,128,316,329,590] -> [330]
[15,128,316,590] -> [329]
[15,128,339,590] -> [352]
[15,128,362,590] -> [375]
[15,128,386,401,590] -> [402]
[15,128,386,590] -> [401]
[15,460] -> [R]
[15,460,R] -> [4]
[15,461] -> [R]
[15,461,R] -> [4]
[15,547,574] -> [R]
[15,547,574,579] -> [R]
[15,547,574,579,R] -> [4]
[15,547,574,R] -> [4]
[15,549] -> [R]
[15,549,563] -> [R]
[15,549,563,565] -> [R]
[15,549,563,565,R] -> [4]
[15,549,563,566] -> [R]
[15,549,563,566,R] -> [4]
[15,549,563,R] -> [4]
[15,549,R] -> [4]
[15,550] -> [R]
[15,550,556,558] -> [R]
[15,550,556,558,559] -> [R]
[15,550,556,558,559,R] -> [4]
[15,550,556,558,R] -> [4]
[15,550,R] -> [4]
[15,653,711] -> [639]
[15,653,712] -> [639]
[125,147] -> [153]
[125,238,590] -> [247]
[125,255,590] -> [266]
[125,275,590] -> [286]
[125,295,590] -> [306]
[125,316,590] -> [328]
[125,339,590] -> [351]
[125,362,590] -> [374]
[125,386,590] -> [400]
[126,147] -> [152]
[126,238,590] -> [246]
[126,255,590] -> [265]
[126,275,590] -> [285]
[126,295,590] -> [305]
[126,316,590] -> [327]
[126,339,590] -> [350]
[126,362,590] -> [373]
[126,386,590] -> [399]
[127,147] -> [137]
[127,169,316,590] -> [329]
[127,169,339,590] -> [352]
[127,169,362,590] -> [375]
[127,169,386,401,590] -> [402]
[127,170,316,329,590] -> [330]
[127,170,339,352,590] -> [353]
[127,170,362,375,590] -> [376]
[127,170,386,401,402,590] -> [403]
[127,238,590] -> [206]
[127,255,267,590] -> [15]
[127,255,590] -> [206]
[127,275,287,590] -> [15]
[127,275,590] -> [206]
[127,295,307,590] -> [15]
[127,295,590] -> [206]
[127,316,329,330,590] -> [170]
[127,316,329,590] -> [169]
[127,316,590] -> [206]
[127,339,352,353,590] -> [170]
[127,339,352,590] -> [169]
[127,339,590] -> [206]
[127,362,375,376,590] -> [170]
[127,362,375,590] -> [169]
[127,362,590] -> [206]
[127,386,401,402,403,590] -> [170]
[127,386,401,402,590] -> [169]
[127,386,401,590] -> [15]
[127,386,590] -> [206]
[128,147] -> [138]
[128,238,590] -> [207]
[128,255,267,590] -> [15]
[128,255,590] -> [207]
[128,275,287,590] -> [15]
[128,275,590] -> [207]
[128,295,303,590] -> [307]
[128,295,307,590] -> [303]
[128,295,590] -> [207]
[128,316,329,330,590] -> [15]
[128,316,329,590] -> [15]
[128,316,590] -> [207]
[128,339,348,352,590] -> [353]
[128,339,352,353,590] -> [348]
[128,339,352,590] -> [15]
[128,339,590] -> [207]
[128,362,371,375,590] -> [376]
[128,362,375,376,590] -> [371]
[128,362,375,590] -> [15]
[128,362,590] -> [207]
[128,386,396,401,402,590] -> [403]
[128,386,401,402,403,590] -> [396]
[128,386,401,402,590] -> [15]
[128,386,401,590] -> [15]
[128,386,590] -> [207]
[129,147] -> [139]
[129,238,590] -> [208]
[129,255,590] -> [208]
[129,275,590] -> [208]
[129,295,590] -> [208]
[129,316,590] -> [208]
[129,339,590] -> [208]
[129,362,590] -> [208]
[129,386,590] -> [208]
[131] -> [552]
[131,R] -> [151]
[132] -> [551]
[132,R] -> [150]
[133,150] -> [145]
[133,551] -> [174]
[134] -> [550]
[134,R] -> [149]
[135] -> [549]
[135,R] -> [148]
[136] -> [548]
[136,R] -> [147]
[137,147] -> [127]
[137,548] -> [527]
[138,147] -> [128]
[138,548] -> [528]
[139,147] -> [129]
[139,548] -> [529]
[140] -> [154,547]
[140,141] -> [155]
[140,155] -> [141]
[141,547] -> [185]
[142] -> [155,486]
[143] -> [151]
[144] -> [150]
[145,150] -> [133]
[146] -> [149]
[147] -> [R]
[147,152] -> [126]
[147,152,R] -> [146]
[147,153] -> [125]
[147,153,R] -> [143]
[147,R] -> [124,136]
[148] -> [R]
[148,R] -> [135,146]
[149] -> [R]
[149,R] -> [134]
[150] -> [R]
[150,R] -> [132]
[151] -> [R]
[151,R] -> [131]
[154] -> [140]
[155] -> [142]
[159,160,250,590] -> [254]
[159,160,256,590] -> [264]
[159,160,269,590] -> [274]
[159,160,276,590] -> [284]
[159,160,288,590] -> [294]
[159,160,296,590] -> [304]
[159,160,309,590] -> [315]
[159,160,310,590] -> [314]
[159,160,319,590] -> [326]
[159,160,331,590] -> [338]
[159,160,333,590] -> [337]
[159,160,342,590] -> [349]
[159,160,354,590] -> [361]
[159,160,355,590] -> [360]
[159,160,365,590] -> [372]
[159,160,377,590] -> [385]
[159,160,378,590] -> [384]
[159,160,379,590] -> [383]
[159,160,387,590] -> [398]
[159,160,389,590] -> [397]
[159,160,666,711] -> [669]
[159,160,666,712] -> [669]
[159,250,254,590] -> [160]
[159,250,590] -> [224]
[159,256,264,590] -> [160]
[159,256,590] -> [204]
[159,269,274,590] -> [160]
[159,269,590] -> [226]
[159,276,284,590] -> [160]
[159,276,590] -> [204]
[159,288,294,590] -> [160]
[159,288,590] -> [228]
[159,296,304,590] -> [160]
[159,296,590] -> [204]
[159,309,315,590] -> [160]
[159,309,590] -> [226]
[159,310,314,590] -> [160]
[159,310,590] -> [224]
[159,319,326,590] -> [160]
[159,319,590] -> [201]
[159,331,338,590] -> [160]
[159,331,590] -> [228]
[159,333,337,590] -> [160]
[159,333,590] -> [224]
[159,342,349,590] -> [160]
[159,342,590] -> [201]
[159,354,361,590] -> [160]
[159,354,590] -> [228]
[159,355,360,590] -> [160]
[159,355,590] -> [226]
[159,365,372,590] -> [160]
[159,365,590] -> [201]
[159,377,385,590] -> [160]
[159,377,590] -> [228]
[159,378,384,590] -> [160]
[159,378,590] -> [226]
[159,379,383,590] -> [160]
[159,379,590] -> [224]
[159,387,398,590] -> [160]
[159,387,590] -> [204]
[159,389,397,590] -> [160]
[159,389,590] -> [201]
[159,666,669,711] -> [160]
[159,666,669,712] -> [160]
[159,666,711] -> [181]
[159,666,712] -> [181]
[162,232,590] -> [228]
[162,233,590] -> [226]
[162,234,590] -> [224]
[162,239,590] -> [204]
[162,241,590] -> [201]
[162,248,590] -> [228]
[162,249,590] -> [226]
[162,258,590] -> [201]
[162,268,590] -> [228]
[162,270,590] -> [224]
[162,278,590] -> [201]
[162,289,590] -> [226]
[162,290,590] -> [224]
[162,298,590] -> [201]
[162,308,590] -> [228]
[162,317,590] -> [204]
[162,332,590] -> [226]
[162,340,590] -> [204]
[162,356,590] -> [224]
[162,363,590] -> [204]
[162,623] -> [410]
[162,680,711] -> [181]
[162,680,712] -> [181]
[164,169,170,460,468] -> [171]
[164,169,170,461,465] -> [171]
[164,169,170,549,563,565,570] -> [171]
[164,169,170,549,563,566,567] -> [171]
[164,169,170,550,556] -> [171]
[164,169,170,639,665,711] -> [171]
[164,169,170,639,665,712] -> [171]
[164,169,170,639,679,711] -> [171]
[164,169,170,639,679,712] -> [171]
[164,169,170,639,713] -> [171]
[164,169,170,639,714] -> [171]
[164,169,170,665,711] -> [171]
[164,169,170,665,712] -> [171]
[164,169,170,679,711] -> [171]
[164,169,170,679,712] -> [171]
[164,169,170,713] -> [171]
[164,169,170,714] -> [171]
[164,460,468] -> [470]
[164,460,468,R] -> [165,167]
[164,461,465] -> [467]
[164,461,465,R] -> [165,167]
[164,549,563,565,570] -> [572]
[164,549,563,565,570,R] -> [165,167]
[164,549,563,566,567] -> [569]
[164,549,563,566,567,R] -> [165,167]
[164,550,556] -> [558]
[164,550,556,R] -> [165,167]
[164,639,665,711] -> [640]
[164,639,665,711,R] -> [165,167]
[164,639,665,712] -> [640]
[164,639,665,712,R] -> [165,167]
[164,639,679,711] -> [640]
[164,639,679,711,R] -> [165,167]
[164,639,679,712] -> [640]
[164,639,679,712,R] -> [165,167]
[164,639,713] -> [640]
[164,639,713,R] -> [165,167]
[164,639,714] -> [640]
[164,639,714,R] -> [165,167]
[164,665,711] -> [647]
[164,665,711,R] -> [165,167]
[164,665,712] -> [647]
[164,665,712,R] -> [165,167]
[164,679,711] -> [647]
[164,679,711,R] -> [165,167]
[164,679,712] -> [647]
[164,679,712,R] -> [165,167]
[164,713] -> [647]
[164,713,R] -> [165,167]
[164,714] -> [647]
[164,714,R] -> [165,167]
[165,460,468] -> [R]
[165,460,468,R] -> [164]
[165,461,465] -> [R]
[165,461,465,R] -> [164]
[165,549,563,565,570] -> [R]
[165,549,563,565,570,R] -> [164]
[165,549,563,566,567] -> [R]
[165,549,563,566,567,R] -> [164]
[165,550,556] -> [R]
[165,550,556,R] -> [164]
[165,639,665,711] -> [R]
[165,639,665,711,R] -> [164]
[165,639,665,712] -> [R]
[165,639,665,712,R] -> [164]
[165,639,679,711] -> [R]
[165,639,679,711,R] -> [164]
[165,639,679,712] -> [R]
[165,639,679,712,R] -> [164]
[165,639,713] -> [R]
[165,639,713,R] -> [164]
[165,639,714] -> [R]
[165,639,714,R] -> [164]
[165,665,711] -> [R]
[165,665,711,R] -> [164]
[165,665,712] -> [R]
[165,665,712,R] -> [164]
[165,679,711] -> [R]
[165,679,711,R] -> [164]
[165,679,712] -> [R]
[165,679,712,R] -> [164]
[165,713] -> [R]
[165,713,R] -> [164]
[165,714] -> [R]
[165,714,R] -> [164]
[166,460,468] -> [168]
[166,461,465] -> [168]
[166,549,563,565,570] -> [168]
[166,549,563,566,567] -> [168]
[166,550,556] -> [168]
[166,639,665,711] -> [168]
[166,639,665,712] -> [168]
[166,639,679,711] -> [168]
[166,639,679,712] -> [168]
[166,639,713] -> [168]
[166,639,714] -> [168]
[166,665,711] -> [168]
[166,665,712] -> [168]
[166,679,711] -> [168]
[166,679,712] -> [168]
[166,713] -> [168]
[166,714] -> [168]
[167,168,460,468] -> [R]
[167,168,461,465] -> [R]
[167,168,549,563,565,570] -> [R]
[167,168,549,563,566,567] -> [R]
[167,168,550,556] -> [R]
[167,168,639,665,711] -> [R]
[167,168,639,665,712] -> [R]
[167,168,639,679,711] -> [R]
[167,168,639,679,712] -> [R]
[167,168,639,713] -> [R]
[167,168,639,714] -> [R]
[167,168,665,711] -> [R]
[167,168,665,712] -> [R]
[167,168,679,711] -> [R]
[167,168,679,712] -> [R]
[167,168,713] -> [R]
[167,168,714] -> [R]
[167,460,468] -> [R]
[167,460,468,R] -> [164,168]
[167,461,465] -> [R]
[167,461,465,R] -> [164,168]
[167,549,563,565,570] -> [R]
[167,549,563,565,570,R] -> [164,168]
[167,549,563,566,567] -> [R]
[167,549,563,566,567,R] -> [164,168]
[167,550,556] -> [R]
[167,550,556,R] -> [164,168]
[167,639,665,711] -> [R]
[167,639,665,711,R] -> [164,168]
[167,639,665,712] -> [R]
[167,639,665,712,R] -> [164,168]
[167,639,679,711] -> [R]
[167,639,679,711,R] -> [164,168]
[167,639,679,712] -> [R]
[167,639,679,712,R] -> [164,168]
[167,639,713] -> [R]
[167,639,713,R] -> [164,168]
[167,639,714] -> [R]
[167,639,714,R] -> [164,168]
[167,665,711] -> [R]
[167,665,711,R] -> [164,168]
[167,665,712] -> [R]
[167,665,712,R] -> [164,168]
[167,679,711] -> [R]
[167,679,711,R] -> [164,168]
[167,679,712] -> [R]
[167,679,712,R] -> [164,168]
[167,713] -> [R]
[167,713,R] -> [164,168]
[167,714] -> [R]
[167,714,R] -> [164,168]
[168,460,468] -> [167]
[168,461,465] -> [167]
[168,549,563,565,570] -> [167]
[168,549,563,566,567] -> [167]
[168,550,556] -> [167]
[168,639,665,711] -> [167]
[168,639,665,712] -> [167]
[168,639,679,711] -> [167]
[168,639,679,712] -> [167]
[168,639,713] -> [167]
[168,639,714] -> [167]
[168,665,711] -> [167]
[168,665,712] -> [167]
[168,679,711] -> [167]
[168,679,712] -> [167]
[168,713] -> [167]
[168,714] -> [167]
[169,170,171,460,468] -> [164]
[169,170,171,460,468,R] -> [166]
[169,170,171,461,465] -> [164]
[169,170,171,461,465,R] -> [166]
[169,170,171,549,563,565,570] -> [164]
[169,170,171,549,563,565,570,R] -> [166]
[169,170,171,549,563,566,567] -> [164]
[169,170,171,549,563,566,567,R] -> [166]
[169,170,171,550,556] -> [164]
[169,170,171,550,556,R] -> [166]
[169,170,171,639,665,711] -> [164]
[169,170,171,639,665,711,R] -> [166]
[169,170,171,639,665,712] -> [164]
[169,170,171,639,665,712,R] -> [166]
[169,170,171,639,679,711] -> [164]
[169,170,171,639,679,711,R] -> [166]
[169,170,171,639,679,712] -> [164]
[169,170,171,639,679,712,R] -> [166]
[169,170,171,639,713] -> [164]
[169,170,171,639,713,R] -> [166]
[169,170,171,639,714] -> [164]
[169,170,171,639,714,R] -> [166]
[169,170,171,665,711] -> [164]
[169,170,171,665,711,R] -> [166]
[169,170,171,665,712] -> [164]
[169,170,171,665,712,R] -> [166]
[169,170,171,679,711] -> [164]
[169,170,171,679,711,R] -> [166]
[169,170,171,679,712] -> [164]
[169,170,171,679,712,R] -> [166]
[169,170,171,713] -> [164]
[169,170,171,713,R] -> [166]
[169,170,171,714] -> [164]
[169,170,171,714,R] -> [166]
[169,170,460,468] -> [R]
[169,170,460,468,R] -> [163]
[169,170,461,465] -> [R]
[169,170,461,465,R] -> [163]
[169,170,549,563,565,570] -> [R]
[169,170,549,563,565,570,R] -> [163]
[169,170,549,563,566,567] -> [R]
[169,170,549,563,566,567,R] -> [163]
[169,170,550,556] -> [R]
[169,170,550,556,R] -> [163]
[169,170,639,665,711] -> [R]
[169,170,639,665,711,R] -> [163]
[169,170,639,665,712] -> [R]
[169,170,639,665,712,R] -> [163]
[169,170,639,679,711] -> [R]
[169,170,639,679,711,R] -> [163]
[169,170,639,679,712] -> [R]
[169,170,639,679,712,R] -> [163]
[169,170,639,713] -> [R]
[169,170,639,713,R] -> [163]
[169,170,639,714] -> [R]
[169,170,639,714,R] -> [163]
[169,170,665,711] -> [R]
[169,170,665,711,R] -> [163]
[169,170,665,712] -> [R]
[169,170,665,712,R] -> [163]
[169,170,679,711] -> [R]
[169,170,679,711,R] -> [163]
[169,170,679,712] -> [R]
[169,170,679,712,R] -> [163]
[169,170,713] -> [R]
[169,170,713,R] -> [163]
[169,170,714] -> [R]
[169,170,714,R] -> [163]
[169,460,468] -> [R]
[169,460,468,R] -> [3,170]
[169,461,465] -> [R]
[169,461,465,R] -> [3,170]
[169,549,563,565,570] -> [R]
[169,549,563,565,570,R] -> [3,170]
[169,549,563,566,567] -> [R]
[169,549,563,566,567,R] -> [3,170]
[169,550,556] -> [R]
[169,550,556,R] -> [3,170]
[169,639,665,711] -> [R]
[169,639,665,711,R] -> [3,170]
[169,639,665,712] -> [R]
[169,639,665,712,R] -> [3,170]
[169,639,679,711] -> [R]
[169,639,679,711,R] -> [3,170]
[169,639,679,712] -> [R]
[169,639,679,712,R] -> [3,170]
[169,639,713] -> [R]
[169,639,713,R] -> [3,170]
[169,639,714] -> [R]
[169,639,714,R] -> [3,170]
[169,665,711] -> [R]
[169,665,711,R] -> [3,170]
[169,665,712] -> [R]
[169,665,712,R] -> [3,170]
[169,679,711] -> [R]
[169,679,711,R] -> [3,170]
[169,679,712] -> [R]
[169,679,712,R] -> [3,170]
[169,713] -> [R]
[169,713,R] -> [3,170]
[169,714] -> [R]
[169,714,R] -> [3,170]
[173,551] -> [553]
[174,551] -> [133]
[176,427] -> [415]
[176,428] -> [412]
[176,434] -> [183]
[176,711] -> [653]
[176,712] -> [653]
[177,427] -> [416]
[177,428] -> [413]
[177,434] -> [184]
[177,711] -> [654]
[177,712] -> [654]
[179] -> [438]
[179,457] -> [480]
[179,458] -> [475]
[179,547] -> [577]
[179,711] -> [668,682]
[179,712] -> [668,682]
[180] -> [437]
[180,457] -> [479]
[180,458] -> [474]
[180,547] -> [576]
[180,711] -> [667,681]
[180,712] -> [667,681]
[181,436] -> [426]
[181,473] -> [445]
[181,478] -> [452]
[181,547,575] -> [505]
[181,666,711] -> [159]
[181,666,712] -> [159]
[181,680,711] -> [162]
[181,680,712] -> [162]
[182] -> [435]
[182,457] -> [477]
[182,458] -> [472]
[182,547] -> [574]
[182,711] -> [665,679]
[182,712] -> [665,679]
[183,434] -> [176]
[183,471] -> [448]
[183,476] -> [455]
[183,547,573] -> [417]
[183,664,711] -> [653]
[183,664,712] -> [653]
[183,678,711] -> [653]
[183,678,712] -> [653]
[184,434] -> [177]
[184,471] -> [449]
[184,476] -> [456]
[184,547,573] -> [418]
[184,664,711] -> [654]
[184,664,712] -> [654]
[184,678,711] -> [654]
[184,678,712] -> [654]
[185] -> [417]
[185,188,190,457] -> [470]
[185,188,190,458] -> [467]
[185,188,190,547] -> [558]
[185,188,190,547,559] -> [579]
[185,188,190,547,560] -> [580]
[185,188,190,547,561,579] -> [581]
[185,188,190,547,562,579] -> [582]
[185,188,190,547,579] -> [559]
[185,188,190,547,579,581] -> [561]
[185,188,190,547,579,582] -> [562]
[185,188,190,547,580] -> [560]
[185,188,457] -> [468]
[185,188,457,470] -> [190]
[185,188,458] -> [465]
[185,188,458,467] -> [190]
[185,188,547] -> [556]
[185,188,547,558] -> [190]
[185,189,457] -> [469]
[185,189,458] -> [466]
[185,189,547] -> [557]
[185,457] -> [415]
[185,457,468] -> [188]
[185,457,469] -> [189]
[185,458] -> [412]
[185,458,465] -> [188]
[185,458,466] -> [189]
[185,547] -> [141]
[185,547,556] -> [188]
[185,547,557] -> [189]
[185,711] -> [653]
[185,712] -> [653]
[186] -> [418]
[186,187,457] -> [464]
[186,187,458] -> [464]
[186,187,547] -> [554]
[186,187,547,555] -> [578]
[186,187,547,578] -> [555]
[186,457] -> [416]
[186,457,464] -> [187]
[186,458] -> [413]
[186,458,464] -> [187]
[186,547] -> [553]
[186,547,554] -> [187]
[186,711] -> [654]
[186,712] -> [654]
[187,418] -> [419]
[187,654,711] -> [663,677]
[187,654,712] -> [663,677]
[188,417] -> [420]
[189,417] -> [421]
[190,639,653,711] -> [640]
[190,639,653,712] -> [640]
[190,653,711] -> [647]
[190,653,712] -> [647]
[196,517] -> [525]
[196,590] -> [245,262,282,302,323,346,369,393]
[197,517] -> [524]
[197,590] -> [244,261,281,301,322,345,368,392]
[198,517] -> [523]
[198,590] -> [243,260,280,300,321,344,367,391]
[199,517] -> [522]
[199,590] -> [242,259,279,299,320,343,366,390]
[200,517] -> [521]
[200,590] -> [241,258,278,298,319,342,365,389]
[201,241,590] -> [162]
[201,258,590] -> [162]
[201,278,590] -> [162]
[201,298,590] -> [162]
[201,319,590] -> [159]
[201,342,590] -> [159]
[201,365,590] -> [159]
[201,389,590] -> [159]
[201,521] -> [502]
[202,517] -> [520]
[202,590] -> [240,257,277,297,318,341,364,388]
[203,517] -> [519]
[203,590] -> [239,256,276,296,317,340,363,387]
[204,239,590] -> [162]
[204,256,590] -> [159]
[204,276,590] -> [159]
[204,296,590] -> [159]
[204,317,590] -> [162]
[204,340,590] -> [162]
[204,363,590] -> [162]
[204,387,590] -> [159]
[204,519] -> [505]
[205,517] -> [518]
[205,590] -> [238,255,275,295,316,339,362,386]
[206,238,590] -> [127]
[206,255,590] -> [127]
[206,275,590] -> [127]
[206,295,590] -> [127]
[206,316,590] -> [127]
[206,339,590] -> [127]
[206,362,590] -> [127]
[206,386,590] -> [127]
[206,518] -> [507]
[207,238,590] -> [128]
[207,255,590] -> [128]
[207,275,590] -> [128]
[207,295,590] -> [128]
[207,316,590] -> [128]
[207,339,590] -> [128]
[207,362,590] -> [128]
[207,386,590] -> [128]
[207,518] -> [508]
[208,238,590] -> [129]
[208,255,590] -> [129]
[208,275,590] -> [129]
[208,295,590] -> [129]
[208,316,590] -> [129]
[208,339,590] -> [129]
[208,362,590] -> [129]
[208,386,590] -> [129]
[208,518] -> [509]
[209,508,518] -> [510]
[210,508,518] -> [511]
[211,508,510,518] -> [512]
[212,508,510,518] -> [513]
[213,507,518] -> [514]
[214,507,518] -> [515]
[215,507,514,518] -> [516]
[216,517] -> [483]
[216,590] -> [229]
[217,517] -> [484]
[217,590] -> [230]
[218,517] -> [485]
[218,590] -> [231]
[220,590] -> [596]
[220,590,R] -> [237,253,273,293,313,336,359,382]
[221,590] -> [595]
[221,590,R] -> [236,252,272,292,312,335,358,381]
[222,590] -> [594]
[222,590,R] -> [235,251,271,291,311,334,357,380]
[223,590] -> [593]
[223,590,R] -> [234,250,270,290,310,333,356,379]
[224,234,590] -> [162]
[224,250,590] -> [159]
[224,270,590] -> [162]
[224,290,590] -> [162]
[224,310,590] -> [159]
[224,333,590] -> [159]
[224,356,590] -> [162]
[224,379,590] -> [159]
[224,590,593] -> [442]
[225,590] -> [592]
[225,590,R] -> [233,249,269,289,309,332,355,378]
[226,233,590] -> [162]
[226,249,590] -> [162]
[226,269,590] -> [159]
[226,289,590] -> [162]
[226,309,590] -> [159]
[226,332,590] -> [162]
[226,355,590] -> [159]
[226,378,590] -> [159]
[226,590,592] -> [445]
[227,590] -> [591]
[227,590,R] -> [232,248,268,288,308,331,354,377]
[228,232,590] -> [162]
[228,248,590] -> [162]
[228,268,590] -> [162]
[228,288,590] -> [159]
[228,308,590] -> [162]
[228,331,590] -> [159]
[228,354,590] -> [159]
[228,377,590] -> [159]
[228,590,591] -> [452]
[229,294,590] -> [303]
[229,303,590] -> [294]
[229,338,590] -> [348]
[229,348,590] -> [338]
[229,361,590] -> [371]
[229,371,590] -> [361]
[229,385,590] -> [396]
[229,396,590] -> [385]
[229,590] -> [216,483]
[230,274,590] -> [283]
[230,283,590] -> [274]
[230,315,590] -> [325]
[230,325,590] -> [315]
[230,360,590] -> [370]
[230,370,590] -> [360]
[230,384,590] -> [395]
[230,395,590] -> [384]
[230,590] -> [217,484]
[231,254,590] -> [263]
[231,263,590] -> [254]
[231,314,590] -> [324]
[231,324,590] -> [314]
[231,337,590] -> [347]
[231,347,590] -> [337]
[231,383,590] -> [394]
[231,394,590] -> [383]
[231,590] -> [218,485]
[232,590] -> [R]
[232,590,R] -> [227]
[233,590] -> [R]
[233,590,R] -> [225]
[234,590] -> [R]
[234,590,R] -> [223]
[235,590] -> [R]
[235,590,R] -> [2,222]
[236,590] -> [R]
[236,590,R] -> [2,221]
[237,590] -> [R]
[237,590,R] -> [2,220]
[238,246,590] -> [126]
[238,246,590,R] -> [2]
[238,247,590] -> [125]
[238,247,590,R] -> [1]
[238,590] -> [205]
[238,590,R] -> [124]
[239,590] -> [203]
[239,590,R] -> [161]
[240,590] -> [202]
[240,590,R] -> [2]
[241,590] -> [200]
[241,590,R] -> [161]
[242,590] -> [199]
[242,590,R] -> [2]
[243,590] -> [198]
[243,590,R] -> [2]
[244,590] -> [197]
[244,590,R] -> [2]
[245,590] -> [196]
[245,590,R] -> [2]
[248,590] -> [R]
[248,590,R] -> [227]
[249,590] -> [R]
[249,590,R] -> [225]
[250,590] -> [R]
[250,590,R] -> [223]
[251,590] -> [R]
[251,590,R] -> [2,222]
[252,590] -> [R]
[252,590,R] -> [2,221]
[253,254,590] -> [R]
[253,254,590,R] -> [2]
[253,590] -> [R]
[253,590,R] -> [3,220,254]
[255,265,267,590] -> [R]
[255,265,267,590,R] -> [2]
[255,265,590] -> [126]
[255,265,590,R] -> [3,267]
[255,266,590] -> [125]
[255,266,590,R] -> [1]
[255,590] -> [205]
[255,590,R] -> [124]
[256,590] -> [203]
[256,590,R] -> [158]
[257,264,590] -> [R]
[257,264,590,R] -> [2]
[257,590] -> [202]
[257,590,R] -> [3,264]
[258,590] -> [200]
[258,590,R] -> [161]
[259,590] -> [199]
[259,590,R] -> [2]
[260,590] -> [198]
[260,590,R] -> [2]
[261,590] -> [197]
[261,590,R] -> [2]
[262,263,590] -> [R]
[262,263,590,R] -> [2]
[262,590] -> [196]
[262,590,R] -> [3,263]
[268,590] -> [R]
[268,590,R] -> [227]
[269,590] -> [R]
[269,590,R] -> [225]
[270,590] -> [R]
[270,590,R] -> [223]
[271,590] -> [R]
[271,590,R] -> [2,222]
[272,274,590] -> [R]
[272,274,590,R] -> [2]
[272,590] -> [R]
[272,590,R] -> [3,221,274]
[273,590] -> [R]
[273,590,R] -> [2,220]
[275,285,287,590] -> [R]
[275,285,287,590,R] -> [2]
[275,285,590] -> [126]
[275,285,590,R] -> [3,287]
[275,286,590] -> [125]
[275,286,590,R] -> [1]
[275,590] -> [205]
[275,590,R] -> [124]
[276,590] -> [203]
[276,590,R] -> [158]
[277,284,590] -> [R]
[277,284,590,R] -> [2]
[277,590] -> [202]
[277,590,R] -> [3,284]
[278,590] -> [200]
[278,590,R] -> [161]
[279,590] -> [199]
[279,590,R] -> [2]
[280,590] -> [198]
[280,590,R] -> [2]
[281,283,590] -> [R]
[281,283,590,R] -> [2]
[281,590] -> [197]
[281,590,R] -> [3,283]
[282,590] -> [196]
[282,590,R] -> [2]
[288,590] -> [R]
[288,590,R] -> [227]
[289,590] -> [R]
[289,590,R] -> [225]
[290,590] -> [R]
[290,590,R] -> [223]
[291,294,590] -> [R]
[291,294,590,R] -> [2]
[291,590] -> [R]
[291,590,R] -> [3,222,294]
[292,590] -> [R]
[292,590,R] -> [2,221]
[293,590] -> [R]
[293,590,R] -> [2,220]
[295,305,307,590] -> [R]
[295,305,307,590,R] -> [2]
[295,305,590] -> [126]
[295,305,590,R] -> [3,307]
[295,306,590] -> [125]
[295,306,590,R] -> [1]
[295,590] -> [205]
[295,590,R] -> [124]
[296,590] -> [203]
[296,590,R] -> [158]
[297,304,590] -> [R]
[297,304,590,R] -> [2]
[297,590] -> [202]
[297,590,R] -> [3,304]
[298,590] -> [200]
[298,590,R] -> [161]
[299,590] -> [199]
[299,590,R] -> [2]
[300,303,590] -> [R]
[300,303,590,R] -> [2]
[300,590] -> [198]
[300,590,R] -> [3,303]
[301,590] -> [197]
[301,590,R] -> [2]
[302,590] -> [196]
[302,590,R] -> [2]
[308,590] -> [R]
[308,590,R] -> [227]
[309,590] -> [R]
[309,590,R] -> [225]
[310,590] -> [R]
[310,590,R] -> [223]
[311,590] -> [R]
[311,590,R] -> [2,222]
[312,315,590] -> [R]
[312,315,590,R] -> [2]
[312,590] -> [R]
[312,590,R] -> [3,221,315]
[313,314,590] -> [R]
[313,314,590,R] -> [2]
[313,590] -> [R]
[313,590,R] -> [3,220,314]
[316,327,329,330,590] -> [R]
[316,327,329,330,590,R] -> [2]
[316,327,329,590] -> [R]
[316,327,329,590,R] -> [3,330]
[316,327,590] -> [126]
[316,327,590,R] -> [3,329]
[316,328,590] -> [125]
[316,328,590,R] -> [1]
[316,590] -> [205]
[316,590,R] -> [124]
[317,590] -> [203]
[317,590,R] -> [161]
[318,590] -> [202]
[318,590,R] -> [2]
[319,590] -> [200]
[319,590,R] -> [158]
[320,326,590] -> [R]
[320,326,590,R] -> [2]
[320,590] -> [199]
[320,590,R] -> [3,326]
[321,590] -> [198]
[321,590,R] -> [2]
[322,325,590] -> [R]
[322,325,590,R] -> [2]
[322,590] -> [197]
[322,590,R] -> [3,325]
[323,324,590] -> [R]
[323,324,590,R] -> [2]
[323,590] -> [196]
[323,590,R] -> [3,324]
[331,590] -> [R]
[331,590,R] -> [227]
[332,590] -> [R]
[332,590,R] -> [225]
[333,590] -> [R]
[333,590,R] -> [223]
[334,338,590] -> [R]
[334,338,590,R] -> [2]
[334,590] -> [R]
[334,590,R] -> [3,222,338]
[335,590] -> [R]
[335,590,R] -> [2,221]
[336,337,590] -> [R]
[336,337,590,R] -> [2]
[336,590] -> [R]
[336,590,R] -> [3,220,337]
[339,350,352,353,590] -> [R]
[339,350,352,353,590,R] -> [2]
[339,350,352,590] -> [R]
[339,350,352,590,R] -> [3,353]
[339,350,590] -> [126]
[339,350,590,R] -> [3,352]
[339,351,590] -> [125]
[339,351,590,R] -> [1]
[339,590] -> [205]
[339,590,R] -> [124]
[340,590] -> [203]
[340,590,R] -> [161]
[341,590] -> [202]
[341,590,R] -> [2]
[342,590] -> [200]
[342,590,R] -> [158]
[343,349,590] -> [R]
[343,349,590,R] -> [2]
[343,590] -> [199]
[343,590,R] -> [3,349]
[344,348,590] -> [R]
[344,348,590,R] -> [2]
[344,590] -> [198]
[344,590,R] -> [3,348]
[345,590] -> [197]
[345,590,R] -> [2]
[346,347,590] -> [R]
[346,347,590,R] -> [2]
[346,590] -> [196]
[346,590,R] -> [3,347]
[354,590] -> [R]
[354,590,R] -> [227]
[355,590] -> [R]
[355,590,R] -> [225]
[356,590] -> [R]
[356,590,R] -> [223]
[357,361,590] -> [R]
[357,361,590,R] -> [2]
[357,590] -> [R]
[357,590,R] -> [3,222,361]
[358,360,590] -> [R]
[358,360,590,R] -> [2]
[358,590] -> [R]
[358,590,R] -> [3,221,360]
[359,590] -> [R]
[359,590,R] -> [2,220]
[362,373,375,376,590] -> [R]
[362,373,375,376,590,R] -> [2]
[362,373,375,590] -> [R]
[362,373,375,590,R] -> [3,376]
[362,373,590] -> [126]
[362,373,590,R] -> [3,375]
[362,374,590] -> [125]
[362,374,590,R] -> [1]
[362,590] -> [205]
[362,590,R] -> [124]
[363,590] -> [203]
[363,590,R] -> [161]
[364,590] -> [202]
[364,590,R] -> [2]
[365,590] -> [200]
[365,590,R] -> [158]
[366,372,590] -> [R]
[366,372,590,R] -> [2]
[366,590] -> [199]
[366,590,R] -> [3,372]
[367,371,590] -> [R]
[367,371,590,R] -> [2]
[367,590] -> [198]
[367,590,R] -> [3,371]
[368,370,590] -> [R]
[368,370,590,R] -> [2]
[368,590] -> [197]
[368,590,R] -> [3,370]
[369,590] -> [196]
[369,590,R] -> [2]
[377,590] -> [R]
[377,590,R] -> [227]
[378,590] -> [R]
[378,590,R] -> [225]
[379,590] -> [R]
[379,590,R] -> [223]
[380,385,590] -> [R]
[380,385,590,R] -> [2]
[380,590] -> [R]
[380,590,R] -> [3,222,385]
[381,384,590] -> [R]
[381,384,590,R] -> [2]
[381,590] -> [R]
[381,590,R] -> [3,221,384]
[382,383,590] -> [R]
[382,383,590,R] -> [2]
[382,590] -> [R]
[382,590,R] -> [3,220,383]
[386,399,401,402,403,590] -> [R]
[386,399,401,402,403,590,R] -> [2]
[386,399,401,402,590] -> [R]
[386,399,401,402,590,R] -> [3,403]
[386,399,401,590] -> [R]
[386,399,401,590,R] -> [3,402]
[386,399,590] -> [126]
[386,399,590,R] -> [3,401]
[386,400,590] -> [125]
[386,400,590,R] -> [1]
[386,590] -> [205]
[386,590,R] -> [124]
[387,590] -> [203]
[387,590,R] -> [158]
[388,398,590] -> [R]
[388,398,590,R] -> [2]
[388,590] -> [202]
[388,590,R] -> [3,398]
[389,590] -> [200]
[389,590,R] -> [158]
[390,397,590] -> [R]
[390,397,590,R] -> [2]
[390,590] -> [199]
[390,590,R] -> [3,397]
[391,396,590] -> [R]
[391,396,590,R] -> [2]
[391,590] -> [198]
[391,590,R] -> [3,396]
[392,395,590] -> [R]
[392,395,590,R] -> [2]
[392,590] -> [197]
[392,590,R] -> [3,395]
[393,394,590] -> [R]
[393,394,590,R] -> [2]
[393,590] -> [196]
[393,590,R] -> [3,394]
[405] -> [627]
[405,547,573] -> [589]
[405,R] -> [433,463]
[406] -> [626]
[406,547,573] -> [588]
[406,R] -> [432,462]
[407] -> [625]
[407,547,573] -> [587]
[407,R] -> [431,461]
[408] -> [624]
[408,547,573] -> [586]
[408,R] -> [430,460]
[409] -> [623]
[409,547,573] -> [585]
[409,R] -> [429,459]
[410,429] -> [426]
[410,459] -> [442]
[410,547,573,585] -> [502]
[410,623] -> [162]
[411] -> [622]
[411,547,573] -> [584]
[411,R] -> [428,458]
[412,428] -> [176]
[412,458] -> [185]
[412,547,573,584] -> [448]
[412,622] -> [616]
[413,428] -> [177]
[413,458] -> [186]
[413,547,573,584] -> [449]
[413,622] -> [617]
[414] -> [621]
[414,547,573] -> [583]
[414,R] -> [427,457]
[415,427] -> [176]
[415,457] -> [185]
[415,547,573,583] -> [455]
[415,621] -> [619]
[416,427] -> [177]
[416,457] -> [186]
[416,547,573,583] -> [456]
[416,621] -> [620]
[417] -> [185,486,607]
[417,420] -> [188,490]
[417,420,422] -> [492]
[417,420,422,468] -> [497]
[417,420,422,468,470] -> [499]
[417,420,422,468,499] -> [470]
[417,420,422,469] -> [498]
[417,420,422,497] -> [468]
[417,420,422,498] -> [469]
[417,420,422,547,573] -> [581]
[417,420,423] -> [493]
[417,420,423,465] -> [494]
[417,420,423,465,467] -> [496]
[417,420,423,465,496] -> [467]
[417,420,423,466] -> [495]
[417,420,423,494] -> [465]
[417,420,423,495] -> [466]
[417,420,423,547,573] -> [582]
[417,420,492] -> [422]
[417,420,493] -> [423]
[417,420,547,573] -> [579]
[417,420,547,573,581] -> [422]
[417,420,547,573,582] -> [423]
[417,421] -> [189,491]
[417,421,547,573] -> [580]
[417,490] -> [420]
[417,491] -> [421]
[417,547,573] -> [183]
[417,547,573,579] -> [420]
[417,547,573,580] -> [421]
[418] -> [186,487,608]
[418,419] -> [187,488]
[418,419,464] -> [489]
[418,419,489] -> [464]
[418,419,547,573] -> [578]
[418,488] -> [419]
[418,547,573] -> [184]
[418,547,573,578] -> [419]
[419,608] -> [609]
[422,607] -> [610]
[423,607] -> [611]
[424] -> [432]
[425] -> [429]
[426,429] -> [410]
[426,436] -> [181]
[427] -> [R]
[427,R] -> [414]
[428] -> [R]
[428,R] -> [411]
[429] -> [R]
[429,R] -> [409]
[430] -> [R]
[430,R] -> [2,408]
[431] -> [R]
[431,R] -> [2,407]
[432] -> [R]
[432,R] -> [406]
[433] -> [R]
[433,R] -> [2,405]
[434] -> [R]
[434,R] -> [175]
[435] -> [182]
[435,R] -> [2]
[436] -> [R]
[436,R] -> [425]
[437] -> [180]
[437,R] -> [424]
[438] -> [179]
[438,R] -> [2]
[439] -> [464]
[440] -> [462]
[441] -> [459]
[442,459] -> [410]
[442,590,593] -> [224]
[443] -> [474]
[444] -> [473]
[445,473] -> [181]
[445,590,592] -> [226]
[446] -> [472]
[447] -> [471]
[448,471] -> [183]
[448,547,573,584] -> [412]
[449,471] -> [184]
[449,547,573,584] -> [413]
[450] -> [479]
[451] -> [478]
[452,478] -> [181]
[452,590,591] -> [228]
[453] -> [477]
[454] -> [476]
[455,476] -> [183]
[455,547,573,583] -> [415]
[456,476] -> [184]
[456,547,573,583] -> [416]
[457] -> [R]
[457,476] -> [R]
[457,477] -> [182]
[457,478] -> [R]
[457,479] -> [180]
[457,480] -> [179]
[457,R] -> [414,476,478]
[458] -> [R]
[458,471] -> [R]
[458,472] -> [182]
[458,473] -> [R]
[458,474] -> [180]
[458,475] -> [179]
[458,R] -> [411,471,473]
[459] -> [R]
[459,R] -> [409]
[460] -> [R]
[460,468] -> [6]
[460,468,470] -> [164]
[460,468,470,R] -> [453]
[460,468,R] -> [2,3,163,165,167,169]
[460,469] -> [5]
[460,469,R] -> [450]
[460,R] -> [2,3,4,7,9,13,15,408]
[461] -> [R]
[461,465] -> [6]
[461,465,467] -> [164]
[461,465,467,R] -> [446]
[461,465,R] -> [2,3,163,165,167,169]
[461,466] -> [5]
[461,466,R] -> [443]
[461,R] -> [2,3,4,7,9,13,15,407]
[462] -> [R]
[462,R] -> [406]
[463] -> [R]
[463,464] -> [R]
[463,R] -> [3,405,464]
[464] -> [463]
[471] -> [458]
[472] -> [458]
[473] -> [458]
[474] -> [458]
[475] -> [458]
[475,R] -> [439]
[476] -> [457]
[477] -> [457]
[478] -> [457]
[479] -> [457]
[480] -> [457]
[480,R] -> [439]
[482] -> [590]
[482,R] -> [517]
[483,517] -> [216]
[483,590] -> [229]
[484,517] -> [217]
[484,590] -> [230]
[485,517] -> [218]
[485,590] -> [231]
[486] -> [142,417]
[486,490] -> [563]
[486,490,492] -> [565]
[486,490,492,497] -> [570]
[486,490,492,497,499] -> [572]
[486,490,492,497,572] -> [499]
[486,490,492,498] -> [571]
[486,490,492,570] -> [497]
[486,490,492,571] -> [498]
[486,490,493] -> [566]
[486,490,493,494] -> [567]
[486,490,493,494,496] -> [569]
[486,490,493,494,569] -> [496]
[486,490,493,495] -> [568]
[486,490,493,567] -> [494]
[486,490,493,568] -> [495]
[486,490,565] -> [492]
[486,490,566] -> [493]
[486,491] -> [564]
[486,563] -> [490]
[486,564] -> [491]
[487] -> [418,553]
[487,488] -> [554]
[487,488,489] -> [555]
[487,488,555] -> [489]
[487,554] -> [488]
[500] -> [522]
[501] -> [521]
[502,521] -> [201]
[502,547,573,585] -> [410]
[503] -> [520]
[504] -> [519]
[505,519] -> [204]
[505,547,575] -> [181]
[506] -> [518]
[507,514,516,518] -> [215]
[507,514,518] -> [213]
[507,515,518] -> [214]
[507,518] -> [206]
[508,510,512,518] -> [211]
[508,510,513,518] -> [212]
[508,510,518] -> [209]
[508,511,518] -> [210]
[508,518] -> [207]
[509,518] -> [208]
[517] -> [R]
[517,518] -> [205]
[517,519] -> [203]
[517,520] -> [202]
[517,521] -> [200]
[517,522] -> [199]
[517,523] -> [198]
[517,524] -> [197]
[517,525] -> [196]
[517,R] -> [195,482]
[518] -> [517]
[519] -> [517]
[520] -> [517]
[521] -> [517]
[522] -> [517]
[523] -> [517]
[523,R] -> [450]
[524] -> [517]
[524,R] -> [443]
[525] -> [517]
[525,R] -> [440]
[527,537,539,544,546,548] -> [572]
[527,537,539,544,548] -> [570]
[527,537,539,544,548,572] -> [546]
[527,537,539,545,548] -> [571]
[527,537,539,548] -> [565]
[527,537,539,548,570] -> [544]
[527,537,539,548,571] -> [545]
[527,537,540,541,543,548] -> [569]
[527,537,540,541,548] -> [567]
[527,537,540,541,548,569] -> [543]
[527,537,540,542,548] -> [568]
[527,537,540,548] -> [566]
[527,537,540,548,567] -> [541]
[527,537,540,548,568] -> [542]
[527,537,548] -> [563]
[527,537,548,565] -> [539]
[527,537,548,566] -> [540]
[527,538,548] -> [564]
[527,548] -> [137]
[527,548,563] -> [537]
[527,548,564] -> [538]
[528,530,532,533,535,548] -> [561]
[528,530,532,533,536,548] -> [562]
[528,530,532,533,548] -> [559]
[528,530,532,533,548,561] -> [535]
[528,530,532,533,548,562] -> [536]
[528,530,532,534,548] -> [560]
[528,530,532,548] -> [558]
[528,530,532,548,559] -> [533]
[528,530,532,548,560] -> [534]
[528,530,548] -> [556]
[528,530,548,558] -> [532]
[528,531,548] -> [557]
[528,548] -> [138]
[528,548,556] -> [530]
[528,548,557] -> [531]
[529,548] -> [139]
[547] -> [140]
[547,553] -> [186]
[547,573] -> [R]
[547,573,583] -> [414]
[547,573,583,R] -> [454]
[547,573,584] -> [411]
[547,573,584,R] -> [447]
[547,573,585] -> [409]
[547,573,585,R] -> [501]
[547,573,586] -> [408]
[547,573,586,R] -> [453]
[547,573,587] -> [407]
[547,573,587,R] -> [446]
[547,573,588] -> [406]
[547,573,588,R] -> [500]
[547,573,589] -> [405]
[547,573,589,R] -> [439]
[547,573,R] -> [404]
[547,574] -> [182]
[547,574,579] -> [6]
[547,574,579,581] -> [6]
[547,574,579,581,R] -> [453]
[547,574,579,582] -> [5]
[547,574,579,582,R] -> [446]
[547,574,579,R] -> [2,3,4,7,9,13,15]
[547,574,580] -> [5]
[547,574,580,R] -> [500]
[547,574,R] -> [2,3,4,7,9,13,15]
[547,575] -> [R]
[547,575,R] -> [504]
[547,576] -> [180]
[547,576,R] -> [503]
[547,577] -> [179]
[547,577,578] -> [R]
[547,577,578,R] -> [439]
[547,577,R] -> [3,578]
[547,R] -> [178,573,575]
[548] -> [136]
[548,R] -> [526]
[549] -> [135]
[549,563] -> [6]
[549,563,565] -> [6]
[549,563,565,570] -> [6]
[549,563,565,570,572] -> [164]
[549,563,565,570,572,R] -> [453]
[549,563,565,570,R] -> [2,3,163,165,167,169]
[549,563,565,571] -> [5]
[549,563,565,571,R] -> [450]
[549,563,565,R] -> [2,3,4,7,9,13,15]
[549,563,566] -> [5]
[549,563,566,567] -> [6]
[549,563,566,567,569] -> [164]
[549,563,566,567,569,R] -> [446]
[549,563,566,567,R] -> [2,3,163,165,167,169]
[549,563,566,568] -> [5]
[549,563,566,568,R] -> [443]
[549,563,566,R] -> [2,3,4,7,9,13,15]
[549,563,R] -> [2,3,4,7,9,13,15]
[549,564] -> [5]
[549,564,R] -> [440]
[549,R] -> [2,3,4,7,9,13,15]
[550] -> [134]
[550,556] -> [6]
[550,556,558] -> [164]
[550,556,558,559] -> [6]
[550,556,558,559,561] -> [6]
[550,556,558,559,561,R] -> [453]
[550,556,558,559,562] -> [5]
[550,556,558,559,562,R] -> [446]
[550,556,558,559,R] -> [2,3,4,7,9,13,15]
[550,556,558,560] -> [5]
[550,556,558,560,R] -> [500]
[550,556,558,R] -> [2,3,4,7,9,13,15]
[550,556,R] -> [2,3,163,165,167,169]
[550,557] -> [5]
[550,557,R] -> [503]
[550,R] -> [2,3,4,7,9,13,15]
[551] -> [132]
[551,553] -> [173]
[551,553,554] -> [R]
[551,553,554,555] -> [R]
[551,553,554,555,R] -> [439]
[551,553,554,R] -> [3,555]
[551,553,R] -> [3,554]
[551,R] -> [172]
[552] -> [131]
[552,R] -> [1]
[553] -> [487]
[590] -> [482]
[590,591] -> [227]
[590,591,R] -> [451]
[590,592] -> [225]
[590,592,R] -> [444]
[590,593] -> [223]
[590,593,R] -> [441]
[590,594] -> [222]
[590,594,R] -> [450]
[590,595] -> [221]
[590,595,R] -> [443]
[590,596] -> [220]
[590,596,R] -> [440]
[590,R] -> [158,161,195,219,232,233,234,248,249,250,268,269,270,288,289,290,308,309,310,331,332,333,354,355,356,377,378,379]
[598] -> [612,715]
[599] -> [613,714]
[600] -> [614,713]
[601] -> [615,712]
[601,602] -> [616]
[601,603] -> [617]
[601,616] -> [602]
[601,617] -> [603]
[602,712] -> [698]
[603,712] -> [699]
[604] -> [618,711]
[604,605] -> [619]
[604,606] -> [620]
[604,619] -> [605]
[604,620] -> [606]
[605,711] -> [705]
[606,711] -> [706]
[607] -> [417,688]
[607,610] -> [422]
[607,611] -> [423]
[608] -> [418,689]
[608,609] -> [419]
[609,689] -> [690]
[610,688] -> [691]
[611,688] -> [692]
[612] -> [598]
[613] -> [599]
[614] -> [600]
[615] -> [601]
[616,622] -> [412]
[617,622] -> [413]
[618] -> [604]
[619,621] -> [415]
[620,621] -> [416]
[621] -> [414]
[621,R] -> [618]
[622] -> [411]
[622,R] -> [615]
[623] -> [409]
[623,R] -> [161]
[624] -> [408]
[624,R] -> [614]
[625] -> [407]
[625,R] -> [613]
[626] -> [406]
[626,R] -> [2]
[627] -> [405]
[627,R] -> [612]
[630,639,640,665,711] -> [642]
[630,639,640,665,712] -> [642]
[630,639,640,679,711] -> [642]
[630,639,640,679,712] -> [642]
[630,639,640,713] -> [642]
[630,639,640,714] -> [642]
[630,647,665,711] -> [649]
[630,647,665,712] -> [649]
[630,647,679,711] -> [649]
[630,647,679,712] -> [649]
[630,647,713] -> [649]
[630,647,714] -> [649]
[630,665,711] -> [671]
[630,665,711,R] -> [634,637,645]
[630,665,712] -> [671]
[630,665,712,R] -> [634,637,645]
[630,679,711] -> [684]
[630,679,711,R] -> [634,637,645]
[630,679,712] -> [684]
[630,679,712,R] -> [634,637,645]
[630,713] -> [719]
[630,713,R] -> [634,637,645]
[630,714] -> [717]
[630,714,R] -> [634,637,645]
[631,639,640,665,711] -> [641]
[631,639,640,665,712] -> [641]
[631,639,640,679,711] -> [641]
[631,639,640,679,712] -> [641]
[631,639,640,713] -> [641]
[631,639,640,714] -> [641]
[631,647,665,711] -> [648]
[631,647,665,712] -> [648]
[631,647,679,711] -> [648]
[631,647,679,712] -> [648]
[631,647,713] -> [648]
[631,647,714] -> [648]
[631,665,711] -> [670]
[631,665,711,R] -> [633,636,644]
[631,665,712] -> [670]
[631,665,712,R] -> [633,636,644]
[631,679,711] -> [683]
[631,679,711,R] -> [633,636,644]
[631,679,712] -> [683]
[631,679,712,R] -> [633,636,644]
[631,713] -> [718]
[631,713,R] -> [633,636,644]
[631,714] -> [716]
[631,714,R] -> [633,636,644]
[632,665,711] -> [634]
[632,665,712] -> [634]
[632,679,711] -> [634]
[632,679,712] -> [634]
[632,713] -> [634]
[632,714] -> [634]
[633,665,711] -> [R]
[633,665,711,R] -> [631]
[633,665,712] -> [R]
[633,665,712,R] -> [631]
[633,679,711] -> [R]
[633,679,711,R] -> [631]
[633,679,712] -> [R]
[633,679,712,R] -> [631]
[633,713] -> [R]
[633,713,R] -> [631]
[633,714] -> [R]
[633,714,R] -> [631]
[634,665,711] -> [R]
[634,665,711,R] -> [630]
[634,665,712] -> [R]
[634,665,712,R] -> [630]
[634,679,711] -> [R]
[634,679,711,R] -> [630]
[634,679,712] -> [R]
[634,679,712,R] -> [630]
[634,713] -> [R]
[634,713,R] -> [630]
[634,714] -> [R]
[634,714,R] -> [630]
[635,665,711] -> [638]
[635,665,712] -> [638]
[635,679,711] -> [638]
[635,679,712] -> [638]
[635,713] -> [638]
[635,714] -> [638]
[636,638,665,711] -> [R]
[636,638,665,712] -> [R]
[636,638,679,711] -> [R]
[636,638,679,712] -> [R]
[636,638,713] -> [R]
[636,638,714] -> [R]
[636,665,711] -> [R]
[636,665,711,R] -> [631,638]
[636,665,712] -> [R]
[636,665,712,R] -> [631,638]
[636,679,711] -> [R]
[636,679,711,R] -> [631,638]
[636,679,712] -> [R]
[636,679,712,R] -> [631,638]
[636,713] -> [R]
[636,713,R] -> [631,638]
[636,714] -> [R]
[636,714,R] -> [631,638]
[637,665,711] -> [R]
[637,665,711,R] -> [630]
[637,665,712] -> [R]
[637,665,712,R] -> [630]
[637,679,711] -> [R]
[637,679,711,R] -> [630]
[637,679,712] -> [R]
[637,679,712,R] -> [630]
[637,713] -> [R]
[637,713,R] -> [630]
[637,714] -> [R]
[637,714,R] -> [630]
[638,665,711] -> [636]
[638,665,712] -> [636]
[638,679,711] -> [636]
[638,679,712] -> [636]
[638,713] -> [636]
[638,714] -> [636]
[639,640,641,653,711] -> [670]
[639,640,641,653,712] -> [670]
[639,640,641,665,711] -> [631]
[639,640,641,665,711,R] -> [635]
[639,640,641,665,712] -> [631]
[639,640,641,665,712,R] -> [635]
[639,640,641,679,711] -> [631]
[639,640,641,679,711,R] -> [635]
[639,640,641,679,712] -> [631]
[639,640,641,679,712,R] -> [635]
[639,640,641,713] -> [631]
[639,640,641,713,R] -> [635]
[639,640,641,714] -> [631]
[639,640,641,714,R] -> [635]
[639,640,642,653,711] -> [671]
[639,640,642,653,712] -> [671]
[639,640,642,665,711] -> [630]
[639,640,642,665,711,R] -> [20]
[639,640,642,665,712] -> [630]
[639,640,642,665,712,R] -> [20]
[639,640,642,679,711] -> [630]
[639,640,642,679,711,R] -> [20]
[639,640,642,679,712] -> [630]
[639,640,642,679,712,R] -> [20]
[639,640,642,713] -> [630]
[639,640,642,713,R] -> [20]
[639,640,642,714] -> [630]
[639,640,642,714,R] -> [20]
[639,640,653,670,711] -> [641]
[639,640,653,670,712] -> [641]
[639,640,653,671,711] -> [642]
[639,640,653,671,712] -> [642]
[639,640,653,711] -> [190]
[639,640,653,712] -> [190]
[639,640,665,711] -> [164]
[639,640,665,711,R] -> [629]
[639,640,665,712] -> [164]
[639,640,665,712,R] -> [629]
[639,640,679,711] -> [164]
[639,640,679,711,R] -> [629]
[639,640,679,712] -> [164]
[639,640,679,712,R] -> [629]
[639,640,713] -> [164]
[639,640,713,R] -> [629]
[639,640,714] -> [164]
[639,640,714,R] -> [629]
[639,653,711] -> [15]
[639,653,712] -> [15]
[639,665,711] -> [R]
[639,665,711,R] -> [2,3,163,165,167,169]
[639,665,712] -> [R]
[639,665,712,R] -> [2,3,163,165,167,169]
[639,679,711] -> [R]
[639,679,711,R] -> [2,3,163,165,167,169]
[639,679,712] -> [R]
[639,679,712,R] -> [2,3,163,165,167,169]
[639,713] -> [R]
[639,713,R] -> [2,3,163,165,167,169]
[639,714] -> [R]
[639,714,R] -> [2,3,163,165,167,169]
[643,665,711] -> [646]
[643,665,712] -> [646]
[643,679,711] -> [646]
[643,679,712] -> [646]
[643,713] -> [646]
[643,714] -> [646]
[644,646,665,711] -> [R]
[644,646,665,712] -> [R]
[644,646,679,711] -> [R]
[644,646,679,712] -> [R]
[644,646,713] -> [R]
[644,646,714] -> [R]
[644,665,711] -> [R]
[644,665,711,R] -> [631,646]
[644,665,712] -> [R]
[644,665,712,R] -> [631,646]
[644,679,711] -> [R]
[644,679,711,R] -> [631,646]
[644,679,712] -> [R]
[644,679,712,R] -> [631,646]
[644,713] -> [R]
[644,713,R] -> [631,646]
[644,714] -> [R]
[644,714,R] -> [631,646]
[645,665,711] -> [R]
[645,665,711,R] -> [630]
[645,665,712] -> [R]
[645,665,712,R] -> [630]
[645,679,711] -> [R]
[645,679,711,R] -> [630]
[645,679,712] -> [R]
[645,679,712,R] -> [630]
[645,713] -> [R]
[645,713,R] -> [630]
[645,714] -> [R]
[645,714,R] -> [630]
[646,665,711] -> [644]
[646,665,712] -> [644]
[646,679,711] -> [644]
[646,679,712] -> [644]
[646,713] -> [644]
[646,714] -> [644]
[647,648,653,711] -> [683]
[647,648,653,712] -> [683]
[647,648,665,711] -> [631]
[647,648,665,711,R] -> [643]
[647,648,665,712] -> [631]
[647,648,665,712,R] -> [643]
[647,648,679,711] -> [631]
[647,648,679,711,R] -> [643]
[647,648,679,712] -> [631]
[647,648,679,712,R] -> [643]
[647,648,713] -> [631]
[647,648,713,R] -> [643]
[647,648,714] -> [631]
[647,648,714,R] -> [643]
[647,649,653,711] -> [684]
[647,649,653,712] -> [684]
[647,649,665,711] -> [630]
[647,649,665,711,R] -> [19]
[647,649,665,712] -> [630]
[647,649,665,712,R] -> [19]
[647,649,679,711] -> [630]
[647,649,679,711,R] -> [19]
[647,649,679,712] -> [630]
[647,649,679,712,R] -> [19]
[647,649,713] -> [630]
[647,649,713,R] -> [19]
[647,649,714] -> [630]
[647,649,714,R] -> [19]
[647,653,683,711] -> [648]
[647,653,683,712] -> [648]
[647,653,684,711] -> [649]
[647,653,684,712] -> [649]
[647,653,711] -> [190]
[647,653,712] -> [190]
[647,665,711] -> [164]
[647,665,711,R] -> [629]
[647,665,712] -> [164]
[647,665,712,R] -> [629]
[647,679,711] -> [164]
[647,679,711,R] -> [629]
[647,679,712] -> [164]
[647,679,712,R] -> [629]
[647,713] -> [164]
[647,713,R] -> [629]
[647,714] -> [164]
[647,714,R] -> [629]
[651,664,711] -> [673]
[651,664,712] -> [673]
[651,678,711] -> [686]
[651,678,712] -> [686]
[651,711] -> [710]
[651,711,R] -> [659,662,676]
[651,712] -> [703]
[651,712,R] -> [659,662,676]
[652,664,711] -> [672]
[652,664,712] -> [672]
[652,678,711] -> [685]
[652,678,712] -> [685]
[652,711] -> [709]
[652,711,R] -> [658,661,675]
[652,712] -> [702]
[652,712,R] -> [658,661,675]
[653,655,664,711] -> [670]
[653,655,664,712] -> [670]
[653,655,678,711] -> [683]
[653,655,678,712] -> [683]
[653,656,664,711] -> [671]
[653,656,664,712] -> [671]
[653,656,678,711] -> [684]
[653,656,678,712] -> [684]
[653,664,670,711] -> [655]
[653,664,670,712] -> [655]
[653,664,671,711] -> [656]
[653,664,671,712] -> [656]
[653,664,711] -> [183]
[653,664,712] -> [183]
[653,678,683,711] -> [655]
[653,678,683,712] -> [655]
[653,678,684,711] -> [656]
[653,678,684,712] -> [656]
[653,678,711] -> [183]
[653,678,712] -> [183]
[653,711] -> [176,185,705]
[653,712] -> [176,185,698]
[654,663,711] -> [187]
[654,663,712] -> [187]
[654,664,711] -> [184]
[654,664,712] -> [184]
[654,677,711] -> [187]
[654,677,712] -> [187]
[654,678,711] -> [184]
[654,678,712] -> [184]
[654,711] -> [177,186,706]
[654,712] -> [177,186,699]
[655,698,712] -> [700]
[655,705,711] -> [707]
[656,698,712] -> [701]
[656,705,711] -> [708]
[657,711] -> [659]
[657,712] -> [659]
[658,711] -> [R]
[658,711,R] -> [652]
[658,712] -> [R]
[658,712,R] -> [652]
[659,711] -> [R]
[659,711,R] -> [651]
[659,712] -> [R]
[659,712,R] -> [651]
[660,711] -> [663]
[660,712] -> [663]
[661,663,711] -> [R]
[661,663,712] -> [R]
[661,711] -> [R]
[661,711,R] -> [652,663]
[661,712] -> [R]
[661,712,R] -> [652,663]
[662,711] -> [R]
[662,711,R] -> [651]
[662,712] -> [R]
[662,712,R] -> [651]
[663,711] -> [661]
[663,712] -> [661]
[664,672,711] -> [652]
[664,672,711,R] -> [660]
[664,672,712] -> [652]
[664,672,712,R] -> [660]
[664,673,711] -> [651]
[664,673,711,R] -> [20]
[664,673,712] -> [651]
[664,673,712,R] -> [20]
[664,711] -> [R]
[664,711,R] -> [650]
[664,712] -> [R]
[664,712,R] -> [650]
[665,670,711] -> [631]
[665,670,711,R] -> [660]
[665,670,712] -> [631]
[665,670,712,R] -> [660]
[665,671,711] -> [630]
[665,671,711,R] -> [20]
[665,671,712] -> [630]
[665,671,712,R] -> [20]
[665,711] -> [182]
[665,711,R] -> [2,3,19,20,163,165,167,169,629,633,636,637,639,644,645]
[665,712] -> [182]
[665,712,R] -> [2,3,19,20,163,165,167,169,629,633,636,637,639,644,645]
[666,711] -> [R]
[666,711,R] -> [158]
[666,712] -> [R]
[666,712,R] -> [158]
[667,669,711] -> [R]
[667,669,711,R] -> [2]
[667,669,712] -> [R]
[667,669,712,R] -> [2]
[667,711] -> [180]
[667,711,R] -> [3,669]
[667,712] -> [180]
[667,712,R] -> [3,669]
[668,711] -> [179]
[668,711,R] -> [660]
[668,712] -> [179]
[668,712,R] -> [660]
[674,711] -> [677]
[674,712] -> [677]
[675,677,711] -> [R]
[675,677,712] -> [R]
[675,711] -> [R]
[675,711,R] -> [652,677]
[675,712] -> [R]
[675,712,R] -> [652,677]
[676,711] -> [R]
[676,711,R] -> [651]
[676,712] -> [R]
[676,712,R] -> [651]
[677,711] -> [675]
[677,712] -> [675]
[678,685,711] -> [652]
[678,685,711,R] -> [674]
[678,685,712] -> [652]
[678,685,712,R] -> [674]
[678,686,711] -> [651]
[678,686,711,R] -> [19]
[678,686,712] -> [651]
[678,686,712,R] -> [19]
[678,711] -> [R]
[678,711,R] -> [650]
[678,712] -> [R]
[678,712,R] -> [650]
[679,683,711] -> [631]
[679,683,711,R] -> [674]
[679,683,712] -> [631]
[679,683,712,R] -> [674]
[679,684,711] -> [630]
[679,684,711,R] -> [19]
[679,684,712] -> [630]
[679,684,712,R] -> [19]
[679,711] -> [182]
[679,711,R] -> [2,3,19,20,163,165,167,169,629,633,636,637,639,644,645]
[679,712] -> [182]
[679,712,R] -> [2,3,19,20,163,165,167,169,629,633,636,637,639,644,645]
[680,711] -> [R]
[680,711,R] -> [161]
[680,712] -> [R]
[680,712,R] -> [161]
[681,711] -> [180]
[681,711,R] -> [2]
[681,712] -> [180]
[681,712,R] -> [2]
[682,711] -> [179]
[682,711,R] -> [674]
[682,712] -> [179]
[682,712,R] -> [674]
[688] -> [607]
[688,691] -> [610]
[688,691,695] -> [718]
[688,691,696] -> [719]
[688,691,718] -> [695]
[688,691,719] -> [696]
[688,692] -> [611]
[688,692,693] -> [716]
[688,692,694] -> [717]
[688,692,716] -> [693]
[688,692,717] -> [694]
[689] -> [608]
[689,690] -> [609]
[698,700,712] -> [655,716]
[698,701,712] -> [656,717]
[698,712] -> [602,653]
[698,712,716] -> [700]
[698,712,717] -> [701]
[699,712] -> [603,654]
[702,712] -> [652]
[702,712,R] -> [628]
[703,712] -> [651]
[703,712,R] -> [19]
[705,707,711] -> [655,718]
[705,708,711] -> [656,719]
[705,711] -> [605,653]
[705,711,718] -> [707]
[705,711,719] -> [708]
[706,711] -> [606,654]
[709,711] -> [652]
[709,711,R] -> [628]
[710,711] -> [651]
[710,711,R] -> [20]
[711] -> [604]
[711,R] -> [2,3,19,20,175,178,650,658,661,662,664,666,675,676,678,680,704]
[712] -> [601]
[712,R] -> [2,3,19,20,175,178,650,658,661,662,664,666,675,676,678,680,697]
[713] -> [600]
[713,718] -> [631]
[713,718,R] -> [628]
[713,719] -> [630]
[713,719,R] -> [20]
[713,R] -> [2,3,19,20,163,165,167,169,629,633,636,637,639,644,645]
[714] -> [599]
[714,716] -> [631]
[714,716,R] -> [628]
[714,717] -> [630]
[714,717,R] -> [19]
[714,R] -> [2,3,19,20,163,165,167,169,629,633,636,637,639,644,645]
[715] -> [598]
[715,R] -> [628]
[R] -> [130,154,175,178,404,427,428,434,436,457,458,481,597,687]

### Solution ###

[2,3,19,20,130,140,154,158,161,175,178,195,200,203,219,223,225,227,232,233,234,239,241,248,249,250,256,258,268,269,270,276,278,288,289,290,296,298,308,309,310,317,319,331,332,333,340,342,354,355,356,363,365,377,378,379,387,389,404,409,411,414,425,427,428,429,434,436,441,444,447,451,454,457,458,459,471,473,476,478,481,482,501,504,517,519,521,547,573,575,583,584,585,590,591,592,593,597,601,604,615,618,621,622,623,628,650,651,652,658,659,660,661,662,663,664,666,672,673,674,675,676,677,678,680,685,686,687,697,702,703,704,709,710,711,712,R]

### Annotated ###

  let
    constructor Nat :E: Type
    constructor Z :R: Nat
    constructor S :R: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      n :E: Nat
        [plus] -E- Z -E- n = n
      m :E: Nat n :E: Nat
        [plus] -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    constructor Bool :E: Type
    constructor True :R: Bool
    constructor False :R: Bool
    not :E: (_x2 :E: Bool) -> Bool 
      [not] -E- True = False
      [not] -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :E: Unit
    constructor Pair :E: (_x3 :E: Type) -> (_x4 :E: Type) -> Type
    constructor MkPair :E: (a :E: Type) -> (b :E: Type) -> (_x5 :E: a) -> (_x6 :E: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: Pair -E- a -E- b) -> a 
      a :E: Type b :E: Type x :E: a y :E: b
        [fst] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = x
    snd :E: (a :E: Type) -> (b :E: Type) -> (_x8 :E: Pair -E- a -E- b) -> b 
      a :E: Type b :E: Type x :E: a y :E: b
        [snd] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = y
    constructor Either :E: (_x9 :E: Type) -> (_x10 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x11 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x12 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x13 :E: Nat) -> Type
    constructor FZ :E: (n :E: Nat) -> Fin -E- (S -E- n)
    constructor FS :E: (n :E: Nat) -> (_x14 :E: Fin -E- n) -> Fin -E- (S -E- n)
    constructor Vect :E: (_x15 :E: Nat) -> (_x16 :E: Type) -> Type
    constructor VN :E: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :E: (n :E: Nat) -> (a :E: Type) -> (x :E: a) -> (xs :E: Vect -E- n -E- a) -> Vect -E- (S -E- n) -E- a
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    subst :R: (a :E: Type) -> (P :E: (_x0 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (_x1 :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x2 :E: a) -> Type x :E: a
        [subst] -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\z :R: P -E- x. z)
    constructor Bit :E: (_x0 :E: Nat) -> Type
    constructor I :R: Bit -E- 1
    constructor O :R: Bit -E- Z
    double :E: (_x1 :E: Nat) -> Nat 
      [double] -E- Z = Z
      n :E: Nat
        [double] -E- (S -E- n) = S -E- (S -E- (double -E- n))
    constructor Bin :E: (width :E: Nat) -> (value :E: Nat) -> Type
    constructor N :R: Bin -E- Z -E- Z
    constructor C :R: (width :E: Nat) -> (lsbVal :E: Nat) -> (lsb :R: Bit -E- lsbVal) -> (restVal :E: Nat) -> (rest :R: Bin -E- width -E- restVal) -> Bin -E- (S -E- width) -E- (plus -E- lsbVal -E- (double -E- restVal))
    constructor TwoBits :E: (_x2 :E: Nat) -> (_x3 :E: Nat) -> (_x4 :E: Nat) -> Type
    constructor TB :R: (c :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (hi' :E: Nat) -> (hi :R: Bit -E- hi') -> (lo' :E: Nat) -> (lo :R: Bit -E- lo') -> (pf :E: Id -E- Nat -E- (plus -E- c -E- (plus -E- x -E- y)) -E- (plus -E- lo' -E- (double -E- hi'))) -> TwoBits -E- c -E- x -E- y
    adb :R: (c :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (_x5 :R: Bit -E- c) -> (_x6 :R: Bit -E- x) -> (_x7 :R: Bit -E- y) -> TwoBits -E- c -E- x -E- y 
      [adb] -E- [Z] -E- [Z] -E- [Z] -R- O -R- O -R- O = TB -E- Z -E- Z -E- Z -E- Z -R- O -E- Z -R- O -E- (Refl -E- Nat -E- Z)
      [adb] -E- [1] -E- [Z] -E- [Z] -R- I -R- O -R- O = TB -E- 1 -E- Z -E- Z -E- Z -R- O -E- 1 -R- I -E- (Refl -E- Nat -E- 1)
      [adb] -E- [Z] -E- [1] -E- [Z] -R- O -R- I -R- O = TB -E- Z -E- 1 -E- Z -E- Z -R- O -E- 1 -R- I -E- (Refl -E- Nat -E- 1)
      [adb] -E- [Z] -E- [Z] -E- [1] -R- O -R- O -R- I = TB -E- Z -E- Z -E- 1 -E- Z -R- O -E- 1 -R- I -E- (Refl -E- Nat -E- 1)
      [adb] -E- [1] -E- [1] -E- [Z] -R- I -R- I -R- O = TB -E- 1 -E- 1 -E- Z -E- 1 -R- I -E- Z -R- O -E- (Refl -E- Nat -E- 2)
      [adb] -E- [1] -E- [Z] -E- [1] -R- I -R- O -R- I = TB -E- 1 -E- Z -E- 1 -E- 1 -R- I -E- Z -R- O -E- (Refl -E- Nat -E- 2)
      [adb] -E- [Z] -E- [1] -E- [1] -R- O -R- I -R- I = TB -E- Z -E- 1 -E- 1 -E- 1 -R- I -E- Z -R- O -E- (Refl -E- Nat -E- 2)
      [adb] -E- [1] -E- [1] -E- [1] -R- I -R- I -R- I = TB -E- 1 -E- 1 -E- 1 -E- 1 -R- I -E- 1 -R- I -E- (Refl -E- Nat -E- 3)
    add' :R: (w :E: Nat) -> (c :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (_x8 :R: Bit -E- c) -> (_x9 :R: Bin -E- w -E- x) -> (_x10 :R: Bin -E- w -E- y) -> Bin -E- (S -E- w) -E- (plus -E- c -E- (plus -E- x -E- y)) 
      c :E: Nat cb :R: Bit -E- c
        [add'] -E- [Z] -E- c -E- [Z] -E- [Z] -R- cb -R- N -R- N = C -E- Z -E- c -R- cb -E- Z -R- N
      w :E: Nat c :E: Nat cb :R: Bit -E- c xb' :E: Nat xb :R: Bit -E- xb' xn' :E: Nat xn :R: Bin -E- w -E- xn' yb' :E: Nat yb :R: Bit -E- yb' yn' :E: Nat yn :R: Bin -E- w -E- yn'
        [add'] -E- ([S] -E- w) -E- c -E- [plus -E- xb' -E- (double -E- xn')] -E- [plus -E- yb' -E- (double -E- yn')] -R- cb -R- (C -E- [w] -E- xb' -R- xb -E- xn' -R- xn) -R- (C -E- [w] -E- yb' -R- yb -E- yn' -R- yn) = 
          let f :R: (_x11 :R: TwoBits -E- c -E- xb' -E- yb') -> Bin -E- (S -E- (S -E- w)) -E- (plus -E- c -E- (plus -E- (plus -E- xb' -E- (double -E- xn')) -E- (plus -E- yb' -E- (double -E- yn')))) 
            hi' :E: Nat hi :R: Bit -E- hi' lo' :E: Nat lo :R: Bit -E- lo' pf :E: Id -E- Nat -E- (plus -E- c -E- (plus -E- xb' -E- yb')) -E- (plus -E- lo' -E- (double -E- hi'))
              [f] -R- ([TB] -E- [c] -E- [xb'] -E- [yb'] -E- hi' -R- hi -E- lo' -R- lo -E- pf) = 
                let postulate eq :E: Id -E- Nat -E- (plus -E- lo' -E- (double -E- (plus -E- hi' -E- (plus -E- xn' -E- yn')))) -E- (plus -E- c -E- (plus -E- (plus -E- xb' -E- (double -E- xn')) -E- (plus -E- yb' -E- (double -E- yn'))))
                in subst -E- Nat -E- (Bin -E- (S -E- (S -E- w))) -E- (plus -E- lo' -E- (double -E- (plus -E- hi' -E- (plus -E- xn' -E- yn')))) -E- (plus -E- c -E- (plus -E- (plus -E- xb' -E- (double -E- xn')) -E- (plus -E- yb' -E- (double -E- yn')))) -E- eq -R- (C -E- (S -E- w) -E- lo' -R- lo -E- (plus -E- hi' -E- (plus -E- xn' -E- yn')) -R- (add' -E- w -E- hi' -E- xn' -E- yn' -R- hi -R- xn -R- yn))
          in f -R- (adb -E- c -E- xb' -E- yb' -R- cb -R- xb -R- yb)
    add :R: (w :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (bx :R: Bin -E- w -E- x) -> (by :R: Bin -E- w -E- y) -> Bin -E- (S -E- w) -E- (plus -E- x -E- y) = (\w :E: Nat. (\x :E: Nat. (\y :E: Nat. (\bx :R: Bin -E- w -E- x. (\by :R: Bin -E- w -E- y. add' -E- w -E- Z -E- x -E- y -R- O -R- bx -R- by)))))
    foreign inputSize :R: Nat
    binVal :E: (_x12 :E: Bool) -> (_x13 :E: Nat) -> Nat 
      b :E: Bool
        [binVal] -E- b -E- Z = Z
      n :E: Nat
        [binVal] -E- True -E- (S -E- n) = S -E- (double -E- (binVal -E- False -E- n))
      n :E: Nat
        [binVal] -E- False -E- (S -E- n) = double -E- (binVal -E- True -E- n)
    mkBin :R: (b :R: Bool) -> (w :R: Nat) -> Bin -E- w -E- (binVal -E- b -E- w) 
      b :E: Bool
        [mkBin] -R- b -R- Z = N
      n :R: Nat
        [mkBin] -R- True -R- (S -R- n) = C -E- n -E- 1 -R- I -E- (binVal -E- False -E- n) -R- (mkBin -R- False -R- n)
      n :R: Nat
        [mkBin] -R- False -R- (S -R- n) = C -E- n -E- Z -R- O -E- (binVal -E- True -E- n) -R- (mkBin -R- True -R- n)
    main :R: Bin -E- (S -E- inputSize) -E- (plus -E- (binVal -E- True -E- inputSize) -E- (binVal -E- False -E- inputSize)) = 
      let
        x :R: Bin -E- inputSize -E- (binVal -E- True -E- inputSize) = mkBin -R- True -R- inputSize
        y :R: Bin -E- inputSize -E- (binVal -E- False -E- inputSize) = mkBin -R- False -R- inputSize
      in add -E- inputSize -E- (binVal -E- True -E- inputSize) -E- (binVal -E- False -E- inputSize) -R- x -R- y
  in main

### Specialised ###

  let
    constructor Nat :E: Type
    constructor Z :R: Nat
    constructor S :R: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      n :E: Nat
        [plus] -E- Z -E- n = n
      m :E: Nat n :E: Nat
        [plus] -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    constructor Bool :E: Type
    constructor True :R: Bool
    constructor False :R: Bool
    not :E: (_x2 :E: Bool) -> Bool 
      [not] -E- True = False
      [not] -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :E: Unit
    constructor Pair :E: (_x3 :E: Type) -> (_x4 :E: Type) -> Type
    constructor MkPair :E: (a :E: Type) -> (b :E: Type) -> (_x5 :E: a) -> (_x6 :E: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: Pair -E- a -E- b) -> a 
      a :E: Type b :E: Type x :E: a y :E: b
        [fst] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = x
    snd :E: (a :E: Type) -> (b :E: Type) -> (_x8 :E: Pair -E- a -E- b) -> b 
      a :E: Type b :E: Type x :E: a y :E: b
        [snd] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = y
    constructor Either :E: (_x9 :E: Type) -> (_x10 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x11 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x12 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x13 :E: Nat) -> Type
    constructor FZ :E: (n :E: Nat) -> Fin -E- (S -E- n)
    constructor FS :E: (n :E: Nat) -> (_x14 :E: Fin -E- n) -> Fin -E- (S -E- n)
    constructor Vect :E: (_x15 :E: Nat) -> (_x16 :E: Type) -> Type
    constructor VN :E: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :E: (n :E: Nat) -> (a :E: Type) -> (x :E: a) -> (xs :E: Vect -E- n -E- a) -> Vect -E- (S -E- n) -E- a
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    subst :R: (a :E: Type) -> (P :E: (_x0 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (_x1 :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x2 :E: a) -> Type x :E: a
        [subst] -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\z :R: P -E- x. z)
    constructor Bit :E: (_x0 :E: Nat) -> Type
    constructor I :R: Bit -E- 1
    constructor O :R: Bit -E- Z
    double :E: (_x1 :E: Nat) -> Nat 
      [double] -E- Z = Z
      n :E: Nat
        [double] -E- (S -E- n) = S -E- (S -E- (double -E- n))
    constructor Bin :E: (width :E: Nat) -> (value :E: Nat) -> Type
    constructor N :R: Bin -E- Z -E- Z
    constructor C :R: (width :E: Nat) -> (lsbVal :E: Nat) -> (lsb :R: Bit -E- lsbVal) -> (restVal :E: Nat) -> (rest :R: Bin -E- width -E- restVal) -> Bin -E- (S -E- width) -E- (plus -E- lsbVal -E- (double -E- restVal))
    constructor TwoBits :E: (_x2 :E: Nat) -> (_x3 :E: Nat) -> (_x4 :E: Nat) -> Type
    constructor TB :R: (c :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (hi' :E: Nat) -> (hi :R: Bit -E- hi') -> (lo' :E: Nat) -> (lo :R: Bit -E- lo') -> (pf :E: Id -E- Nat -E- (plus -E- c -E- (plus -E- x -E- y)) -E- (plus -E- lo' -E- (double -E- hi'))) -> TwoBits -E- c -E- x -E- y
    adb :R: (c :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (_x5 :R: Bit -E- c) -> (_x6 :R: Bit -E- x) -> (_x7 :R: Bit -E- y) -> TwoBits -E- c -E- x -E- y 
      [adb] -E- [Z] -E- [Z] -E- [Z] -R- O -R- O -R- O = TB -E- Z -E- Z -E- Z -E- Z -R- O -E- Z -R- O -E- (Refl -E- Nat -E- Z)
      [adb] -E- [1] -E- [Z] -E- [Z] -R- I -R- O -R- O = TB -E- 1 -E- Z -E- Z -E- Z -R- O -E- 1 -R- I -E- (Refl -E- Nat -E- 1)
      [adb] -E- [Z] -E- [1] -E- [Z] -R- O -R- I -R- O = TB -E- Z -E- 1 -E- Z -E- Z -R- O -E- 1 -R- I -E- (Refl -E- Nat -E- 1)
      [adb] -E- [Z] -E- [Z] -E- [1] -R- O -R- O -R- I = TB -E- Z -E- Z -E- 1 -E- Z -R- O -E- 1 -R- I -E- (Refl -E- Nat -E- 1)
      [adb] -E- [1] -E- [1] -E- [Z] -R- I -R- I -R- O = TB -E- 1 -E- 1 -E- Z -E- 1 -R- I -E- Z -R- O -E- (Refl -E- Nat -E- 2)
      [adb] -E- [1] -E- [Z] -E- [1] -R- I -R- O -R- I = TB -E- 1 -E- Z -E- 1 -E- 1 -R- I -E- Z -R- O -E- (Refl -E- Nat -E- 2)
      [adb] -E- [Z] -E- [1] -E- [1] -R- O -R- I -R- I = TB -E- Z -E- 1 -E- 1 -E- 1 -R- I -E- Z -R- O -E- (Refl -E- Nat -E- 2)
      [adb] -E- [1] -E- [1] -E- [1] -R- I -R- I -R- I = TB -E- 1 -E- 1 -E- 1 -E- 1 -R- I -E- 1 -R- I -E- (Refl -E- Nat -E- 3)
    add' :R: (w :E: Nat) -> (c :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (_x8 :R: Bit -E- c) -> (_x9 :R: Bin -E- w -E- x) -> (_x10 :R: Bin -E- w -E- y) -> Bin -E- (S -E- w) -E- (plus -E- c -E- (plus -E- x -E- y)) 
      c :E: Nat cb :R: Bit -E- c
        [add'] -E- [Z] -E- c -E- [Z] -E- [Z] -R- cb -R- N -R- N = C -E- Z -E- c -R- cb -E- Z -R- N
      w :E: Nat c :E: Nat cb :R: Bit -E- c xb' :E: Nat xb :R: Bit -E- xb' xn' :E: Nat xn :R: Bin -E- w -E- xn' yb' :E: Nat yb :R: Bit -E- yb' yn' :E: Nat yn :R: Bin -E- w -E- yn'
        [add'] -E- ([S] -E- w) -E- c -E- [plus -E- xb' -E- (double -E- xn')] -E- [plus -E- yb' -E- (double -E- yn')] -R- cb -R- (C -E- [w] -E- xb' -R- xb -E- xn' -R- xn) -R- (C -E- [w] -E- yb' -R- yb -E- yn' -R- yn) = 
          let f :R: (_x11 :R: TwoBits -E- c -E- xb' -E- yb') -> Bin -E- (S -E- (S -E- w)) -E- (plus -E- c -E- (plus -E- (plus -E- xb' -E- (double -E- xn')) -E- (plus -E- yb' -E- (double -E- yn')))) 
            hi' :E: Nat hi :R: Bit -E- hi' lo' :E: Nat lo :R: Bit -E- lo' pf :E: Id -E- Nat -E- (plus -E- c -E- (plus -E- xb' -E- yb')) -E- (plus -E- lo' -E- (double -E- hi'))
              [f] -R- ([TB] -E- [c] -E- [xb'] -E- [yb'] -E- hi' -R- hi -E- lo' -R- lo -E- pf) = 
                let postulate eq :E: Id -E- Nat -E- (plus -E- lo' -E- (double -E- (plus -E- hi' -E- (plus -E- xn' -E- yn')))) -E- (plus -E- c -E- (plus -E- (plus -E- xb' -E- (double -E- xn')) -E- (plus -E- yb' -E- (double -E- yn'))))
                in subst -E- Nat -E- (Bin -E- (S -E- (S -E- w))) -E- (plus -E- lo' -E- (double -E- (plus -E- hi' -E- (plus -E- xn' -E- yn')))) -E- (plus -E- c -E- (plus -E- (plus -E- xb' -E- (double -E- xn')) -E- (plus -E- yb' -E- (double -E- yn')))) -E- eq -R- (C -E- (S -E- w) -E- lo' -R- lo -E- (plus -E- hi' -E- (plus -E- xn' -E- yn')) -R- (add' -E- w -E- hi' -E- xn' -E- yn' -R- hi -R- xn -R- yn))
          in f -R- (adb -E- c -E- xb' -E- yb' -R- cb -R- xb -R- yb)
    add :R: (w :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (bx :R: Bin -E- w -E- x) -> (by :R: Bin -E- w -E- y) -> Bin -E- (S -E- w) -E- (plus -E- x -E- y) = (\w :E: Nat. (\x :E: Nat. (\y :E: Nat. (\bx :R: Bin -E- w -E- x. (\by :R: Bin -E- w -E- y. add' -E- w -E- Z -E- x -E- y -R- O -R- bx -R- by)))))
    foreign inputSize :R: Nat
    binVal :E: (_x12 :E: Bool) -> (_x13 :E: Nat) -> Nat 
      b :E: Bool
        [binVal] -E- b -E- Z = Z
      n :E: Nat
        [binVal] -E- True -E- (S -E- n) = S -E- (double -E- (binVal -E- False -E- n))
      n :E: Nat
        [binVal] -E- False -E- (S -E- n) = double -E- (binVal -E- True -E- n)
    mkBin :R: (b :R: Bool) -> (w :R: Nat) -> Bin -E- w -E- (binVal -E- b -E- w) 
      b :E: Bool
        [mkBin] -R- b -R- Z = N
      n :R: Nat
        [mkBin] -R- True -R- (S -R- n) = C -E- n -E- 1 -R- I -E- (binVal -E- False -E- n) -R- (mkBin -R- False -R- n)
      n :R: Nat
        [mkBin] -R- False -R- (S -R- n) = C -E- n -E- Z -R- O -E- (binVal -E- True -E- n) -R- (mkBin -R- True -R- n)
    main :R: Bin -E- (S -E- inputSize) -E- (plus -E- (binVal -E- True -E- inputSize) -E- (binVal -E- False -E- inputSize)) = 
      let
        x :R: Bin -E- inputSize -E- (binVal -E- True -E- inputSize) = mkBin -R- True -R- inputSize
        y :R: Bin -E- inputSize -E- (binVal -E- False -E- inputSize) = mkBin -R- False -R- inputSize
      in add -E- inputSize -E- (binVal -E- True -E- inputSize) -E- (binVal -E- False -E- inputSize) -R- x -R- y
  in main

### Final annotation ###

  let
    constructor Nat :E: Type
    constructor Z :R: Nat
    constructor S :R: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      n :E: Nat
        [plus] -E- Z -E- n = n
      m :E: Nat n :E: Nat
        [plus] -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    constructor Bool :E: Type
    constructor True :R: Bool
    constructor False :R: Bool
    not :E: (_x2 :E: Bool) -> Bool 
      [not] -E- True = False
      [not] -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :E: Unit
    constructor Pair :E: (_x3 :E: Type) -> (_x4 :E: Type) -> Type
    constructor MkPair :E: (a :E: Type) -> (b :E: Type) -> (_x5 :E: a) -> (_x6 :E: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: Pair -E- a -E- b) -> a 
      a :E: Type b :E: Type x :E: a y :E: b
        [fst] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = x
    snd :E: (a :E: Type) -> (b :E: Type) -> (_x8 :E: Pair -E- a -E- b) -> b 
      a :E: Type b :E: Type x :E: a y :E: b
        [snd] -E- a -E- b -E- ([MkPair] -E- [a] -E- [b] -E- x -E- y) = y
    constructor Either :E: (_x9 :E: Type) -> (_x10 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x11 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x12 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x13 :E: Nat) -> Type
    constructor FZ :E: (n :E: Nat) -> Fin -E- (S -E- n)
    constructor FS :E: (n :E: Nat) -> (_x14 :E: Fin -E- n) -> Fin -E- (S -E- n)
    constructor Vect :E: (_x15 :E: Nat) -> (_x16 :E: Type) -> Type
    constructor VN :E: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :E: (n :E: Nat) -> (a :E: Type) -> (x :E: a) -> (xs :E: Vect -E- n -E- a) -> Vect -E- (S -E- n) -E- a
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    subst :R: (a :E: Type) -> (P :E: (_x0 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (_x1 :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x2 :E: a) -> Type x :E: a
        [subst] -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\z :R: P -E- x. z)
    constructor Bit :E: (_x0 :E: Nat) -> Type
    constructor I :R: Bit -E- 1
    constructor O :R: Bit -E- Z
    double :E: (_x1 :E: Nat) -> Nat 
      [double] -E- Z = Z
      n :E: Nat
        [double] -E- (S -E- n) = S -E- (S -E- (double -E- n))
    constructor Bin :E: (width :E: Nat) -> (value :E: Nat) -> Type
    constructor N :R: Bin -E- Z -E- Z
    constructor C :R: (width :E: Nat) -> (lsbVal :E: Nat) -> (lsb :R: Bit -E- lsbVal) -> (restVal :E: Nat) -> (rest :R: Bin -E- width -E- restVal) -> Bin -E- (S -E- width) -E- (plus -E- lsbVal -E- (double -E- restVal))
    constructor TwoBits :E: (_x2 :E: Nat) -> (_x3 :E: Nat) -> (_x4 :E: Nat) -> Type
    constructor TB :R: (c :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (hi' :E: Nat) -> (hi :R: Bit -E- hi') -> (lo' :E: Nat) -> (lo :R: Bit -E- lo') -> (pf :E: Id -E- Nat -E- (plus -E- c -E- (plus -E- x -E- y)) -E- (plus -E- lo' -E- (double -E- hi'))) -> TwoBits -E- c -E- x -E- y
    adb :R: (c :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (_x5 :R: Bit -E- c) -> (_x6 :R: Bit -E- x) -> (_x7 :R: Bit -E- y) -> TwoBits -E- c -E- x -E- y 
      [adb] -E- [Z] -E- [Z] -E- [Z] -R- O -R- O -R- O = TB -E- Z -E- Z -E- Z -E- Z -R- O -E- Z -R- O -E- (Refl -E- Nat -E- Z)
      [adb] -E- [1] -E- [Z] -E- [Z] -R- I -R- O -R- O = TB -E- 1 -E- Z -E- Z -E- Z -R- O -E- 1 -R- I -E- (Refl -E- Nat -E- 1)
      [adb] -E- [Z] -E- [1] -E- [Z] -R- O -R- I -R- O = TB -E- Z -E- 1 -E- Z -E- Z -R- O -E- 1 -R- I -E- (Refl -E- Nat -E- 1)
      [adb] -E- [Z] -E- [Z] -E- [1] -R- O -R- O -R- I = TB -E- Z -E- Z -E- 1 -E- Z -R- O -E- 1 -R- I -E- (Refl -E- Nat -E- 1)
      [adb] -E- [1] -E- [1] -E- [Z] -R- I -R- I -R- O = TB -E- 1 -E- 1 -E- Z -E- 1 -R- I -E- Z -R- O -E- (Refl -E- Nat -E- 2)
      [adb] -E- [1] -E- [Z] -E- [1] -R- I -R- O -R- I = TB -E- 1 -E- Z -E- 1 -E- 1 -R- I -E- Z -R- O -E- (Refl -E- Nat -E- 2)
      [adb] -E- [Z] -E- [1] -E- [1] -R- O -R- I -R- I = TB -E- Z -E- 1 -E- 1 -E- 1 -R- I -E- Z -R- O -E- (Refl -E- Nat -E- 2)
      [adb] -E- [1] -E- [1] -E- [1] -R- I -R- I -R- I = TB -E- 1 -E- 1 -E- 1 -E- 1 -R- I -E- 1 -R- I -E- (Refl -E- Nat -E- 3)
    add' :R: (w :E: Nat) -> (c :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (_x8 :R: Bit -E- c) -> (_x9 :R: Bin -E- w -E- x) -> (_x10 :R: Bin -E- w -E- y) -> Bin -E- (S -E- w) -E- (plus -E- c -E- (plus -E- x -E- y)) 
      c :E: Nat cb :R: Bit -E- c
        [add'] -E- [Z] -E- c -E- [Z] -E- [Z] -R- cb -R- N -R- N = C -E- Z -E- c -R- cb -E- Z -R- N
      w :E: Nat c :E: Nat cb :R: Bit -E- c xb' :E: Nat xb :R: Bit -E- xb' xn' :E: Nat xn :R: Bin -E- w -E- xn' yb' :E: Nat yb :R: Bit -E- yb' yn' :E: Nat yn :R: Bin -E- w -E- yn'
        [add'] -E- ([S] -E- w) -E- c -E- [plus -E- xb' -E- (double -E- xn')] -E- [plus -E- yb' -E- (double -E- yn')] -R- cb -R- (C -E- [w] -E- xb' -R- xb -E- xn' -R- xn) -R- (C -E- [w] -E- yb' -R- yb -E- yn' -R- yn) = 
          let f :R: (_x11 :R: TwoBits -E- c -E- xb' -E- yb') -> Bin -E- (S -E- (S -E- w)) -E- (plus -E- c -E- (plus -E- (plus -E- xb' -E- (double -E- xn')) -E- (plus -E- yb' -E- (double -E- yn')))) 
            hi' :E: Nat hi :R: Bit -E- hi' lo' :E: Nat lo :R: Bit -E- lo' pf :E: Id -E- Nat -E- (plus -E- c -E- (plus -E- xb' -E- yb')) -E- (plus -E- lo' -E- (double -E- hi'))
              [f] -R- ([TB] -E- [c] -E- [xb'] -E- [yb'] -E- hi' -R- hi -E- lo' -R- lo -E- pf) = 
                let postulate eq :E: Id -E- Nat -E- (plus -E- lo' -E- (double -E- (plus -E- hi' -E- (plus -E- xn' -E- yn')))) -E- (plus -E- c -E- (plus -E- (plus -E- xb' -E- (double -E- xn')) -E- (plus -E- yb' -E- (double -E- yn'))))
                in subst -E- Nat -E- (Bin -E- (S -E- (S -E- w))) -E- (plus -E- lo' -E- (double -E- (plus -E- hi' -E- (plus -E- xn' -E- yn')))) -E- (plus -E- c -E- (plus -E- (plus -E- xb' -E- (double -E- xn')) -E- (plus -E- yb' -E- (double -E- yn')))) -E- eq -R- (C -E- (S -E- w) -E- lo' -R- lo -E- (plus -E- hi' -E- (plus -E- xn' -E- yn')) -R- (add' -E- w -E- hi' -E- xn' -E- yn' -R- hi -R- xn -R- yn))
          in f -R- (adb -E- c -E- xb' -E- yb' -R- cb -R- xb -R- yb)
    add :R: (w :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (bx :R: Bin -E- w -E- x) -> (by :R: Bin -E- w -E- y) -> Bin -E- (S -E- w) -E- (plus -E- x -E- y) = (\w :E: Nat. (\x :E: Nat. (\y :E: Nat. (\bx :R: Bin -E- w -E- x. (\by :R: Bin -E- w -E- y. add' -E- w -E- Z -E- x -E- y -R- O -R- bx -R- by)))))
    foreign inputSize :R: Nat
    binVal :E: (_x12 :E: Bool) -> (_x13 :E: Nat) -> Nat 
      b :E: Bool
        [binVal] -E- b -E- Z = Z
      n :E: Nat
        [binVal] -E- True -E- (S -E- n) = S -E- (double -E- (binVal -E- False -E- n))
      n :E: Nat
        [binVal] -E- False -E- (S -E- n) = double -E- (binVal -E- True -E- n)
    mkBin :R: (b :R: Bool) -> (w :R: Nat) -> Bin -E- w -E- (binVal -E- b -E- w) 
      b :E: Bool
        [mkBin] -R- b -R- Z = N
      n :R: Nat
        [mkBin] -R- True -R- (S -R- n) = C -E- n -E- 1 -R- I -E- (binVal -E- False -E- n) -R- (mkBin -R- False -R- n)
      n :R: Nat
        [mkBin] -R- False -R- (S -R- n) = C -E- n -E- Z -R- O -E- (binVal -E- True -E- n) -R- (mkBin -R- True -R- n)
    main :R: Bin -E- (S -E- inputSize) -E- (plus -E- (binVal -E- True -E- inputSize) -E- (binVal -E- False -E- inputSize)) = 
      let
        x :R: Bin -E- inputSize -E- (binVal -E- True -E- inputSize) = mkBin -R- True -R- inputSize
        y :R: Bin -E- inputSize -E- (binVal -E- False -E- inputSize) = mkBin -R- False -R- inputSize
      in add -E- inputSize -E- (binVal -E- True -E- inputSize) -E- (binVal -E- False -E- inputSize) -R- x -R- y
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor Z : Nat
    constructor S : (x) -> Nat
    constructor True : Bool
    constructor False : Bool
    subst = (\z. z)
    constructor I : Bit
    constructor O : Bit
    constructor N : Bin
    constructor C : (lsb) -> (rest) -> Bin
    constructor TB : (hi) -> (lo) -> TwoBits
    adb 
      [_] O O O = TB O O
      [_] I O O = TB O I
      [_] O I O = TB O I
      [_] O O I = TB O I
      [_] I I O = TB I O
      [_] I O I = TB I O
      [_] O I I = TB I O
      [_] I I I = TB I I
    add' 
      [_] cb N N = C cb N
      [_] cb (C xb xn) (C yb yn) = 
        let f 
          [_] ([_] hi lo) = subst (C lo (add' hi xn yn))
        in f (adb cb xb yb)
    add = (\bx. (\by. add' O bx by))
    foreign inputSize
    mkBin 
      [_] _ Z = N
      [_] True (S n) = C I (mkBin False n)
      [_] False (S n) = C O (mkBin True n)
    main = 
      let
        x = mkBin True inputSize
        y = mkBin False inputSize
      in add x y
  in main

### Normal forms ###

unerased:
  
  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x :R: Nat) -> Nat
    plus : (_x0 : Nat) -> (_x1 : Nat) -> Nat 
      n : Nat
        [plus] Z n = n
      m : Nat n : Nat
        [plus] (S m) n = S (plus m n)
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    constructor Id : (a : Type) -> (x : a) -> (y : a) -> Type
    constructor Refl : (a : Type) -> (x : a) -> Id a x x
    subst : (a : Type) -> (P : (_x0 : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (_x1 : P x) -> P y 
      a : Type P : (_x2 : a) -> Type x : a
        [subst] a P x [x] [Refl a x] = (\z : P x. z)
    constructor Bit : (_x0 : Nat) -> Type
    constructor I : Bit 1
    constructor O : Bit Z
    double : (_x1 : Nat) -> Nat 
      [double] Z = Z
      n : Nat
        [double] (S n) = S (S (double n))
    constructor Bin : (width : Nat) -> (value : Nat) -> Type
    constructor N : Bin Z Z
    constructor C : (width : Nat) -> (lsbVal : Nat) -> (lsb :R: Bit lsbVal) -> (restVal : Nat) -> (rest :R: Bin width restVal) -> Bin (S width) (plus lsbVal (double restVal))
    constructor TwoBits : (_x2 : Nat) -> (_x3 : Nat) -> (_x4 : Nat) -> Type
    constructor TB : (c : Nat) -> (x : Nat) -> (y : Nat) -> (hi' : Nat) -> (hi : Bit hi') -> (lo' : Nat) -> (lo : Bit lo') -> (pf : Id Nat (plus c (plus x y)) (plus lo' (double hi'))) -> TwoBits c x y
    adb : (c : Nat) -> (x : Nat) -> (y : Nat) -> (_x5 : Bit c) -> (_x6 : Bit x) -> (_x7 : Bit y) -> TwoBits c x y 
      [adb] [Z] [Z] [Z] O O O = TB Z Z Z Z O Z O (Refl Nat Z)
      [adb] [1] [Z] [Z] I O O = TB 1 Z Z Z O 1 I (Refl Nat 1)
      [adb] [Z] [1] [Z] O I O = TB Z 1 Z Z O 1 I (Refl Nat 1)
      [adb] [Z] [Z] [1] O O I = TB Z Z 1 Z O 1 I (Refl Nat 1)
      [adb] [1] [1] [Z] I I O = TB 1 1 Z 1 I Z O (Refl Nat 2)
      [adb] [1] [Z] [1] I O I = TB 1 Z 1 1 I Z O (Refl Nat 2)
      [adb] [Z] [1] [1] O I I = TB Z 1 1 1 I Z O (Refl Nat 2)
      [adb] [1] [1] [1] I I I = TB 1 1 1 1 I 1 I (Refl Nat 3)
    add' : (w : Nat) -> (c : Nat) -> (x : Nat) -> (y : Nat) -> (_x8 : Bit c) -> (_x9 : Bin w x) -> (_x10 : Bin w y) -> Bin (S w) (plus c (plus x y)) 
      c : Nat cb : Bit c
        [add'] [Z] c [Z] [Z] cb N N = C Z c cb Z N
      w : Nat c : Nat cb : Bit c xb' : Nat xb : Bit xb' xn' : Nat xn : Bin w xn' yb' : Nat yb : Bit yb' yn' : Nat yn : Bin w yn'
        [add'] ([S] w) c [plus xb' (double xn')] [plus yb' (double yn')] cb (C [w] xb' xb xn' xn) (C [w] yb' yb yn' yn) = 
          let f : (_x11 : TwoBits c xb' yb') -> Bin (S (S w)) (plus c (plus (plus xb' (double xn')) (plus yb' (double yn')))) 
            hi' : Nat hi : Bit hi' lo' : Nat lo : Bit lo' pf : Id Nat (plus c (plus xb' yb')) (plus lo' (double hi'))
              [f] ([TB] [c] [xb'] [yb'] hi' hi lo' lo pf) = 
                let postulate eq : Id Nat (plus lo' (double (plus hi' (plus xn' yn')))) (plus c (plus (plus xb' (double xn')) (plus yb' (double yn'))))
                in subst Nat (Bin (S (S w))) (plus lo' (double (plus hi' (plus xn' yn')))) (plus c (plus (plus xb' (double xn')) (plus yb' (double yn')))) eq (C (S w) lo' lo (plus hi' (plus xn' yn')) (add' w hi' xn' yn' hi xn yn))
          in f (adb c xb' yb' cb xb yb)
    foreign inputSize : Nat
    binVal : (_x12 : Bool) -> (_x13 : Nat) -> Nat 
      b : Bool
        [binVal] b Z = Z
      n : Nat
        [binVal] True (S n) = S (double (binVal False n))
      n : Nat
        [binVal] False (S n) = double (binVal True n)
    mkBin : (b : Bool) -> (w : Nat) -> Bin w (binVal b w) 
      b : Bool
        [mkBin] b Z = N
      n : Nat
        [mkBin] True (S n) = C n 1 I (binVal False n) (mkBin False n)
      n : Nat
        [mkBin] False (S n) = C n Z O (binVal True n) (mkBin True n)
  in add' inputSize Z (binVal True inputSize) (binVal False inputSize) O (mkBin True inputSize) (mkBin False inputSize)

erased:
  
  let
    constructor Z : Nat
    constructor S : (x) -> Nat
    constructor True : Bool
    constructor False : Bool
    subst = (\z. z)
    constructor I : Bit
    constructor O : Bit
    constructor N : Bin
    constructor C : (lsb) -> (rest) -> Bin
    constructor TB : (hi) -> (lo) -> TwoBits
    adb 
      [_] O O O = TB O O
      [_] I O O = TB O I
      [_] O I O = TB O I
      [_] O O I = TB O I
      [_] I I O = TB I O
      [_] I O I = TB I O
      [_] O I I = TB I O
      [_] I I I = TB I I
    add' 
      [_] cb N N = C cb N
      [_] cb (C xb xn) (C yb yn) = 
        let f 
          [_] ([_] hi lo) = subst (C lo (add' hi xn yn))
        in f (adb cb xb yb)
    foreign inputSize
    mkBin 
      [_] _ Z = N
      [_] True (S n) = C I (mkBin False n)
      [_] False (S n) = C O (mkBin True n)
  in add' O (mkBin True inputSize) (mkBin False inputSize)

