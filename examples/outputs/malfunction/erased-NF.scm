(import (chicken process-context))
(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (True `(True))
    (False `(False))
    (int1 1)
    (int0 0)
    (plusInt (lambda ($x $y) (+ $x $y)))
    (minusInt (lambda ($x $y) (- $x $y)))
    (timesInt (lambda ($x $y) (* $x $y)))
    (intToString (global $Pervasives $string_of_int))
    (ifRaw (lambda ($x $then $else) (switch $x (0 $else) (_ $then))))
    (isZero (lambda (x)
      (((ifRaw x) False) True)))
    (sumFor (lambda (n)
      (lambda (f)
        (letrec* ((g (lambda (_e0)
          (match (list _e0)
            ((('True))
              int0)
            ((('False))
              ((plusInt (f n)) ((sumFor ((minusInt n) int1)) f)))))))
          (g (isZero n))))))
    (boolToInt (lambda (_e0)
      (match (list _e0)
        ((('True))
          int1)
        ((('False))
          int0))))
  )
    (letrec* ((nativePrint (global $Pervasives $print_endline)))
      (letrec* ((g (lambda (_e0)
        (match (list _e0)
          ((('True))
            int0)
          ((('False))
            ((plusInt ((lambda (x)
              (letrec* ((g (lambda (_e0)
                (match (list _e0)
                  ((('True))
                    int0)
                  ((('False))
                    ((plusInt ((lambda (y)
                      (letrec* ((g (lambda (_e0)
                        (match (list _e0)
                          ((('True))
                            int0)
                          ((('False))
                            ((plusInt ((lambda (z)
                              (letrec* ((eqInt_I (lambda ($x $y) (== $x $y))))
                                (boolToInt (((ifRaw ((eqInt_I ((timesInt x) x)) ((plusInt ((timesInt y) y)) ((timesInt z) z)))) True) False)))) y)) ((sumFor ((minusInt y) int1)) (lambda (z)
                              (letrec* ((eqInt_I (lambda ($x $y) (== $x $y))))
                                (boolToInt (((ifRaw ((eqInt_I ((timesInt x) x)) ((plusInt ((timesInt y) y)) ((timesInt z) z)))) True) False)))))))))))
                        (g (((ifRaw y) False) True)))) x)) ((sumFor ((minusInt x) int1)) (lambda (y)
                      (letrec* ((g (lambda (_e0)
                        (match (list _e0)
                          ((('True))
                            int0)
                          ((('False))
                            ((plusInt ((lambda (z)
                              (letrec* ((eqInt_I (lambda ($x $y) (== $x $y))))
                                (boolToInt (((ifRaw ((eqInt_I ((timesInt x) x)) ((plusInt ((timesInt y) y)) ((timesInt z) z)))) True) False)))) y)) ((sumFor ((minusInt y) int1)) (lambda (z)
                              (letrec* ((eqInt_I (lambda ($x $y) (== $x $y))))
                                (boolToInt (((ifRaw ((eqInt_I ((timesInt x) x)) ((plusInt ((timesInt y) y)) ((timesInt z) z)))) True) False)))))))))))
                        (g (((ifRaw y) False) True)))))))))))
                (g (((ifRaw x) False) True)))) ((timesInt ((timesInt ((timesInt ((timesInt ((plusInt int1) int1)) ((plusInt int1) int1))) ((timesInt ((plusInt int1) int1)) ((plusInt int1) int1)))) ((timesInt ((timesInt ((plusInt int1) int1)) ((plusInt int1) int1))) ((timesInt ((plusInt int1) int1)) ((plusInt int1) int1))))) ((plusInt int1) int1)))) ((sumFor ((minusInt ((timesInt ((timesInt ((timesInt ((timesInt ((plusInt int1) int1)) ((plusInt int1) int1))) ((timesInt ((plusInt int1) int1)) ((plusInt int1) int1)))) ((timesInt ((timesInt ((plusInt int1) int1)) ((plusInt int1) int1))) ((timesInt ((plusInt int1) int1)) ((plusInt int1) int1))))) ((plusInt int1) int1))) int1)) (lambda (x)
              (letrec* ((g (lambda (_e0)
                (match (list _e0)
                  ((('True))
                    int0)
                  ((('False))
                    ((plusInt ((lambda (y)
                      (letrec* ((g (lambda (_e0)
                        (match (list _e0)
                          ((('True))
                            int0)
                          ((('False))
                            ((plusInt ((lambda (z)
                              (letrec* ((eqInt_I (lambda ($x $y) (== $x $y))))
                                (boolToInt (((ifRaw ((eqInt_I ((timesInt x) x)) ((plusInt ((timesInt y) y)) ((timesInt z) z)))) True) False)))) y)) ((sumFor ((minusInt y) int1)) (lambda (z)
                              (letrec* ((eqInt_I (lambda ($x $y) (== $x $y))))
                                (boolToInt (((ifRaw ((eqInt_I ((timesInt x) x)) ((plusInt ((timesInt y) y)) ((timesInt z) z)))) True) False)))))))))))
                        (g (((ifRaw y) False) True)))) x)) ((sumFor ((minusInt x) int1)) (lambda (y)
                      (letrec* ((g (lambda (_e0)
                        (match (list _e0)
                          ((('True))
                            int0)
                          ((('False))
                            ((plusInt ((lambda (z)
                              (letrec* ((eqInt_I (lambda ($x $y) (== $x $y))))
                                (boolToInt (((ifRaw ((eqInt_I ((timesInt x) x)) ((plusInt ((timesInt y) y)) ((timesInt z) z)))) True) False)))) y)) ((sumFor ((minusInt y) int1)) (lambda (z)
                              (letrec* ((eqInt_I (lambda ($x $y) (== $x $y))))
                                (boolToInt (((ifRaw ((eqInt_I ((timesInt x) x)) ((plusInt ((timesInt y) y)) ((timesInt z) z)))) True) False)))))))))))
                        (g (((ifRaw y) False) True)))))))))))
                (g (((ifRaw x) False) True)))))))))))
        (nativePrint (intToString (g (((ifRaw ((timesInt ((timesInt ((timesInt ((timesInt ((plusInt int1) int1)) ((plusInt int1) int1))) ((timesInt ((plusInt int1) int1)) ((plusInt int1) int1)))) ((timesInt ((timesInt ((plusInt int1) int1)) ((plusInt int1) int1))) ((timesInt ((plusInt int1) int1)) ((plusInt int1) int1))))) ((plusInt int1) int1))) False) True))))))))
