(import (chicken process-context))
(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (True `(True))
    (False `(False))
    (MkPair (lambda (_x7)
      (lambda (_x8)
        `(MkPair ,_x7 ,_x8))))
    (snd (lambda (_e0)
      (match (list _e0)
        (((_ x y))
          y))))
    (MkSt (lambda (run)
      `(MkSt ,run)))
    (runState (lambda (_e0)
      (match (list _e0)
        (((_ run))
          run))))
    (execState (lambda (x)
      (lambda (s)
        (snd ((runState x) s)))))
    (stGet (MkSt (lambda (s)
      ((MkPair s) s))))
    (stReturn (lambda (x)
      (MkSt (lambda (s)
        ((MkPair s) x)))))
    (stBind (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          (((_ f) g)
            (letrec* (
              (stBind3 (lambda (_e0)
                (lambda (_e1)
                  (match (list _e0 _e1)
                    ((s (_ f))
                      (f s))))))
              (stBind2 (lambda (_e0)
                (lambda (_e1)
                  (match (list _e0 _e1)
                    ((g (_ s x))
                      ((stBind3 s) (g x)))))))
            )
              (MkSt (lambda (s)
                ((stBind2 g) (f s))))))))))
    (ioWrapImpure (lambda (impureF)
      ((stBind stGet) (lambda (w)
        (stReturn (impureF w))))))
    (unsafePerformIO (lambda (x)
      (letrec* ((TheWorld `(TheWorld)))
        ((execState x) TheWorld))))
    (int1 1)
    (int0 0)
    (plusInt (lambda ($x $y) (+ $x $y)))
    (minusInt (lambda ($x $y) (- $x $y)))
    (timesInt (lambda ($x $y) (* $x $y)))
    (intToString (global $Pervasives $string_of_int))
    (ifRaw (lambda ($x $then $else) (switch $x (0 $else) (_ $then))))
    (isZero (lambda (x)
      (((ifRaw x) False) True)))
    (isNonzero (lambda (x)
      (((ifRaw x) True) False)))
    (eqInt (lambda (x)
      (lambda (y)
        (letrec* ((eqInt_I (lambda ($x $y) (== $x $y))))
          (isNonzero ((eqInt_I x) y))))))
    (printString (lambda (s)
      (letrec* ((nativePrint (global $Pervasives $print_endline)))
        (ioWrapImpure (lambda (w)
          (nativePrint s))))))
    (printInt (lambda (i)
      (printString (intToString i))))
    (sumFor (lambda (n)
      (lambda (f)
        (letrec* ((g (lambda (_e0)
          (match (list _e0)
            ((('True))
              int0)
            ((('False))
              ((plusInt (f n)) ((sumFor ((minusInt n) int1)) f)))))))
          (g (isZero n))))))
    (boolToInt (lambda (_e0)
      (match (list _e0)
        ((('True))
          int1)
        ((('False))
          int0))))
    (isPythag (lambda (x)
      (lambda (y)
        (lambda (z)
          (boolToInt ((eqInt ((timesInt x) x)) ((plusInt ((timesInt y) y)) ((timesInt z) z))))))))
    (pythag (lambda (n)
      ((sumFor n) (lambda (x)
        ((sumFor x) (lambda (y)
          ((sumFor y) (lambda (z)
            (((isPythag x) y) z)))))))))
    (main (unsafePerformIO (letrec* (
      (int2 ((plusInt int1) int1))
      (int4 ((timesInt int2) int2))
      (int16 ((timesInt int4) int4))
      (int256 ((timesInt int16) int16))
      (int512 ((timesInt int256) int2))
    )
      (printInt (pythag int512)))))
  )
    main))
