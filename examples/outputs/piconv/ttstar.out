-- vim: ft=ttstar

### Desugared ###

  let
    constructor T : Type
    constructor A : T
    constructor B : T
    const_A : (_x0 : T) -> T = (\x : T. A)
    apply : (f : (x : T) -> T) -> (x : T) -> T = (\f : (_x1 : T) -> T. (\x : T. f x))
    main : T = apply const_A B
  in main

### Elaborated ###

  let
    constructor T : Type
    constructor A : T
    constructor B : T
    const_A : (_x0 : T) -> T = (\x : T. A)
    apply : (f : (x : T) -> T) -> (x : T) -> T = (\f : (_x1 : T) -> T. (\x : T. f x))
    main : T = apply const_A B
  in main

### Evarified ###

  let
    constructor T :1: Type
    constructor A :2: T
    constructor B :3: T
    const_A :4: (_x0 :5: T) -> T = (\x :6: T. A)
    apply :7: (f :8: (x :9: T) -> T) -> (x :10: T) -> T = (\f :11: (_x1 :12: T) -> T. (\x :13: T. f -14- x))
    main :15: T = apply -17- const_A -16- B
  in main

### Constraints ###

[] -> [15]
[4] -> [2]
[5] -> [6,9]
[6] -> [5]
[7] -> [11]
[7,14] -> [13]
[8] -> [11,17]
[9] -> [5,12]
[10] -> [13,16]
[11] -> [8]
[12] -> [9,14]
[13] -> [10]
[14] -> [12]
[15] -> [7]
[15,16] -> [3]
[15,17] -> [4]
[16] -> [10]
[17] -> [8]

### Solution ###

[2,4,7,8,11,15,17,R]

### Annotated ###

  let
    constructor T :E: Type
    constructor A :R: T
    constructor B :E: T
    const_A :R: (_x0 :E: T) -> T = (\x :E: T. A)
    apply :R: (f :R: (x :E: T) -> T) -> (x :E: T) -> T = (\f :R: (_x1 :E: T) -> T. (\x :E: T. f -E- x))
    main :R: T = apply -R- const_A -E- B
  in main

### Specialised ###

  let
    constructor T :E: Type
    constructor A :R: T
    constructor B :E: T
    const_A :R: (_x0 :E: T) -> T = (\x :E: T. A)
    apply :R: (f :R: (x :E: T) -> T) -> (x :E: T) -> T = (\f :R: (_x1 :E: T) -> T. (\x :E: T. f -E- x))
    main :R: T = apply -R- const_A -E- B
  in main

### Final annotation ###

  let
    constructor T :E: Type
    constructor A :R: T
    constructor B :E: T
    const_A :R: (_x0 :E: T) -> T = (\x :E: T. A)
    apply :R: (f :R: (x :E: T) -> T) -> (x :E: T) -> T = (\f :R: (_x1 :E: T) -> T. (\x :E: T. f -E- x))
    main :R: T = apply -R- const_A -E- B
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor A : T
    const_A = A
    apply = (\f. f)
    main = apply const_A
  in main

### Intermediate representation ###

let A = constructor 0
  in let const_A = A
    in let apply = \f. f
      in let main = (apply const_A)
        in main

### Normal forms ###

unerased:
  
  let
    constructor T : Type
    constructor A : T
  in A

erased:
  
  let constructor A : T
  in A

