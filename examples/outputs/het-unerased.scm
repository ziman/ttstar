(require-extension matchable)
(define Type #(Type))
(define (number->peano z s i) (if (= i 0) (vector z) (vector s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Tuple (lambda (x)
      (lambda (y)
        (lambda (z)
          (lambda (w)
            (vector 'Tuple x y z w))))))
    (Bool (vector 'Bool))
    (T (vector 'T))
    (F (vector 'F))
    (Mool (vector 'Mool))
    (Q (vector 'Q))
    (W (vector 'W))
    (U (vector 'U))
    (B (vector 'B))
    (M (vector 'M))
    (ty (lambda (_e0)
      (match (list _e0)
        ((#('B))
          Bool)
        ((#('M))
          Mool))))
    (f (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((_ #('T))
            Bool)
          ((_ #('F))
            Mool)
          ((_ #('Q))
            Bool)
          ((_ #('W))
            Mool)))))
    (main ((((Tuple ((f B) T)) ((f B) F)) ((f M) Q)) ((f M) W)))
  )
    main))
