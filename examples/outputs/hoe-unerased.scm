(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (T `(T))
    (A `(A))
    (B `(B))
    (Op (lambda (x)
      (lambda (y)
        `(Op ,x ,y))))
    (id (lambda (x)
      x))
    (const_A (lambda (x)
      A))
    (f (lambda (g)
      (lambda (z)
        (lambda (h)
          (lambda (w)
            ((Op (g z)) (h w)))))))
    (main ((((f id) B) const_A) B))
  )
    main))
