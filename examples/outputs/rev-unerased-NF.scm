(require-extension matchable)
(define Type #(Type))
(define (number->peano z s i) (if (= i 0) (vector z) (vector s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Bool (vector 'Bool))
    (T (vector 'T))
    (F (vector 'F))
    (List (vector 'List))
    (Nil (vector 'Nil))
    (Cons (lambda (x)
      (lambda (xs)
        (vector 'Cons x xs))))
  )
    ((Cons F) ((Cons T) ((Cons F) ((Cons T) Nil))))))
