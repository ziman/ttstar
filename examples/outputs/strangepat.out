-- vim: ft=ttstar

### Desugared ###

  let
    constructor Bool : Type
    constructor T : Bool
    constructor F : Bool
    constructor Pair : Type
    constructor P : (_x0 : Bool) -> (_x1 : Bool) -> Pair
    fst : (_x2 : (_x3 : Bool) -> Pair) -> Bool 
      y : Bool
        [fst] (P y) = y
    main : Bool = fst (P T)
  in main

### Evarified ###

  let
    constructor Bool :1: Type
    constructor T :2: Bool
    constructor F :3: Bool
    constructor Pair :4: Type
    constructor P :5: (_x0 :6: Bool) -> (_x1 :7: Bool) -> Pair
    fst :8: (_x2 :9: (_x3 :10: Bool) -> Pair) -> Bool 
      y :11: Bool
        [fst] -12- (P -13- y) = y
    main :14: Bool = fst -15- (P -16- T)
  in main

### Constraints ###

[6,12] -> [13]
[6,15] -> [16]
[7,12] -> [10]
[7,15] -> [10]
[9] -> [15]
[9,R] -> [12]
[10,12] -> [7]
[10,15] -> [7]
[11] -> [13]
[12] -> [R]
[12,13] -> [6]
[12,R] -> [9]
[13] -> [12]
[15] -> [9]
[15,16] -> [6]
[15,16,R] -> [2]
[15,R] -> [5]
[R] -> [5,8,11,12,14]

### Solution ###

[2,5,6,8,9,11,12,13,14,15,16,R]

### Annotated ###

  let
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :E: Bool
    constructor Pair :E: Type
    constructor P :R: (_x0 :R: Bool) -> (_x1 :E: Bool) -> Pair
    fst :R: (_x2 :R: (_x3 :E: Bool) -> Pair) -> Bool 
      y :R: Bool
        [fst] -R- (P -R- y) = y
    main :R: Bool = fst -R- (P -R- T)
  in main

### Specialised ###

  let
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :E: Bool
    constructor Pair :E: Type
    constructor P :R: (_x0 :R: Bool) -> (_x1 :E: Bool) -> Pair
    fst :R: (_x2 :R: (_x3 :E: Bool) -> Pair) -> Bool 
      y :R: Bool
        [fst] -R- (P -R- y) = y
    main :R: Bool = fst -R- (P -R- T)
  in main

### Final annotation ###

  let
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :E: Bool
    constructor Pair :E: Type
    constructor P :R: (_x0 :R: Bool) -> (_x1 :E: Bool) -> Pair
    fst :R: (_x2 :R: (_x3 :E: Bool) -> Pair) -> Bool 
      y :R: Bool
        [fst] -R- (P -R- y) = y
    main :R: Bool = fst -R- (P -R- T)
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor T : Bool
    constructor P : (_x0) -> Pair
    fst 
      [_] (P y) = y
    main = fst (P T)
  in main

### Normal forms ###

unerased:
  
  let
    constructor Bool : Type
    constructor T : Bool
  in T

erased:
  
  let constructor T : Bool
  in T

