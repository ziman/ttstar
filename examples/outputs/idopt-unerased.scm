(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (N `(N))
    (Z `(Z))
    (S (lambda (_x0)
      `(S ,_x0)))
    (Fin (lambda (_x1)
      `(Fin ,_x1)))
    (FZ (lambda (n)
      `(FZ ,n)))
    (FS (lambda (n)
      (lambda (x)
        `(FS ,n ,x))))
    (embed (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((_ ('FZ n))
            (FZ (S n)))
          ((_ ('FS n x))
            ((FS (S n)) ((embed n) x)))))))
    (fsuc FS)
    (Pair `(Pair))
    (P (lambda (x)
      (lambda (y)
        `(P ,x ,y))))
    (main ((P ((fsuc (S (S Z))) ((FS (S Z)) (FZ Z)))) ((embed (S (S (S Z)))) ((FS (S (S Z))) ((FS (S Z)) (FZ Z))))))
  )
    main))
