-- vim: ft=idris
  let
    postulate Z : Nat
    postulate S : (x) -> Nat
    postulate True : Bool
    postulate False : Bool
    postulate I : Bit
    postulate O : Bit
    postulate N : Bin
    postulate C : (lsb) -> (rest) -> Bin
    postulate TB : (hi) -> (lo) -> TwoBits
    adb 
      [_] O O O = TB O O
      [_] I O O = TB O I
      [_] O I O = TB O I
      [_] O O I = TB O I
      [_] I I O = TB I O
      [_] I O I = TB I O
      [_] O I I = TB I O
      [_] I I I = TB I I
    add' 
      [_] [_] cb N N = C cb N
      [_] ([_] w) cb (C xb xn) (C yb yn) = 
        let f 
          [_] (TB hi lo) = C lo (add' w hi xn yn)
        in f (adb cb xb yb)
    add = (\w. (\bx. (\by. add' w O bx by)))
    foreign inputSize
    mkBin 
      [_] _ Z = N
      [_] True (S n) = C I (mkBin False n)
      [_] False (S n) = C O (mkBin True n)
    main = 
      let
        x = mkBin True inputSize
        y = mkBin False inputSize
      in add inputSize x y
  in main
