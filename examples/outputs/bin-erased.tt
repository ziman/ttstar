-- vim: ft=ttstar
  let
    constructor Z : Nat
    constructor S : (x) -> Nat
    constructor True : Bool
    constructor False : Bool
    constructor N : Bin
    constructor C : (rest) -> Bin
    add' 
      [_] [_] N N = C N
      [_] ([_] w) (C xn) (C yn) = 
        let f = C (add' w xn yn)
        in f
    add = (\w. (\bx. (\by. add' w bx by)))
    foreign inputSize
    mkBin 
      [_] _ Z = N
      [_] True (S n) = C (mkBin False n)
      [_] False (S n) = C (mkBin True n)
    main = 
      let
        x = mkBin True inputSize
        y = mkBin False inputSize
      in add inputSize x y
  in main
