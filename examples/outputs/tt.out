-- vim: ft=ttstar

### Desugared ###

  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x :R: Nat) -> Nat
    plus : (_x0 : Nat) -> (_x1 : Nat) -> Nat 
      (n : Nat)
         Z n = n
      (m : Nat) (n : Nat)
         (S m) n = S (plus m n)
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    not : (_x2 : Bool) -> Bool 
       True = False
       False = True
    constructor Unit : Type
    constructor MkUnit : Unit
    constructor Pair : (_x3 : Type) -> (_x4 : Type) -> Type
    constructor MkPair : (a : Type) -> (b : Type) -> (_x5 : a) -> (_x6 : b) -> Pair a b
    fst : (a : Type) -> (b : Type) -> (_x7 : Pair a b) -> a 
      (a : Type) (b : Type) (x : a) (y : b)
         a b ({MkPair} [a] [b] x y) = x
    snd : (a : Type) -> (b : Type) -> (_x8 : Pair a b) -> b 
      (a : Type) (b : Type) (x : a) (y : b)
         a b ({MkPair} [a] [b] x y) = y
    constructor Either : (_x9 : Type) -> (_x10 : Type) -> Type
    constructor Left : (a : Type) -> (b : Type) -> (_x11 : a) -> Either a b
    constructor Right : (a : Type) -> (b : Type) -> (_x12 : b) -> Either a b
    id : (a : Type) -> (x : a) -> a = (\a : Type. (\x : a. x))
    constructor Fin : (_x13 : Nat) -> Type
    constructor FZ : (n : Nat) -> Fin (S n)
    constructor FS : (n : Nat) -> (_x14 : Fin n) -> Fin (S n)
    constructor Vect : (_x15 : Nat) -> (_x16 : Type) -> Type
    constructor VN : (a : Type) -> Vect Z a
    constructor VC : (n : Nat) -> (a : Type) -> (x : a) -> (xs : Vect n a) -> Vect (S n) a
    constructor TT : (_x0 : Nat) -> Type
    constructor V : (n : Nat) -> (_x1 : Fin n) -> TT n
    constructor Lam : (n : Nat) -> (_x2 : TT (S n)) -> TT n
    constructor App : (n : Nat) -> (_x3 : TT n) -> (_x4 : TT n) -> TT n
    env : (m : Nat) -> (n : Nat) -> (xs : Vect m (TT n)) -> (_x5 : Fin m) -> TT n 
      (m : Nat) (n : Nat) (x : TT n) (xs : Vect m (TT n))
         [S m] n (VC [m] [TT n] x xs) (FZ m) = x
      (m : Nat) (n : Nat) (x : TT n) (xs : Vect m (TT n)) (i : Fin m)
         [S m] n (VC [m] [TT n] x xs) (FS m i) = env m n xs i
    extendMap : (m : Nat) -> (n : Nat) -> (_x6 : (_x7 : Fin m) -> Fin n) -> (_x8 : Fin (S m)) -> Fin (S n) 
      (m : Nat) (n : Nat) (f : (_x9 : Fin m) -> Fin n)
         m n f (FZ [m]) = FZ n
      (m : Nat) (n : Nat) (f : (_x10 : Fin m) -> Fin n) (i : Fin m)
         m n f (FS [m] i) = FS n (f i)
    mapVars : (m : Nat) -> (n : Nat) -> (_x11 : (_x12 : Fin m) -> Fin n) -> (_x13 : TT m) -> TT n 
      (m : Nat) (n : Nat) (f : (_x14 : Fin m) -> Fin n) (i : Fin m)
         m n f (V [m] i) = V n (f i)
      (m : Nat) (n : Nat) (f : (_x15 : Fin m) -> Fin n) (x : TT (S m))
         m n f (Lam [m] x) = Lam n (mapVars (S m) (S n) (extendMap m n f) x)
      (m : Nat) (n : Nat) (f : (_x16 : Fin m) -> Fin n) (g : TT m) (x : TT m)
         m n f (App [m] g x) = App n (mapVars m n f g) (mapVars m n f x)
    extendSubst : (m : Nat) -> (n : Nat) -> (_x17 : (_x18 : Fin m) -> TT n) -> (_x19 : Fin (S m)) -> TT (S n) 
      (m : Nat) (n : Nat) (f : (_x20 : Fin m) -> TT n)
         m n f (FZ [m]) = V (S n) (FZ n)
      (m : Nat) (n : Nat) (f : (_x21 : Fin m) -> TT n) (i : Fin m)
         m n f (FS [m] i) = mapVars n (S n) (FS n) (f i)
    substVars : (m : Nat) -> (n : Nat) -> (_x22 : (_x23 : Fin m) -> TT n) -> (_x24 : TT m) -> TT n 
      (m : Nat) (n : Nat) (f : (_x25 : Fin m) -> TT n) (i : Fin m)
         m n f (V [m] i) = f i
      (m : Nat) (n : Nat) (f : (_x26 : Fin m) -> TT n) (x : TT (S m))
         m n f (Lam [m] x) = Lam n (substVars (S m) (S n) (extendSubst m n f) x)
      (m : Nat) (n : Nat) (f : (_x27 : Fin m) -> TT n) (g : TT m) (x : TT m)
         m n f (App [m] g x) = App n (substVars m n f g) (substVars m n f x)
    testTm : TT 1 = App 1 (Lam 1 (App 2 (V 2 (FZ 1)) (V 2 (FS 1 (FZ Z))))) (Lam 1 (App 2 (V 2 (FS 1 (FZ Z))) (V 2 (FZ 1))))
    example1 : TT Z = substVars 1 Z (env 1 Z (VC Z (TT Z) (Lam Z (V 1 (FZ Z))) (VN (TT Z)))) testTm
    substTop : (n : Nat) -> (_x28 : TT n) -> (_x29 : Fin (S n)) -> TT n 
      (n : Nat) (tm : TT n)
         n tm (FZ [n]) = tm
      (n : Nat) (tm : TT n) (i : Fin n)
         n tm (FS [n] i) = V n i
    nf : (m : Nat) -> (_x30 : TT m) -> TT m 
      (m : Nat) (i : Fin m)
         m (V [m] i) = V m i
      (m : Nat) (x : TT (S m))
         m (Lam [m] x) = Lam m (nf (S m) x)
      (m : Nat) (f : TT m) (x : TT m)
         m (App [m] f x) = 
          let g : (_x31 : TT m) -> TT m 
            (y : TT (S m))
               (Lam [m] y) = nf m (substVars (S m) m (substTop m (nf m x)) y)
            (f' : TT m)
               f' = App m f' (nf m x)
          in g (nf m f)
    example2 : TT 1 = nf 1 testTm
    constructor Result : Type
    constructor R : (x :R: TT Z) -> (y :R: TT 1) -> Result
    main : Result = R example1 example2
  in main

### Evarified ###

  let
    constructor Nat :1: Type
    constructor Z :2: Nat
    constructor S :3: (x :R: Nat) -> Nat
    plus :4: (_x0 :5: Nat) -> (_x1 :6: Nat) -> Nat 
      (n :7: Nat)
         -8- Z -9- n = n
      (m :10: Nat) (n :11: Nat)
         -12- (S -13- m) -14- n = S -15- (plus -17- m -16- n)
    constructor Bool :18: Type
    constructor True :19: Bool
    constructor False :20: Bool
    not :21: (_x2 :22: Bool) -> Bool 
       -23- True = False
       -24- False = True
    constructor Unit :25: Type
    constructor MkUnit :26: Unit
    constructor Pair :27: (_x3 :28: Type) -> (_x4 :29: Type) -> Type
    constructor MkPair :30: (a :31: Type) -> (b :32: Type) -> (_x5 :33: a) -> (_x6 :34: b) -> Pair -36- a -35- b
    fst :37: (a :38: Type) -> (b :39: Type) -> (_x7 :40: Pair -42- a -41- b) -> a 
      (a :43: Type) (b :44: Type) (x :45: a) (y :46: b)
         -47- a -48- b -49- ({MkPair} -50- [a] -51- [b] -52- x -53- y) = x
    snd :54: (a :55: Type) -> (b :56: Type) -> (_x8 :57: Pair -59- a -58- b) -> b 
      (a :60: Type) (b :61: Type) (x :62: a) (y :63: b)
         -64- a -65- b -66- ({MkPair} -67- [a] -68- [b] -69- x -70- y) = y
    constructor Either :71: (_x9 :72: Type) -> (_x10 :73: Type) -> Type
    constructor Left :74: (a :75: Type) -> (b :76: Type) -> (_x11 :77: a) -> Either -79- a -78- b
    constructor Right :80: (a :81: Type) -> (b :82: Type) -> (_x12 :83: b) -> Either -85- a -84- b
    id :86: (a :87: Type) -> (x :88: a) -> a = (\a :89: Type. (\x :90: a. x))
    constructor Fin :91: (_x13 :92: Nat) -> Type
    constructor FZ :93: (n :94: Nat) -> Fin -95- (S -96- n)
    constructor FS :97: (n :98: Nat) -> (_x14 :99: Fin -100- n) -> Fin -101- (S -102- n)
    constructor Vect :103: (_x15 :104: Nat) -> (_x16 :105: Type) -> Type
    constructor VN :106: (a :107: Type) -> Vect -109- Z -108- a
    constructor VC :110: (n :111: Nat) -> (a :112: Type) -> (x :113: a) -> (xs :114: Vect -116- n -115- a) -> Vect -118- (S -119- n) -117- a
    constructor TT :120: (_x0 :121: Nat) -> Type
    constructor V :122: (n :123: Nat) -> (_x1 :124: Fin -125- n) -> TT -126- n
    constructor Lam :127: (n :128: Nat) -> (_x2 :129: TT -130- (S -131- n)) -> TT -132- n
    constructor App :133: (n :134: Nat) -> (_x3 :135: TT -136- n) -> (_x4 :137: TT -138- n) -> TT -139- n
    env :140: (m :141: Nat) -> (n :142: Nat) -> (xs :143: Vect -145- m -144- (TT -146- n)) -> (_x5 :147: Fin -148- m) -> TT -149- n 
      (m :150: Nat) (n :151: Nat) (x :152: TT -153- n) (xs :154: Vect -156- m -155- (TT -157- n))
         -158- [S -159- m] -160- n -161- (VC -162- [m] -163- [TT -164- n] -165- x -166- xs) -167- (FZ -168- m) = x
      (m :169: Nat) (n :170: Nat) (x :171: TT -172- n) (xs :173: Vect -175- m -174- (TT -176- n)) (i :177: Fin -178- m)
         -179- [S -180- m] -181- n -182- (VC -183- [m] -184- [TT -185- n] -186- x -187- xs) -188- (FS -189- m -190- i) = env -194- m -193- n -192- xs -191- i
    extendMap :195: (m :196: Nat) -> (n :197: Nat) -> (_x6 :198: (_x7 :199: Fin -200- m) -> Fin -201- n) -> (_x8 :202: Fin -203- (S -204- m)) -> Fin -205- (S -206- n) 
      (m :207: Nat) (n :208: Nat) (f :209: (_x9 :210: Fin -211- m) -> Fin -212- n)
         -213- m -214- n -215- f -216- (FZ -217- [m]) = FZ -218- n
      (m :219: Nat) (n :220: Nat) (f :221: (_x10 :222: Fin -223- m) -> Fin -224- n) (i :225: Fin -226- m)
         -227- m -228- n -229- f -230- (FS -231- [m] -232- i) = FS -234- n -233- (f -235- i)
    mapVars :236: (m :237: Nat) -> (n :238: Nat) -> (_x11 :239: (_x12 :240: Fin -241- m) -> Fin -242- n) -> (_x13 :243: TT -244- m) -> TT -245- n 
      (m :246: Nat) (n :247: Nat) (f :248: (_x14 :249: Fin -250- m) -> Fin -251- n) (i :252: Fin -253- m)
         -254- m -255- n -256- f -257- (V -258- [m] -259- i) = V -261- n -260- (f -262- i)
      (m :263: Nat) (n :264: Nat) (f :265: (_x15 :266: Fin -267- m) -> Fin -268- n) (x :269: TT -270- (S -271- m))
         -272- m -273- n -274- f -275- (Lam -276- [m] -277- x) = Lam -279- n -278- (mapVars -283- (S -284- m) -282- (S -285- n) -281- (extendMap -288- m -287- n -286- f) -280- x)
      (m :289: Nat) (n :290: Nat) (f :291: (_x16 :292: Fin -293- m) -> Fin -294- n) (g :295: TT -296- m) (x :297: TT -298- m)
         -299- m -300- n -301- f -302- (App -303- [m] -304- g -305- x) = App -308- n -307- (mapVars -312- m -311- n -310- f -309- g) -306- (mapVars -316- m -315- n -314- f -313- x)
    extendSubst :317: (m :318: Nat) -> (n :319: Nat) -> (_x17 :320: (_x18 :321: Fin -322- m) -> TT -323- n) -> (_x19 :324: Fin -325- (S -326- m)) -> TT -327- (S -328- n) 
      (m :329: Nat) (n :330: Nat) (f :331: (_x20 :332: Fin -333- m) -> TT -334- n)
         -335- m -336- n -337- f -338- (FZ -339- [m]) = V -341- (S -342- n) -340- (FZ -343- n)
      (m :344: Nat) (n :345: Nat) (f :346: (_x21 :347: Fin -348- m) -> TT -349- n) (i :350: Fin -351- m)
         -352- m -353- n -354- f -355- (FS -356- [m] -357- i) = mapVars -361- n -360- (S -362- n) -359- (FS -363- n) -358- (f -364- i)
    substVars :365: (m :366: Nat) -> (n :367: Nat) -> (_x22 :368: (_x23 :369: Fin -370- m) -> TT -371- n) -> (_x24 :372: TT -373- m) -> TT -374- n 
      (m :375: Nat) (n :376: Nat) (f :377: (_x25 :378: Fin -379- m) -> TT -380- n) (i :381: Fin -382- m)
         -383- m -384- n -385- f -386- (V -387- [m] -388- i) = f -389- i
      (m :390: Nat) (n :391: Nat) (f :392: (_x26 :393: Fin -394- m) -> TT -395- n) (x :396: TT -397- (S -398- m))
         -399- m -400- n -401- f -402- (Lam -403- [m] -404- x) = Lam -406- n -405- (substVars -410- (S -411- m) -409- (S -412- n) -408- (extendSubst -415- m -414- n -413- f) -407- x)
      (m :416: Nat) (n :417: Nat) (f :418: (_x27 :419: Fin -420- m) -> TT -421- n) (g :422: TT -423- m) (x :424: TT -425- m)
         -426- m -427- n -428- f -429- (App -430- [m] -431- g -432- x) = App -435- n -434- (substVars -439- m -438- n -437- f -436- g) -433- (substVars -443- m -442- n -441- f -440- x)
    testTm :444: TT -445- 1 = App -449- 1 -448- (Lam -452- 1 -451- (App -456- 2 -455- (V -460- 2 -459- (FZ -463- 1)) -454- (V -466- 2 -465- (FS -470- 1 -469- (FZ -472- Z))))) -447- (Lam -474- 1 -473- (App -478- 2 -477- (V -482- 2 -481- (FS -486- 1 -485- (FZ -488- Z))) -476- (V -490- 2 -489- (FZ -493- 1))))
    example1 :495: TT -496- Z = substVars -500- 1 -499- Z -498- (env -504- 1 -503- Z -502- (VC -509- Z -508- (TT -510- Z) -507- (Lam -512- Z -511- (V -514- 1 -513- (FZ -516- Z))) -506- (VN -517- (TT -518- Z)))) -497- testTm
    substTop :519: (n :520: Nat) -> (_x28 :521: TT -522- n) -> (_x29 :523: Fin -524- (S -525- n)) -> TT -526- n 
      (n :527: Nat) (tm :528: TT -529- n)
         -530- n -531- tm -532- (FZ -533- [n]) = tm
      (n :534: Nat) (tm :535: TT -536- n) (i :537: Fin -538- n)
         -539- n -540- tm -541- (FS -542- [n] -543- i) = V -545- n -544- i
    nf :546: (m :547: Nat) -> (_x30 :548: TT -549- m) -> TT -550- m 
      (m :551: Nat) (i :552: Fin -553- m)
         -554- m -555- (V -556- [m] -557- i) = V -559- m -558- i
      (m :560: Nat) (x :561: TT -562- (S -563- m))
         -564- m -565- (Lam -566- [m] -567- x) = Lam -569- m -568- (nf -571- (S -572- m) -570- x)
      (m :573: Nat) (f :574: TT -575- m) (x :576: TT -577- m)
         -578- m -579- (App -580- [m] -581- f -582- x) = 
          let g :583: (_x31 :584: TT -585- m) -> TT -586- m 
            (y :587: TT -588- (S -589- m))
               -590- (Lam -591- [m] -592- y) = nf -594- m -593- (substVars -598- (S -599- m) -597- m -596- (substTop -601- m -600- (nf -603- m -602- x)) -595- y)
            (f' :604: TT -605- m)
               -606- f' = App -609- m -608- f' -607- (nf -611- m -610- x)
          in g -612- (nf -614- m -613- f)
    example2 :615: TT -616- 1 = nf -619- 1 -618- testTm
    constructor Result :621: Type
    constructor R :622: (x :R: TT -623- Z) -> (y :R: TT -624- 1) -> Result
    main :626: Result = R -628- example1 -627- example2
  in main

### Constraints ###

[] -> [93,97,99,106,110,113,114,122,124,127,129,133,135,137,140,143,147,152,161,165,166,167,173,177,182,186,187,188,190,191,192,195,198,199,202,210,215,216,221,222,225,229,230,232,233,235,236,239,240,243,248,249,252,256,257,259,260,262,265,266,269,274,275,277,278,280,281,286,291,292,295,297,301,302,304,305,306,307,309,310,313,314,317,320,321,324,332,337,338,340,346,347,350,354,355,357,358,359,364,365,368,369,372,377,378,381,385,386,388,389,392,393,396,401,402,404,405,407,408,413,418,419,422,424,428,429,431,432,433,434,436,437,440,441,444,447,448,451,454,455,459,465,469,473,476,477,481,485,489,495,497,498,502,506,507,511,513,519,521,523,528,531,532,537,540,541,543,544,546,548,552,555,557,558,561,565,567,568,570,574,576,579,581,582,583,584,587,590,592,593,595,596,600,602,604,606,607,608,610,612,613,615,618,622,627,628,R]
[94] -> [2,3,168,208,217,218,330,339,343,463,464,472,488,493,494,516,533]
[95] -> [100,125,148,203,205,325,524]
[96] -> [159,204,206,326,342,461,471,487,491,515,525]
[98] -> [2,3,189,220,231,234,345,356,363,470,471,486,487,542]
[100] -> [95,178,224,226,241,351,538]
[101] -> [125,148,203,205,242,325,524]
[102] -> [180,204,206,326,362,467,483,525]
[107] -> [120,517]
[107,121] -> [2,518]
[107,518] -> [121]
[108] -> [115]
[109] -> [116]
[111] -> [2,162,183,509]
[112] -> [120,163,184,508]
[112,121] -> [2,510]
[112,510] -> [121]
[115] -> [108,155,174]
[116] -> [109,156,175]
[117] -> [144]
[118] -> [145]
[119] -> [159,180,505]
[121,163] -> [151,164]
[121,184] -> [170,185]
[123] -> [2,3,247,258,261,330,341,342,387,460,461,462,466,467,468,482,483,484,490,491,492,514,515,534,545,551,556,559]
[125] -> [95,101,251,253,382,538,553]
[126] -> [130,136,138,244,245,327,373,526,549,550]
[128] -> [2,3,264,276,279,391,403,406,452,453,474,475,512,560,566,569,591]
[130] -> [126,139,245,270,374,397,550,562,588]
[131] -> [271,285,398,412,457,479,515,563,572,589]
[132] -> [136,138,244,245,373,374,510,549,550,585]
[134] -> [2,3,290,303,308,417,430,435,449,450,456,457,458,478,479,480,573,580,609]
[136] -> [126,132,245,296,374,423,575,605]
[138] -> [126,132,245,298,374,425,550,577]
[139] -> [130,244,245,373,374,445,549,586]
[141] -> [2,3,158,169,179,194,504,505]
[142] -> [2,160,170,181,193,503]
[144] -> [117,174]
[145] -> [118,175]
[146] -> [164,176,185,510]
[148] -> [95,101,178,370]
[149] -> [149,153,371]
[150] -> [168]
[151] -> [160]
[153] -> [149,164]
[155] -> [115]
[156] -> [116]
[157] -> [164]
[158] -> [3,141,150,159]
[159] -> [96,119]
[160] -> [142]
[162] -> [111,150]
[163] -> [112,120]
[163,164] -> [121]
[164] -> [146,153,157]
[168] -> [94]
[169] -> [189]
[170] -> [181]
[172] -> [185]
[174] -> [115,144]
[175] -> [116,145]
[176] -> [146,185]
[178] -> [100,148]
[179] -> [3,141,169,180]
[180] -> [102,119]
[181] -> [142]
[183] -> [111,169]
[184] -> [112,120]
[184,185] -> [121]
[185] -> [146,172,176]
[189] -> [98]
[193] -> [142]
[194] -> [141]
[196] -> [213,227,263,288]
[197] -> [214,228,264,287]
[200] -> [211,223,267]
[201] -> [212,224,268]
[203] -> [95,101,241]
[204] -> [96,102,284]
[205] -> [95,101,242]
[206] -> [96,102,285]
[207] -> [213]
[208] -> [214]
[211] -> [200]
[212] -> [201]
[213] -> [196]
[214] -> [197]
[217] -> [94,207]
[218] -> [94]
[219] -> [227]
[220] -> [228]
[223] -> [200,226]
[224] -> [100,201]
[226] -> [100,223]
[227] -> [196]
[228] -> [197]
[231] -> [98,219]
[234] -> [98]
[237] -> [3,254,263,272,283,284,289,299,312,316,345,361]
[238] -> [3,255,264,273,282,285,290,300,311,315,345,360,362]
[241] -> [100,203,250,267,293]
[242] -> [101,205,251,268,294]
[244] -> [126,132,139,270,296,298,349]
[245] -> [126,130,132,136,138,139,327]
[246] -> [254]
[247] -> [255]
[250] -> [241,253]
[251] -> [125,242]
[253] -> [125,250]
[254] -> [237]
[255] -> [238]
[258] -> [123,246]
[261] -> [123]
[263] -> [272]
[264] -> [273]
[267] -> [200,241]
[268] -> [201,242]
[270] -> [130,244]
[271] -> [131,284]
[272] -> [237]
[273] -> [238]
[276] -> [128,263]
[279] -> [128]
[282] -> [238]
[283] -> [237]
[284] -> [204,271]
[285] -> [131,206]
[287] -> [197]
[288] -> [196]
[289] -> [299]
[290] -> [300]
[293] -> [241]
[294] -> [242]
[296] -> [136,244]
[298] -> [138,244]
[299] -> [237]
[300] -> [238]
[303] -> [134,289]
[308] -> [134]
[311] -> [238]
[312] -> [237]
[315] -> [238]
[316] -> [237]
[318] -> [335,352,390,415]
[319] -> [336,353,391,414]
[322] -> [333,348,394]
[323] -> [334,349,395]
[325] -> [95,101,370]
[326] -> [96,102,411]
[327] -> [126,245,371]
[328] -> [342,362,412]
[329] -> [335]
[330] -> [336]
[333] -> [322]
[334] -> [323]
[335] -> [318]
[336] -> [319]
[339] -> [94,329]
[341] -> [123]
[342] -> [96,328]
[343] -> [94]
[344] -> [352]
[345] -> [353]
[348] -> [322,351]
[349] -> [244,323]
[351] -> [100,348]
[352] -> [318]
[353] -> [319]
[356] -> [98,344]
[360] -> [238]
[361] -> [237]
[362] -> [102,328]
[363] -> [98]
[366] -> [2,3,383,390,399,410,411,416,426,439,443,500,501,573,598,599]
[367] -> [2,3,384,391,400,409,412,417,427,438,442,499,573,597]
[370] -> [148,325,379,394,420,524]
[371] -> [149,327,380,395,421,526]
[373] -> [126,132,139,397,423,425,445,588]
[374] -> [130,132,136,138,139,380,496,549]
[375] -> [383]
[376] -> [384]
[379] -> [370,382]
[380] -> [371,374]
[382] -> [125,379]
[383] -> [366]
[384] -> [367]
[387] -> [123,375]
[390] -> [399]
[391] -> [400]
[394] -> [322,370]
[395] -> [323,371]
[397] -> [130,373]
[398] -> [131,411]
[399] -> [366]
[400] -> [367]
[403] -> [128,390]
[406] -> [128]
[409] -> [367]
[410] -> [366]
[411] -> [326,398]
[412] -> [131,328]
[414] -> [319]
[415] -> [318]
[416] -> [426]
[417] -> [427]
[420] -> [370]
[421] -> [371]
[423] -> [136,373]
[425] -> [138,373]
[426] -> [366]
[427] -> [367]
[430] -> [134,416]
[435] -> [134]
[438] -> [367]
[439] -> [366]
[442] -> [367]
[443] -> [366]
[445] -> [139,373,549]
[446] -> [450,501,620]
[449] -> [134]
[450] -> [446,453,475]
[452] -> [128]
[453] -> [450,458]
[456] -> [134]
[457] -> [131,461,467]
[458] -> [453,462,468]
[460] -> [123]
[461] -> [96,457]
[462] -> [458,464]
[463] -> [94]
[464] -> [462]
[466] -> [123]
[467] -> [102,457]
[468] -> [458,471]
[470] -> [98]
[471] -> [96,468]
[472] -> [94]
[474] -> [128]
[475] -> [450,480]
[478] -> [134]
[479] -> [131,483,491]
[480] -> [475,484,492]
[482] -> [123]
[483] -> [102,479]
[484] -> [480,487]
[486] -> [98]
[487] -> [96,484]
[488] -> [94]
[490] -> [123]
[491] -> [96,479]
[492] -> [480,494]
[493] -> [94]
[494] -> [492]
[496] -> [374,623]
[499] -> [367]
[500] -> [366]
[501] -> [446,505]
[503] -> [142]
[504] -> [141]
[505] -> [119,501]
[508] -> [112]
[509] -> [111]
[510] -> [132,146,518]
[512] -> [128]
[514] -> [123]
[515] -> [96,131]
[516] -> [94]
[517] -> [107]
[518] -> [510]
[520] -> [530,539,573,601]
[522] -> [529,536,550]
[524] -> [95,101,370]
[525] -> [96,102,599]
[526] -> [126,371,529]
[527] -> [530]
[529] -> [522,526]
[530] -> [520]
[533] -> [94,527]
[534] -> [539]
[536] -> [522]
[538] -> [100,125]
[539] -> [520]
[542] -> [98,534]
[545] -> [123]
[547] -> [2,3,554,560,564,571,572,573,578,594,603,611,614,619,620]
[549] -> [126,132,139,374,445,562,575,577]
[550] -> [126,130,132,138,522,585,586,616]
[551] -> [554]
[553] -> [125]
[554] -> [547]
[556] -> [123,551]
[559] -> [123]
[560] -> [564]
[562] -> [130,549]
[563] -> [131,572]
[564] -> [547]
[566] -> [128,560]
[569] -> [128]
[571] -> [547]
[572] -> [131,563]
[573] -> [578]
[575] -> [136,549]
[577] -> [138,549]
[578] -> [547]
[580] -> [134,573]
[585] -> [132,550,605]
[586] -> [139,550]
[588] -> [130,373]
[589] -> [131,599]
[591] -> [128,573]
[594] -> [547]
[597] -> [367]
[598] -> [366]
[599] -> [525,589]
[601] -> [520]
[603] -> [547]
[605] -> [136,585]
[609] -> [134]
[611] -> [547]
[614] -> [547]
[616] -> [550,624]
[617] -> [620,625]
[619] -> [547]
[620] -> [446,617]
[623] -> [496]
[624] -> [616]
[625] -> [617]
[R] -> [626]

### Solution ###

[93,97,99,106,110,113,114,122,124,127,129,133,135,137,140,143,147,152,161,165,166,167,173,177,182,186,187,188,190,191,192,195,198,199,202,210,215,216,221,222,225,229,230,232,233,235,236,239,240,243,248,249,252,256,257,259,260,262,265,266,269,274,275,277,278,280,281,286,291,292,295,297,301,302,304,305,306,307,309,310,313,314,317,320,321,324,332,337,338,340,346,347,350,354,355,357,358,359,364,365,368,369,372,377,378,381,385,386,388,389,392,393,396,401,402,404,405,407,408,413,418,419,422,424,428,429,431,432,433,434,436,437,440,441,444,447,448,451,454,455,459,465,469,473,476,477,481,485,489,495,497,498,502,506,507,511,513,519,521,523,528,531,532,537,540,541,543,544,546,548,552,555,557,558,561,565,567,568,570,574,576,579,581,582,583,584,587,590,592,593,595,596,600,602,604,606,607,608,610,612,613,615,618,622,626,627,628,R]

### Annotated ###

  let
    constructor Nat :E: Type
    constructor Z :E: Nat
    constructor S :E: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      (n :E: Nat)
         -E- Z -E- n = n
      (m :E: Nat) (n :E: Nat)
         -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    not :E: (_x2 :E: Bool) -> Bool 
       -E- True = False
       -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :E: Unit
    constructor Pair :E: (_x3 :E: Type) -> (_x4 :E: Type) -> Type
    constructor MkPair :E: (a :E: Type) -> (b :E: Type) -> (_x5 :E: a) -> (_x6 :E: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: Pair -E- a -E- b) -> a 
      (a :E: Type) (b :E: Type) (x :E: a) (y :E: b)
         -E- a -E- b -E- ({MkPair} -E- [a] -E- [b] -E- x -E- y) = x
    snd :E: (a :E: Type) -> (b :E: Type) -> (_x8 :E: Pair -E- a -E- b) -> b 
      (a :E: Type) (b :E: Type) (x :E: a) (y :E: b)
         -E- a -E- b -E- ({MkPair} -E- [a] -E- [b] -E- x -E- y) = y
    constructor Either :E: (_x9 :E: Type) -> (_x10 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x11 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x12 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x13 :E: Nat) -> Type
    constructor FZ :R: (n :E: Nat) -> Fin -E- (S -E- n)
    constructor FS :R: (n :E: Nat) -> (_x14 :R: Fin -E- n) -> Fin -E- (S -E- n)
    constructor Vect :E: (_x15 :E: Nat) -> (_x16 :E: Type) -> Type
    constructor VN :R: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :R: (n :E: Nat) -> (a :E: Type) -> (x :R: a) -> (xs :R: Vect -E- n -E- a) -> Vect -E- (S -E- n) -E- a
    constructor TT :E: (_x0 :E: Nat) -> Type
    constructor V :R: (n :E: Nat) -> (_x1 :R: Fin -E- n) -> TT -E- n
    constructor Lam :R: (n :E: Nat) -> (_x2 :R: TT -E- (S -E- n)) -> TT -E- n
    constructor App :R: (n :E: Nat) -> (_x3 :R: TT -E- n) -> (_x4 :R: TT -E- n) -> TT -E- n
    env :R: (m :E: Nat) -> (n :E: Nat) -> (xs :R: Vect -E- m -E- (TT -E- n)) -> (_x5 :R: Fin -E- m) -> TT -E- n 
      (m :E: Nat) (n :E: Nat) (x :R: TT -E- n) (xs :E: Vect -E- m -E- (TT -E- n))
         -E- [S -E- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FZ -E- m) = x
      (m :E: Nat) (n :E: Nat) (x :E: TT -E- n) (xs :R: Vect -E- m -E- (TT -E- n)) (i :R: Fin -E- m)
         -E- [S -E- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FS -E- m -R- i) = env -E- m -E- n -R- xs -R- i
    extendMap :R: (m :E: Nat) -> (n :E: Nat) -> (_x6 :R: (_x7 :R: Fin -E- m) -> Fin -E- n) -> (_x8 :R: Fin -E- (S -E- m)) -> Fin -E- (S -E- n) 
      (m :E: Nat) (n :E: Nat) (f :E: (_x9 :R: Fin -E- m) -> Fin -E- n)
         -E- m -E- n -R- f -R- (FZ -E- [m]) = FZ -E- n
      (m :E: Nat) (n :E: Nat) (f :R: (_x10 :R: Fin -E- m) -> Fin -E- n) (i :R: Fin -E- m)
         -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = FS -E- n -R- (f -R- i)
    mapVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x11 :R: (_x12 :R: Fin -E- m) -> Fin -E- n) -> (_x13 :R: TT -E- m) -> TT -E- n 
      (m :E: Nat) (n :E: Nat) (f :R: (_x14 :R: Fin -E- m) -> Fin -E- n) (i :R: Fin -E- m)
         -E- m -E- n -R- f -R- (V -E- [m] -R- i) = V -E- n -R- (f -R- i)
      (m :E: Nat) (n :E: Nat) (f :R: (_x15 :R: Fin -E- m) -> Fin -E- n) (x :R: TT -E- (S -E- m))
         -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (mapVars -E- (S -E- m) -E- (S -E- n) -R- (extendMap -E- m -E- n -R- f) -R- x)
      (m :E: Nat) (n :E: Nat) (f :R: (_x16 :R: Fin -E- m) -> Fin -E- n) (g :R: TT -E- m) (x :R: TT -E- m)
         -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (mapVars -E- m -E- n -R- f -R- g) -R- (mapVars -E- m -E- n -R- f -R- x)
    extendSubst :R: (m :E: Nat) -> (n :E: Nat) -> (_x17 :R: (_x18 :R: Fin -E- m) -> TT -E- n) -> (_x19 :R: Fin -E- (S -E- m)) -> TT -E- (S -E- n) 
      (m :E: Nat) (n :E: Nat) (f :E: (_x20 :R: Fin -E- m) -> TT -E- n)
         -E- m -E- n -R- f -R- (FZ -E- [m]) = V -E- (S -E- n) -R- (FZ -E- n)
      (m :E: Nat) (n :E: Nat) (f :R: (_x21 :R: Fin -E- m) -> TT -E- n) (i :R: Fin -E- m)
         -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = mapVars -E- n -E- (S -E- n) -R- (FS -E- n) -R- (f -R- i)
    substVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x22 :R: (_x23 :R: Fin -E- m) -> TT -E- n) -> (_x24 :R: TT -E- m) -> TT -E- n 
      (m :E: Nat) (n :E: Nat) (f :R: (_x25 :R: Fin -E- m) -> TT -E- n) (i :R: Fin -E- m)
         -E- m -E- n -R- f -R- (V -E- [m] -R- i) = f -R- i
      (m :E: Nat) (n :E: Nat) (f :R: (_x26 :R: Fin -E- m) -> TT -E- n) (x :R: TT -E- (S -E- m))
         -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (substVars -E- (S -E- m) -E- (S -E- n) -R- (extendSubst -E- m -E- n -R- f) -R- x)
      (m :E: Nat) (n :E: Nat) (f :R: (_x27 :R: Fin -E- m) -> TT -E- n) (g :R: TT -E- m) (x :R: TT -E- m)
         -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (substVars -E- m -E- n -R- f -R- g) -R- (substVars -E- m -E- n -R- f -R- x)
    testTm :R: TT -E- 1 = App -E- 1 -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FZ -E- 1)) -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))) -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (V -E- 2 -R- (FZ -E- 1))))
    example1 :R: TT -E- Z = substVars -E- 1 -E- Z -R- (env -E- 1 -E- Z -R- (VC -E- Z -E- (TT -E- Z) -R- (Lam -E- Z -R- (V -E- 1 -R- (FZ -E- Z))) -R- (VN -E- (TT -E- Z)))) -R- testTm
    substTop :R: (n :E: Nat) -> (_x28 :R: TT -E- n) -> (_x29 :R: Fin -E- (S -E- n)) -> TT -E- n 
      (n :E: Nat) (tm :R: TT -E- n)
         -E- n -R- tm -R- (FZ -E- [n]) = tm
      (n :E: Nat) (tm :E: TT -E- n) (i :R: Fin -E- n)
         -E- n -R- tm -R- (FS -E- [n] -R- i) = V -E- n -R- i
    nf :R: (m :E: Nat) -> (_x30 :R: TT -E- m) -> TT -E- m 
      (m :E: Nat) (i :R: Fin -E- m)
         -E- m -R- (V -E- [m] -R- i) = V -E- m -R- i
      (m :E: Nat) (x :R: TT -E- (S -E- m))
         -E- m -R- (Lam -E- [m] -R- x) = Lam -E- m -R- (nf -E- (S -E- m) -R- x)
      (m :E: Nat) (f :R: TT -E- m) (x :R: TT -E- m)
         -E- m -R- (App -E- [m] -R- f -R- x) = 
          let g :R: (_x31 :R: TT -E- m) -> TT -E- m 
            (y :R: TT -E- (S -E- m))
               -R- (Lam -E- [m] -R- y) = nf -E- m -R- (substVars -E- (S -E- m) -E- m -R- (substTop -E- m -R- (nf -E- m -R- x)) -R- y)
            (f' :R: TT -E- m)
               -R- f' = App -E- m -R- f' -R- (nf -E- m -R- x)
          in g -R- (nf -E- m -R- f)
    example2 :R: TT -E- 1 = nf -E- 1 -R- testTm
    constructor Result :E: Type
    constructor R :R: (x :R: TT -E- Z) -> (y :R: TT -E- 1) -> Result
    main :R: Result = R -R- example1 -R- example2
  in main

### Specialised ###

  let
    constructor Nat :E: Type
    constructor Z :E: Nat
    constructor S :E: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      (n :E: Nat)
         -E- Z -E- n = n
      (m :E: Nat) (n :E: Nat)
         -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    not :E: (_x2 :E: Bool) -> Bool 
       -E- True = False
       -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :E: Unit
    constructor Pair :E: (_x3 :E: Type) -> (_x4 :E: Type) -> Type
    constructor MkPair :E: (a :E: Type) -> (b :E: Type) -> (_x5 :E: a) -> (_x6 :E: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: Pair -E- a -E- b) -> a 
      (a :E: Type) (b :E: Type) (x :E: a) (y :E: b)
         -E- a -E- b -E- ({MkPair} -E- [a] -E- [b] -E- x -E- y) = x
    snd :E: (a :E: Type) -> (b :E: Type) -> (_x8 :E: Pair -E- a -E- b) -> b 
      (a :E: Type) (b :E: Type) (x :E: a) (y :E: b)
         -E- a -E- b -E- ({MkPair} -E- [a] -E- [b] -E- x -E- y) = y
    constructor Either :E: (_x9 :E: Type) -> (_x10 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x11 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x12 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x13 :E: Nat) -> Type
    constructor FZ :R: (n :E: Nat) -> Fin -E- (S -E- n)
    constructor FS :R: (n :E: Nat) -> (_x14 :R: Fin -E- n) -> Fin -E- (S -E- n)
    constructor Vect :E: (_x15 :E: Nat) -> (_x16 :E: Type) -> Type
    constructor VN :R: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :R: (n :E: Nat) -> (a :E: Type) -> (x :R: a) -> (xs :R: Vect -E- n -E- a) -> Vect -E- (S -E- n) -E- a
    constructor TT :E: (_x0 :E: Nat) -> Type
    constructor V :R: (n :E: Nat) -> (_x1 :R: Fin -E- n) -> TT -E- n
    constructor Lam :R: (n :E: Nat) -> (_x2 :R: TT -E- (S -E- n)) -> TT -E- n
    constructor App :R: (n :E: Nat) -> (_x3 :R: TT -E- n) -> (_x4 :R: TT -E- n) -> TT -E- n
    env :R: (m :E: Nat) -> (n :E: Nat) -> (xs :R: Vect -E- m -E- (TT -E- n)) -> (_x5 :R: Fin -E- m) -> TT -E- n 
      (m :E: Nat) (n :E: Nat) (x :R: TT -E- n) (xs :E: Vect -E- m -E- (TT -E- n))
         -E- [S -E- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FZ -E- m) = x
      (m :E: Nat) (n :E: Nat) (x :E: TT -E- n) (xs :R: Vect -E- m -E- (TT -E- n)) (i :R: Fin -E- m)
         -E- [S -E- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FS -E- m -R- i) = env -E- m -E- n -R- xs -R- i
    extendMap :R: (m :E: Nat) -> (n :E: Nat) -> (_x6 :R: (_x7 :R: Fin -E- m) -> Fin -E- n) -> (_x8 :R: Fin -E- (S -E- m)) -> Fin -E- (S -E- n) 
      (m :E: Nat) (n :E: Nat) (f :E: (_x9 :R: Fin -E- m) -> Fin -E- n)
         -E- m -E- n -R- f -R- (FZ -E- [m]) = FZ -E- n
      (m :E: Nat) (n :E: Nat) (f :R: (_x10 :R: Fin -E- m) -> Fin -E- n) (i :R: Fin -E- m)
         -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = FS -E- n -R- (f -R- i)
    mapVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x11 :R: (_x12 :R: Fin -E- m) -> Fin -E- n) -> (_x13 :R: TT -E- m) -> TT -E- n 
      (m :E: Nat) (n :E: Nat) (f :R: (_x14 :R: Fin -E- m) -> Fin -E- n) (i :R: Fin -E- m)
         -E- m -E- n -R- f -R- (V -E- [m] -R- i) = V -E- n -R- (f -R- i)
      (m :E: Nat) (n :E: Nat) (f :R: (_x15 :R: Fin -E- m) -> Fin -E- n) (x :R: TT -E- (S -E- m))
         -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (mapVars -E- (S -E- m) -E- (S -E- n) -R- (extendMap -E- m -E- n -R- f) -R- x)
      (m :E: Nat) (n :E: Nat) (f :R: (_x16 :R: Fin -E- m) -> Fin -E- n) (g :R: TT -E- m) (x :R: TT -E- m)
         -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (mapVars -E- m -E- n -R- f -R- g) -R- (mapVars -E- m -E- n -R- f -R- x)
    extendSubst :R: (m :E: Nat) -> (n :E: Nat) -> (_x17 :R: (_x18 :R: Fin -E- m) -> TT -E- n) -> (_x19 :R: Fin -E- (S -E- m)) -> TT -E- (S -E- n) 
      (m :E: Nat) (n :E: Nat) (f :E: (_x20 :R: Fin -E- m) -> TT -E- n)
         -E- m -E- n -R- f -R- (FZ -E- [m]) = V -E- (S -E- n) -R- (FZ -E- n)
      (m :E: Nat) (n :E: Nat) (f :R: (_x21 :R: Fin -E- m) -> TT -E- n) (i :R: Fin -E- m)
         -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = mapVars -E- n -E- (S -E- n) -R- (FS -E- n) -R- (f -R- i)
    substVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x22 :R: (_x23 :R: Fin -E- m) -> TT -E- n) -> (_x24 :R: TT -E- m) -> TT -E- n 
      (m :E: Nat) (n :E: Nat) (f :R: (_x25 :R: Fin -E- m) -> TT -E- n) (i :R: Fin -E- m)
         -E- m -E- n -R- f -R- (V -E- [m] -R- i) = f -R- i
      (m :E: Nat) (n :E: Nat) (f :R: (_x26 :R: Fin -E- m) -> TT -E- n) (x :R: TT -E- (S -E- m))
         -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (substVars -E- (S -E- m) -E- (S -E- n) -R- (extendSubst -E- m -E- n -R- f) -R- x)
      (m :E: Nat) (n :E: Nat) (f :R: (_x27 :R: Fin -E- m) -> TT -E- n) (g :R: TT -E- m) (x :R: TT -E- m)
         -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (substVars -E- m -E- n -R- f -R- g) -R- (substVars -E- m -E- n -R- f -R- x)
    testTm :R: TT -E- 1 = App -E- 1 -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FZ -E- 1)) -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))) -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (V -E- 2 -R- (FZ -E- 1))))
    example1 :R: TT -E- Z = substVars -E- 1 -E- Z -R- (env -E- 1 -E- Z -R- (VC -E- Z -E- (TT -E- Z) -R- (Lam -E- Z -R- (V -E- 1 -R- (FZ -E- Z))) -R- (VN -E- (TT -E- Z)))) -R- testTm
    substTop :R: (n :E: Nat) -> (_x28 :R: TT -E- n) -> (_x29 :R: Fin -E- (S -E- n)) -> TT -E- n 
      (n :E: Nat) (tm :R: TT -E- n)
         -E- n -R- tm -R- (FZ -E- [n]) = tm
      (n :E: Nat) (tm :E: TT -E- n) (i :R: Fin -E- n)
         -E- n -R- tm -R- (FS -E- [n] -R- i) = V -E- n -R- i
    nf :R: (m :E: Nat) -> (_x30 :R: TT -E- m) -> TT -E- m 
      (m :E: Nat) (i :R: Fin -E- m)
         -E- m -R- (V -E- [m] -R- i) = V -E- m -R- i
      (m :E: Nat) (x :R: TT -E- (S -E- m))
         -E- m -R- (Lam -E- [m] -R- x) = Lam -E- m -R- (nf -E- (S -E- m) -R- x)
      (m :E: Nat) (f :R: TT -E- m) (x :R: TT -E- m)
         -E- m -R- (App -E- [m] -R- f -R- x) = 
          let g :R: (_x31 :R: TT -E- m) -> TT -E- m 
            (y :R: TT -E- (S -E- m))
               -R- (Lam -E- [m] -R- y) = nf -E- m -R- (substVars -E- (S -E- m) -E- m -R- (substTop -E- m -R- (nf -E- m -R- x)) -R- y)
            (f' :R: TT -E- m)
               -R- f' = App -E- m -R- f' -R- (nf -E- m -R- x)
          in g -R- (nf -E- m -R- f)
    example2 :R: TT -E- 1 = nf -E- 1 -R- testTm
    constructor Result :E: Type
    constructor R :R: (x :R: TT -E- Z) -> (y :R: TT -E- 1) -> Result
    main :R: Result = R -R- example1 -R- example2
  in main

### Final annotation ###

  let
    constructor Nat :E: Type
    constructor Z :E: Nat
    constructor S :E: (x :R: Nat) -> Nat
    plus :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Nat 
      (n :E: Nat)
         -E- Z -E- n = n
      (m :E: Nat) (n :E: Nat)
         -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    not :E: (_x2 :E: Bool) -> Bool 
       -E- True = False
       -E- False = True
    constructor Unit :E: Type
    constructor MkUnit :E: Unit
    constructor Pair :E: (_x3 :E: Type) -> (_x4 :E: Type) -> Type
    constructor MkPair :E: (a :E: Type) -> (b :E: Type) -> (_x5 :E: a) -> (_x6 :E: b) -> Pair -E- a -E- b
    fst :E: (a :E: Type) -> (b :E: Type) -> (_x7 :E: Pair -E- a -E- b) -> a 
      (a :E: Type) (b :E: Type) (x :E: a) (y :E: b)
         -E- a -E- b -E- ({MkPair} -E- [a] -E- [b] -E- x -E- y) = x
    snd :E: (a :E: Type) -> (b :E: Type) -> (_x8 :E: Pair -E- a -E- b) -> b 
      (a :E: Type) (b :E: Type) (x :E: a) (y :E: b)
         -E- a -E- b -E- ({MkPair} -E- [a] -E- [b] -E- x -E- y) = y
    constructor Either :E: (_x9 :E: Type) -> (_x10 :E: Type) -> Type
    constructor Left :E: (a :E: Type) -> (b :E: Type) -> (_x11 :E: a) -> Either -E- a -E- b
    constructor Right :E: (a :E: Type) -> (b :E: Type) -> (_x12 :E: b) -> Either -E- a -E- b
    id :E: (a :E: Type) -> (x :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    constructor Fin :E: (_x13 :E: Nat) -> Type
    constructor FZ :R: (n :E: Nat) -> Fin -E- (S -E- n)
    constructor FS :R: (n :E: Nat) -> (_x14 :R: Fin -E- n) -> Fin -E- (S -E- n)
    constructor Vect :E: (_x15 :E: Nat) -> (_x16 :E: Type) -> Type
    constructor VN :R: (a :E: Type) -> Vect -E- Z -E- a
    constructor VC :R: (n :E: Nat) -> (a :E: Type) -> (x :R: a) -> (xs :R: Vect -E- n -E- a) -> Vect -E- (S -E- n) -E- a
    constructor TT :E: (_x0 :E: Nat) -> Type
    constructor V :R: (n :E: Nat) -> (_x1 :R: Fin -E- n) -> TT -E- n
    constructor Lam :R: (n :E: Nat) -> (_x2 :R: TT -E- (S -E- n)) -> TT -E- n
    constructor App :R: (n :E: Nat) -> (_x3 :R: TT -E- n) -> (_x4 :R: TT -E- n) -> TT -E- n
    env :R: (m :E: Nat) -> (n :E: Nat) -> (xs :R: Vect -E- m -E- (TT -E- n)) -> (_x5 :R: Fin -E- m) -> TT -E- n 
      (m :E: Nat) (n :E: Nat) (x :R: TT -E- n) (xs :E: Vect -E- m -E- (TT -E- n))
         -E- [S -E- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FZ -E- m) = x
      (m :E: Nat) (n :E: Nat) (x :E: TT -E- n) (xs :R: Vect -E- m -E- (TT -E- n)) (i :R: Fin -E- m)
         -E- [S -E- m] -E- n -R- (VC -E- [m] -E- [TT -E- n] -R- x -R- xs) -R- (FS -E- m -R- i) = env -E- m -E- n -R- xs -R- i
    extendMap :R: (m :E: Nat) -> (n :E: Nat) -> (_x6 :R: (_x7 :R: Fin -E- m) -> Fin -E- n) -> (_x8 :R: Fin -E- (S -E- m)) -> Fin -E- (S -E- n) 
      (m :E: Nat) (n :E: Nat) (f :E: (_x9 :R: Fin -E- m) -> Fin -E- n)
         -E- m -E- n -R- f -R- (FZ -E- [m]) = FZ -E- n
      (m :E: Nat) (n :E: Nat) (f :R: (_x10 :R: Fin -E- m) -> Fin -E- n) (i :R: Fin -E- m)
         -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = FS -E- n -R- (f -R- i)
    mapVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x11 :R: (_x12 :R: Fin -E- m) -> Fin -E- n) -> (_x13 :R: TT -E- m) -> TT -E- n 
      (m :E: Nat) (n :E: Nat) (f :R: (_x14 :R: Fin -E- m) -> Fin -E- n) (i :R: Fin -E- m)
         -E- m -E- n -R- f -R- (V -E- [m] -R- i) = V -E- n -R- (f -R- i)
      (m :E: Nat) (n :E: Nat) (f :R: (_x15 :R: Fin -E- m) -> Fin -E- n) (x :R: TT -E- (S -E- m))
         -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (mapVars -E- (S -E- m) -E- (S -E- n) -R- (extendMap -E- m -E- n -R- f) -R- x)
      (m :E: Nat) (n :E: Nat) (f :R: (_x16 :R: Fin -E- m) -> Fin -E- n) (g :R: TT -E- m) (x :R: TT -E- m)
         -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (mapVars -E- m -E- n -R- f -R- g) -R- (mapVars -E- m -E- n -R- f -R- x)
    extendSubst :R: (m :E: Nat) -> (n :E: Nat) -> (_x17 :R: (_x18 :R: Fin -E- m) -> TT -E- n) -> (_x19 :R: Fin -E- (S -E- m)) -> TT -E- (S -E- n) 
      (m :E: Nat) (n :E: Nat) (f :E: (_x20 :R: Fin -E- m) -> TT -E- n)
         -E- m -E- n -R- f -R- (FZ -E- [m]) = V -E- (S -E- n) -R- (FZ -E- n)
      (m :E: Nat) (n :E: Nat) (f :R: (_x21 :R: Fin -E- m) -> TT -E- n) (i :R: Fin -E- m)
         -E- m -E- n -R- f -R- (FS -E- [m] -R- i) = mapVars -E- n -E- (S -E- n) -R- (FS -E- n) -R- (f -R- i)
    substVars :R: (m :E: Nat) -> (n :E: Nat) -> (_x22 :R: (_x23 :R: Fin -E- m) -> TT -E- n) -> (_x24 :R: TT -E- m) -> TT -E- n 
      (m :E: Nat) (n :E: Nat) (f :R: (_x25 :R: Fin -E- m) -> TT -E- n) (i :R: Fin -E- m)
         -E- m -E- n -R- f -R- (V -E- [m] -R- i) = f -R- i
      (m :E: Nat) (n :E: Nat) (f :R: (_x26 :R: Fin -E- m) -> TT -E- n) (x :R: TT -E- (S -E- m))
         -E- m -E- n -R- f -R- (Lam -E- [m] -R- x) = Lam -E- n -R- (substVars -E- (S -E- m) -E- (S -E- n) -R- (extendSubst -E- m -E- n -R- f) -R- x)
      (m :E: Nat) (n :E: Nat) (f :R: (_x27 :R: Fin -E- m) -> TT -E- n) (g :R: TT -E- m) (x :R: TT -E- m)
         -E- m -E- n -R- f -R- (App -E- [m] -R- g -R- x) = App -E- n -R- (substVars -E- m -E- n -R- f -R- g) -R- (substVars -E- m -E- n -R- f -R- x)
    testTm :R: TT -E- 1 = App -E- 1 -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FZ -E- 1)) -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))) -R- (Lam -E- 1 -R- (App -E- 2 -R- (V -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (V -E- 2 -R- (FZ -E- 1))))
    example1 :R: TT -E- Z = substVars -E- 1 -E- Z -R- (env -E- 1 -E- Z -R- (VC -E- Z -E- (TT -E- Z) -R- (Lam -E- Z -R- (V -E- 1 -R- (FZ -E- Z))) -R- (VN -E- (TT -E- Z)))) -R- testTm
    substTop :R: (n :E: Nat) -> (_x28 :R: TT -E- n) -> (_x29 :R: Fin -E- (S -E- n)) -> TT -E- n 
      (n :E: Nat) (tm :R: TT -E- n)
         -E- n -R- tm -R- (FZ -E- [n]) = tm
      (n :E: Nat) (tm :E: TT -E- n) (i :R: Fin -E- n)
         -E- n -R- tm -R- (FS -E- [n] -R- i) = V -E- n -R- i
    nf :R: (m :E: Nat) -> (_x30 :R: TT -E- m) -> TT -E- m 
      (m :E: Nat) (i :R: Fin -E- m)
         -E- m -R- (V -E- [m] -R- i) = V -E- m -R- i
      (m :E: Nat) (x :R: TT -E- (S -E- m))
         -E- m -R- (Lam -E- [m] -R- x) = Lam -E- m -R- (nf -E- (S -E- m) -R- x)
      (m :E: Nat) (f :R: TT -E- m) (x :R: TT -E- m)
         -E- m -R- (App -E- [m] -R- f -R- x) = 
          let g :R: (_x31 :R: TT -E- m) -> TT -E- m 
            (y :R: TT -E- (S -E- m))
               -R- (Lam -E- [m] -R- y) = nf -E- m -R- (substVars -E- (S -E- m) -E- m -R- (substTop -E- m -R- (nf -E- m -R- x)) -R- y)
            (f' :R: TT -E- m)
               -R- f' = App -E- m -R- f' -R- (nf -E- m -R- x)
          in g -R- (nf -E- m -R- f)
    example2 :R: TT -E- 1 = nf -E- 1 -R- testTm
    constructor Result :E: Type
    constructor R :R: (x :R: TT -E- Z) -> (y :R: TT -E- 1) -> Result
    main :R: Result = R -R- example1 -R- example2
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor FZ : Fin
    constructor FS : (_x14) -> Fin
    constructor VN : Vect
    constructor VC : (x) -> (xs) -> Vect
    constructor V : (_x1) -> TT
    constructor Lam : (_x2) -> TT
    constructor App : (_x3) -> (_x4) -> TT
    env 
       (VC x _) FZ = x
       (VC _ xs) (FS i) = env xs i
    extendMap 
       _ FZ = FZ
       f (FS i) = FS (f i)
    mapVars 
       f (V i) = V (f i)
       f (Lam x) = Lam (mapVars (extendMap f) x)
       f (App g x) = App (mapVars f g) (mapVars f x)
    extendSubst 
       _ FZ = V FZ
       f (FS i) = mapVars FS (f i)
    substVars 
       f (V i) = f i
       f (Lam x) = Lam (substVars (extendSubst f) x)
       f (App g x) = App (substVars f g) (substVars f x)
    testTm = App (Lam (App (V FZ) (V (FS FZ)))) (Lam (App (V (FS FZ)) (V FZ)))
    example1 = substVars (env (VC (Lam (V FZ)) VN)) testTm
    substTop 
       tm FZ = tm
       _ (FS i) = V i
    nf 
       (V i) = V i
       (Lam x) = Lam (nf x)
       (App f x) = 
        let g 
           (Lam y) = nf (substVars (substTop (nf x)) y)
           f' = App f' (nf x)
        in g (nf f)
    example2 = nf testTm
    constructor R : (x) -> (y) -> Result
    main = R example1 example2
  in main

### Normal forms ###

unerased:
  
  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x :R: Nat) -> Nat
    constructor Fin : (_x13 : Nat) -> Type
    constructor FZ : (n : Nat) -> Fin (S n)
    constructor TT : (_x0 : Nat) -> Type
    constructor V : (n : Nat) -> (_x1 : Fin n) -> TT n
    constructor Lam : (n : Nat) -> (_x2 : TT (S n)) -> TT n
    constructor App : (n : Nat) -> (_x3 : TT n) -> (_x4 : TT n) -> TT n
    constructor Result : Type
    constructor R : (x :R: TT Z) -> (y :R: TT 1) -> Result
  in R (App Z (Lam Z (App 1 (V 1 (FZ Z)) (Lam 1 (V 2 (FZ 1))))) (Lam Z (App 1 (Lam 1 (V 2 (FZ 1))) (V 1 (FZ Z))))) (App 1 (V 1 (FZ Z)) (V 1 (FZ Z)))

erased:
  
  let
    constructor FZ : Fin
    constructor V : (_x1) -> TT
    constructor Lam : (_x2) -> TT
    constructor App : (_x3) -> (_x4) -> TT
    constructor R : (x) -> (y) -> Result
  in R (App (Lam (App (V FZ) (Lam (V FZ)))) (Lam (App (Lam (V FZ)) (V FZ)))) (App (V FZ) (V FZ))

