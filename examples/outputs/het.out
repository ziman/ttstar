-- vim: ft=ttstar

### Desugared ###

  let
    constructor Tuple : (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type
    constructor Bool : Type
    constructor T : Bool
    constructor F : Bool
    constructor Mool : Type
    constructor Q : Mool
    constructor W : Mool
    constructor U : Type
    constructor B : U
    constructor M : U
    ty : (_x0 : U) -> Type 
       B = Bool
       M = Mool
    f : (u : U) -> (x : ty u) -> Type 
       [B] T = Bool
       [B] F = Mool
       [M] Q = Bool
       [M] W = Mool
    main : Type = Tuple (f B T) (f B F) (f M Q) (f M W)
  in main

### Evarified ###

  let
    constructor Tuple :1: (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type
    constructor Bool :2: Type
    constructor T :3: Bool
    constructor F :4: Bool
    constructor Mool :5: Type
    constructor Q :6: Mool
    constructor W :7: Mool
    constructor U :8: Type
    constructor B :9: U
    constructor M :10: U
    ty :11: (_x0 :12: U) -> Type 
       -13- B = Bool
       -14- M = Mool
    f :15: (u :16: U) -> (x :17: ty -18- u) -> Type 
       -19- [B] -20- T = Bool
       -21- [B] -22- F = Mool
       -23- [M] -24- Q = Bool
       -25- [M] -26- W = Mool
    main :27: Type = Tuple -31- (f -33- B -32- T) -30- (f -35- B -34- F) -29- (f -37- M -36- Q) -28- (f -39- M -38- W)
  in main

### Constraints ###

[] -> [1,2,3,4,5,6,7,15,17,20,22,24,26,28,29,30,31,32,34,36,38,R]
[16] -> [9,10,19,21,23,25,33,35,37,39]
[19] -> [9,16]
[21] -> [9,16]
[23] -> [10,16]
[25] -> [10,16]
[33] -> [16]
[35] -> [16]
[37] -> [16]
[39] -> [16]
[R] -> [27]

### Solution ###

[1,2,3,4,5,6,7,15,17,20,22,24,26,27,28,29,30,31,32,34,36,38,R]

### Annotated ###

  let
    constructor Tuple :R: (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type
    constructor Bool :R: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor Mool :R: Type
    constructor Q :R: Mool
    constructor W :R: Mool
    constructor U :E: Type
    constructor B :E: U
    constructor M :E: U
    ty :E: (_x0 :E: U) -> Type 
       -E- B = Bool
       -E- M = Mool
    f :R: (u :E: U) -> (x :R: ty -E- u) -> Type 
       -E- [B] -R- T = Bool
       -E- [B] -R- F = Mool
       -E- [M] -R- Q = Bool
       -E- [M] -R- W = Mool
    main :R: Type = Tuple -R- (f -E- B -R- T) -R- (f -E- B -R- F) -R- (f -E- M -R- Q) -R- (f -E- M -R- W)
  in main

### Specialised ###

  let
    constructor Tuple :R: (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type
    constructor Bool :R: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor Mool :R: Type
    constructor Q :R: Mool
    constructor W :R: Mool
    constructor U :E: Type
    constructor B :E: U
    constructor M :E: U
    ty :E: (_x0 :E: U) -> Type 
       -E- B = Bool
       -E- M = Mool
    f :R: (u :E: U) -> (x :R: ty -E- u) -> Type 
       -E- [B] -R- T = Bool
       -E- [B] -R- F = Mool
       -E- [M] -R- Q = Bool
       -E- [M] -R- W = Mool
    main :R: Type = Tuple -R- (f -E- B -R- T) -R- (f -E- B -R- F) -R- (f -E- M -R- Q) -R- (f -E- M -R- W)
  in main

### Final annotation ###

  let
    constructor Tuple :R: (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type
    constructor Bool :R: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor Mool :R: Type
    constructor Q :R: Mool
    constructor W :R: Mool
    constructor U :E: Type
    constructor B :E: U
    constructor M :E: U
    ty :E: (_x0 :E: U) -> Type 
       -E- B = Bool
       -E- M = Mool
    f :R: (u :E: U) -> (x :R: ty -E- u) -> Type 
       -E- [B] -R- T = Bool
       -E- [B] -R- F = Mool
       -E- [M] -R- Q = Bool
       -E- [M] -R- W = Mool
    main :R: Type = Tuple -R- (f -E- B -R- T) -R- (f -E- B -R- F) -R- (f -E- M -R- Q) -R- (f -E- M -R- W)
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor Tuple : (x) -> (y) -> (z) -> (w) -> Type
    constructor Bool : Type
    constructor T : Bool
    constructor F : Bool
    constructor Mool : Type
    constructor Q : Mool
    constructor W : Mool
    f 
       T = Bool
       F = Mool
       Q = Bool
       W = Mool
    main = Tuple (f T) (f F) (f Q) (f W)
  in main

### Normal forms ###

unerased:
  
  let
    constructor Tuple : (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type
    constructor Bool : Type
    constructor Mool : Type
  in Tuple Bool Mool Bool Mool

erased:
  
  let
    constructor Tuple : (x) -> (y) -> (z) -> (w) -> Type
    constructor Bool : Type
    constructor Mool : Type
  in Tuple Bool Mool Bool Mool

