-- vim: ft=ttstar

### Desugared ###

  let
    postulate Tuple : (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type
    constructor Bool : Type
    constructor T : Bool
    constructor F : Bool
    constructor Mool : Type
    constructor Q : Mool
    constructor W : Mool
    constructor U : Type
    constructor B : U
    constructor M : U
    ty : (_x0 : U) -> Type 
      [ty] B = Bool
      [ty] M = Mool
    f : (u : U) -> (x : ty u) -> Type 
      [f] [B] T = Bool
      [f] [B] F = Mool
      [f] [M] Q = Bool
      [f] [M] W = Mool
    main : Type = Tuple (f B T) (f B F) (f M Q) (f M W)
  in main

### Evarified ###

  let
    postulate Tuple :1: (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type
    constructor Bool :2: Type
    constructor T :3: Bool
    constructor F :4: Bool
    constructor Mool :5: Type
    constructor Q :6: Mool
    constructor W :7: Mool
    constructor U :8: Type
    constructor B :9: U
    constructor M :10: U
    ty :11: (_x0 :12: U) -> Type 
      [ty] -13- B = Bool
      [ty] -14- M = Mool
    f :15: (u :16: U) -> (x :17: ty -18- u) -> Type 
      [f] -20- [B] -19- T = Bool
      [f] -22- [B] -21- F = Mool
      [f] -24- [M] -23- Q = Bool
      [f] -26- [M] -25- W = Mool
    main :27: Type = Tuple -31- (f -33- B -32- T) -30- (f -35- B -34- F) -29- (f -37- M -36- Q) -28- (f -39- M -38- W)
  in main

### Constraints ###

[16,28] -> [39]
[16,28,R] -> [20,22,24,26]
[16,29] -> [37]
[16,29,R] -> [20,22,24,26]
[16,30] -> [35]
[16,30,R] -> [20,22,24,26]
[16,31] -> [33]
[16,31,R] -> [20,22,24,26]
[17,28] -> [38]
[17,28,R] -> [19,21,23,25]
[17,29] -> [36]
[17,29,R] -> [19,21,23,25]
[17,30] -> [34]
[17,30,R] -> [19,21,23,25]
[17,31] -> [32]
[17,31,R] -> [19,21,23,25]
[19,28] -> [R]
[19,28,R] -> [17]
[19,29] -> [R]
[19,29,R] -> [17]
[19,30] -> [R]
[19,30,R] -> [17]
[19,31] -> [R]
[19,31,R] -> [17]
[20,28] -> [R]
[20,28,R] -> [9,16]
[20,29] -> [R]
[20,29,R] -> [9,16]
[20,30] -> [R]
[20,30,R] -> [9,16]
[20,31] -> [R]
[20,31,R] -> [9,16]
[21,28] -> [R]
[21,28,R] -> [17]
[21,29] -> [R]
[21,29,R] -> [17]
[21,30] -> [R]
[21,30,R] -> [17]
[21,31] -> [R]
[21,31,R] -> [17]
[22,28] -> [R]
[22,28,R] -> [9,16]
[22,29] -> [R]
[22,29,R] -> [9,16]
[22,30] -> [R]
[22,30,R] -> [9,16]
[22,31] -> [R]
[22,31,R] -> [9,16]
[23,28] -> [R]
[23,28,R] -> [17]
[23,29] -> [R]
[23,29,R] -> [17]
[23,30] -> [R]
[23,30,R] -> [17]
[23,31] -> [R]
[23,31,R] -> [17]
[24,28] -> [R]
[24,28,R] -> [10,16]
[24,29] -> [R]
[24,29,R] -> [10,16]
[24,30] -> [R]
[24,30,R] -> [10,16]
[24,31] -> [R]
[24,31,R] -> [10,16]
[25,28] -> [R]
[25,28,R] -> [17]
[25,29] -> [R]
[25,29,R] -> [17]
[25,30] -> [R]
[25,30,R] -> [17]
[25,31] -> [R]
[25,31,R] -> [17]
[26,28] -> [R]
[26,28,R] -> [10,16]
[26,29] -> [R]
[26,29,R] -> [10,16]
[26,30] -> [R]
[26,30,R] -> [10,16]
[26,31] -> [R]
[26,31,R] -> [10,16]
[28] -> [R]
[28,38] -> [17]
[28,38,R] -> [7]
[28,39] -> [16]
[28,39,R] -> [10]
[28,R] -> [2,3,4,5,6,7,15,19,21,23,25]
[29] -> [R]
[29,36] -> [17]
[29,36,R] -> [6]
[29,37] -> [16]
[29,37,R] -> [10]
[29,R] -> [2,3,4,5,6,7,15,19,21,23,25]
[30] -> [R]
[30,34] -> [17]
[30,34,R] -> [4]
[30,35] -> [16]
[30,35,R] -> [9]
[30,R] -> [2,3,4,5,6,7,15,19,21,23,25]
[31] -> [R]
[31,32] -> [17]
[31,32,R] -> [3]
[31,33] -> [16]
[31,33,R] -> [9]
[31,R] -> [2,3,4,5,6,7,15,19,21,23,25]
[R] -> [1,27,28,29,30,31]

### Solution ###

[1,2,3,4,5,6,7,15,17,19,21,23,25,27,28,29,30,31,32,34,36,38,R]

### Annotated ###

  let
    postulate Tuple :R: (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type
    constructor Bool :R: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor Mool :R: Type
    constructor Q :R: Mool
    constructor W :R: Mool
    constructor U :E: Type
    constructor B :E: U
    constructor M :E: U
    ty :E: (_x0 :E: U) -> Type 
      [ty] -E- B = Bool
      [ty] -E- M = Mool
    f :R: (u :E: U) -> (x :R: ty -E- u) -> Type 
      [f] -E- [B] -R- T = Bool
      [f] -E- [B] -R- F = Mool
      [f] -E- [M] -R- Q = Bool
      [f] -E- [M] -R- W = Mool
    main :R: Type = Tuple -R- (f -E- B -R- T) -R- (f -E- B -R- F) -R- (f -E- M -R- Q) -R- (f -E- M -R- W)
  in main

### Specialised ###

  let
    postulate Tuple :R: (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type
    constructor Bool :R: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor Mool :R: Type
    constructor Q :R: Mool
    constructor W :R: Mool
    constructor U :E: Type
    constructor B :E: U
    constructor M :E: U
    ty :E: (_x0 :E: U) -> Type 
      [ty] -E- B = Bool
      [ty] -E- M = Mool
    f :R: (u :E: U) -> (x :R: ty -E- u) -> Type 
      [f] -E- [B] -R- T = Bool
      [f] -E- [B] -R- F = Mool
      [f] -E- [M] -R- Q = Bool
      [f] -E- [M] -R- W = Mool
    main :R: Type = Tuple -R- (f -E- B -R- T) -R- (f -E- B -R- F) -R- (f -E- M -R- Q) -R- (f -E- M -R- W)
  in main

### Final annotation ###

  let
    postulate Tuple :R: (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type
    constructor Bool :R: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor Mool :R: Type
    constructor Q :R: Mool
    constructor W :R: Mool
    constructor U :E: Type
    constructor B :E: U
    constructor M :E: U
    ty :E: (_x0 :E: U) -> Type 
      [ty] -E- B = Bool
      [ty] -E- M = Mool
    f :R: (u :E: U) -> (x :R: ty -E- u) -> Type 
      [f] -E- [B] -R- T = Bool
      [f] -E- [B] -R- F = Mool
      [f] -E- [M] -R- Q = Bool
      [f] -E- [M] -R- W = Mool
    main :R: Type = Tuple -R- (f -E- B -R- T) -R- (f -E- B -R- F) -R- (f -E- M -R- Q) -R- (f -E- M -R- W)
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    postulate Tuple : (x) -> (y) -> (z) -> (w) -> Type
    constructor Bool : Type
    constructor T : Bool
    constructor F : Bool
    constructor Mool : Type
    constructor Q : Mool
    constructor W : Mool
    f 
      [_] T = Bool
      [_] F = Mool
      [_] Q = Bool
      [_] W = Mool
    main = Tuple (f T) (f F) (f Q) (f W)
  in main

### Normal forms ###

unerased:
  
  let
    postulate Tuple : (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type
    constructor Bool : Type
    constructor Mool : Type
  in Tuple Bool Mool Bool Mool

erased:
  
  let
    postulate Tuple : (x) -> (y) -> (z) -> (w) -> Type
    constructor Bool : Type
    constructor Mool : Type
  in Tuple Bool Mool Bool Mool

