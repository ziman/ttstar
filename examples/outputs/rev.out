-- vim: ft=ttstar

### Desugared ###

  let
    constructor Id : (a : Type) -> (x : a) -> (y : a) -> Type
    constructor Refl : (a : Type) -> (x : a) -> Id a x x
    id : (a : Type) -> (_x0 : a) -> a = (\a : Type. (\x : a. x))
    subst : (a : Type) -> (P : (_x1 : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (w : P x) -> P y 
      a : Type P : (_x2 : a) -> Type x : a
        [subst] a P x [x] [Refl a x] = (\w : P x. w)
    cong : (a : Type) -> (b : Type) -> (f : (_x3 : a) -> b) -> (x : a) -> (y : a) -> (eq : Id a x y) -> Id b (f x) (f y) 
      a : Type b : Type f : (_x4 : a) -> b x : a
        [cong] a b f x [x] [Refl a x] = Refl b (f x)
    constructor Bool : Type
    constructor T : Bool
    constructor F : Bool
    constructor List : Type
    constructor Nil : List
    constructor Cons : (x :R: Bool) -> (xs :R: List) -> List
    one : (x : Bool) -> List = (\x : Bool. Cons x Nil)
    app : (_x5 : List) -> (_x6 : List) -> List 
      ys : List
        [app] Nil ys = ys
      x : Bool xs : List ys : List
        [app] (Cons x xs) ys = Cons x (app xs ys)
    appRightNeutral : (ys : List) -> Id List ys (app ys Nil) 
      [appRightNeutral] Nil = Refl List Nil
      x : Bool xs : List
        [appRightNeutral] (Cons x xs) = cong List List (Cons x) xs (app xs Nil) (appRightNeutral xs)
    appAssoc : (xs : List) -> (ys : List) -> (zs : List) -> Id List (app (app xs ys) zs) (app xs (app ys zs)) 
      ys : List zs : List
        [appAssoc] Nil ys zs = Refl List (app ys zs)
      x : Bool xs : List ys : List zs : List
        [appAssoc] (Cons x xs) ys zs = cong List List (Cons x) (app (app xs ys) zs) (app xs (app ys zs)) (appAssoc xs ys zs)
    constructor Rev : (_x7 : List) -> Type
    constructor RNil : Rev Nil
    constructor RSnoc : (xs : List) -> (x : Bool) -> (rxs : Rev xs) -> Rev (app xs (one x))
    rev' : (xs : List) -> (rxs : Rev xs) -> (ys : List) -> Rev (app xs ys) 
      xs : List rxs : Rev xs
        [rev'] xs rxs Nil = subst List Rev xs (app xs Nil) (appRightNeutral xs) rxs
      xs : List rxs : Rev xs y : Bool ys : List
        [rev'] xs rxs (Cons y ys) = subst List Rev (app (app xs (one y)) ys) (app xs (Cons y ys)) (appAssoc xs (one y) ys) (rev' (app xs (one y)) (RSnoc xs y rxs) ys)
    rev : (xs : List) -> Rev xs = (\xs : List. rev' Nil RNil xs)
    reverse' : (xs : List) -> (rxs : Rev xs) -> List 
      [reverse'] [Nil] RNil = Nil
      xs : List x : Bool rxs : Rev xs
        [reverse'] [app xs (one x)] (RSnoc xs x rxs) = Cons x (reverse' xs rxs)
    reverse : (xs : List) -> List = (\xs : List. reverse' xs (rev xs))
    main : List = reverse (Cons T (Cons F (Cons T (Cons F Nil))))
  in main

### Evarified ###

  let
    constructor Id :1: (a :2: Type) -> (x :3: a) -> (y :4: a) -> Type
    constructor Refl :5: (a :6: Type) -> (x :7: a) -> Id -10- a -9- x -8- x
    id :11: (a :12: Type) -> (_x0 :13: a) -> a = (\a :14: Type. (\x :15: a. x))
    subst :16: (a :17: Type) -> (P :18: (_x1 :19: a) -> Type) -> (x :20: a) -> (y :21: a) -> (eq :22: Id -25- a -24- x -23- y) -> (w :26: P -27- x) -> P -28- y 
      a :29: Type P :30: (_x2 :31: a) -> Type x :32: a
        [subst] -37- a -36- P -35- x -34- [x] -33- [Refl -39- a -38- x] = (\w :40: P -41- x. w)
    cong :42: (a :43: Type) -> (b :44: Type) -> (f :45: (_x3 :46: a) -> b) -> (x :47: a) -> (y :48: a) -> (eq :49: Id -52- a -51- x -50- y) -> Id -55- b -54- (f -56- x) -53- (f -57- y) 
      a :58: Type b :59: Type f :60: (_x4 :61: a) -> b x :62: a
        [cong] -68- a -67- b -66- f -65- x -64- [x] -63- [Refl -70- a -69- x] = Refl -72- b -71- (f -73- x)
    constructor Bool :74: Type
    constructor T :75: Bool
    constructor F :76: Bool
    constructor List :77: Type
    constructor Nil :78: List
    constructor Cons :79: (x :R: Bool) -> (xs :R: List) -> List
    one :80: (x :81: Bool) -> List = (\x :82: Bool. Cons -84- x -83- Nil)
    app :85: (_x5 :86: List) -> (_x6 :87: List) -> List 
      ys :88: List
        [app] -90- Nil -89- ys = ys
      x :91: Bool xs :92: List ys :93: List
        [app] -95- (Cons -97- x -96- xs) -94- ys = Cons -99- x -98- (app -101- xs -100- ys)
    appRightNeutral :102: (ys :103: List) -> Id -106- List -105- ys -104- (app -108- ys -107- Nil) 
      [appRightNeutral] -109- Nil = Refl -111- List -110- Nil
      x :112: Bool xs :113: List
        [appRightNeutral] -114- (Cons -116- x -115- xs) = cong -122- List -121- List -120- (Cons -123- x) -119- xs -118- (app -125- xs -124- Nil) -117- (appRightNeutral -126- xs)
    appAssoc :127: (xs :128: List) -> (ys :129: List) -> (zs :130: List) -> Id -133- List -132- (app -135- (app -137- xs -136- ys) -134- zs) -131- (app -139- xs -138- (app -141- ys -140- zs)) 
      ys :142: List zs :143: List
        [appAssoc] -146- Nil -145- ys -144- zs = Refl -148- List -147- (app -150- ys -149- zs)
      x :151: Bool xs :152: List ys :153: List zs :154: List
        [appAssoc] -157- (Cons -159- x -158- xs) -156- ys -155- zs = cong -165- List -164- List -163- (Cons -166- x) -162- (app -168- (app -170- xs -169- ys) -167- zs) -161- (app -172- xs -171- (app -174- ys -173- zs)) -160- (appAssoc -177- xs -176- ys -175- zs)
    constructor Rev :178: (_x7 :179: List) -> Type
    constructor RNil :180: Rev -181- Nil
    constructor RSnoc :182: (xs :183: List) -> (x :184: Bool) -> (rxs :185: Rev -186- xs) -> Rev -187- (app -189- xs -188- (one -190- x))
    rev' :191: (xs :192: List) -> (rxs :193: Rev -194- xs) -> (ys :195: List) -> Rev -196- (app -198- xs -197- ys) 
      xs :199: List rxs :200: Rev -201- xs
        [rev'] -204- xs -203- rxs -202- Nil = subst -210- List -209- Rev -208- xs -207- (app -212- xs -211- Nil) -206- (appRightNeutral -213- xs) -205- rxs
      xs :214: List rxs :215: Rev -216- xs y :217: Bool ys :218: List
        [rev'] -221- xs -220- rxs -219- (Cons -223- y -222- ys) = subst -229- List -228- Rev -227- (app -231- (app -233- xs -232- (one -234- y)) -230- ys) -226- (app -236- xs -235- (Cons -238- y -237- ys)) -225- (appAssoc -241- xs -240- (one -242- y) -239- ys) -224- (rev' -245- (app -247- xs -246- (one -248- y)) -244- (RSnoc -251- xs -250- y -249- rxs) -243- ys)
    rev :252: (xs :253: List) -> Rev -254- xs = (\xs :255: List. rev' -258- Nil -257- RNil -256- xs)
    reverse' :259: (xs :260: List) -> (rxs :261: Rev -262- xs) -> List 
      [reverse'] -264- [Nil] -263- RNil = Nil
      xs :265: List x :266: Bool rxs :267: Rev -268- xs
        [reverse'] -270- [app -272- xs -271- (one -273- x)] -269- (RSnoc -276- xs -275- x -274- rxs) = Cons -278- x -277- (reverse' -280- xs -279- rxs)
    reverse :281: (xs :282: List) -> List = (\xs :283: List. reverse' -285- xs -284- (rev -286- xs))
    main :287: List = reverse -288- (Cons -290- T -289- (Cons -292- F -291- (Cons -294- T -293- (Cons -296- F -295- Nil))))
  in main

### Constraints ###

[6,33,284] -> [39]
[6,63,206,284] -> [70]
[6,63,225,284] -> [70]
[6,206,284] -> [72,111]
[6,225,284] -> [72,148]
[7,33,284] -> [38]
[7,63,206,284] -> [69]
[7,63,225,284] -> [69]
[7,206,284] -> [71,110]
[7,225,284] -> [71,147]
[8,33,284] -> [23]
[8,63,206,284] -> [50]
[8,63,225,284] -> [50]
[8,206,284] -> [53,104]
[8,225,284] -> [53,131]
[9,33,284] -> [24]
[9,63,206,284] -> [51]
[9,63,225,284] -> [51]
[9,206,284] -> [54,105]
[9,225,284] -> [54,132]
[10,33,284] -> [25]
[10,63,206,284] -> [52]
[10,63,225,284] -> [52]
[10,206,284] -> [55,106]
[10,225,284] -> [55,133]
[17,284] -> [210,229]
[17,284,R] -> [37]
[18,284] -> [209,228]
[18,284,R] -> [36]
[19,36,284] -> [31]
[19,209,284] -> [179]
[19,228,284] -> [179]
[20,284] -> [208,227]
[20,284,R] -> [35]
[21,284] -> [207,226]
[21,284,R] -> [34]
[22,284] -> [206,225]
[22,284,R] -> [33]
[23,33,284] -> [8]
[23,206,284] -> [104]
[23,225,284] -> [131]
[24,33,284] -> [9]
[24,206,284] -> [105]
[24,225,284] -> [132]
[25,33,284] -> [10]
[25,206,284] -> [106]
[25,225,284] -> [133]
[26,27,284] -> [41]
[26,41,284] -> [27]
[26,284] -> [40,205,224]
[27,205,284] -> [201]
[27,224,284] -> [196]
[28,284] -> [41,196]
[29,284] -> [37]
[30,284] -> [36]
[31,36,284] -> [19]
[32,284] -> [35]
[33,38,284] -> [7]
[33,38,284,R] -> [32]
[33,39,284] -> [6]
[33,39,284,R] -> [29]
[33,284] -> [R]
[33,284,R] -> [5,22]
[34,284] -> [R]
[34,284,R] -> [21,32]
[35,284] -> [R]
[35,284,R] -> [20]
[36,284] -> [R]
[36,284,R] -> [18]
[37,284] -> [R]
[37,284,R] -> [17]
[40,284] -> [26]
[41,284] -> [28]
[43,206,284] -> [122]
[43,206,284,R] -> [68]
[43,225,284] -> [165]
[43,225,284,R] -> [68]
[44,206,284] -> [121]
[44,206,284,R] -> [67]
[44,225,284] -> [164]
[44,225,284,R] -> [67]
[45,206,284] -> [120]
[45,206,284,R] -> [66]
[45,225,284] -> [163]
[45,225,284,R] -> [66]
[46,66,206,284] -> [61]
[46,66,225,284] -> [61]
[46,120,206,284] -> [R]
[46,163,225,284] -> [R]
[47,206,284] -> [119]
[47,206,284,R] -> [65]
[47,225,284] -> [162]
[47,225,284,R] -> [65]
[48,206,284] -> [118]
[48,206,284,R] -> [64]
[48,225,284] -> [161]
[48,225,284,R] -> [64]
[49,206,284] -> [117]
[49,206,284,R] -> [63]
[49,225,284] -> [160]
[49,225,284,R] -> [63]
[50,63,206,284] -> [8]
[50,63,225,284] -> [8]
[50,117,206,284] -> [104]
[50,160,225,284] -> [131]
[51,63,206,284] -> [9]
[51,63,225,284] -> [9]
[51,117,206,284] -> [105]
[51,160,225,284] -> [132]
[52,63,206,284] -> [10]
[52,63,225,284] -> [10]
[52,117,206,284] -> [106]
[52,160,225,284] -> [133]
[53,57,206,284] -> [73]
[53,57,225,284] -> [73]
[53,73,206,284] -> [57]
[53,73,225,284] -> [57]
[53,206,284] -> [8,104]
[53,225,284] -> [8,131]
[54,56,206,284] -> [73]
[54,56,225,284] -> [73]
[54,73,206,284] -> [56]
[54,73,225,284] -> [56]
[54,206,284] -> [9,105]
[54,225,284] -> [9,132]
[55,206,284] -> [10,106]
[55,225,284] -> [10,133]
[56,105,206,284] -> [115]
[56,132,225,284] -> [98]
[57,104,206,284] -> [98]
[57,131,225,284] -> [98]
[58,206,284] -> [68]
[58,225,284] -> [68]
[59,206,284] -> [67]
[59,225,284] -> [67]
[60,206,284] -> [66]
[60,225,284] -> [66]
[61,66,206,284] -> [46]
[61,66,225,284] -> [46]
[61,71,206,284] -> [73]
[61,71,225,284] -> [73]
[62,206,284] -> [65]
[62,225,284] -> [65]
[63,69,206,284] -> [7]
[63,69,206,284,R] -> [62]
[63,69,225,284] -> [7]
[63,69,225,284,R] -> [62]
[63,70,206,284] -> [6]
[63,70,206,284,R] -> [58]
[63,70,225,284] -> [6]
[63,70,225,284,R] -> [58]
[63,206,284] -> [R]
[63,206,284,R] -> [5,49]
[63,225,284] -> [R]
[63,225,284,R] -> [5,49]
[64,206,284] -> [R]
[64,206,284,R] -> [48,62]
[64,225,284] -> [R]
[64,225,284,R] -> [48,62]
[65,206,284] -> [R]
[65,206,284,R] -> [47]
[65,225,284] -> [R]
[65,225,284,R] -> [47]
[66,206,284] -> [R]
[66,206,284,R] -> [45]
[66,225,284] -> [R]
[66,225,284,R] -> [45]
[67,206,284] -> [R]
[67,206,284,R] -> [44]
[67,225,284] -> [R]
[67,225,284,R] -> [44]
[68,206,284] -> [R]
[68,206,284,R] -> [43]
[68,225,284] -> [R]
[68,225,284,R] -> [43]
[71,73,206,284] -> [61]
[71,73,206,284,R] -> [62]
[71,73,225,284] -> [61]
[71,73,225,284,R] -> [62]
[71,206,284] -> [7]
[71,206,284,R] -> [60]
[71,225,284] -> [7]
[71,225,284,R] -> [60]
[72,206,284] -> [6]
[72,206,284,R] -> [59]
[72,225,284] -> [6]
[72,225,284,R] -> [59]
[81,224,245,246,284] -> [82,248]
[81,225,240,284] -> [82,242]
[81,227,231,232,284] -> [82,234]
[81,270,271] -> [82,273]
[82,224,245,246,284] -> [81]
[82,225,240,284] -> [81]
[82,227,231,232,284] -> [81]
[82,270,271] -> [81]
[83,132,135,136,225,284] -> [83]
[83,187,188,224,244,284] -> [83]
[83,187,188,269] -> [83]
[83,196,198,224,246,284] -> [83]
[83,224,245,246,284] -> [R]
[83,224,245,246,284,R] -> [78]
[83,225,240,284] -> [R]
[83,225,240,284,R] -> [78]
[83,227,231,232,284] -> [R]
[83,227,231,232,284,R] -> [78]
[83,270,271] -> [R]
[83,270,271,R] -> [78]
[84,132,135,136,225,284] -> [84]
[84,187,188,224,244,284] -> [84]
[84,187,188,269] -> [84]
[84,196,198,224,246,284] -> [84]
[84,224,245,246,284] -> [R]
[84,224,245,246,284,R] -> [82]
[84,225,240,284] -> [R]
[84,225,240,284,R] -> [82]
[84,227,231,232,284] -> [R]
[84,227,231,232,284,R] -> [82]
[84,270,271] -> [R]
[84,270,271,R] -> [82]
[86,98,118,206,284] -> [101]
[86,98,147,225,284] -> [101]
[86,98,161,171,225,284] -> [101]
[86,98,161,225,284] -> [101]
[86,98,162,168,225,284] -> [101]
[86,98,162,225,284] -> [101]
[86,98,207,284] -> [101]
[86,98,224,245,284] -> [101]
[86,98,226,284] -> [101]
[86,98,227,231,284] -> [101]
[86,98,227,284] -> [101]
[86,98,270] -> [101]
[86,118,206,284] -> [125]
[86,118,206,284,R] -> [90,95]
[86,147,225,284] -> [150]
[86,147,225,284,R] -> [90,95]
[86,161,171,225,284] -> [174]
[86,161,171,225,284,R] -> [90,95]
[86,161,225,284] -> [172]
[86,161,225,284,R] -> [90,95]
[86,162,168,225,284] -> [170]
[86,162,168,225,284,R] -> [90,95]
[86,162,225,284] -> [168]
[86,162,225,284,R] -> [90,95]
[86,207,284] -> [212]
[86,207,284,R] -> [90,95]
[86,224,245,284] -> [247]
[86,224,245,284,R] -> [90,95]
[86,226,284] -> [236]
[86,226,284,R] -> [90,95]
[86,227,231,284] -> [233]
[86,227,231,284,R] -> [90,95]
[86,227,284] -> [231]
[86,227,284,R] -> [90,95]
[86,270] -> [272]
[86,270,R] -> [90,95]
[87,98,118,206,284] -> [100]
[87,98,147,225,284] -> [100]
[87,98,161,171,225,284] -> [100]
[87,98,161,225,284] -> [100]
[87,98,162,168,225,284] -> [100]
[87,98,162,225,284] -> [100]
[87,98,207,284] -> [100]
[87,98,224,245,284] -> [100]
[87,98,226,284] -> [100]
[87,98,227,231,284] -> [100]
[87,98,227,284] -> [100]
[87,98,270] -> [100]
[87,118,206,284] -> [124]
[87,118,206,284,R] -> [89,94]
[87,147,225,284] -> [149]
[87,147,225,284,R] -> [89,94]
[87,161,171,225,284] -> [173]
[87,161,171,225,284,R] -> [89,94]
[87,161,225,284] -> [171]
[87,161,225,284,R] -> [89,94]
[87,162,168,225,284] -> [169]
[87,162,168,225,284,R] -> [89,94]
[87,162,225,284] -> [167]
[87,162,225,284,R] -> [89,94]
[87,207,284] -> [211]
[87,207,284,R] -> [89,94]
[87,224,245,284] -> [246]
[87,224,245,284,R] -> [89,94]
[87,226,284] -> [235]
[87,226,284,R] -> [89,94]
[87,227,231,284] -> [232]
[87,227,231,284,R] -> [89,94]
[87,227,284] -> [230]
[87,227,284,R] -> [89,94]
[87,270] -> [271]
[87,270,R] -> [89,94]
[88,118,206,284] -> [89]
[88,147,225,284] -> [89]
[88,161,171,225,284] -> [89]
[88,161,225,284] -> [89]
[88,162,168,225,284] -> [89]
[88,162,225,284] -> [89]
[88,207,284] -> [89]
[88,224,245,284] -> [89]
[88,226,284] -> [89]
[88,227,231,284] -> [89]
[88,227,284] -> [89]
[88,270] -> [89]
[89,118,206,284] -> [R]
[89,118,206,284,R] -> [87]
[89,147,225,284] -> [R]
[89,147,225,284,R] -> [87]
[89,161,171,225,284] -> [R]
[89,161,171,225,284,R] -> [87]
[89,161,225,284] -> [R]
[89,161,225,284,R] -> [87]
[89,162,168,225,284] -> [R]
[89,162,168,225,284,R] -> [87]
[89,162,225,284] -> [R]
[89,162,225,284,R] -> [87]
[89,207,284] -> [R]
[89,207,284,R] -> [87]
[89,224,245,284] -> [R]
[89,224,245,284,R] -> [87]
[89,226,284] -> [R]
[89,226,284,R] -> [87]
[89,227,231,284] -> [R]
[89,227,231,284,R] -> [87]
[89,227,284] -> [R]
[89,227,284,R] -> [87]
[89,270] -> [R]
[89,270,R] -> [87]
[90,118,206,284] -> [R]
[90,118,206,284,R] -> [86]
[90,147,225,284] -> [R]
[90,147,225,284,R] -> [86]
[90,161,171,225,284] -> [R]
[90,161,171,225,284,R] -> [86]
[90,161,225,284] -> [R]
[90,161,225,284,R] -> [86]
[90,162,168,225,284] -> [R]
[90,162,168,225,284,R] -> [86]
[90,162,225,284] -> [R]
[90,162,225,284,R] -> [86]
[90,207,284] -> [R]
[90,207,284,R] -> [86]
[90,224,245,284] -> [R]
[90,224,245,284,R] -> [86]
[90,226,284] -> [R]
[90,226,284,R] -> [86]
[90,227,231,284] -> [R]
[90,227,231,284,R] -> [86]
[90,227,284] -> [R]
[90,227,284,R] -> [86]
[90,270] -> [R]
[90,270,R] -> [86]
[91,118,206,284] -> [97]
[91,147,225,284] -> [97]
[91,161,171,225,284] -> [97]
[91,161,225,284] -> [97]
[91,162,168,225,284] -> [97]
[91,162,225,284] -> [97]
[91,207,284] -> [97]
[91,224,245,284] -> [97]
[91,226,284] -> [97]
[91,227,231,284] -> [97]
[91,227,284] -> [97]
[91,270] -> [97]
[92,118,206,284] -> [96]
[92,147,225,284] -> [96]
[92,161,171,225,284] -> [96]
[92,161,225,284] -> [96]
[92,162,168,225,284] -> [96]
[92,162,225,284] -> [96]
[92,207,284] -> [96]
[92,224,245,284] -> [96]
[92,226,284] -> [96]
[92,227,231,284] -> [96]
[92,227,284] -> [96]
[92,270] -> [96]
[93,118,206,284] -> [94]
[93,147,225,284] -> [94]
[93,161,171,225,284] -> [94]
[93,161,225,284] -> [94]
[93,162,168,225,284] -> [94]
[93,162,225,284] -> [94]
[93,207,284] -> [94]
[93,224,245,284] -> [94]
[93,226,284] -> [94]
[93,227,231,284] -> [94]
[93,227,284] -> [94]
[93,270] -> [94]
[94,118,206,284] -> [R]
[94,118,206,284,R] -> [87]
[94,147,225,284] -> [R]
[94,147,225,284,R] -> [87]
[94,161,171,225,284] -> [R]
[94,161,171,225,284,R] -> [87]
[94,161,225,284] -> [R]
[94,161,225,284,R] -> [87]
[94,162,168,225,284] -> [R]
[94,162,168,225,284,R] -> [87]
[94,162,225,284] -> [R]
[94,162,225,284,R] -> [87]
[94,207,284] -> [R]
[94,207,284,R] -> [87]
[94,224,245,284] -> [R]
[94,224,245,284,R] -> [87]
[94,226,284] -> [R]
[94,226,284,R] -> [87]
[94,227,231,284] -> [R]
[94,227,231,284,R] -> [87]
[94,227,284] -> [R]
[94,227,284,R] -> [87]
[94,270] -> [R]
[94,270,R] -> [87]
[95,96,118,206,284] -> [R]
[95,96,147,225,284] -> [R]
[95,96,161,171,225,284] -> [R]
[95,96,161,225,284] -> [R]
[95,96,162,168,225,284] -> [R]
[95,96,162,225,284] -> [R]
[95,96,207,284] -> [R]
[95,96,224,245,284] -> [R]
[95,96,226,284] -> [R]
[95,96,227,231,284] -> [R]
[95,96,227,284] -> [R]
[95,96,270] -> [R]
[95,97,118,206,284] -> [R]
[95,97,147,225,284] -> [R]
[95,97,161,171,225,284] -> [R]
[95,97,161,225,284] -> [R]
[95,97,162,168,225,284] -> [R]
[95,97,162,225,284] -> [R]
[95,97,207,284] -> [R]
[95,97,224,245,284] -> [R]
[95,97,226,284] -> [R]
[95,97,227,231,284] -> [R]
[95,97,227,284] -> [R]
[95,97,270] -> [R]
[95,118,206,284] -> [R]
[95,118,206,284,R] -> [86,96,97]
[95,147,225,284] -> [R]
[95,147,225,284,R] -> [86,96,97]
[95,161,171,225,284] -> [R]
[95,161,171,225,284,R] -> [86,96,97]
[95,161,225,284] -> [R]
[95,161,225,284,R] -> [86,96,97]
[95,162,168,225,284] -> [R]
[95,162,168,225,284,R] -> [86,96,97]
[95,162,225,284] -> [R]
[95,162,225,284,R] -> [86,96,97]
[95,207,284] -> [R]
[95,207,284,R] -> [86,96,97]
[95,224,245,284] -> [R]
[95,224,245,284,R] -> [86,96,97]
[95,226,284] -> [R]
[95,226,284,R] -> [86,96,97]
[95,227,231,284] -> [R]
[95,227,231,284,R] -> [86,96,97]
[95,227,284] -> [R]
[95,227,284,R] -> [86,96,97]
[95,270] -> [R]
[95,270,R] -> [86,96,97]
[96,118,206,284] -> [95]
[96,147,225,284] -> [95]
[96,161,171,225,284] -> [95]
[96,161,225,284] -> [95]
[96,162,168,225,284] -> [95]
[96,162,225,284] -> [95]
[96,207,284] -> [95]
[96,224,245,284] -> [95]
[96,226,284] -> [95]
[96,227,231,284] -> [95]
[96,227,284] -> [95]
[96,270] -> [95]
[97,118,206,284] -> [95]
[97,147,225,284] -> [95]
[97,161,171,225,284] -> [95]
[97,161,225,284] -> [95]
[97,162,168,225,284] -> [95]
[97,162,225,284] -> [95]
[97,207,284] -> [95]
[97,224,245,284] -> [95]
[97,226,284] -> [95]
[97,227,231,284] -> [95]
[97,227,284] -> [95]
[97,270] -> [95]
[98,100,101,132,225,284] -> [169]
[98,100,104,206,284] -> [124]
[98,100,118,206,284] -> [87]
[98,100,118,206,284,R] -> [93]
[98,100,131,140,225,284] -> [173]
[98,100,131,141,225,284] -> [174]
[98,100,131,173,225,284] -> [140]
[98,100,131,174,225,284] -> [141]
[98,100,131,225,284] -> [171]
[98,100,132,225,284] -> [167]
[98,100,147,225,284] -> [87]
[98,100,147,225,284,R] -> [93]
[98,100,161,171,225,284] -> [87]
[98,100,161,171,225,284,R] -> [93]
[98,100,161,225,284] -> [87]
[98,100,161,225,284,R] -> [93]
[98,100,162,168,225,284] -> [87]
[98,100,162,168,225,284,R] -> [93]
[98,100,162,225,284] -> [87]
[98,100,162,225,284,R] -> [93]
[98,100,207,284] -> [87]
[98,100,207,284,R] -> [93]
[98,100,224,245,284] -> [87]
[98,100,224,245,284,R] -> [93]
[98,100,226,284] -> [87]
[98,100,226,284,R] -> [93]
[98,100,227,231,284] -> [87]
[98,100,227,231,284,R] -> [93]
[98,100,227,284] -> [87]
[98,100,227,284,R] -> [93]
[98,100,270] -> [87]
[98,100,270,R] -> [93]
[98,101,104,206,284] -> [125]
[98,101,118,206,284] -> [86]
[98,101,118,206,284,R] -> [92]
[98,101,131,225,284] -> [172]
[98,101,132,169,225,284] -> [100]
[98,101,132,170,225,284] -> [101]
[98,101,132,225,284] -> [168,170]
[98,101,147,225,284] -> [86]
[98,101,147,225,284,R] -> [92]
[98,101,161,171,225,284] -> [86]
[98,101,161,171,225,284,R] -> [92]
[98,101,161,225,284] -> [86]
[98,101,161,225,284,R] -> [92]
[98,101,162,168,225,284] -> [86]
[98,101,162,168,225,284,R] -> [92]
[98,101,162,225,284] -> [86]
[98,101,162,225,284,R] -> [92]
[98,101,207,284] -> [86]
[98,101,207,284,R] -> [92]
[98,101,224,245,284] -> [86]
[98,101,224,245,284,R] -> [92]
[98,101,226,284] -> [86]
[98,101,226,284,R] -> [92]
[98,101,227,231,284] -> [86]
[98,101,227,231,284,R] -> [92]
[98,101,227,284] -> [86]
[98,101,227,284,R] -> [92]
[98,101,270] -> [86]
[98,101,270,R] -> [92]
[98,104,124,206,284] -> [100]
[98,104,125,206,284] -> [101]
[98,104,206,284] -> [57]
[98,118,206,284] -> [R]
[98,118,206,284,R] -> [85]
[98,131,138,225,284] -> [237]
[98,131,171,225,284] -> [100]
[98,131,172,225,284] -> [101]
[98,131,225,284] -> [57]
[98,132,167,225,284] -> [100]
[98,132,168,225,284] -> [101]
[98,132,225,284] -> [56]
[98,147,225,284] -> [R]
[98,147,225,284,R] -> [85]
[98,161,171,225,284] -> [R]
[98,161,171,225,284,R] -> [85]
[98,161,225,284] -> [R]
[98,161,225,284,R] -> [85]
[98,162,168,225,284] -> [R]
[98,162,168,225,284,R] -> [85]
[98,162,225,284] -> [R]
[98,162,225,284,R] -> [85]
[98,207,284] -> [R]
[98,207,284,R] -> [85]
[98,224,245,284] -> [R]
[98,224,245,284,R] -> [85]
[98,226,284] -> [R]
[98,226,284,R] -> [85]
[98,227,231,284] -> [R]
[98,227,231,284,R] -> [85]
[98,227,284] -> [R]
[98,227,284,R] -> [85]
[98,270] -> [R]
[98,270,R] -> [85]
[99,104,206,284] -> [123]
[99,118,206,284] -> [R]
[99,118,206,284,R] -> [91]
[99,131,138,225,284] -> [238]
[99,131,225,284] -> [166]
[99,132,225,284] -> [166]
[99,147,225,284] -> [R]
[99,147,225,284,R] -> [91]
[99,161,171,225,284] -> [R]
[99,161,171,225,284,R] -> [91]
[99,161,225,284] -> [R]
[99,161,225,284,R] -> [91]
[99,162,168,225,284] -> [R]
[99,162,168,225,284,R] -> [91]
[99,162,225,284] -> [R]
[99,162,225,284,R] -> [91]
[99,207,284] -> [R]
[99,207,284,R] -> [91]
[99,224,245,284] -> [R]
[99,224,245,284,R] -> [91]
[99,226,284] -> [R]
[99,226,284,R] -> [91]
[99,227,231,284] -> [R]
[99,227,231,284,R] -> [91]
[99,227,284] -> [R]
[99,227,284,R] -> [91]
[99,270] -> [R]
[99,270,R] -> [91]
[103,117,206,284] -> [126]
[103,206,284] -> [213]
[103,206,284,R] -> [109,114]
[104,107,117,206,284] -> [124]
[104,107,206,284] -> [211]
[104,108,117,206,284] -> [125]
[104,108,206,284] -> [212]
[104,117,124,206,284] -> [107]
[104,117,125,206,284] -> [108]
[104,117,206,284] -> [50]
[104,123,206,284] -> [99]
[104,206,211,284] -> [107]
[104,206,212,284] -> [108]
[104,206,284] -> [8,23,53]
[105,115,206,284] -> [56]
[105,116,206,284] -> [123]
[105,117,206,284] -> [51]
[105,123,206,284] -> [116]
[105,206,284] -> [9,24,54]
[106,117,206,284] -> [52]
[106,206,284] -> [10,25,55]
[109,206,284] -> [R]
[109,206,284,R] -> [103]
[110,206,284] -> [7]
[110,206,284,R] -> [78]
[111,206,284] -> [6]
[111,206,284,R] -> [77]
[112,206,284] -> [116]
[113,206,284] -> [115]
[114,115,206,284] -> [R]
[114,116,206,284] -> [R]
[114,206,284] -> [R]
[114,206,284,R] -> [103,115,116]
[115,206,284] -> [114]
[116,206,284] -> [114]
[117,126,206,284] -> [103]
[117,126,206,284,R] -> [113]
[117,206,284] -> [49]
[117,206,284,R] -> [102]
[118,124,206,284] -> [87]
[118,124,206,284,R] -> [78]
[118,125,206,284] -> [86]
[118,125,206,284,R] -> [113]
[118,206,284] -> [48]
[118,206,284,R] -> [78,79,85,88,90,95,98,99]
[119,206,284] -> [47]
[119,206,284,R] -> [113]
[120,123,206,284] -> [R]
[120,123,206,284,R] -> [112]
[120,206,284] -> [45]
[120,206,284,R] -> [46,79,123]
[121,206,284] -> [44]
[121,206,284,R] -> [77]
[122,206,284] -> [43]
[122,206,284,R] -> [77]
[128,160,225,284] -> [177]
[128,225,284] -> [241]
[128,225,284,R] -> [146,157]
[129,160,225,284] -> [176]
[129,225,284] -> [240]
[129,225,284,R] -> [145,156]
[130,160,225,284] -> [175]
[130,225,284] -> [239]
[130,225,284,R] -> [144,155]
[131,138,140,160,225,284] -> [173]
[131,138,141,160,225,284] -> [174]
[131,138,160,173,225,284] -> [140]
[131,138,160,174,225,284] -> [141]
[131,138,160,225,284] -> [171]
[131,138,225,237,284] -> [98]
[131,138,225,238,284] -> [99]
[131,138,225,284] -> [235]
[131,139,160,225,284] -> [172]
[131,139,225,284] -> [236]
[131,140,225,284] -> [149]
[131,141,225,284] -> [150]
[131,149,225,284] -> [140]
[131,150,225,284] -> [141]
[131,160,171,225,284] -> [138]
[131,160,172,225,284] -> [139]
[131,160,225,284] -> [50]
[131,166,225,284] -> [99]
[131,225,235,284] -> [138]
[131,225,236,284] -> [139]
[131,225,284] -> [8,23,53]
[132,134,160,225,284] -> [167]
[132,134,225,284] -> [149,230]
[132,135,136,160,225,284] -> [169]
[132,135,136,225,284] -> [232]
[132,135,137,160,225,284] -> [170]
[132,135,137,225,284] -> [233]
[132,135,160,169,225,284] -> [136]
[132,135,160,170,225,284] -> [137]
[132,135,160,225,284] -> [168]
[132,135,225,232,284] -> [136]
[132,135,225,233,284] -> [137]
[132,135,225,284] -> [150,231]
[132,149,225,284] -> [134]
[132,150,225,284] -> [135]
[132,160,167,225,284] -> [134]
[132,160,168,225,284] -> [135]
[132,160,225,284] -> [51]
[132,166,225,284] -> [99]
[132,225,230,284] -> [134]
[132,225,231,284] -> [135]
[132,225,284] -> [9,24,54]
[133,160,225,284] -> [52]
[133,225,284] -> [10,25,55]
[142,225,284] -> [145]
[143,225,284] -> [144]
[144,225,284] -> [R]
[144,225,284,R] -> [130]
[145,225,284] -> [R]
[145,225,284,R] -> [129]
[146,225,284] -> [R]
[146,225,284,R] -> [128]
[147,149,225,284] -> [87]
[147,149,225,284,R] -> [143]
[147,150,225,284] -> [86]
[147,150,225,284,R] -> [142]
[147,225,284] -> [7]
[147,225,284,R] -> [78,79,85,88,90,95,98,99]
[148,225,284] -> [6]
[148,225,284,R] -> [77]
[151,225,284] -> [159]
[152,225,284] -> [158]
[153,225,284] -> [156]
[154,225,284] -> [155]
[155,225,284] -> [R]
[155,225,284,R] -> [130]
[156,225,284] -> [R]
[156,225,284,R] -> [129]
[157,158,225,284] -> [R]
[157,159,225,284] -> [R]
[157,225,284] -> [R]
[157,225,284,R] -> [128,158,159]
[158,225,284] -> [157]
[159,225,284] -> [157]
[160,175,225,284] -> [130]
[160,175,225,284,R] -> [154]
[160,176,225,284] -> [129]
[160,176,225,284,R] -> [153]
[160,177,225,284] -> [128]
[160,177,225,284,R] -> [152]
[160,225,284] -> [49]
[160,225,284,R] -> [127]
[161,171,173,225,284] -> [87]
[161,171,173,225,284,R] -> [154]
[161,171,174,225,284] -> [86]
[161,171,174,225,284,R] -> [153]
[161,171,225,284] -> [87]
[161,171,225,284,R] -> [78,79,85,88,90,95,98,99]
[161,172,225,284] -> [86]
[161,172,225,284,R] -> [152]
[161,225,284] -> [48]
[161,225,284,R] -> [78,79,85,88,90,95,98,99]
[162,167,225,284] -> [87]
[162,167,225,284,R] -> [154]
[162,168,169,225,284] -> [87]
[162,168,169,225,284,R] -> [153]
[162,168,170,225,284] -> [86]
[162,168,170,225,284,R] -> [152]
[162,168,225,284] -> [86]
[162,168,225,284,R] -> [78,79,85,88,90,95,98,99]
[162,225,284] -> [47]
[162,225,284,R] -> [78,79,85,88,90,95,98,99]
[163,166,225,284] -> [R]
[163,166,225,284,R] -> [151]
[163,225,284] -> [45]
[163,225,284,R] -> [46,79,166]
[164,225,284] -> [44]
[164,225,284,R] -> [77]
[165,225,284] -> [43]
[165,225,284,R] -> [77]
[179,209,284] -> [19]
[179,228,284] -> [19]
[181,257,284] -> [194]
[181,263] -> [262]
[183,224,244,284] -> [251]
[183,269] -> [276]
[184,224,244,284] -> [250]
[184,269] -> [275]
[185,224,244,284] -> [249]
[185,269] -> [274]
[186,224,244,249,284] -> [216]
[186,274] -> [268]
[187,188,224,244,284] -> [246]
[187,188,269] -> [271]
[187,189,224,244,284] -> [247]
[187,189,269] -> [272]
[187,224,244,246,284] -> [188]
[187,224,244,247,284] -> [189]
[187,224,244,284] -> [194]
[187,269] -> [262]
[187,269,271] -> [188]
[187,269,272] -> [189]
[192,224,284] -> [245]
[192,284] -> [258]
[192,284,R] -> [204,221]
[193,224,284] -> [244]
[193,284] -> [257]
[193,284,R] -> [203,220]
[194,203,284] -> [201]
[194,220,284] -> [216]
[194,224,244,284] -> [187]
[194,257,284] -> [181]
[195,224,284] -> [243]
[195,284] -> [256]
[195,284,R] -> [202,219]
[196,197,222,284] -> [237]
[196,197,223,284] -> [238]
[196,197,224,284] -> [230]
[196,197,237,284] -> [222]
[196,197,238,284] -> [223]
[196,197,284] -> [211,235]
[196,198,224,232,284] -> [246]
[196,198,224,233,284] -> [247]
[196,198,224,246,284] -> [232]
[196,198,224,247,284] -> [233]
[196,198,224,284] -> [231]
[196,198,284] -> [212,236]
[196,211,284] -> [197]
[196,212,284] -> [198]
[196,224,230,284] -> [197]
[196,224,231,284] -> [198]
[196,224,284] -> [27]
[196,235,284] -> [197]
[196,236,284] -> [198]
[196,284] -> [28,254]
[199,284] -> [204]
[200,284] -> [203]
[201,203,284] -> [194]
[201,205,284] -> [27]
[202,284] -> [R]
[202,284,R] -> [195]
[203,284] -> [R]
[203,284,R] -> [193]
[204,284] -> [R]
[204,284,R] -> [192]
[205,284] -> [26]
[205,284,R] -> [200]
[206,213,284] -> [103]
[206,213,284,R] -> [199]
[206,284] -> [22]
[206,284,R] -> [5,42,78,79,102,109,114]
[207,211,284] -> [87]
[207,211,284,R] -> [78]
[207,212,284] -> [86]
[207,212,284,R] -> [199]
[207,284] -> [21]
[207,284,R] -> [78,79,85,88,90,95,98,99]
[208,284] -> [20]
[208,284,R] -> [199]
[209,284] -> [18]
[209,284,R] -> [178]
[210,284] -> [17]
[210,284,R] -> [77]
[214,284] -> [221]
[215,284] -> [220]
[216,220,284] -> [194]
[216,224,244,249,284] -> [186]
[217,284] -> [223]
[218,284] -> [222]
[219,222,284] -> [R]
[219,223,284] -> [R]
[219,284] -> [R]
[219,284,R] -> [195,222,223]
[220,284] -> [R]
[220,284,R] -> [193]
[221,284] -> [R]
[221,284,R] -> [192]
[222,284] -> [219]
[223,284] -> [219]
[224,243,284] -> [195]
[224,243,284,R] -> [218]
[224,244,249,284] -> [185]
[224,244,249,284,R] -> [215]
[224,244,250,284] -> [184]
[224,244,250,284,R] -> [217]
[224,244,251,284] -> [183]
[224,244,251,284,R] -> [214]
[224,244,284] -> [193]
[224,244,284,R] -> [182]
[224,245,246,248,284] -> [81]
[224,245,246,248,284,R] -> [217]
[224,245,246,284] -> [87]
[224,245,246,284,R] -> [79,80,83,84]
[224,245,247,284] -> [86]
[224,245,247,284,R] -> [214]
[224,245,284] -> [192]
[224,245,284,R] -> [78,79,85,88,90,95,98,99]
[224,284] -> [26]
[224,284,R] -> [191]
[225,239,284] -> [130]
[225,239,284,R] -> [218]
[225,240,242,284] -> [81]
[225,240,242,284,R] -> [217]
[225,240,284] -> [129]
[225,240,284,R] -> [79,80,83,84]
[225,241,284] -> [128]
[225,241,284,R] -> [214]
[225,284] -> [22]
[225,284,R] -> [5,42,78,79,127,146,157]
[226,235,237,284] -> [R]
[226,235,237,284,R] -> [218]
[226,235,238,284] -> [R]
[226,235,238,284,R] -> [217]
[226,235,284] -> [87]
[226,235,284,R] -> [79,237,238]
[226,236,284] -> [86]
[226,236,284,R] -> [214]
[226,284] -> [21]
[226,284,R] -> [78,79,85,88,90,95,98,99]
[227,230,284] -> [87]
[227,230,284,R] -> [218]
[227,231,232,234,284] -> [81]
[227,231,232,234,284,R] -> [217]
[227,231,232,284] -> [87]
[227,231,232,284,R] -> [79,80,83,84]
[227,231,233,284] -> [86]
[227,231,233,284,R] -> [214]
[227,231,284] -> [86]
[227,231,284,R] -> [78,79,85,88,90,95,98,99]
[227,284] -> [20]
[227,284,R] -> [78,79,85,88,90,95,98,99]
[228,284] -> [18]
[228,284,R] -> [178]
[229,284] -> [17]
[229,284,R] -> [77]
[253,284] -> [255,286]
[254,284] -> [196,262]
[255,284] -> [253]
[256,284] -> [195]
[256,284,R] -> [255]
[257,284] -> [193]
[257,284,R] -> [180]
[258,284] -> [192]
[258,284,R] -> [78]
[260] -> [285]
[260,277] -> [280]
[260,R] -> [264,270]
[261] -> [284]
[261,277] -> [279]
[261,R] -> [263,269]
[262,263] -> [181]
[262,269] -> [187]
[262,277,279] -> [268]
[262,284] -> [254]
[263] -> [R]
[263,R] -> [261]
[264] -> [R]
[264,R] -> [78,260]
[265] -> [276]
[266] -> [275]
[267] -> [274]
[268,274] -> [186]
[268,277,279] -> [262]
[269] -> [R]
[269,274] -> [185]
[269,275] -> [184]
[269,276] -> [183]
[269,R] -> [261]
[270] -> [R]
[270,271] -> [87]
[270,271,273] -> [81]
[270,271,273,R] -> [266]
[270,271,R] -> [79,80,83,84]
[270,272] -> [86]
[270,272,R] -> [265]
[270,R] -> [78,79,85,88,90,95,98,99,260]
[274] -> [269]
[275] -> [269]
[276] -> [269]
[277] -> [R]
[277,279] -> [261]
[277,279,R] -> [267]
[277,280] -> [260]
[277,280,R] -> [265]
[277,R] -> [259]
[278] -> [R]
[278,R] -> [266]
[282] -> [283,288]
[283] -> [282]
[284] -> [261]
[284,286] -> [253]
[284,286,R] -> [283]
[284,R] -> [16,40,78,79,191,202,219,252]
[285] -> [260]
[285,R] -> [283]
[288] -> [282]
[288,289] -> [R]
[288,289,291] -> [R]
[288,289,291,293] -> [R]
[288,289,291,293,295] -> [R]
[288,289,291,293,295,R] -> [78]
[288,289,291,293,296] -> [R]
[288,289,291,293,296,R] -> [76]
[288,289,291,293,R] -> [79,295,296]
[288,289,291,294] -> [R]
[288,289,291,294,R] -> [75]
[288,289,291,R] -> [79,293,294]
[288,289,292] -> [R]
[288,289,292,R] -> [76]
[288,289,R] -> [79,291,292]
[288,290] -> [R]
[288,290,R] -> [75]
[288,R] -> [79,289,290]
[R] -> [78,79,180,182,259,263,269,277,278,281,287]

### Solution ###

[16,26,40,75,76,78,79,180,182,184,185,191,193,195,200,202,203,205,215,217,218,219,220,222,223,224,243,244,249,250,252,253,255,256,257,259,261,263,266,267,269,274,275,277,278,279,281,282,283,284,286,287,288,289,290,291,292,293,294,295,296,R]

### Annotated ###

  let
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    id :E: (a :E: Type) -> (_x0 :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    subst :R: (a :E: Type) -> (P :E: (_x1 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (w :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x2 :E: a) -> Type x :E: a
        [subst] -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\w :R: P -E- x. w)
    cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_x3 :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) 
      a :E: Type b :E: Type f :E: (_x4 :E: a) -> b x :E: a
        [cong] -E- a -E- b -E- f -E- x -E- [x] -E- [Refl -E- a -E- x] = Refl -E- b -E- (f -E- x)
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor List :E: Type
    constructor Nil :R: List
    constructor Cons :R: (x :R: Bool) -> (xs :R: List) -> List
    one :E: (x :E: Bool) -> List = (\x :E: Bool. Cons -E- x -E- Nil)
    app :E: (_x5 :E: List) -> (_x6 :E: List) -> List 
      ys :E: List
        [app] -E- Nil -E- ys = ys
      x :E: Bool xs :E: List ys :E: List
        [app] -E- (Cons -E- x -E- xs) -E- ys = Cons -E- x -E- (app -E- xs -E- ys)
    appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) 
      [appRightNeutral] -E- Nil = Refl -E- List -E- Nil
      x :E: Bool xs :E: List
        [appRightNeutral] -E- (Cons -E- x -E- xs) = cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)
    appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) 
      ys :E: List zs :E: List
        [appAssoc] -E- Nil -E- ys -E- zs = Refl -E- List -E- (app -E- ys -E- zs)
      x :E: Bool xs :E: List ys :E: List zs :E: List
        [appAssoc] -E- (Cons -E- x -E- xs) -E- ys -E- zs = cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs -E- ys -E- zs)
    constructor Rev :E: (_x7 :E: List) -> Type
    constructor RNil :R: Rev -E- Nil
    constructor RSnoc :R: (xs :E: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))
    rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -E- xs -E- ys) 
      xs :E: List rxs :R: Rev -E- xs
        [rev'] -E- xs -R- rxs -R- Nil = subst -E- List -E- Rev -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs) -R- rxs
      xs :E: List rxs :R: Rev -E- xs y :R: Bool ys :R: List
        [rev'] -E- xs -R- rxs -R- (Cons -R- y -R- ys) = subst -E- List -E- Rev -E- (app -E- (app -E- xs -E- (one -E- y)) -E- ys) -E- (app -E- xs -E- (Cons -E- y -E- ys)) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys) -R- (rev' -E- (app -E- xs -E- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys)
    rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)
    reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List 
      [reverse'] -E- [Nil] -R- RNil = Nil
      xs :E: List x :R: Bool rxs :R: Rev -E- xs
        [reverse'] -E- [app -E- xs -E- (one -E- x)] -R- (RSnoc -E- xs -R- x -R- rxs) = Cons -R- x -R- (reverse' -E- xs -R- rxs)
    reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))
    main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))
  in main

### Specialised ###

  let
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    id :E: (a :E: Type) -> (_x0 :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    subst :R: (a :E: Type) -> (P :E: (_x1 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (w :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x2 :E: a) -> Type x :E: a
        [subst] -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\w :R: P -E- x. w)
    cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_x3 :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) 
      a :E: Type b :E: Type f :E: (_x4 :E: a) -> b x :E: a
        [cong] -E- a -E- b -E- f -E- x -E- [x] -E- [Refl -E- a -E- x] = Refl -E- b -E- (f -E- x)
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor List :E: Type
    constructor Nil :R: List
    constructor Cons :R: (x :R: Bool) -> (xs :R: List) -> List
    one :E: (x :E: Bool) -> List = (\x :E: Bool. Cons -E- x -E- Nil)
    app :E: (_x5 :E: List) -> (_x6 :E: List) -> List 
      ys :E: List
        [app] -E- Nil -E- ys = ys
      x :E: Bool xs :E: List ys :E: List
        [app] -E- (Cons -E- x -E- xs) -E- ys = Cons -E- x -E- (app -E- xs -E- ys)
    appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) 
      [appRightNeutral] -E- Nil = Refl -E- List -E- Nil
      x :E: Bool xs :E: List
        [appRightNeutral] -E- (Cons -E- x -E- xs) = cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)
    appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) 
      ys :E: List zs :E: List
        [appAssoc] -E- Nil -E- ys -E- zs = Refl -E- List -E- (app -E- ys -E- zs)
      x :E: Bool xs :E: List ys :E: List zs :E: List
        [appAssoc] -E- (Cons -E- x -E- xs) -E- ys -E- zs = cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs -E- ys -E- zs)
    constructor Rev :E: (_x7 :E: List) -> Type
    constructor RNil :R: Rev -E- Nil
    constructor RSnoc :R: (xs :E: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))
    rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -E- xs -E- ys) 
      xs :E: List rxs :R: Rev -E- xs
        [rev'] -E- xs -R- rxs -R- Nil = subst -E- List -E- Rev -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs) -R- rxs
      xs :E: List rxs :R: Rev -E- xs y :R: Bool ys :R: List
        [rev'] -E- xs -R- rxs -R- (Cons -R- y -R- ys) = subst -E- List -E- Rev -E- (app -E- (app -E- xs -E- (one -E- y)) -E- ys) -E- (app -E- xs -E- (Cons -E- y -E- ys)) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys) -R- (rev' -E- (app -E- xs -E- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys)
    rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)
    reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List 
      [reverse'] -E- [Nil] -R- RNil = Nil
      xs :E: List x :R: Bool rxs :R: Rev -E- xs
        [reverse'] -E- [app -E- xs -E- (one -E- x)] -R- (RSnoc -E- xs -R- x -R- rxs) = Cons -R- x -R- (reverse' -E- xs -R- rxs)
    reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))
    main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))
  in main

### Final annotation ###

  let
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    id :E: (a :E: Type) -> (_x0 :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    subst :R: (a :E: Type) -> (P :E: (_x1 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (w :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x2 :E: a) -> Type x :E: a
        [subst] -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\w :R: P -E- x. w)
    cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_x3 :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) 
      a :E: Type b :E: Type f :E: (_x4 :E: a) -> b x :E: a
        [cong] -E- a -E- b -E- f -E- x -E- [x] -E- [Refl -E- a -E- x] = Refl -E- b -E- (f -E- x)
    constructor Bool :E: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor List :E: Type
    constructor Nil :R: List
    constructor Cons :R: (x :R: Bool) -> (xs :R: List) -> List
    one :E: (x :E: Bool) -> List = (\x :E: Bool. Cons -E- x -E- Nil)
    app :E: (_x5 :E: List) -> (_x6 :E: List) -> List 
      ys :E: List
        [app] -E- Nil -E- ys = ys
      x :E: Bool xs :E: List ys :E: List
        [app] -E- (Cons -E- x -E- xs) -E- ys = Cons -E- x -E- (app -E- xs -E- ys)
    appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) 
      [appRightNeutral] -E- Nil = Refl -E- List -E- Nil
      x :E: Bool xs :E: List
        [appRightNeutral] -E- (Cons -E- x -E- xs) = cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)
    appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) 
      ys :E: List zs :E: List
        [appAssoc] -E- Nil -E- ys -E- zs = Refl -E- List -E- (app -E- ys -E- zs)
      x :E: Bool xs :E: List ys :E: List zs :E: List
        [appAssoc] -E- (Cons -E- x -E- xs) -E- ys -E- zs = cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs -E- ys -E- zs)
    constructor Rev :E: (_x7 :E: List) -> Type
    constructor RNil :R: Rev -E- Nil
    constructor RSnoc :R: (xs :E: List) -> (x :R: Bool) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))
    rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -E- xs -E- ys) 
      xs :E: List rxs :R: Rev -E- xs
        [rev'] -E- xs -R- rxs -R- Nil = subst -E- List -E- Rev -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs) -R- rxs
      xs :E: List rxs :R: Rev -E- xs y :R: Bool ys :R: List
        [rev'] -E- xs -R- rxs -R- (Cons -R- y -R- ys) = subst -E- List -E- Rev -E- (app -E- (app -E- xs -E- (one -E- y)) -E- ys) -E- (app -E- xs -E- (Cons -E- y -E- ys)) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys) -R- (rev' -E- (app -E- xs -E- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys)
    rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)
    reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List 
      [reverse'] -E- [Nil] -R- RNil = Nil
      xs :E: List x :R: Bool rxs :R: Rev -E- xs
        [reverse'] -E- [app -E- xs -E- (one -E- x)] -R- (RSnoc -E- xs -R- x -R- rxs) = Cons -R- x -R- (reverse' -E- xs -R- rxs)
    reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))
    main :R: List = reverse -R- (Cons -R- T -R- (Cons -R- F -R- (Cons -R- T -R- (Cons -R- F -R- Nil))))
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    subst = (\w. w)
    constructor T : Bool
    constructor F : Bool
    constructor Nil : List
    constructor Cons : (x) -> (xs) -> List
    constructor RNil : Rev
    constructor RSnoc : (x) -> (rxs) -> Rev
    rev' 
      [_] rxs Nil = subst rxs
      [_] rxs (Cons y ys) = subst (rev' (RSnoc y rxs) ys)
    rev = (\xs. rev' RNil xs)
    reverse' 
      [_] RNil = Nil
      [_] (RSnoc x rxs) = Cons x (reverse' rxs)
    reverse = (\xs. reverse' (rev xs))
    main = reverse (Cons T (Cons F (Cons T (Cons F Nil))))
  in main

### Normal forms ###

unerased:
  
  let
    constructor Bool : Type
    constructor T : Bool
    constructor F : Bool
    constructor List : Type
    constructor Nil : List
    constructor Cons : (x :R: Bool) -> (xs :R: List) -> List
  in Cons F (Cons T (Cons F (Cons T Nil)))

erased:
  
  let
    constructor T : Bool
    constructor F : Bool
    constructor Nil : List
    constructor Cons : (x) -> (xs) -> List
  in Cons F (Cons T (Cons F (Cons T Nil)))

