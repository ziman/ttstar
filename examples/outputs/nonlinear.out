-- vim: ft=ttstar

### Desugared ###

  let
    f : (_x0 : Type) -> (_x1 : Type) -> Type 
      (x : Type)
         x x = x
    main : Type = f Type Type
  in main

### Evarified ###

  let
    f :1: (_x0 :2: Type) -> (_x1 :3: Type) -> Type 
      (x :4: Type)
         -5- x -6- x = x
    main :7: Type = f -9- Type -8- Type
  in main

### Constraints ###

[] -> [1,2,3,4,5,6,8,9,R]
[R] -> [7]

### Solution ###

[1,2,3,4,5,6,7,8,9,R]

### Annotated ###

  let
    f :R: (_x0 :R: Type) -> (_x1 :R: Type) -> Type 
      (x :R: Type)
         -R- x -R- x = x
    main :R: Type = f -R- Type -R- Type
  in main

### Specialised ###

  let
    f :R: (_x0 :R: Type) -> (_x1 :R: Type) -> Type 
      (x :R: Type)
         -R- x -R- x = x
    main :R: Type = f -R- Type -R- Type
  in main

### Final annotation ###

  let
    f :R: (_x0 :R: Type) -> (_x1 :R: Type) -> Type 
      (x :R: Type)
         -R- x -R- x = x
    main :R: Type = f -R- Type -R- Type
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    f 
       x x = x
    main = f Type Type
  in main

### Normal forms ###

unerased:
ttstar: nonlinear pattern
CallStack (from HasCallStack):
  error, called at ./TT/Normalise.hs:210:38 in main:TT.Normalise
