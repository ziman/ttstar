-- vim: ft=ttstar
  let
    constructor Z : N
    constructor S : (_x0) -> N
    constructor T : B
    constructor F : B
    constructor Cons : (_x1) -> (_x2) -> List
    constructor Nil : List
    constructor Nothing : Maybe
    constructor Just : Maybe
    not 
       T = F
       F = T
    constructor RNil : Rev
    constructor RSnoc : (x) -> (rxs) -> Rev
    rev' 
       rxs Nil = rxs
       rxs (Cons y ys) = rev' (RSnoc y rxs) ys
    reverse' 
       RNil = Nil
       (RSnoc x rxs) = Cons x (reverse' rxs)
    constructor VNil : V
    constructor VOne : V
    constructor VTwo : (x) -> (u) -> (y) -> V
    length 
       Nil = Z
       (Cons _ xs) = S (length xs)
    build 
       Z _ _ = VNil
       (S Z) (Cons _ _) (Cons _ _) = VOne
       (S (S n)) (Cons x xs) (Cons y ys) = VTwo x (build n xs ys) y
       (S _) Nil Nil = VNil
    decEq 
       T T = Just
       F F = Just
       T F = Nothing
       F T = Nothing
    isPalinV 
       VNil = Just
       VOne = Just
       (VTwo x v y) = 
        let isPalinV' 
           Just Just = Just
           _ _ = Nothing
        in isPalinV' (decEq x y) (isPalinV v)
    genList 
       _ Z = Nil
       b (S n) = Cons b (genList (not b) n)
    isJust 
       Just = T
       Nothing = F
  in 
    let foreign inputSize
    in isJust (isPalinV (build (length (genList T inputSize)) (genList T inputSize) (reverse' (rev' RNil (genList T inputSize)))))
