-- vim: ft=ttstar
  let
    postulate Z : N
    postulate S : (_x0) -> N
    postulate T : B
    postulate F : B
    postulate Cons : (_x1) -> (_x2) -> List
    postulate Nil : List
    postulate Nothing : Maybe
    postulate Just : Maybe
    not 
      [_] T = F
      [_] F = T
    postulate RNil : Rev
    postulate RSnoc : (x) -> (rxs) -> Rev
    rev' 
      [_] rxs Nil = rxs
      [_] rxs (Cons y ys) = rev' (RSnoc y rxs) ys
    reverse' 
      [_] RNil = Nil
      [_] (RSnoc x rxs) = Cons x (reverse' rxs)
    postulate VNil : V
    postulate VOne : V
    postulate VTwo : (x) -> (u) -> (y) -> V
    length 
      [_] Nil = Z
      [_] (Cons _ xs) = S (length xs)
    build 
      [_] Z _ _ = VNil
      [_] (S Z) (Cons _ _) (Cons _ _) = VOne
      [_] (S (S n)) (Cons x xs) (Cons y ys) = VTwo x (build n xs ys) y
      [_] (S _) Nil Nil = VNil
    decEq 
      [_] T T = Just
      [_] F F = Just
      [_] T F = Nothing
      [_] F T = Nothing
    isPalinV 
      [_] VNil = Just
      [_] VOne = Just
      [_] (VTwo x v y) = 
        let isPalinV' 
          [_] Just Just = Just
          [_] _ _ = Nothing
        in isPalinV' (decEq x y) (isPalinV v)
    genList 
      [_] _ Z = Nil
      [_] b (S n) = Cons b (genList (not b) n)
    isJust 
      [_] Just = T
      [_] Nothing = F
  in 
    let foreign inputSize
    in isJust (isPalinV (build (length (genList T inputSize)) (genList T inputSize) (reverse' (rev' RNil (genList T inputSize)))))
