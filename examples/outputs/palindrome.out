-- vim: ft=ttstar

### Desugared ###

  let
    postulate N : Type
    postulate Z : N
    postulate S : (_x0 : N) -> N
    postulate B : Type
    postulate T : B
    postulate F : B
    postulate List : Type
    postulate Cons : (_x1 : B) -> (_x2 : List) -> List
    postulate Nil : List
    postulate Maybe : (_x3 : Type) -> Type
    postulate Nothing : (a : Type) -> Maybe a
    postulate Just : (a : Type) -> (x : a) -> Maybe a
    not : (_x4 : B) -> B 
      [not] T = F
      [not] F = T
    postulate Id : (a : Type) -> (x : a) -> (y : a) -> Type
    postulate Refl : (a : Type) -> (x : a) -> Id a x x
    id : (a : Type) -> (_x5 : a) -> a = (\a : Type. (\x : a. x))
    subst : (a : Type) -> (P : (_x6 : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (w : P x) -> P y 
      a : Type P : (_x7 : a) -> Type x : a
        [subst] a P x [x] [Refl a x] = (\w : P x. w)
    cong : (a : Type) -> (b : Type) -> (f : (_x8 : a) -> b) -> (x : a) -> (y : a) -> (eq : Id a x y) -> Id b (f x) (f y) 
      a : Type b : Type f : (_x9 : a) -> b x : a
        [cong] a b f x [x] [Refl a x] = Refl b (f x)
    one : (x : B) -> List = (\x : B. Cons x Nil)
    app : (_x10 : List) -> (_x11 : List) -> List 
      ys : List
        [app] Nil ys = ys
      x : B xs : List ys : List
        [app] (Cons x xs) ys = Cons x (app xs ys)
    appRightNeutral : (ys : List) -> Id List ys (app ys Nil) 
      [appRightNeutral] Nil = Refl List Nil
      x : B xs : List
        [appRightNeutral] (Cons x xs) = cong List List (Cons x) xs (app xs Nil) (appRightNeutral xs)
    appAssoc : (xs : List) -> (ys : List) -> (zs : List) -> Id List (app (app xs ys) zs) (app xs (app ys zs)) 
      ys : List zs : List
        [appAssoc] Nil ys zs = Refl List (app ys zs)
      x : B xs : List ys : List zs : List
        [appAssoc] (Cons x xs) ys zs = cong List List (Cons x) (app (app xs ys) zs) (app xs (app ys zs)) (appAssoc xs ys zs)
    postulate Rev : (_x12 : List) -> Type
    postulate RNil : Rev Nil
    postulate RSnoc : (xs : List) -> (x : B) -> (rxs : Rev xs) -> Rev (app xs (one x))
    rev' : (xs : List) -> (rxs : Rev xs) -> (ys : List) -> Rev (app xs ys) 
      xs : List rxs : Rev xs
        [rev'] xs rxs Nil = subst List Rev xs (app xs Nil) (appRightNeutral xs) rxs
      xs : List rxs : Rev xs y : B ys : List
        [rev'] xs rxs (Cons y ys) = subst List Rev (app (app xs (one y)) ys) (app xs (Cons y ys)) (appAssoc xs (one y) ys) (rev' (app xs (one y)) (RSnoc xs y rxs) ys)
    rev : (xs : List) -> Rev xs = (\xs : List. rev' Nil RNil xs)
    reverse' : (xs : List) -> (rxs : Rev xs) -> List 
      [reverse'] [Nil] RNil = Nil
      xs : List x : B rxs : Rev xs
        [reverse'] [app xs (one x)] (RSnoc xs x rxs) = Cons x (reverse' xs rxs)
    reverse : (xs : List) -> List = (\xs : List. reverse' xs (rev xs))
    postulate V : (_x13 : List) -> Type
    postulate VNil : V Nil
    postulate VOne : (x : B) -> V (Cons x Nil)
    postulate VTwo : (x : B) -> (xs : List) -> (u : V xs) -> (y : B) -> V (Cons x (app xs (one y)))
    length : (_x14 : List) -> N 
      [length] Nil = Z
      x : B xs : List
        [length] (Cons x xs) = S (length xs)
    index : (_x15 : N) -> (_x16 : List) -> (_x17 : List) -> List 
      xs : List ys : List
        [index] Z xs ys = Nil
      x : B xs : List y : B ys : List
        [index] (S Z) (Cons x xs) (Cons y ys) = Cons x Nil
      n : N x : B xs : List y : B ys : List
        [index] (S (S n)) (Cons x xs) (Cons y ys) = Cons x (app (index n xs ys) (one y))
      n : N
        [index] (S n) Nil Nil = Nil
    build : (n : N) -> (xs : List) -> (ys : List) -> V (index n xs ys) 
      xs : List ys : List
        [build] Z xs ys = VNil
      x : B xs : List y : B ys : List
        [build] (S Z) (Cons x xs) (Cons y ys) = VOne x
      n : N x : B xs : List y : B ys : List
        [build] (S (S n)) (Cons x xs) (Cons y ys) = VTwo x (index n xs ys) (build n xs ys) y
      n : N
        [build] (S n) Nil Nil = VNil
    postulate eq : (xs : List) -> Id List (index (length xs) xs (reverse xs)) xs
    toV : (xs : List) -> V xs = (\xs : List. subst List V (index (length xs) xs (reverse xs)) xs (eq xs) (build (length xs) xs (reverse xs)))
    postulate IsPalindrome : (_x18 : List) -> Type
    postulate PNil : IsPalindrome Nil
    postulate POne : (b : B) -> IsPalindrome (Cons b Nil)
    postulate PTwo : (b : B) -> (xs : List) -> (pf : IsPalindrome xs) -> IsPalindrome (Cons b (app xs (one b)))
    decEq : (x : B) -> (y : B) -> Maybe (Id B x y) 
      [decEq] T T = Just (Id B T T) (Refl B T)
      [decEq] F F = Just (Id B F F) (Refl B F)
      [decEq] T F = Nothing (Id B T F)
      [decEq] F T = Nothing (Id B F T)
    isPalinV : (xs : List) -> (v : V xs) -> Maybe (IsPalindrome xs) 
      [isPalinV] [Nil] VNil = Just (IsPalindrome Nil) PNil
      x : B
        [isPalinV] [Cons x Nil] (VOne x) = Just (IsPalindrome (Cons x Nil)) (POne x)
      x : B xs : List y : B v : V xs
        [isPalinV] [Cons x (app xs (one y))] (VTwo x xs v y) = 
          let isPalinV' : (x : B) -> (y : B) -> (xs : List) -> (v : V xs) -> (pfB : Maybe (Id B x y)) -> (pfV : Maybe (IsPalindrome xs)) -> Maybe (IsPalindrome (Cons x (app xs (one y)))) 
            x : B xs : List v : V xs pfV : IsPalindrome xs
              [isPalinV'] x [x] xs v (Just [Id B x x] [Refl B x]) (Just [IsPalindrome xs] pfV) = Just (IsPalindrome (Cons x (app xs (one x)))) (PTwo x xs pfV)
            x : B y : B xs : List v : V xs pfB : Maybe (Id B x y) pfV : Maybe (IsPalindrome xs)
              [isPalinV'] x y xs v pfB pfV = Nothing (IsPalindrome (Cons x (app xs (one y))))
          in isPalinV' x y xs v (decEq x y) (isPalinV xs v)
    isPalindrome : (xs : List) -> Maybe (IsPalindrome xs) = (\xs : List. isPalinV xs (toV xs))
    genList : (_x19 : B) -> (_x20 : N) -> List 
      b : B
        [genList] b Z = Nil
      b : B n : N
        [genList] b (S n) = Cons b (genList (not b) n)
    isJust : (a : Type) -> (x : Maybe a) -> B 
      a : Type x : a
        [isJust] a (Just [a] x) = T
      a : Type
        [isJust] a (Nothing [a]) = F
    main : B = 
      let
        foreign inputSize : N
        inputList : List = genList T inputSize
      in isJust (IsPalindrome inputList) (isPalindrome inputList)
  in main

### Evarified ###

  let
    postulate N :1: Type
    postulate Z :2: N
    postulate S :3: (_x0 :4: N) -> N
    postulate B :5: Type
    postulate T :6: B
    postulate F :7: B
    postulate List :8: Type
    postulate Cons :9: (_x1 :10: B) -> (_x2 :11: List) -> List
    postulate Nil :12: List
    postulate Maybe :13: (_x3 :14: Type) -> Type
    postulate Nothing :15: (a :16: Type) -> Maybe -17- a
    postulate Just :18: (a :19: Type) -> (x :20: a) -> Maybe -21- a
    not :22: (_x4 :23: B) -> B 
      [not] -24- T = F
      [not] -25- F = T
    postulate Id :26: (a :27: Type) -> (x :28: a) -> (y :29: a) -> Type
    postulate Refl :30: (a :31: Type) -> (x :32: a) -> Id -35- a -34- x -33- x
    id :36: (a :37: Type) -> (_x5 :38: a) -> a = (\a :39: Type. (\x :40: a. x))
    subst :41: (a :42: Type) -> (P :43: (_x6 :44: a) -> Type) -> (x :45: a) -> (y :46: a) -> (eq :47: Id -50- a -49- x -48- y) -> (w :51: P -52- x) -> P -53- y 
      a :54: Type P :55: (_x7 :56: a) -> Type x :57: a
        [subst] -62- a -61- P -60- x -59- [x] -58- [Refl -64- a -63- x] = (\w :65: P -66- x. w)
    cong :67: (a :68: Type) -> (b :69: Type) -> (f :70: (_x8 :71: a) -> b) -> (x :72: a) -> (y :73: a) -> (eq :74: Id -77- a -76- x -75- y) -> Id -80- b -79- (f -81- x) -78- (f -82- y) 
      a :83: Type b :84: Type f :85: (_x9 :86: a) -> b x :87: a
        [cong] -93- a -92- b -91- f -90- x -89- [x] -88- [Refl -95- a -94- x] = Refl -97- b -96- (f -98- x)
    one :99: (x :100: B) -> List = (\x :101: B. Cons -103- x -102- Nil)
    app :104: (_x10 :105: List) -> (_x11 :106: List) -> List 
      ys :107: List
        [app] -109- Nil -108- ys = ys
      x :110: B xs :111: List ys :112: List
        [app] -114- (Cons -116- x -115- xs) -113- ys = Cons -118- x -117- (app -120- xs -119- ys)
    appRightNeutral :121: (ys :122: List) -> Id -125- List -124- ys -123- (app -127- ys -126- Nil) 
      [appRightNeutral] -128- Nil = Refl -130- List -129- Nil
      x :131: B xs :132: List
        [appRightNeutral] -133- (Cons -135- x -134- xs) = cong -141- List -140- List -139- (Cons -142- x) -138- xs -137- (app -144- xs -143- Nil) -136- (appRightNeutral -145- xs)
    appAssoc :146: (xs :147: List) -> (ys :148: List) -> (zs :149: List) -> Id -152- List -151- (app -154- (app -156- xs -155- ys) -153- zs) -150- (app -158- xs -157- (app -160- ys -159- zs)) 
      ys :161: List zs :162: List
        [appAssoc] -165- Nil -164- ys -163- zs = Refl -167- List -166- (app -169- ys -168- zs)
      x :170: B xs :171: List ys :172: List zs :173: List
        [appAssoc] -176- (Cons -178- x -177- xs) -175- ys -174- zs = cong -184- List -183- List -182- (Cons -185- x) -181- (app -187- (app -189- xs -188- ys) -186- zs) -180- (app -191- xs -190- (app -193- ys -192- zs)) -179- (appAssoc -196- xs -195- ys -194- zs)
    postulate Rev :197: (_x12 :198: List) -> Type
    postulate RNil :199: Rev -200- Nil
    postulate RSnoc :201: (xs :202: List) -> (x :203: B) -> (rxs :204: Rev -205- xs) -> Rev -206- (app -208- xs -207- (one -209- x))
    rev' :210: (xs :211: List) -> (rxs :212: Rev -213- xs) -> (ys :214: List) -> Rev -215- (app -217- xs -216- ys) 
      xs :218: List rxs :219: Rev -220- xs
        [rev'] -223- xs -222- rxs -221- Nil = subst -229- List -228- Rev -227- xs -226- (app -231- xs -230- Nil) -225- (appRightNeutral -232- xs) -224- rxs
      xs :233: List rxs :234: Rev -235- xs y :236: B ys :237: List
        [rev'] -240- xs -239- rxs -238- (Cons -242- y -241- ys) = subst -248- List -247- Rev -246- (app -250- (app -252- xs -251- (one -253- y)) -249- ys) -245- (app -255- xs -254- (Cons -257- y -256- ys)) -244- (appAssoc -260- xs -259- (one -261- y) -258- ys) -243- (rev' -264- (app -266- xs -265- (one -267- y)) -263- (RSnoc -270- xs -269- y -268- rxs) -262- ys)
    rev :271: (xs :272: List) -> Rev -273- xs = (\xs :274: List. rev' -277- Nil -276- RNil -275- xs)
    reverse' :278: (xs :279: List) -> (rxs :280: Rev -281- xs) -> List 
      [reverse'] -283- [Nil] -282- RNil = Nil
      xs :284: List x :285: B rxs :286: Rev -287- xs
        [reverse'] -289- [app -291- xs -290- (one -292- x)] -288- (RSnoc -295- xs -294- x -293- rxs) = Cons -297- x -296- (reverse' -299- xs -298- rxs)
    reverse :300: (xs :301: List) -> List = (\xs :302: List. reverse' -304- xs -303- (rev -305- xs))
    postulate V :306: (_x13 :307: List) -> Type
    postulate VNil :308: V -309- Nil
    postulate VOne :310: (x :311: B) -> V -312- (Cons -314- x -313- Nil)
    postulate VTwo :315: (x :316: B) -> (xs :317: List) -> (u :318: V -319- xs) -> (y :320: B) -> V -321- (Cons -323- x -322- (app -325- xs -324- (one -326- y)))
    length :327: (_x14 :328: List) -> N 
      [length] -329- Nil = Z
      x :330: B xs :331: List
        [length] -332- (Cons -334- x -333- xs) = S -335- (length -336- xs)
    index :337: (_x15 :338: N) -> (_x16 :339: List) -> (_x17 :340: List) -> List 
      xs :341: List ys :342: List
        [index] -345- Z -344- xs -343- ys = Nil
      x :346: B xs :347: List y :348: B ys :349: List
        [index] -352- (S -353- Z) -351- (Cons -355- x -354- xs) -350- (Cons -357- y -356- ys) = Cons -359- x -358- Nil
      n :360: N x :361: B xs :362: List y :363: B ys :364: List
        [index] -367- (S -368- (S -369- n)) -366- (Cons -371- x -370- xs) -365- (Cons -373- y -372- ys) = Cons -375- x -374- (app -377- (index -380- n -379- xs -378- ys) -376- (one -381- y))
      n :382: N
        [index] -385- (S -386- n) -384- Nil -383- Nil = Nil
    build :387: (n :388: N) -> (xs :389: List) -> (ys :390: List) -> V -391- (index -394- n -393- xs -392- ys) 
      xs :395: List ys :396: List
        [build] -399- Z -398- xs -397- ys = VNil
      x :400: B xs :401: List y :402: B ys :403: List
        [build] -406- (S -407- Z) -405- (Cons -409- x -408- xs) -404- (Cons -411- y -410- ys) = VOne -412- x
      n :413: N x :414: B xs :415: List y :416: B ys :417: List
        [build] -420- (S -421- (S -422- n)) -419- (Cons -424- x -423- xs) -418- (Cons -426- y -425- ys) = VTwo -430- x -429- (index -433- n -432- xs -431- ys) -428- (build -436- n -435- xs -434- ys) -427- y
      n :437: N
        [build] -440- (S -441- n) -439- Nil -438- Nil = VNil
    postulate eq :442: (xs :443: List) -> Id -446- List -445- (index -449- (length -450- xs) -448- xs -447- (reverse -451- xs)) -444- xs
    toV :452: (xs :453: List) -> V -454- xs = (\xs :455: List. subst -461- List -460- V -459- (index -464- (length -465- xs) -463- xs -462- (reverse -466- xs)) -458- xs -457- (eq -467- xs) -456- (build -470- (length -471- xs) -469- xs -468- (reverse -472- xs)))
    postulate IsPalindrome :473: (_x18 :474: List) -> Type
    postulate PNil :475: IsPalindrome -476- Nil
    postulate POne :477: (b :478: B) -> IsPalindrome -479- (Cons -481- b -480- Nil)
    postulate PTwo :482: (b :483: B) -> (xs :484: List) -> (pf :485: IsPalindrome -486- xs) -> IsPalindrome -487- (Cons -489- b -488- (app -491- xs -490- (one -492- b)))
    decEq :493: (x :494: B) -> (y :495: B) -> Maybe -496- (Id -499- B -498- x -497- y) 
      [decEq] -501- T -500- T = Just -503- (Id -506- B -505- T -504- T) -502- (Refl -508- B -507- T)
      [decEq] -510- F -509- F = Just -512- (Id -515- B -514- F -513- F) -511- (Refl -517- B -516- F)
      [decEq] -519- T -518- F = Nothing -520- (Id -523- B -522- T -521- F)
      [decEq] -525- F -524- T = Nothing -526- (Id -529- B -528- F -527- T)
    isPalinV :530: (xs :531: List) -> (v :532: V -533- xs) -> Maybe -534- (IsPalindrome -535- xs) 
      [isPalinV] -537- [Nil] -536- VNil = Just -539- (IsPalindrome -540- Nil) -538- PNil
      x :541: B
        [isPalinV] -543- [Cons -545- x -544- Nil] -542- (VOne -546- x) = Just -548- (IsPalindrome -549- (Cons -551- x -550- Nil)) -547- (POne -552- x)
      x :553: B xs :554: List y :555: B v :556: V -557- xs
        [isPalinV] -559- [Cons -561- x -560- (app -563- xs -562- (one -564- y))] -558- (VTwo -568- x -567- xs -566- v -565- y) = 
          let isPalinV' :569: (x :570: B) -> (y :571: B) -> (xs :572: List) -> (v :573: V -574- xs) -> (pfB :575: Maybe -576- (Id -579- B -578- x -577- y)) -> (pfV :580: Maybe -581- (IsPalindrome -582- xs)) -> Maybe -583- (IsPalindrome -584- (Cons -586- x -585- (app -588- xs -587- (one -589- y)))) 
            x :590: B xs :591: List v :592: V -593- xs pfV :594: IsPalindrome -595- xs
              [isPalinV'] -601- x -600- [x] -599- xs -598- v -597- (Just -603- [Id -606- B -605- x -604- x] -602- [Refl -608- B -607- x]) -596- (Just -610- [IsPalindrome -611- xs] -609- pfV) = Just -613- (IsPalindrome -614- (Cons -616- x -615- (app -618- xs -617- (one -619- x)))) -612- (PTwo -622- x -621- xs -620- pfV)
            x :623: B y :624: B xs :625: List v :626: V -627- xs pfB :628: Maybe -629- (Id -632- B -631- x -630- y) pfV :633: Maybe -634- (IsPalindrome -635- xs)
              [isPalinV'] -641- x -640- y -639- xs -638- v -637- pfB -636- pfV = Nothing -642- (IsPalindrome -643- (Cons -645- x -644- (app -647- xs -646- (one -648- y))))
          in isPalinV' -654- x -653- y -652- xs -651- v -650- (decEq -656- x -655- y) -649- (isPalinV -658- xs -657- v)
    isPalindrome :659: (xs :660: List) -> Maybe -661- (IsPalindrome -662- xs) = (\xs :663: List. isPalinV -665- xs -664- (toV -666- xs))
    genList :667: (_x19 :668: B) -> (_x20 :669: N) -> List 
      b :670: B
        [genList] -672- b -671- Z = Nil
      b :673: B n :674: N
        [genList] -676- b -675- (S -677- n) = Cons -679- b -678- (genList -681- (not -682- b) -680- n)
    isJust :683: (a :684: Type) -> (x :685: Maybe -686- a) -> B 
      a :687: Type x :688: a
        [isJust] -690- a -689- (Just -692- [a] -691- x) = T
      a :693: Type
        [isJust] -695- a -694- (Nothing -696- [a]) = F
    main :697: B = 
      let
        foreign inputSize :698: N
        inputList :699: List = genList -701- T -700- inputSize
      in isJust -703- (IsPalindrome -704- inputList) -702- (isPalindrome -705- inputList)
  in main

### Constraints ###

[] -> [2,3,4,6,7,9,10,11,12,15,18,22,23,24,25,41,51,65,199,201,203,204,210,212,214,219,221,222,224,234,236,237,238,239,241,242,243,256,257,262,263,268,269,271,272,274,275,276,278,280,282,285,286,288,293,294,296,297,298,300,301,302,303,305,308,310,315,316,318,320,327,328,329,331,332,333,334,335,336,387,388,389,390,397,398,399,404,405,406,407,408,409,410,411,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,430,434,435,436,438,439,440,441,452,453,455,456,465,468,469,470,471,472,493,494,495,500,501,509,510,518,519,524,525,530,532,536,542,553,555,556,558,565,566,568,569,575,580,596,597,636,637,649,650,655,656,657,659,660,663,664,666,667,668,669,671,672,673,674,675,676,677,678,679,680,681,682,683,685,689,694,698,699,700,701,702,705,R]
[16] -> [26,473,520,526,642,696]
[16,27] -> [5,523,529]
[16,28] -> [522,528]
[16,29] -> [521,527]
[16,100,106,474] -> [101,624,648]
[16,101,106,474] -> [100]
[16,105,474] -> [625,647]
[16,106,474] -> [99,101,102,103,646]
[16,106,474,648] -> [100]
[16,110,474] -> [116]
[16,111,474] -> [115]
[16,474] -> [104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,623,643,644,645]
[16,474,646] -> [106]
[16,474,647] -> [105]
[16,521] -> [29]
[16,522] -> [28]
[16,523] -> [27]
[16,527] -> [29]
[16,528] -> [28]
[16,529] -> [27]
[16,643] -> [474]
[17] -> [496,583,686]
[19] -> [26,473,503,512,539,548,603,610,613,692]
[19,27] -> [5,506,515]
[19,28] -> [505,514]
[19,29] -> [504,513]
[19,100,106,474] -> [101,590,619]
[19,101,106,474] -> [100]
[19,105,474] -> [591,618]
[19,106,474] -> [99,101,102,103,617]
[19,106,474,619] -> [100]
[19,110,474] -> [116]
[19,111,474] -> [115]
[19,474] -> [104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,540,541,549,550,551,590,614,615,616]
[19,474,617] -> [106]
[19,474,618] -> [105]
[19,504] -> [29]
[19,505] -> [28]
[19,506] -> [27]
[19,513] -> [29]
[19,514] -> [28]
[19,515] -> [27]
[19,540] -> [474]
[19,549] -> [474]
[19,614] -> [474]
[20] -> [30,475,477,482,502,511,538,547,602,609,612,691]
[20,31] -> [5,508,517]
[20,32] -> [507,516]
[20,33] -> [504,513]
[20,34] -> [505,514]
[20,35] -> [506,515]
[20,102] -> [102]
[20,103] -> [103]
[20,476] -> [540]
[20,478] -> [541,552]
[20,479] -> [549]
[20,480] -> [550]
[20,481] -> [551]
[20,483] -> [590,622]
[20,484] -> [591,621]
[20,485] -> [594,620]
[20,485,486] -> [595]
[20,485,595] -> [486]
[20,487] -> [614]
[20,488] -> [615]
[20,489] -> [616]
[20,490] -> [617]
[20,491] -> [618]
[20,504] -> [33]
[20,505] -> [34]
[20,506] -> [35]
[20,507] -> [32]
[20,508] -> [31]
[20,513] -> [33]
[20,514] -> [34]
[20,515] -> [35]
[20,516] -> [32]
[20,517] -> [31]
[20,540] -> [476]
[20,549] -> [479]
[20,550] -> [480]
[20,551] -> [481]
[20,552] -> [478]
[20,614] -> [487]
[20,615] -> [488]
[20,616] -> [489]
[20,617] -> [490]
[20,618] -> [491]
[20,620] -> [485]
[20,621] -> [484]
[20,622] -> [483]
[21] -> [496,534,576,581,583,686]
[27,603] -> [5,606]
[28,603] -> [590,605]
[29,603] -> [590,604]
[31,45,47,88,340] -> [83,95]
[31,45,47,340] -> [8,84,97,130,167]
[31,45,58,340] -> [54,64]
[31,47] -> [8,84,97,130,167]
[31,47,88] -> [83,95]
[31,58] -> [54,64]
[31,602] -> [5,608]
[32,45,47,86,340] -> [87,98]
[32,45,47,88,340] -> [87,94]
[32,45,47,98,340] -> [86]
[32,45,47,105,340] -> [161,169]
[32,45,47,106,340] -> [162,168]
[32,45,47,110,340] -> [116]
[32,45,47,111,340] -> [115]
[32,45,47,168,340] -> [106]
[32,45,47,169,340] -> [105]
[32,45,47,340] -> [85,96,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,129,166]
[32,45,58,340] -> [57,63]
[32,47] -> [85,96,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,129,166]
[32,47,86] -> [87,98]
[32,47,88] -> [87,94]
[32,47,98] -> [86]
[32,47,105] -> [161,169]
[32,47,106] -> [162,168]
[32,47,110] -> [116]
[32,47,111] -> [115]
[32,47,168] -> [106]
[32,47,169] -> [105]
[32,58] -> [57,63]
[32,602] -> [590,607]
[33] -> [48,604]
[33,45,47,340] -> [75,78,123,150]
[33,45,340] -> [48]
[33,47] -> [75,78,123,150]
[34] -> [49,605]
[34,45,47,340] -> [76,79,124,151]
[34,45,340] -> [49]
[34,47] -> [76,79,124,151]
[35] -> [50,606]
[35,45,47,340] -> [77,80,125,152]
[35,45,340] -> [50]
[35,47] -> [77,80,125,152]
[42] -> [8,62,229,248,461]
[42,45,340] -> [8,62,229,248]
[43] -> [61,197,228,247,306,460]
[43,44] -> [198,307]
[43,44,45,340] -> [198]
[43,45,198,340] -> [44]
[43,45,340] -> [61,197,228,247]
[43,198] -> [44]
[43,307] -> [44]
[44] -> [56]
[44,45,340] -> [56]
[45] -> [60,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,218,227,246,337,338,339,340,343,344,345,346,350,351,352,353,354,355,356,357,358,359,361,365,366,367,368,369,370,371,372,373,374,375,383,384,385,386,459]
[45,46,105,340] -> [218,231,233,255]
[45,46,106,340] -> [230,254]
[45,46,110,340] -> [116]
[45,46,111,340] -> [115]
[45,46,230,340] -> [106]
[45,46,231,340] -> [105]
[45,46,254,340] -> [106]
[45,46,255,340] -> [105]
[45,46,340] -> [59,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,226,245]
[45,47,48,340] -> [123,150]
[45,47,49,340] -> [124,151]
[45,47,50,340] -> [125,152]
[45,47,68,340] -> [8,93,141,184]
[45,47,69,340] -> [8,92,140,183]
[45,47,70,340] -> [71,91,131,139,142,170,182,185]
[45,47,71,340] -> [86]
[45,47,72,105,106,340] -> [172,188]
[45,47,72,105,110,340] -> [116]
[45,47,72,105,111,340] -> [115]
[45,47,72,105,188,340] -> [106]
[45,47,72,105,189,340] -> [105]
[45,47,72,105,340] -> [104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,171,187,189]
[45,47,72,106,340] -> [173,186]
[45,47,72,110,340] -> [116]
[45,47,72,111,340] -> [115]
[45,47,72,186,340] -> [106]
[45,47,72,187,340] -> [105]
[45,47,72,340] -> [90,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,132,138,181]
[45,47,73,105,106,340] -> [172,193]
[45,47,73,105,340] -> [132,144,171,191]
[45,47,73,106,110,340] -> [116]
[45,47,73,106,111,340] -> [115]
[45,47,73,106,192,340] -> [106]
[45,47,73,106,193,340] -> [105]
[45,47,73,106,340] -> [104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,143,173,190,192]
[45,47,73,110,340] -> [116]
[45,47,73,111,340] -> [115]
[45,47,73,143,340] -> [106]
[45,47,73,144,340] -> [105]
[45,47,73,190,340] -> [106]
[45,47,73,191,340] -> [105]
[45,47,73,340] -> [89,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,137,180]
[45,47,74,75,340] -> [123,150]
[45,47,74,76,340] -> [124,151]
[45,47,74,77,340] -> [125,152]
[45,47,74,123,340] -> [75]
[45,47,74,124,340] -> [76]
[45,47,74,125,340] -> [77]
[45,47,74,126,340] -> [143]
[45,47,74,127,340] -> [144]
[45,47,74,143,340] -> [126]
[45,47,74,144,340] -> [127]
[45,47,74,148,340] -> [172,195]
[45,47,74,149,340] -> [173,194]
[45,47,74,150,340] -> [75]
[45,47,74,151,340] -> [76]
[45,47,74,152,340] -> [77]
[45,47,74,153,340] -> [186]
[45,47,74,154,340] -> [187]
[45,47,74,155,340] -> [188]
[45,47,74,156,340] -> [189]
[45,47,74,157,340] -> [190]
[45,47,74,158,340] -> [191]
[45,47,74,159,340] -> [192]
[45,47,74,160,340] -> [193]
[45,47,74,186,340] -> [153]
[45,47,74,187,340] -> [154]
[45,47,74,188,340] -> [155]
[45,47,74,189,340] -> [156]
[45,47,74,190,340] -> [157]
[45,47,74,191,340] -> [158]
[45,47,74,192,340] -> [159]
[45,47,74,193,340] -> [160]
[45,47,74,194,340] -> [149]
[45,47,74,195,340] -> [148]
[45,47,74,340] -> [88,132,136,145,171,179,196]
[45,47,75,340] -> [33]
[45,47,76,340] -> [34]
[45,47,77,340] -> [35]
[45,47,78,340] -> [33,123,150]
[45,47,79,340] -> [34,124,151]
[45,47,80,340] -> [35,125,152]
[45,47,81,340] -> [98,117,134]
[45,47,82,340] -> [98,117]
[45,47,83,340] -> [93]
[45,47,84,340] -> [92]
[45,47,85,340] -> [91]
[45,47,86,340] -> [71]
[45,47,87,340] -> [90]
[45,47,88,94,340] -> [32]
[45,47,88,95,340] -> [31]
[45,47,88,340] -> [74]
[45,47,89,340] -> [73,87]
[45,47,90,340] -> [72]
[45,47,91,340] -> [70]
[45,47,92,340] -> [69]
[45,47,93,340] -> [68]
[45,47,96,340] -> [32]
[45,47,97,340] -> [31]
[45,47,98,340] -> [81,82]
[45,47,100,148,340] -> [101,261]
[45,47,101,148,340] -> [100]
[45,47,102,340] -> [102]
[45,47,103,340] -> [103]
[45,47,117,340] -> [81,82]
[45,47,118,340] -> [142,185]
[45,47,119,340] -> [143,186,188,190]
[45,47,120,340] -> [144,187,189,191]
[45,47,122,340] -> [218,232]
[45,47,123,340] -> [33,48,78]
[45,47,124,340] -> [34,49,79]
[45,47,125,340] -> [35,50,80]
[45,47,126,340] -> [230]
[45,47,127,340] -> [231]
[45,47,129,340] -> [32]
[45,47,130,340] -> [31]
[45,47,131,340] -> [135]
[45,47,132,340] -> [134]
[45,47,134,340] -> [81]
[45,47,135,340] -> [142]
[45,47,136,340] -> [74]
[45,47,137,340] -> [73]
[45,47,138,340] -> [72]
[45,47,139,340] -> [70]
[45,47,140,340] -> [69]
[45,47,141,340] -> [68]
[45,47,142,340] -> [118,135]
[45,47,143,340] -> [119]
[45,47,144,340] -> [120]
[45,47,147,340] -> [233,260]
[45,47,148,261,340] -> [100]
[45,47,148,340] -> [99,101,102,103,164,175,259]
[45,47,149,340] -> [163,174,258]
[45,47,150,340] -> [33,48,78]
[45,47,151,340] -> [34,49,79]
[45,47,152,340] -> [35,50,80]
[45,47,153,340] -> [168,249]
[45,47,154,340] -> [169,250]
[45,47,155,340] -> [251]
[45,47,156,340] -> [252]
[45,47,157,340] -> [254]
[45,47,158,340] -> [255]
[45,47,159,340] -> [168,192]
[45,47,160,340] -> [169,193]
[45,47,161,340] -> [164]
[45,47,162,340] -> [163]
[45,47,163,340] -> [149]
[45,47,164,340] -> [148]
[45,47,166,340] -> [32]
[45,47,167,340] -> [31]
[45,47,168,340] -> [153,159]
[45,47,169,340] -> [154,160]
[45,47,170,340] -> [178]
[45,47,171,340] -> [177]
[45,47,172,340] -> [175]
[45,47,173,340] -> [174]
[45,47,174,340] -> [149]
[45,47,175,340] -> [148]
[45,47,179,340] -> [74]
[45,47,180,340] -> [73]
[45,47,181,340] -> [72]
[45,47,182,340] -> [70]
[45,47,183,340] -> [69]
[45,47,184,340] -> [68]
[45,47,185,340] -> [118]
[45,47,186,340] -> [119]
[45,47,187,340] -> [120]
[45,47,188,340] -> [119]
[45,47,189,340] -> [120]
[45,47,190,340] -> [119]
[45,47,191,340] -> [120]
[45,47,192,340] -> [159]
[45,47,193,340] -> [160]
[45,47,230,340] -> [126]
[45,47,231,340] -> [127]
[45,47,232,340] -> [122]
[45,47,249,340] -> [153]
[45,47,250,340] -> [154]
[45,47,251,340] -> [155]
[45,47,252,340] -> [156]
[45,47,254,340] -> [157]
[45,47,255,340] -> [158]
[45,47,258,340] -> [149]
[45,47,259,340] -> [148]
[45,47,260,340] -> [147]
[45,47,340] -> [30,58,67,117,118,121,122,128,133,134,135,146,147,165,176,177,178,225,244]
[45,48,340] -> [33]
[45,49,340] -> [34]
[45,50,340] -> [35]
[45,52,340] -> [66,215,220]
[45,53,340] -> [66,215]
[45,54,340] -> [62]
[45,55,340] -> [61]
[45,56,340] -> [44]
[45,57,340] -> [60]
[45,58,63,340] -> [32]
[45,58,64,340] -> [31]
[45,58,340] -> [30,47]
[45,59,340] -> [46,57]
[45,60,340] -> [45]
[45,61,340] -> [43]
[45,62,340] -> [42]
[45,66,340] -> [52,53]
[45,100,105,106] -> [101,253]
[45,100,105,106,340] -> [101,253]
[45,100,106] -> [101,363,381]
[45,100,106,211,340] -> [101,267]
[45,100,106,289,340] -> [101,292]
[45,101,105,106] -> [100]
[45,101,105,106,340] -> [100]
[45,101,106] -> [100]
[45,101,106,211,340] -> [100]
[45,101,106,289,340] -> [100]
[45,102,340] -> [102]
[45,103,340] -> [103]
[45,105] -> [104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,233,250,252,360,362,364,377,378,379,380]
[45,105,106] -> [99,101,102,103,251]
[45,105,106,253] -> [100]
[45,105,106,253,340] -> [100]
[45,105,106,340] -> [99,101,102,103,251]
[45,105,110] -> [116]
[45,105,110,340] -> [116]
[45,105,111] -> [115]
[45,105,111,340] -> [115]
[45,105,211,340] -> [233,266]
[45,105,251] -> [106]
[45,105,251,340] -> [106]
[45,105,252] -> [105]
[45,105,252,340] -> [105]
[45,105,289,340] -> [284,291]
[45,105,340] -> [104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,233,250,252]
[45,106] -> [99,101,102,103,249,376]
[45,106,211,267,340] -> [100]
[45,106,211,340] -> [99,101,102,103,265]
[45,106,289,292,340] -> [100]
[45,106,289,340] -> [99,101,102,103,290]
[45,106,340] -> [249]
[45,106,381] -> [100]
[45,110] -> [116]
[45,110,211,340] -> [116]
[45,110,289,340] -> [116]
[45,110,340] -> [116]
[45,111] -> [115]
[45,111,211,340] -> [115]
[45,111,289,340] -> [115]
[45,111,340] -> [115]
[45,200,340] -> [213,281]
[45,202,340] -> [233,270,295]
[45,205,340] -> [235,287]
[45,206,340] -> [213,281]
[45,207,340] -> [265,290]
[45,208,340] -> [266,291]
[45,211,265,340] -> [106]
[45,211,266,340] -> [105]
[45,211,340] -> [104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,223,240,264,277]
[45,213,340] -> [200,206,220,235]
[45,215,340] -> [52,53,273]
[45,216,340] -> [230,249,254]
[45,217,340] -> [231,250,255]
[45,218,340] -> [223]
[45,220,340] -> [52,213]
[45,223,340] -> [211]
[45,225,340] -> [47]
[45,226,340] -> [46]
[45,227,340] -> [45]
[45,228,340] -> [43]
[45,229,340] -> [42]
[45,230,340] -> [216]
[45,231,340] -> [217]
[45,233,340] -> [240]
[45,235,340] -> [205,213]
[45,240,340] -> [211]
[45,244,340] -> [47]
[45,245,340] -> [46]
[45,246,340] -> [45]
[45,247,340] -> [43]
[45,248,340] -> [42]
[45,249] -> [106]
[45,249,340] -> [106,216]
[45,250] -> [105]
[45,250,340] -> [105,217]
[45,251,340] -> [265]
[45,252,340] -> [266]
[45,254,340] -> [216]
[45,255,340] -> [217]
[45,264,340] -> [211]
[45,265,340] -> [207,251]
[45,266,340] -> [208,252]
[45,270,340] -> [202]
[45,273,340] -> [215,281]
[45,277,340] -> [211]
[45,279,340] -> [283,284,289,299,304]
[45,281,340] -> [200,206,273,287]
[45,283,340] -> [279]
[45,284,340] -> [295]
[45,287,340] -> [205,281]
[45,289,290,340] -> [106]
[45,289,291,340] -> [105]
[45,289,340] -> [104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,279]
[45,290,340] -> [207]
[45,291,340] -> [208]
[45,295,340] -> [202]
[45,299,340] -> [279]
[45,304,340] -> [279]
[45,338] -> [464]
[45,339] -> [463]
[45,340] -> [60,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,218,227,246,462,466]
[45,346] -> [355]
[45,347] -> [354]
[45,348] -> [357]
[45,349] -> [356]
[45,361] -> [371]
[45,362] -> [370]
[45,363] -> [373]
[45,364] -> [372]
[45,376] -> [106]
[45,377] -> [105]
[45,462] -> [340]
[45,463] -> [339]
[45,464] -> [338]
[46] -> [59,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,226,245,458]
[46,105] -> [218,231,233,255]
[46,106] -> [230,254]
[46,110] -> [116]
[46,111] -> [115]
[46,230] -> [106]
[46,231] -> [105]
[46,254] -> [106]
[46,255] -> [105]
[47] -> [30,58,67,117,118,121,122,128,133,134,135,146,147,165,176,177,178,225,244,442,450,457]
[47,48] -> [123,150,444]
[47,49] -> [124,151,445]
[47,50] -> [125,152,446]
[47,68] -> [8,93,141,184]
[47,69] -> [8,92,140,183]
[47,70] -> [71,91,131,139,142,170,182,185]
[47,71] -> [86]
[47,72] -> [90,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,132,138,181]
[47,72,105] -> [104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,171,187,189]
[47,72,105,106] -> [172,188]
[47,72,105,110] -> [116]
[47,72,105,111] -> [115]
[47,72,105,188] -> [106]
[47,72,105,189] -> [105]
[47,72,106] -> [173,186]
[47,72,110] -> [116]
[47,72,111] -> [115]
[47,72,186] -> [106]
[47,72,187] -> [105]
[47,73] -> [89,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,137,180]
[47,73,105] -> [132,144,171,191]
[47,73,105,106] -> [172,193]
[47,73,106] -> [104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,143,173,190,192]
[47,73,106,110] -> [116]
[47,73,106,111] -> [115]
[47,73,106,192] -> [106]
[47,73,106,193] -> [105]
[47,73,110] -> [116]
[47,73,111] -> [115]
[47,73,143] -> [106]
[47,73,144] -> [105]
[47,73,190] -> [106]
[47,73,191] -> [105]
[47,74] -> [88,132,136,145,171,179,196]
[47,74,75] -> [123,150]
[47,74,76] -> [124,151]
[47,74,77] -> [125,152]
[47,74,123] -> [75]
[47,74,124] -> [76]
[47,74,125] -> [77]
[47,74,126] -> [143]
[47,74,127] -> [144]
[47,74,143] -> [126]
[47,74,144] -> [127]
[47,74,148] -> [172,195]
[47,74,149] -> [173,194]
[47,74,150] -> [75]
[47,74,151] -> [76]
[47,74,152] -> [77]
[47,74,153] -> [186]
[47,74,154] -> [187]
[47,74,155] -> [188]
[47,74,156] -> [189]
[47,74,157] -> [190]
[47,74,158] -> [191]
[47,74,159] -> [192]
[47,74,160] -> [193]
[47,74,186] -> [153]
[47,74,187] -> [154]
[47,74,188] -> [155]
[47,74,189] -> [156]
[47,74,190] -> [157]
[47,74,191] -> [158]
[47,74,192] -> [159]
[47,74,193] -> [160]
[47,74,194] -> [149]
[47,74,195] -> [148]
[47,75] -> [33]
[47,76] -> [34]
[47,77] -> [35]
[47,78] -> [33,123,150]
[47,79] -> [34,124,151]
[47,80] -> [35,125,152]
[47,81] -> [98,117,134]
[47,82] -> [98,117]
[47,83] -> [93]
[47,84] -> [92]
[47,85] -> [91]
[47,86] -> [71]
[47,87] -> [90]
[47,88] -> [74]
[47,88,94] -> [32]
[47,88,95] -> [31]
[47,89] -> [73,87]
[47,90] -> [72]
[47,91] -> [70]
[47,92] -> [69]
[47,93] -> [68]
[47,96] -> [32]
[47,97] -> [31]
[47,98] -> [81,82]
[47,100,148] -> [101,261]
[47,101,148] -> [100]
[47,102] -> [102]
[47,103] -> [103]
[47,117] -> [81,82]
[47,118] -> [142,185]
[47,119] -> [143,186,188,190]
[47,120] -> [144,187,189,191]
[47,122] -> [218,232]
[47,123] -> [33,48,78]
[47,124] -> [34,49,79]
[47,125] -> [35,50,80]
[47,126] -> [230]
[47,127] -> [231]
[47,129] -> [32]
[47,130] -> [31]
[47,131] -> [135]
[47,132] -> [134]
[47,134] -> [81]
[47,135] -> [142]
[47,136] -> [74]
[47,137] -> [73]
[47,138] -> [72]
[47,139] -> [70]
[47,140] -> [69]
[47,141] -> [68]
[47,142] -> [118,135]
[47,143] -> [119]
[47,144] -> [120]
[47,147] -> [233,260]
[47,148] -> [99,101,102,103,164,175,259]
[47,148,261] -> [100]
[47,149] -> [163,174,258]
[47,150] -> [33,48,78]
[47,151] -> [34,49,79]
[47,152] -> [35,50,80]
[47,153] -> [168,249]
[47,154] -> [169,250]
[47,155] -> [251]
[47,156] -> [252]
[47,157] -> [254]
[47,158] -> [255]
[47,159] -> [168,192]
[47,160] -> [169,193]
[47,161] -> [164]
[47,162] -> [163]
[47,163] -> [149]
[47,164] -> [148]
[47,166] -> [32]
[47,167] -> [31]
[47,168] -> [153,159]
[47,169] -> [154,160]
[47,170] -> [178]
[47,171] -> [177]
[47,172] -> [175]
[47,173] -> [174]
[47,174] -> [149]
[47,175] -> [148]
[47,179] -> [74]
[47,180] -> [73]
[47,181] -> [72]
[47,182] -> [70]
[47,183] -> [69]
[47,184] -> [68]
[47,185] -> [118]
[47,186] -> [119]
[47,187] -> [120]
[47,188] -> [119]
[47,189] -> [120]
[47,190] -> [119]
[47,191] -> [120]
[47,192] -> [159]
[47,193] -> [160]
[47,230] -> [126]
[47,231] -> [127]
[47,232] -> [122]
[47,249] -> [153]
[47,250] -> [154]
[47,251] -> [155]
[47,252] -> [156]
[47,254] -> [157]
[47,255] -> [158]
[47,258] -> [149]
[47,259] -> [148]
[47,260] -> [147]
[47,277] -> [277]
[47,304] -> [304]
[47,443] -> [467]
[47,444] -> [48]
[47,445] -> [49]
[47,446] -> [50]
[47,447] -> [462]
[47,448] -> [463]
[47,449] -> [464]
[47,462] -> [447]
[47,463] -> [448]
[47,464] -> [449]
[47,467] -> [443]
[48] -> [33]
[49] -> [34]
[50] -> [35]
[52] -> [66,215,220,391]
[53] -> [66,215,454]
[54] -> [62]
[55] -> [61]
[56] -> [44]
[57] -> [60]
[58] -> [30,47]
[58,63] -> [32]
[58,64] -> [31]
[59] -> [46,57]
[60] -> [45]
[61] -> [43]
[62] -> [42]
[66] -> [52,53]
[100,106,211] -> [101,267]
[100,106,289] -> [101,292]
[100,106,317] -> [101,363,381]
[100,106,559] -> [101,564]
[101,106,211] -> [100]
[101,106,289] -> [100]
[101,106,317] -> [100]
[101,106,559] -> [100]
[102] -> [102]
[103] -> [103]
[105,211] -> [233,266]
[105,289] -> [284,291]
[105,317] -> [360,362,364,377,378,379,380]
[105,559] -> [554,563]
[106,211] -> [99,101,102,103,265]
[106,211,267] -> [100]
[106,289] -> [99,101,102,103,290]
[106,289,292] -> [100]
[106,317] -> [99,101,102,103,376]
[106,317,381] -> [100]
[106,559] -> [99,101,102,103,562]
[106,559,564] -> [100]
[110,211] -> [116]
[110,289] -> [116]
[110,317] -> [116]
[110,559] -> [116]
[111,211] -> [115]
[111,289] -> [115]
[111,317] -> [115]
[111,559] -> [115]
[200] -> [213,281]
[202] -> [233,270,295]
[205] -> [235,287]
[206] -> [213,281]
[207] -> [265,290]
[208] -> [266,291]
[211] -> [104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,223,240,264,277]
[211,265] -> [106]
[211,266] -> [105]
[213] -> [200,206,220,235]
[215] -> [52,53,273]
[216] -> [230,249,254]
[217] -> [231,250,255]
[218] -> [223]
[220] -> [52,213]
[223] -> [211]
[225] -> [47]
[226] -> [46]
[227] -> [45]
[228] -> [43]
[229] -> [42]
[230] -> [216]
[231] -> [217]
[233] -> [240]
[235] -> [205,213]
[240] -> [211]
[244] -> [47]
[245] -> [46]
[246] -> [45]
[247] -> [43]
[248] -> [42]
[249] -> [216]
[250] -> [217]
[251] -> [265]
[252] -> [266]
[254] -> [216]
[255] -> [217]
[264] -> [211]
[265] -> [207,251]
[266] -> [208,252]
[270] -> [202]
[273] -> [215,281]
[277] -> [211,277]
[279] -> [283,284,289,299,304]
[281] -> [200,206,273,287]
[283] -> [279]
[284] -> [295]
[287] -> [205,281]
[289] -> [104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,279]
[289,290] -> [106]
[289,291] -> [105]
[290] -> [207]
[291] -> [208]
[295] -> [202]
[299] -> [279]
[304] -> [279,304]
[309] -> [391,533]
[311] -> [400,412,546]
[312] -> [391,533]
[313] -> [358,544]
[314] -> [359,545]
[317] -> [104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,337,338,339,340,343,344,345,346,350,351,352,353,354,355,356,357,358,359,361,365,366,367,368,369,370,371,372,373,374,375,383,384,385,386,429,567]
[317,338] -> [433]
[317,339] -> [432]
[317,340] -> [431]
[317,346] -> [355]
[317,347] -> [354]
[317,348] -> [357]
[317,349] -> [356]
[317,361] -> [371]
[317,362] -> [370]
[317,363] -> [373]
[317,364] -> [372]
[317,376] -> [106]
[317,377] -> [105]
[317,431] -> [340]
[317,432] -> [339]
[317,433] -> [338]
[319] -> [391,557]
[321] -> [391,533]
[322] -> [374,560]
[323] -> [375,561]
[324] -> [376,562]
[325] -> [377,563]
[358] -> [313]
[359] -> [314]
[374] -> [322]
[375] -> [323]
[376] -> [324]
[377] -> [325]
[378] -> [431]
[379] -> [432]
[380] -> [433]
[391] -> [52,309,312,319,321]
[392] -> [431,462]
[393] -> [432,463]
[394] -> [433,464]
[412] -> [311]
[429] -> [317]
[431] -> [378,392]
[432] -> [379,393]
[433] -> [380,394]
[454] -> [53,533]
[457] -> [47]
[458] -> [46]
[459] -> [45]
[460] -> [43]
[461] -> [42]
[462] -> [392]
[463] -> [393]
[464] -> [394]
[474,610] -> [591,611]
[474,684] -> [704]
[496] -> [17,21,576]
[497] -> [504,513,521,527,577]
[498] -> [505,514,522,528,578]
[499] -> [506,515,523,529,579]
[502] -> [20]
[503] -> [19]
[504] -> [497]
[505] -> [498]
[506] -> [499]
[511] -> [20]
[512] -> [19]
[513] -> [497]
[514] -> [498]
[515] -> [499]
[520] -> [16]
[521] -> [497]
[522] -> [498]
[523] -> [499]
[526] -> [16]
[527] -> [497]
[528] -> [498]
[529] -> [499]
[531] -> [537,543,554,559,658,665]
[533] -> [309,312,321,454,557]
[534] -> [21,581,583,661]
[535] -> [540,549,582,584,662]
[537] -> [531]
[538] -> [20]
[539] -> [19]
[540] -> [535]
[541] -> [546]
[543] -> [531,541,544,545]
[544] -> [313,550]
[545] -> [314,551]
[546] -> [311]
[547] -> [20]
[548] -> [19]
[549] -> [535]
[550] -> [544]
[551] -> [545]
[554] -> [567]
[557] -> [319,533]
[557,573] -> [574]
[559] -> [104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,531,560,561]
[559,562] -> [106]
[559,563] -> [105]
[560] -> [322,585]
[561] -> [323,586]
[562] -> [324,587]
[563] -> [325,588]
[567] -> [317]
[570] -> [601,641,654]
[571] -> [600,640,653]
[572] -> [554,599,639,652]
[573] -> [598,638,651]
[573,574] -> [557]
[574] -> [593,627]
[576] -> [21,496,629]
[577] -> [497,604,630]
[578] -> [498,605,631]
[579] -> [499,606,632]
[581] -> [21,534,634]
[582] -> [535,611,635]
[583] -> [17,21,534]
[584] -> [535,614,643]
[585] -> [560,615,644]
[586] -> [561,616,645]
[587] -> [562,617,646]
[588] -> [563,618,647]
[590] -> [601]
[591] -> [599]
[592] -> [598]
[593] -> [574]
[594] -> [609]
[595] -> [611]
[598] -> [573]
[599] -> [572]
[600] -> [571,590]
[601] -> [570]
[602] -> [20,30]
[602,607] -> [32]
[602,608] -> [31]
[603] -> [19,26]
[603,604] -> [29]
[603,605] -> [28]
[603,606] -> [27]
[604] -> [33,577]
[605] -> [34,578]
[606] -> [35,579]
[609] -> [20]
[610] -> [19,473]
[610,611] -> [474]
[611] -> [582,595]
[612] -> [20]
[613] -> [19]
[614] -> [584]
[615] -> [585]
[616] -> [586]
[617] -> [587]
[618] -> [588]
[623] -> [641]
[624] -> [640]
[625] -> [639]
[626] -> [638]
[627] -> [574]
[629] -> [576]
[630] -> [577]
[631] -> [578]
[632] -> [579]
[634] -> [581]
[635] -> [582]
[638] -> [573]
[639] -> [572]
[640] -> [571]
[641] -> [570]
[642] -> [16]
[643] -> [584]
[644] -> [585]
[645] -> [586]
[646] -> [587]
[647] -> [588]
[651] -> [573]
[652] -> [572]
[653] -> [571]
[654] -> [570]
[658] -> [531]
[661] -> [534,686]
[662] -> [535,704]
[665] -> [531]
[684] -> [473,690,695,703]
[684,704] -> [474]
[686] -> [17,21,661]
[687] -> [690]
[688] -> [691]
[690] -> [684]
[691] -> [20]
[692] -> [19,687]
[693] -> [695]
[695] -> [684]
[696] -> [16,693]
[703] -> [684]
[704] -> [662]
[R] -> [697]

### Solution ###

[2,3,4,6,7,9,10,11,12,15,18,22,23,24,25,41,51,65,199,201,203,204,210,212,214,219,221,222,224,234,236,237,238,239,241,242,243,256,257,262,263,268,269,271,272,274,275,276,278,280,282,285,286,288,293,294,296,297,298,300,301,302,303,305,308,310,315,316,318,320,327,328,329,331,332,333,334,335,336,387,388,389,390,397,398,399,404,405,406,407,408,409,410,411,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,430,434,435,436,438,439,440,441,452,453,455,456,465,468,469,470,471,472,493,494,495,500,501,509,510,518,519,524,525,530,532,536,542,553,555,556,558,565,566,568,569,575,580,596,597,636,637,649,650,655,656,657,659,660,663,664,666,667,668,669,671,672,673,674,675,676,677,678,679,680,681,682,683,685,689,694,697,698,699,700,701,702,705,R]

### Annotated ###

  let
    postulate N :E: Type
    postulate Z :R: N
    postulate S :R: (_x0 :R: N) -> N
    postulate B :E: Type
    postulate T :R: B
    postulate F :R: B
    postulate List :E: Type
    postulate Cons :R: (_x1 :R: B) -> (_x2 :R: List) -> List
    postulate Nil :R: List
    postulate Maybe :E: (_x3 :E: Type) -> Type
    postulate Nothing :R: (a :E: Type) -> Maybe -E- a
    postulate Just :R: (a :E: Type) -> (x :E: a) -> Maybe -E- a
    not :R: (_x4 :R: B) -> B 
      [not] -R- T = F
      [not] -R- F = T
    postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    postulate Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    id :E: (a :E: Type) -> (_x5 :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    subst :R: (a :E: Type) -> (P :E: (_x6 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (w :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x7 :E: a) -> Type x :E: a
        [subst] -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\w :R: P -E- x. w)
    cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_x8 :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) 
      a :E: Type b :E: Type f :E: (_x9 :E: a) -> b x :E: a
        [cong] -E- a -E- b -E- f -E- x -E- [x] -E- [Refl -E- a -E- x] = Refl -E- b -E- (f -E- x)
    one :E: (x :E: B) -> List = (\x :E: B. Cons -E- x -E- Nil)
    app :E: (_x10 :E: List) -> (_x11 :E: List) -> List 
      ys :E: List
        [app] -E- Nil -E- ys = ys
      x :E: B xs :E: List ys :E: List
        [app] -E- (Cons -E- x -E- xs) -E- ys = Cons -E- x -E- (app -E- xs -E- ys)
    appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) 
      [appRightNeutral] -E- Nil = Refl -E- List -E- Nil
      x :E: B xs :E: List
        [appRightNeutral] -E- (Cons -E- x -E- xs) = cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)
    appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) 
      ys :E: List zs :E: List
        [appAssoc] -E- Nil -E- ys -E- zs = Refl -E- List -E- (app -E- ys -E- zs)
      x :E: B xs :E: List ys :E: List zs :E: List
        [appAssoc] -E- (Cons -E- x -E- xs) -E- ys -E- zs = cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs -E- ys -E- zs)
    postulate Rev :E: (_x12 :E: List) -> Type
    postulate RNil :R: Rev -E- Nil
    postulate RSnoc :R: (xs :E: List) -> (x :R: B) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))
    rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -E- xs -E- ys) 
      xs :E: List rxs :R: Rev -E- xs
        [rev'] -E- xs -R- rxs -R- Nil = subst -E- List -E- Rev -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs) -R- rxs
      xs :E: List rxs :R: Rev -E- xs y :R: B ys :R: List
        [rev'] -E- xs -R- rxs -R- (Cons -R- y -R- ys) = subst -E- List -E- Rev -E- (app -E- (app -E- xs -E- (one -E- y)) -E- ys) -E- (app -E- xs -E- (Cons -R- y -R- ys)) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys) -R- (rev' -E- (app -E- xs -E- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys)
    rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)
    reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List 
      [reverse'] -E- [Nil] -R- RNil = Nil
      xs :E: List x :R: B rxs :R: Rev -E- xs
        [reverse'] -E- [app -E- xs -E- (one -E- x)] -R- (RSnoc -E- xs -R- x -R- rxs) = Cons -R- x -R- (reverse' -E- xs -R- rxs)
    reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))
    postulate V :E: (_x13 :E: List) -> Type
    postulate VNil :R: V -E- Nil
    postulate VOne :R: (x :E: B) -> V -E- (Cons -E- x -E- Nil)
    postulate VTwo :R: (x :R: B) -> (xs :E: List) -> (u :R: V -E- xs) -> (y :R: B) -> V -E- (Cons -E- x -E- (app -E- xs -E- (one -E- y)))
    length :R: (_x14 :R: List) -> N 
      [length] -R- Nil = Z
      x :E: B xs :R: List
        [length] -R- (Cons -R- x -R- xs) = S -R- (length -R- xs)
    index :E: (_x15 :E: N) -> (_x16 :E: List) -> (_x17 :E: List) -> List 
      xs :E: List ys :E: List
        [index] -E- Z -E- xs -E- ys = Nil
      x :E: B xs :E: List y :E: B ys :E: List
        [index] -E- (S -E- Z) -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys) = Cons -E- x -E- Nil
      n :E: N x :E: B xs :E: List y :E: B ys :E: List
        [index] -E- (S -E- (S -E- n)) -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys) = Cons -E- x -E- (app -E- (index -E- n -E- xs -E- ys) -E- (one -E- y))
      n :E: N
        [index] -E- (S -E- n) -E- Nil -E- Nil = Nil
    build :R: (n :R: N) -> (xs :R: List) -> (ys :R: List) -> V -E- (index -E- n -E- xs -E- ys) 
      xs :E: List ys :E: List
        [build] -R- Z -R- xs -R- ys = VNil
      x :E: B xs :E: List y :E: B ys :E: List
        [build] -R- (S -R- Z) -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = VOne -E- x
      n :R: N x :R: B xs :R: List y :R: B ys :R: List
        [build] -R- (S -R- (S -R- n)) -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = VTwo -R- x -E- (index -E- n -E- xs -E- ys) -R- (build -R- n -R- xs -R- ys) -R- y
      n :E: N
        [build] -R- (S -R- n) -R- Nil -R- Nil = VNil
    postulate eq :E: (xs :E: List) -> Id -E- List -E- (index -E- (length -E- xs) -E- xs -E- (reverse -E- xs)) -E- xs
    toV :R: (xs :R: List) -> V -E- xs = (\xs :R: List. subst -E- List -E- V -E- (index -E- (length -R- xs) -E- xs -E- (reverse -E- xs)) -E- xs -E- (eq -E- xs) -R- (build -R- (length -R- xs) -R- xs -R- (reverse -R- xs)))
    postulate IsPalindrome :E: (_x18 :E: List) -> Type
    postulate PNil :E: IsPalindrome -E- Nil
    postulate POne :E: (b :E: B) -> IsPalindrome -E- (Cons -E- b -E- Nil)
    postulate PTwo :E: (b :E: B) -> (xs :E: List) -> (pf :E: IsPalindrome -E- xs) -> IsPalindrome -E- (Cons -E- b -E- (app -E- xs -E- (one -E- b)))
    decEq :R: (x :R: B) -> (y :R: B) -> Maybe -E- (Id -E- B -E- x -E- y) 
      [decEq] -R- T -R- T = Just -E- (Id -E- B -E- T -E- T) -E- (Refl -E- B -E- T)
      [decEq] -R- F -R- F = Just -E- (Id -E- B -E- F -E- F) -E- (Refl -E- B -E- F)
      [decEq] -R- T -R- F = Nothing -E- (Id -E- B -E- T -E- F)
      [decEq] -R- F -R- T = Nothing -E- (Id -E- B -E- F -E- T)
    isPalinV :R: (xs :E: List) -> (v :R: V -E- xs) -> Maybe -E- (IsPalindrome -E- xs) 
      [isPalinV] -E- [Nil] -R- VNil = Just -E- (IsPalindrome -E- Nil) -E- PNil
      x :E: B
        [isPalinV] -E- [Cons -E- x -E- Nil] -R- (VOne -E- x) = Just -E- (IsPalindrome -E- (Cons -E- x -E- Nil)) -E- (POne -E- x)
      x :R: B xs :E: List y :R: B v :R: V -E- xs
        [isPalinV] -E- [Cons -E- x -E- (app -E- xs -E- (one -E- y))] -R- (VTwo -R- x -E- xs -R- v -R- y) = 
          let isPalinV' :R: (x :E: B) -> (y :E: B) -> (xs :E: List) -> (v :E: V -E- xs) -> (pfB :R: Maybe -E- (Id -E- B -E- x -E- y)) -> (pfV :R: Maybe -E- (IsPalindrome -E- xs)) -> Maybe -E- (IsPalindrome -E- (Cons -E- x -E- (app -E- xs -E- (one -E- y)))) 
            x :E: B xs :E: List v :E: V -E- xs pfV :E: IsPalindrome -E- xs
              [isPalinV'] -E- x -E- [x] -E- xs -E- v -R- (Just -E- [Id -E- B -E- x -E- x] -E- [Refl -E- B -E- x]) -R- (Just -E- [IsPalindrome -E- xs] -E- pfV) = Just -E- (IsPalindrome -E- (Cons -E- x -E- (app -E- xs -E- (one -E- x)))) -E- (PTwo -E- x -E- xs -E- pfV)
            x :E: B y :E: B xs :E: List v :E: V -E- xs pfB :E: Maybe -E- (Id -E- B -E- x -E- y) pfV :E: Maybe -E- (IsPalindrome -E- xs)
              [isPalinV'] -E- x -E- y -E- xs -E- v -R- pfB -R- pfV = Nothing -E- (IsPalindrome -E- (Cons -E- x -E- (app -E- xs -E- (one -E- y))))
          in isPalinV' -E- x -E- y -E- xs -E- v -R- (decEq -R- x -R- y) -R- (isPalinV -E- xs -R- v)
    isPalindrome :R: (xs :R: List) -> Maybe -E- (IsPalindrome -E- xs) = (\xs :R: List. isPalinV -E- xs -R- (toV -R- xs))
    genList :R: (_x19 :R: B) -> (_x20 :R: N) -> List 
      b :E: B
        [genList] -R- b -R- Z = Nil
      b :R: B n :R: N
        [genList] -R- b -R- (S -R- n) = Cons -R- b -R- (genList -R- (not -R- b) -R- n)
    isJust :R: (a :E: Type) -> (x :R: Maybe -E- a) -> B 
      a :E: Type x :E: a
        [isJust] -E- a -R- (Just -E- [a] -E- x) = T
      a :E: Type
        [isJust] -E- a -R- (Nothing -E- [a]) = F
    main :R: B = 
      let
        foreign inputSize :R: N
        inputList :R: List = genList -R- T -R- inputSize
      in isJust -E- (IsPalindrome -E- inputList) -R- (isPalindrome -R- inputList)
  in main

### Specialised ###

  let
    postulate N :E: Type
    postulate Z :R: N
    postulate S :R: (_x0 :R: N) -> N
    postulate B :E: Type
    postulate T :R: B
    postulate F :R: B
    postulate List :E: Type
    postulate Cons :R: (_x1 :R: B) -> (_x2 :R: List) -> List
    postulate Nil :R: List
    postulate Maybe :E: (_x3 :E: Type) -> Type
    postulate Nothing :R: (a :E: Type) -> Maybe -E- a
    postulate Just :R: (a :E: Type) -> (x :E: a) -> Maybe -E- a
    not :R: (_x4 :R: B) -> B 
      [not] -R- T = F
      [not] -R- F = T
    postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    postulate Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    id :E: (a :E: Type) -> (_x5 :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    subst :R: (a :E: Type) -> (P :E: (_x6 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (w :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x7 :E: a) -> Type x :E: a
        [subst] -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\w :R: P -E- x. w)
    cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_x8 :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) 
      a :E: Type b :E: Type f :E: (_x9 :E: a) -> b x :E: a
        [cong] -E- a -E- b -E- f -E- x -E- [x] -E- [Refl -E- a -E- x] = Refl -E- b -E- (f -E- x)
    one :E: (x :E: B) -> List = (\x :E: B. Cons -E- x -E- Nil)
    app :E: (_x10 :E: List) -> (_x11 :E: List) -> List 
      ys :E: List
        [app] -E- Nil -E- ys = ys
      x :E: B xs :E: List ys :E: List
        [app] -E- (Cons -E- x -E- xs) -E- ys = Cons -E- x -E- (app -E- xs -E- ys)
    appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) 
      [appRightNeutral] -E- Nil = Refl -E- List -E- Nil
      x :E: B xs :E: List
        [appRightNeutral] -E- (Cons -E- x -E- xs) = cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)
    appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) 
      ys :E: List zs :E: List
        [appAssoc] -E- Nil -E- ys -E- zs = Refl -E- List -E- (app -E- ys -E- zs)
      x :E: B xs :E: List ys :E: List zs :E: List
        [appAssoc] -E- (Cons -E- x -E- xs) -E- ys -E- zs = cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs -E- ys -E- zs)
    postulate Rev :E: (_x12 :E: List) -> Type
    postulate RNil :R: Rev -E- Nil
    postulate RSnoc :R: (xs :E: List) -> (x :R: B) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))
    rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -E- xs -E- ys) 
      xs :E: List rxs :R: Rev -E- xs
        [rev'] -E- xs -R- rxs -R- Nil = subst -E- List -E- Rev -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs) -R- rxs
      xs :E: List rxs :R: Rev -E- xs y :R: B ys :R: List
        [rev'] -E- xs -R- rxs -R- (Cons -R- y -R- ys) = subst -E- List -E- Rev -E- (app -E- (app -E- xs -E- (one -E- y)) -E- ys) -E- (app -E- xs -E- (Cons -R- y -R- ys)) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys) -R- (rev' -E- (app -E- xs -E- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys)
    rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)
    reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List 
      [reverse'] -E- [Nil] -R- RNil = Nil
      xs :E: List x :R: B rxs :R: Rev -E- xs
        [reverse'] -E- [app -E- xs -E- (one -E- x)] -R- (RSnoc -E- xs -R- x -R- rxs) = Cons -R- x -R- (reverse' -E- xs -R- rxs)
    reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))
    postulate V :E: (_x13 :E: List) -> Type
    postulate VNil :R: V -E- Nil
    postulate VOne :R: (x :E: B) -> V -E- (Cons -E- x -E- Nil)
    postulate VTwo :R: (x :R: B) -> (xs :E: List) -> (u :R: V -E- xs) -> (y :R: B) -> V -E- (Cons -E- x -E- (app -E- xs -E- (one -E- y)))
    length :R: (_x14 :R: List) -> N 
      [length] -R- Nil = Z
      x :E: B xs :R: List
        [length] -R- (Cons -R- x -R- xs) = S -R- (length -R- xs)
    index :E: (_x15 :E: N) -> (_x16 :E: List) -> (_x17 :E: List) -> List 
      xs :E: List ys :E: List
        [index] -E- Z -E- xs -E- ys = Nil
      x :E: B xs :E: List y :E: B ys :E: List
        [index] -E- (S -E- Z) -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys) = Cons -E- x -E- Nil
      n :E: N x :E: B xs :E: List y :E: B ys :E: List
        [index] -E- (S -E- (S -E- n)) -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys) = Cons -E- x -E- (app -E- (index -E- n -E- xs -E- ys) -E- (one -E- y))
      n :E: N
        [index] -E- (S -E- n) -E- Nil -E- Nil = Nil
    build :R: (n :R: N) -> (xs :R: List) -> (ys :R: List) -> V -E- (index -E- n -E- xs -E- ys) 
      xs :E: List ys :E: List
        [build] -R- Z -R- xs -R- ys = VNil
      x :E: B xs :E: List y :E: B ys :E: List
        [build] -R- (S -R- Z) -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = VOne -E- x
      n :R: N x :R: B xs :R: List y :R: B ys :R: List
        [build] -R- (S -R- (S -R- n)) -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = VTwo -R- x -E- (index -E- n -E- xs -E- ys) -R- (build -R- n -R- xs -R- ys) -R- y
      n :E: N
        [build] -R- (S -R- n) -R- Nil -R- Nil = VNil
    postulate eq :E: (xs :E: List) -> Id -E- List -E- (index -E- (length -E- xs) -E- xs -E- (reverse -E- xs)) -E- xs
    toV :R: (xs :R: List) -> V -E- xs = (\xs :R: List. subst -E- List -E- V -E- (index -E- (length -R- xs) -E- xs -E- (reverse -E- xs)) -E- xs -E- (eq -E- xs) -R- (build -R- (length -R- xs) -R- xs -R- (reverse -R- xs)))
    postulate IsPalindrome :E: (_x18 :E: List) -> Type
    postulate PNil :E: IsPalindrome -E- Nil
    postulate POne :E: (b :E: B) -> IsPalindrome -E- (Cons -E- b -E- Nil)
    postulate PTwo :E: (b :E: B) -> (xs :E: List) -> (pf :E: IsPalindrome -E- xs) -> IsPalindrome -E- (Cons -E- b -E- (app -E- xs -E- (one -E- b)))
    decEq :R: (x :R: B) -> (y :R: B) -> Maybe -E- (Id -E- B -E- x -E- y) 
      [decEq] -R- T -R- T = Just -E- (Id -E- B -E- T -E- T) -E- (Refl -E- B -E- T)
      [decEq] -R- F -R- F = Just -E- (Id -E- B -E- F -E- F) -E- (Refl -E- B -E- F)
      [decEq] -R- T -R- F = Nothing -E- (Id -E- B -E- T -E- F)
      [decEq] -R- F -R- T = Nothing -E- (Id -E- B -E- F -E- T)
    isPalinV :R: (xs :E: List) -> (v :R: V -E- xs) -> Maybe -E- (IsPalindrome -E- xs) 
      [isPalinV] -E- [Nil] -R- VNil = Just -E- (IsPalindrome -E- Nil) -E- PNil
      x :E: B
        [isPalinV] -E- [Cons -E- x -E- Nil] -R- (VOne -E- x) = Just -E- (IsPalindrome -E- (Cons -E- x -E- Nil)) -E- (POne -E- x)
      x :R: B xs :E: List y :R: B v :R: V -E- xs
        [isPalinV] -E- [Cons -E- x -E- (app -E- xs -E- (one -E- y))] -R- (VTwo -R- x -E- xs -R- v -R- y) = 
          let isPalinV' :R: (x :E: B) -> (y :E: B) -> (xs :E: List) -> (v :E: V -E- xs) -> (pfB :R: Maybe -E- (Id -E- B -E- x -E- y)) -> (pfV :R: Maybe -E- (IsPalindrome -E- xs)) -> Maybe -E- (IsPalindrome -E- (Cons -E- x -E- (app -E- xs -E- (one -E- y)))) 
            x :E: B xs :E: List v :E: V -E- xs pfV :E: IsPalindrome -E- xs
              [isPalinV'] -E- x -E- [x] -E- xs -E- v -R- (Just -E- [Id -E- B -E- x -E- x] -E- [Refl -E- B -E- x]) -R- (Just -E- [IsPalindrome -E- xs] -E- pfV) = Just -E- (IsPalindrome -E- (Cons -E- x -E- (app -E- xs -E- (one -E- x)))) -E- (PTwo -E- x -E- xs -E- pfV)
            x :E: B y :E: B xs :E: List v :E: V -E- xs pfB :E: Maybe -E- (Id -E- B -E- x -E- y) pfV :E: Maybe -E- (IsPalindrome -E- xs)
              [isPalinV'] -E- x -E- y -E- xs -E- v -R- pfB -R- pfV = Nothing -E- (IsPalindrome -E- (Cons -E- x -E- (app -E- xs -E- (one -E- y))))
          in isPalinV' -E- x -E- y -E- xs -E- v -R- (decEq -R- x -R- y) -R- (isPalinV -E- xs -R- v)
    isPalindrome :R: (xs :R: List) -> Maybe -E- (IsPalindrome -E- xs) = (\xs :R: List. isPalinV -E- xs -R- (toV -R- xs))
    genList :R: (_x19 :R: B) -> (_x20 :R: N) -> List 
      b :E: B
        [genList] -R- b -R- Z = Nil
      b :R: B n :R: N
        [genList] -R- b -R- (S -R- n) = Cons -R- b -R- (genList -R- (not -R- b) -R- n)
    isJust :R: (a :E: Type) -> (x :R: Maybe -E- a) -> B 
      a :E: Type x :E: a
        [isJust] -E- a -R- (Just -E- [a] -E- x) = T
      a :E: Type
        [isJust] -E- a -R- (Nothing -E- [a]) = F
    main :R: B = 
      let
        foreign inputSize :R: N
        inputList :R: List = genList -R- T -R- inputSize
      in isJust -E- (IsPalindrome -E- inputList) -R- (isPalindrome -R- inputList)
  in main

### Final annotation ###

  let
    postulate N :E: Type
    postulate Z :R: N
    postulate S :R: (_x0 :R: N) -> N
    postulate B :E: Type
    postulate T :R: B
    postulate F :R: B
    postulate List :E: Type
    postulate Cons :R: (_x1 :R: B) -> (_x2 :R: List) -> List
    postulate Nil :R: List
    postulate Maybe :E: (_x3 :E: Type) -> Type
    postulate Nothing :R: (a :E: Type) -> Maybe -E- a
    postulate Just :R: (a :E: Type) -> (x :E: a) -> Maybe -E- a
    not :R: (_x4 :R: B) -> B 
      [not] -R- T = F
      [not] -R- F = T
    postulate Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    postulate Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    id :E: (a :E: Type) -> (_x5 :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    subst :R: (a :E: Type) -> (P :E: (_x6 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (w :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x7 :E: a) -> Type x :E: a
        [subst] -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\w :R: P -E- x. w)
    cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_x8 :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) 
      a :E: Type b :E: Type f :E: (_x9 :E: a) -> b x :E: a
        [cong] -E- a -E- b -E- f -E- x -E- [x] -E- [Refl -E- a -E- x] = Refl -E- b -E- (f -E- x)
    one :E: (x :E: B) -> List = (\x :E: B. Cons -E- x -E- Nil)
    app :E: (_x10 :E: List) -> (_x11 :E: List) -> List 
      ys :E: List
        [app] -E- Nil -E- ys = ys
      x :E: B xs :E: List ys :E: List
        [app] -E- (Cons -E- x -E- xs) -E- ys = Cons -E- x -E- (app -E- xs -E- ys)
    appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) 
      [appRightNeutral] -E- Nil = Refl -E- List -E- Nil
      x :E: B xs :E: List
        [appRightNeutral] -E- (Cons -E- x -E- xs) = cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)
    appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) 
      ys :E: List zs :E: List
        [appAssoc] -E- Nil -E- ys -E- zs = Refl -E- List -E- (app -E- ys -E- zs)
      x :E: B xs :E: List ys :E: List zs :E: List
        [appAssoc] -E- (Cons -E- x -E- xs) -E- ys -E- zs = cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs -E- ys -E- zs)
    postulate Rev :E: (_x12 :E: List) -> Type
    postulate RNil :R: Rev -E- Nil
    postulate RSnoc :R: (xs :E: List) -> (x :R: B) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))
    rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -E- xs -E- ys) 
      xs :E: List rxs :R: Rev -E- xs
        [rev'] -E- xs -R- rxs -R- Nil = subst -E- List -E- Rev -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs) -R- rxs
      xs :E: List rxs :R: Rev -E- xs y :R: B ys :R: List
        [rev'] -E- xs -R- rxs -R- (Cons -R- y -R- ys) = subst -E- List -E- Rev -E- (app -E- (app -E- xs -E- (one -E- y)) -E- ys) -E- (app -E- xs -E- (Cons -R- y -R- ys)) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys) -R- (rev' -E- (app -E- xs -E- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys)
    rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)
    reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List 
      [reverse'] -E- [Nil] -R- RNil = Nil
      xs :E: List x :R: B rxs :R: Rev -E- xs
        [reverse'] -E- [app -E- xs -E- (one -E- x)] -R- (RSnoc -E- xs -R- x -R- rxs) = Cons -R- x -R- (reverse' -E- xs -R- rxs)
    reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))
    postulate V :E: (_x13 :E: List) -> Type
    postulate VNil :R: V -E- Nil
    postulate VOne :R: (x :E: B) -> V -E- (Cons -E- x -E- Nil)
    postulate VTwo :R: (x :R: B) -> (xs :E: List) -> (u :R: V -E- xs) -> (y :R: B) -> V -E- (Cons -E- x -E- (app -E- xs -E- (one -E- y)))
    length :R: (_x14 :R: List) -> N 
      [length] -R- Nil = Z
      x :E: B xs :R: List
        [length] -R- (Cons -R- x -R- xs) = S -R- (length -R- xs)
    index :E: (_x15 :E: N) -> (_x16 :E: List) -> (_x17 :E: List) -> List 
      xs :E: List ys :E: List
        [index] -E- Z -E- xs -E- ys = Nil
      x :E: B xs :E: List y :E: B ys :E: List
        [index] -E- (S -E- Z) -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys) = Cons -E- x -E- Nil
      n :E: N x :E: B xs :E: List y :E: B ys :E: List
        [index] -E- (S -E- (S -E- n)) -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys) = Cons -E- x -E- (app -E- (index -E- n -E- xs -E- ys) -E- (one -E- y))
      n :E: N
        [index] -E- (S -E- n) -E- Nil -E- Nil = Nil
    build :R: (n :R: N) -> (xs :R: List) -> (ys :R: List) -> V -E- (index -E- n -E- xs -E- ys) 
      xs :E: List ys :E: List
        [build] -R- Z -R- xs -R- ys = VNil
      x :E: B xs :E: List y :E: B ys :E: List
        [build] -R- (S -R- Z) -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = VOne -E- x
      n :R: N x :R: B xs :R: List y :R: B ys :R: List
        [build] -R- (S -R- (S -R- n)) -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = VTwo -R- x -E- (index -E- n -E- xs -E- ys) -R- (build -R- n -R- xs -R- ys) -R- y
      n :E: N
        [build] -R- (S -R- n) -R- Nil -R- Nil = VNil
    postulate eq :E: (xs :E: List) -> Id -E- List -E- (index -E- (length -E- xs) -E- xs -E- (reverse -E- xs)) -E- xs
    toV :R: (xs :R: List) -> V -E- xs = (\xs :R: List. subst -E- List -E- V -E- (index -E- (length -R- xs) -E- xs -E- (reverse -E- xs)) -E- xs -E- (eq -E- xs) -R- (build -R- (length -R- xs) -R- xs -R- (reverse -R- xs)))
    postulate IsPalindrome :E: (_x18 :E: List) -> Type
    postulate PNil :E: IsPalindrome -E- Nil
    postulate POne :E: (b :E: B) -> IsPalindrome -E- (Cons -E- b -E- Nil)
    postulate PTwo :E: (b :E: B) -> (xs :E: List) -> (pf :E: IsPalindrome -E- xs) -> IsPalindrome -E- (Cons -E- b -E- (app -E- xs -E- (one -E- b)))
    decEq :R: (x :R: B) -> (y :R: B) -> Maybe -E- (Id -E- B -E- x -E- y) 
      [decEq] -R- T -R- T = Just -E- (Id -E- B -E- T -E- T) -E- (Refl -E- B -E- T)
      [decEq] -R- F -R- F = Just -E- (Id -E- B -E- F -E- F) -E- (Refl -E- B -E- F)
      [decEq] -R- T -R- F = Nothing -E- (Id -E- B -E- T -E- F)
      [decEq] -R- F -R- T = Nothing -E- (Id -E- B -E- F -E- T)
    isPalinV :R: (xs :E: List) -> (v :R: V -E- xs) -> Maybe -E- (IsPalindrome -E- xs) 
      [isPalinV] -E- [Nil] -R- VNil = Just -E- (IsPalindrome -E- Nil) -E- PNil
      x :E: B
        [isPalinV] -E- [Cons -E- x -E- Nil] -R- (VOne -E- x) = Just -E- (IsPalindrome -E- (Cons -E- x -E- Nil)) -E- (POne -E- x)
      x :R: B xs :E: List y :R: B v :R: V -E- xs
        [isPalinV] -E- [Cons -E- x -E- (app -E- xs -E- (one -E- y))] -R- (VTwo -R- x -E- xs -R- v -R- y) = 
          let isPalinV' :R: (x :E: B) -> (y :E: B) -> (xs :E: List) -> (v :E: V -E- xs) -> (pfB :R: Maybe -E- (Id -E- B -E- x -E- y)) -> (pfV :R: Maybe -E- (IsPalindrome -E- xs)) -> Maybe -E- (IsPalindrome -E- (Cons -E- x -E- (app -E- xs -E- (one -E- y)))) 
            x :E: B xs :E: List v :E: V -E- xs pfV :E: IsPalindrome -E- xs
              [isPalinV'] -E- x -E- [x] -E- xs -E- v -R- (Just -E- [Id -E- B -E- x -E- x] -E- [Refl -E- B -E- x]) -R- (Just -E- [IsPalindrome -E- xs] -E- pfV) = Just -E- (IsPalindrome -E- (Cons -E- x -E- (app -E- xs -E- (one -E- x)))) -E- (PTwo -E- x -E- xs -E- pfV)
            x :E: B y :E: B xs :E: List v :E: V -E- xs pfB :E: Maybe -E- (Id -E- B -E- x -E- y) pfV :E: Maybe -E- (IsPalindrome -E- xs)
              [isPalinV'] -E- x -E- y -E- xs -E- v -R- pfB -R- pfV = Nothing -E- (IsPalindrome -E- (Cons -E- x -E- (app -E- xs -E- (one -E- y))))
          in isPalinV' -E- x -E- y -E- xs -E- v -R- (decEq -R- x -R- y) -R- (isPalinV -E- xs -R- v)
    isPalindrome :R: (xs :R: List) -> Maybe -E- (IsPalindrome -E- xs) = (\xs :R: List. isPalinV -E- xs -R- (toV -R- xs))
    genList :R: (_x19 :R: B) -> (_x20 :R: N) -> List 
      b :E: B
        [genList] -R- b -R- Z = Nil
      b :R: B n :R: N
        [genList] -R- b -R- (S -R- n) = Cons -R- b -R- (genList -R- (not -R- b) -R- n)
    isJust :R: (a :E: Type) -> (x :R: Maybe -E- a) -> B 
      a :E: Type x :E: a
        [isJust] -E- a -R- (Just -E- [a] -E- x) = T
      a :E: Type
        [isJust] -E- a -R- (Nothing -E- [a]) = F
    main :R: B = 
      let
        foreign inputSize :R: N
        inputList :R: List = genList -R- T -R- inputSize
      in isJust -E- (IsPalindrome -E- inputList) -R- (isPalindrome -R- inputList)
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    postulate Z : N
    postulate S : (_x0) -> N
    postulate T : B
    postulate F : B
    postulate Cons : (_x1) -> (_x2) -> List
    postulate Nil : List
    postulate Nothing : Maybe
    postulate Just : Maybe
    not 
      [_] T = F
      [_] F = T
    subst = (\w. w)
    postulate RNil : Rev
    postulate RSnoc : (x) -> (rxs) -> Rev
    rev' 
      [_] rxs Nil = subst rxs
      [_] rxs (Cons y ys) = subst (rev' (RSnoc y rxs) ys)
    rev = (\xs. rev' RNil xs)
    reverse' 
      [_] RNil = Nil
      [_] (RSnoc x rxs) = Cons x (reverse' rxs)
    reverse = (\xs. reverse' (rev xs))
    postulate VNil : V
    postulate VOne : V
    postulate VTwo : (x) -> (u) -> (y) -> V
    length 
      [_] Nil = Z
      [_] (Cons _ xs) = S (length xs)
    build 
      [_] Z _ _ = VNil
      [_] (S Z) (Cons _ _) (Cons _ _) = VOne
      [_] (S (S n)) (Cons x xs) (Cons y ys) = VTwo x (build n xs ys) y
      [_] (S _) Nil Nil = VNil
    toV = (\xs. subst (build (length xs) xs (reverse xs)))
    decEq 
      [_] T T = Just
      [_] F F = Just
      [_] T F = Nothing
      [_] F T = Nothing
    isPalinV 
      [_] VNil = Just
      [_] VOne = Just
      [_] (VTwo x v y) = 
        let isPalinV' 
          [_] Just Just = Just
          [_] _ _ = Nothing
        in isPalinV' (decEq x y) (isPalinV v)
    isPalindrome = (\xs. isPalinV (toV xs))
    genList 
      [_] _ Z = Nil
      [_] b (S n) = Cons b (genList (not b) n)
    isJust 
      [_] Just = T
      [_] Nothing = F
    main = 
      let
        foreign inputSize
        inputList = genList T inputSize
      in isJust (isPalindrome inputList)
  in main

### Normal forms ###

unerased:
  
  let
    postulate N : Type
    postulate Z : N
    postulate S : (_x0 : N) -> N
    postulate B : Type
    postulate T : B
    postulate F : B
    postulate List : Type
    postulate Cons : (_x1 : B) -> (_x2 : List) -> List
    postulate Nil : List
    postulate Maybe : (_x3 : Type) -> Type
    postulate Nothing : (a : Type) -> Maybe a
    postulate Just : (a : Type) -> (x : a) -> Maybe a
    not : (_x4 : B) -> B 
      [not] T = F
      [not] F = T
    postulate Id : (a : Type) -> (x : a) -> (y : a) -> Type
    postulate Refl : (a : Type) -> (x : a) -> Id a x x
    subst : (a : Type) -> (P : (_x6 : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (w : P x) -> P y 
      a : Type P : (_x7 : a) -> Type x : a
        [subst] a P x [x] [Refl a x] = (\w : P x. w)
    cong : (a : Type) -> (b : Type) -> (f : (_x8 : a) -> b) -> (x : a) -> (y : a) -> (eq : Id a x y) -> Id b (f x) (f y) 
      a : Type b : Type f : (_x9 : a) -> b x : a
        [cong] a b f x [x] [Refl a x] = Refl b (f x)
    one : (x : B) -> List = (\x : B. Cons x Nil)
    app : (_x10 : List) -> (_x11 : List) -> List 
      ys : List
        [app] Nil ys = ys
      x : B xs : List ys : List
        [app] (Cons x xs) ys = Cons x (app xs ys)
    appRightNeutral : (ys : List) -> Id List ys (app ys Nil) 
      [appRightNeutral] Nil = Refl List Nil
      x : B xs : List
        [appRightNeutral] (Cons x xs) = cong List List (Cons x) xs (app xs Nil) (appRightNeutral xs)
    appAssoc : (xs : List) -> (ys : List) -> (zs : List) -> Id List (app (app xs ys) zs) (app xs (app ys zs)) 
      ys : List zs : List
        [appAssoc] Nil ys zs = Refl List (app ys zs)
      x : B xs : List ys : List zs : List
        [appAssoc] (Cons x xs) ys zs = cong List List (Cons x) (app (app xs ys) zs) (app xs (app ys zs)) (appAssoc xs ys zs)
    postulate Rev : (_x12 : List) -> Type
    postulate RNil : Rev Nil
    postulate RSnoc : (xs : List) -> (x : B) -> (rxs : Rev xs) -> Rev (app xs (one x))
    rev' : (xs : List) -> (rxs : Rev xs) -> (ys : List) -> Rev (app xs ys) 
      xs : List rxs : Rev xs
        [rev'] xs rxs Nil = subst List Rev xs (app xs Nil) (appRightNeutral xs) rxs
      xs : List rxs : Rev xs y : B ys : List
        [rev'] xs rxs (Cons y ys) = subst List Rev (app (app xs (one y)) ys) (app xs (Cons y ys)) (appAssoc xs (one y) ys) (rev' (app xs (one y)) (RSnoc xs y rxs) ys)
    reverse' : (xs : List) -> (rxs : Rev xs) -> List 
      [reverse'] [Nil] RNil = Nil
      xs : List x : B rxs : Rev xs
        [reverse'] [app xs (one x)] (RSnoc xs x rxs) = Cons x (reverse' xs rxs)
    postulate V : (_x13 : List) -> Type
    postulate VNil : V Nil
    postulate VOne : (x : B) -> V (Cons x Nil)
    postulate VTwo : (x : B) -> (xs : List) -> (u : V xs) -> (y : B) -> V (Cons x (app xs (one y)))
    length : (_x14 : List) -> N 
      [length] Nil = Z
      x : B xs : List
        [length] (Cons x xs) = S (length xs)
    index : (_x15 : N) -> (_x16 : List) -> (_x17 : List) -> List 
      xs : List ys : List
        [index] Z xs ys = Nil
      x : B xs : List y : B ys : List
        [index] (S Z) (Cons x xs) (Cons y ys) = Cons x Nil
      n : N x : B xs : List y : B ys : List
        [index] (S (S n)) (Cons x xs) (Cons y ys) = Cons x (app (index n xs ys) (one y))
      n : N
        [index] (S n) Nil Nil = Nil
    build : (n : N) -> (xs : List) -> (ys : List) -> V (index n xs ys) 
      xs : List ys : List
        [build] Z xs ys = VNil
      x : B xs : List y : B ys : List
        [build] (S Z) (Cons x xs) (Cons y ys) = VOne x
      n : N x : B xs : List y : B ys : List
        [build] (S (S n)) (Cons x xs) (Cons y ys) = VTwo x (index n xs ys) (build n xs ys) y
      n : N
        [build] (S n) Nil Nil = VNil
    postulate IsPalindrome : (_x18 : List) -> Type
    postulate PNil : IsPalindrome Nil
    postulate POne : (b : B) -> IsPalindrome (Cons b Nil)
    postulate PTwo : (b : B) -> (xs : List) -> (pf : IsPalindrome xs) -> IsPalindrome (Cons b (app xs (one b)))
    decEq : (x : B) -> (y : B) -> Maybe (Id B x y) 
      [decEq] T T = Just (Id B T T) (Refl B T)
      [decEq] F F = Just (Id B F F) (Refl B F)
      [decEq] T F = Nothing (Id B T F)
      [decEq] F T = Nothing (Id B F T)
    isPalinV : (xs : List) -> (v : V xs) -> Maybe (IsPalindrome xs) 
      [isPalinV] [Nil] VNil = Just (IsPalindrome Nil) PNil
      x : B
        [isPalinV] [Cons x Nil] (VOne x) = Just (IsPalindrome (Cons x Nil)) (POne x)
      x : B xs : List y : B v : V xs
        [isPalinV] [Cons x (app xs (one y))] (VTwo x xs v y) = 
          let isPalinV' : (x : B) -> (y : B) -> (xs : List) -> (v : V xs) -> (pfB : Maybe (Id B x y)) -> (pfV : Maybe (IsPalindrome xs)) -> Maybe (IsPalindrome (Cons x (app xs (one y)))) 
            x : B xs : List v : V xs pfV : IsPalindrome xs
              [isPalinV'] x [x] xs v (Just [Id B x x] [Refl B x]) (Just [IsPalindrome xs] pfV) = Just (IsPalindrome (Cons x (app xs (one x)))) (PTwo x xs pfV)
            x : B y : B xs : List v : V xs pfB : Maybe (Id B x y) pfV : Maybe (IsPalindrome xs)
              [isPalinV'] x y xs v pfB pfV = Nothing (IsPalindrome (Cons x (app xs (one y))))
          in isPalinV' x y xs v (decEq x y) (isPalinV xs v)
    genList : (_x19 : B) -> (_x20 : N) -> List 
      b : B
        [genList] b Z = Nil
      b : B n : N
        [genList] b (S n) = Cons b (genList (not b) n)
    isJust : (a : Type) -> (x : Maybe a) -> B 
      a : Type x : a
        [isJust] a (Just [a] x) = T
      a : Type
        [isJust] a (Nothing [a]) = F
  in 
    let foreign inputSize : N
    in isJust (IsPalindrome (genList T inputSize)) (isPalinV (genList T inputSize) (build (length (genList T inputSize)) (genList T inputSize) (reverse' (genList T inputSize) (rev' Nil RNil (genList T inputSize)))))

erased:
  
  let
    postulate Z : N
    postulate S : (_x0) -> N
    postulate T : B
    postulate F : B
    postulate Cons : (_x1) -> (_x2) -> List
    postulate Nil : List
    postulate Nothing : Maybe
    postulate Just : Maybe
    not 
      [_] T = F
      [_] F = T
    subst = (\w. w)
    postulate RNil : Rev
    postulate RSnoc : (x) -> (rxs) -> Rev
    rev' 
      [_] rxs Nil = subst rxs
      [_] rxs (Cons y ys) = subst (rev' (RSnoc y rxs) ys)
    reverse' 
      [_] RNil = Nil
      [_] (RSnoc x rxs) = Cons x (reverse' rxs)
    postulate VNil : V
    postulate VOne : V
    postulate VTwo : (x) -> (u) -> (y) -> V
    length 
      [_] Nil = Z
      [_] (Cons _ xs) = S (length xs)
    build 
      [_] Z _ _ = VNil
      [_] (S Z) (Cons _ _) (Cons _ _) = VOne
      [_] (S (S n)) (Cons x xs) (Cons y ys) = VTwo x (build n xs ys) y
      [_] (S _) Nil Nil = VNil
    decEq 
      [_] T T = Just
      [_] F F = Just
      [_] T F = Nothing
      [_] F T = Nothing
    isPalinV 
      [_] VNil = Just
      [_] VOne = Just
      [_] (VTwo x v y) = 
        let isPalinV' 
          [_] Just Just = Just
          [_] _ _ = Nothing
        in isPalinV' (decEq x y) (isPalinV v)
    genList 
      [_] _ Z = Nil
      [_] b (S n) = Cons b (genList (not b) n)
    isJust 
      [_] Just = T
      [_] Nothing = F
  in 
    let foreign inputSize
    in isJust (isPalinV (build (length (genList T inputSize)) (genList T inputSize) (reverse' (rev' RNil (genList T inputSize)))))

