(import (chicken process-context))
(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Z `(Z))
    (S (lambda (x)
      `(S ,x)))
    (True `(True))
    (False `(False))
    (even (lambda (_e0)
      (match (list _e0)
        ((('Z))
          True)
        ((('S n))
          (letrec* ((odd (lambda (_e0)
            (match (list _e0)
              ((('Z))
                False)
              ((('S n))
                (even n))))))
            (odd n))))))
    (main (even (S (S (S (S (S Z)))))))
  )
    main))
