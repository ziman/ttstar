-- vim: ft=ttstar

### Desugared ###

  let
    constructor N : Type
    constructor Z : N
    constructor S : (x :R: N) -> N
    constructor Vec : (_x0 : N) -> (_x1 : Type) -> Type
    constructor Nil : (a : Type) -> Vec Z a
    constructor Cons : (a : Type) -> (n : N) -> (x :R: a) -> (xs :R: Vec n a) -> Vec (S n) a
    vlen : (n : N) -> (xs : Vec n N) -> N 
       {Z} (Nil [N]) = Z
      (m : N) (y : N) (ys : Vec m N)
         ({S} m) (Cons [N] [m] y ys) = S (vlen m ys)
    main : N = vlen 1 (Cons N Z 3 (Nil N))
  in main

### Evarified ###

  let
    constructor N :1: Type
    constructor Z :2: N
    constructor S :3: (x :R: N) -> N
    constructor Vec :4: (_x0 :5: N) -> (_x1 :6: Type) -> Type
    constructor Nil :7: (a :8: Type) -> Vec -10- Z -9- a
    constructor Cons :11: (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
    vlen :19: (n :20: N) -> (xs :21: Vec -23- n -22- N) -> N 
       -24- {Z} -25- (Nil -26- [N]) = Z
      (m :27: N) (y :28: N) (ys :29: Vec -31- m -30- N)
         -32- ({S} -33- m) -34- (Cons -35- [N] -36- [m] -37- y -38- ys) = S -39- (vlen -41- m -40- ys)
    main :42: N = vlen -44- 1 -43- (Cons -49- N -48- Z -47- 3 -46- (Nil -53- N))
  in main

### Constraints ###

[] -> [2,3,7,11,19,21,25,29,34,37,38,39,40,43,46,47,50,51,52,R]
[8] -> [1,26,53]
[9] -> [14,22]
[10] -> [15,23]
[12] -> [1,35,49]
[13] -> [36,48]
[14] -> [9,30]
[15] -> [10,31]
[16] -> [22]
[17] -> [23]
[18] -> [33,45]
[20] -> [24,27,32,41,44,45]
[22] -> [9,16,30]
[23] -> [10,17,31]
[24] -> [20]
[26] -> [1,8]
[27] -> [33]
[30] -> [14,22]
[31] -> [15,23]
[32] -> [20,33]
[33] -> [18,32]
[35] -> [1,12]
[36] -> [13,27]
[41] -> [20]
[44] -> [20]
[45] -> [18]
[48] -> [13]
[49] -> [12]
[53] -> [8]
[R] -> [42]

### Solution ###

[2,3,7,11,19,21,25,29,34,37,38,39,40,42,43,46,47,50,51,52,R]

### Annotated ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (x :R: N) -> N
    constructor Vec :E: (_x0 :E: N) -> (_x1 :E: Type) -> Type
    constructor Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    constructor Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    vlen :R: (n :E: N) -> (xs :R: Vec -E- n -E- N) -> N 
       -E- {Z} -R- (Nil -E- [N]) = Z
      (m :E: N) (y :E: N) (ys :R: Vec -E- m -E- N)
         -E- ({S} -E- m) -R- (Cons -E- [N] -E- [m] -R- y -R- ys) = S -R- (vlen -E- m -R- ys)
    main :R: N = vlen -E- 1 -R- (Cons -E- N -E- Z -R- 3 -R- (Nil -E- N))
  in main

### Specialised ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (x :R: N) -> N
    constructor Vec :E: (_x0 :E: N) -> (_x1 :E: Type) -> Type
    constructor Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    constructor Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    vlen :R: (n :E: N) -> (xs :R: Vec -E- n -E- N) -> N 
       -E- {Z} -R- (Nil -E- [N]) = Z
      (m :E: N) (y :E: N) (ys :R: Vec -E- m -E- N)
         -E- ({S} -E- m) -R- (Cons -E- [N] -E- [m] -R- y -R- ys) = S -R- (vlen -E- m -R- ys)
    main :R: N = vlen -E- 1 -R- (Cons -E- N -E- Z -R- 3 -R- (Nil -E- N))
  in main

### Final annotation ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (x :R: N) -> N
    constructor Vec :E: (_x0 :E: N) -> (_x1 :E: Type) -> Type
    constructor Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    constructor Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    vlen :R: (n :E: N) -> (xs :R: Vec -E- n -E- N) -> N 
       -E- {Z} -R- (Nil -E- [N]) = Z
      (m :E: N) (y :E: N) (ys :R: Vec -E- m -E- N)
         -E- ({S} -E- m) -R- (Cons -E- [N] -E- [m] -R- y -R- ys) = S -R- (vlen -E- m -R- ys)
    main :R: N = vlen -E- 1 -R- (Cons -E- N -E- Z -R- 3 -R- (Nil -E- N))
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor Z : N
    constructor S : (x) -> N
    constructor Nil : Vec
    constructor Cons : (x) -> (xs) -> Vec
    vlen 
       Nil = Z
       (Cons _ ys) = S (vlen ys)
    main = vlen (Cons 3 Nil)
  in main

### Normal forms ###

unerased:
  
  let
    constructor N : Type
    constructor Z : N
    constructor S : (x :R: N) -> N
  in 1

erased:
  
  let
    constructor Z : N
    constructor S : (x) -> N
  in 1

