-- vim: ft=ttstar

  let
    constructor Z : N
    constructor S : (_x0) -> N
    constructor T : B
    constructor F : B
    constructor Cons : (_x1) -> (_x2) -> List
    constructor Nil : List
    constructor Nothing : Maybe
    constructor Just : Maybe
    not 
      not T = F
      not F = T
    constructor RNil : Rev
    constructor RSnoc : (x) -> (rxs) -> Rev
    rev' 
      rev' rxs Nil = rxs
      rev' rxs (Cons y ys) = rev' (RSnoc y rxs) ys
    reverse' 
      reverse' RNil = Nil
      reverse' (RSnoc x rxs) = Cons x (reverse' rxs)
    constructor VNil : V
    constructor VOne : V
    constructor VTwo : (x) -> (u) -> (y) -> V
    length 
      length Nil = Z
      length (Cons x xs) = S (length xs)
    build 
      build Z xs ys = VNil
      build (S Z) (Cons x xs) (Cons y ys) = VOne
      build (S (S n)) (Cons x xs) (Cons y ys) = VTwo x (build n xs ys) y
      build (S n) Nil Nil = VNil
    decEq 
      decEq T T = Just
      decEq F F = Just
      decEq T F = Nothing
      decEq F T = Nothing
    isPalinV 
      isPalinV VNil = Just
      isPalinV VOne = Just
      isPalinV (VTwo x v y) = 
        let isPalinV' 
          isPalinV' Just Just = Just
          isPalinV' pfB pfV = Nothing
        in isPalinV' (decEq x y) (isPalinV v)
    genList 
      genList b Z = Nil
      genList b (S n) = Cons b (genList (not b) n)
    isJust 
      isJust Just = T
      isJust Nothing = F
  in 
    let foreign inputSize
    in isJust (isPalinV (build (length (genList T inputSize)) (genList T inputSize) (reverse' (rev' RNil (genList T inputSize)))))
