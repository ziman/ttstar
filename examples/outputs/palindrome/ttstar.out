-- vim: ft=ttstar

### Desugared ###

  let
    constructor N : Type
    constructor Z : N
    constructor S : (_x0 : N) -> N
    constructor B : Type
    constructor T : B
    constructor F : B
    constructor List : Type
    constructor Cons : (_x1 : B) -> (_x2 : List) -> List
    constructor Nil : List
    constructor Maybe : (_x3 : Type) -> Type
    constructor Nothing : (a : Type) -> Maybe a
    constructor Just : (a : Type) -> (x : a) -> Maybe a
    not : (_x4 : B) -> B 
      [not] T = F
      [not] F = T
    constructor Id : (a : Type) -> (x : a) -> (y : a) -> Type
    constructor Refl : (a : Type) -> (x : a) -> Id a x x
    id : (a : Type) -> (_x5 : a) -> a = (\a : Type. (\x : a. x))
    subst : (a : Type) -> (P : (_x6 : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (w : P x) -> P y 
      a : Type P : (_x7 : a) -> Type x : a
        [subst] a P x [x] [Refl a x] = (\w : P x. w)
    cong : (a : Type) -> (b : Type) -> (f : (_x8 : a) -> b) -> (x : a) -> (y : a) -> (eq : Id a x y) -> Id b (f x) (f y) 
      a : Type b : Type f : (_x9 : a) -> b x : a
        [cong] a b f x [x] [Refl a x] = Refl b (f x)
    one : (x : B) -> List = (\x : B. Cons x Nil)
    app : (_x10 : List) -> (_x11 : List) -> List 
      ys : List
        [app] Nil ys = ys
      x : B xs : List ys : List
        [app] (Cons x xs) ys = Cons x (app xs ys)
    appRightNeutral : (ys : List) -> Id List ys (app ys Nil) 
      [appRightNeutral] Nil = Refl List Nil
      x : B xs : List
        [appRightNeutral] (Cons x xs) = cong List List (Cons x) xs (app xs Nil) (appRightNeutral xs)
    appAssoc : (xs : List) -> (ys : List) -> (zs : List) -> Id List (app (app xs ys) zs) (app xs (app ys zs)) 
      ys : List zs : List
        [appAssoc] Nil ys zs = Refl List (app ys zs)
      x : B xs : List ys : List zs : List
        [appAssoc] (Cons x xs) ys zs = cong List List (Cons x) (app (app xs ys) zs) (app xs (app ys zs)) (appAssoc xs ys zs)
    constructor Rev : (_x12 : List) -> Type
    constructor RNil : Rev Nil
    constructor RSnoc : (xs : List) -> (x : B) -> (rxs : Rev xs) -> Rev (app xs (one x))
    rev' : (xs : List) -> (rxs : Rev xs) -> (ys : List) -> Rev (app xs ys) 
      xs : List rxs : Rev xs
        [rev'] xs rxs Nil = subst List Rev xs (app xs Nil) (appRightNeutral xs) rxs
      xs : List rxs : Rev xs y : B ys : List
        [rev'] xs rxs (Cons y ys) = subst List Rev (app (app xs (one y)) ys) (app xs (Cons y ys)) (appAssoc xs (one y) ys) (rev' (app xs (one y)) (RSnoc xs y rxs) ys)
    rev : (xs : List) -> Rev xs = (\xs : List. rev' Nil RNil xs)
    reverse' : (xs : List) -> (rxs : Rev xs) -> List 
      [reverse'] [Nil] RNil = Nil
      xs : List x : B rxs : Rev xs
        [reverse'] [app xs (one x)] (RSnoc xs x rxs) = Cons x (reverse' xs rxs)
    reverse : (xs : List) -> List = (\xs : List. reverse' xs (rev xs))
    constructor V : (_x13 : List) -> Type
    constructor VNil : V Nil
    constructor VOne : (x : B) -> V (Cons x Nil)
    constructor VTwo : (x : B) -> (xs : List) -> (u : V xs) -> (y : B) -> V (Cons x (app xs (one y)))
    length : (_x14 : List) -> N 
      [length] Nil = Z
      x : B xs : List
        [length] (Cons x xs) = S (length xs)
    index : (_x15 : N) -> (_x16 : List) -> (_x17 : List) -> List 
      xs : List ys : List
        [index] Z xs ys = Nil
      x : B xs : List y : B ys : List
        [index] (S Z) (Cons x xs) (Cons y ys) = Cons x Nil
      n : N x : B xs : List y : B ys : List
        [index] (S (S n)) (Cons x xs) (Cons y ys) = Cons x (app (index n xs ys) (one y))
      n : N
        [index] (S n) Nil Nil = Nil
    build : (n : N) -> (xs : List) -> (ys : List) -> V (index n xs ys) 
      xs : List ys : List
        [build] Z xs ys = VNil
      x : B xs : List y : B ys : List
        [build] (S Z) (Cons x xs) (Cons y ys) = VOne x
      n : N x : B xs : List y : B ys : List
        [build] (S (S n)) (Cons x xs) (Cons y ys) = VTwo x (index n xs ys) (build n xs ys) y
      n : N
        [build] (S n) Nil Nil = VNil
    postulate eq : (xs : List) -> Id List (index (length xs) xs (reverse xs)) xs
    toV : (xs : List) -> V xs = (\xs : List. subst List V (index (length xs) xs (reverse xs)) xs (eq xs) (build (length xs) xs (reverse xs)))
    constructor IsPalindrome : (_x18 : List) -> Type
    constructor PNil : IsPalindrome Nil
    constructor POne : (b : B) -> IsPalindrome (Cons b Nil)
    constructor PTwo : (b : B) -> (xs : List) -> (pf : IsPalindrome xs) -> IsPalindrome (Cons b (app xs (one b)))
    decEq : (x : B) -> (y : B) -> Maybe (Id B x y) 
      [decEq] T T = Just (Id B T T) (Refl B T)
      [decEq] F F = Just (Id B F F) (Refl B F)
      [decEq] T F = Nothing (Id B T F)
      [decEq] F T = Nothing (Id B F T)
    isPalinV : (xs : List) -> (v : V xs) -> Maybe (IsPalindrome xs) 
      [isPalinV] [Nil] VNil = Just (IsPalindrome Nil) PNil
      x : B
        [isPalinV] [Cons x Nil] (VOne x) = Just (IsPalindrome (Cons x Nil)) (POne x)
      x : B xs : List y : B v : V xs
        [isPalinV] [Cons x (app xs (one y))] (VTwo x xs v y) = 
          let isPalinV' : (x : B) -> (y : B) -> (xs : List) -> (v : V xs) -> (pfB : Maybe (Id B x y)) -> (pfV : Maybe (IsPalindrome xs)) -> Maybe (IsPalindrome (Cons x (app xs (one y)))) 
            x : B xs : List v : V xs pfV : IsPalindrome xs
              [isPalinV'] x [x] xs v (Just [Id B x x] [Refl B x]) (Just [IsPalindrome xs] pfV) = Just (IsPalindrome (Cons x (app xs (one x)))) (PTwo x xs pfV)
            x : B y : B xs : List v : V xs pfB : Maybe (Id B x y) pfV : Maybe (IsPalindrome xs)
              [isPalinV'] x y xs v pfB pfV = Nothing (IsPalindrome (Cons x (app xs (one y))))
          in isPalinV' x y xs v (decEq x y) (isPalinV xs v)
    isPalindrome : (xs : List) -> Maybe (IsPalindrome xs) = (\xs : List. isPalinV xs (toV xs))
    genList : (_x19 : B) -> (_x20 : N) -> List 
      b : B
        [genList] b Z = Nil
      b : B n : N
        [genList] b (S n) = Cons b (genList (not b) n)
    isJust : (a : Type) -> (x : Maybe a) -> B 
      a : Type x : a
        [isJust] a (Just [a] x) = T
      a : Type
        [isJust] a (Nothing [a]) = F
    main : B = 
      let
        foreign inputSize : N
        inputList : List = genList T inputSize
      in isJust (IsPalindrome inputList) (isPalindrome inputList)
  in main

### Evarified ###

  let
    constructor N :1: Type
    constructor Z :2: N
    constructor S :3: (_x0 :4: N) -> N
    constructor B :5: Type
    constructor T :6: B
    constructor F :7: B
    constructor List :8: Type
    constructor Cons :9: (_x1 :10: B) -> (_x2 :11: List) -> List
    constructor Nil :12: List
    constructor Maybe :13: (_x3 :14: Type) -> Type
    constructor Nothing :15: (a :16: Type) -> Maybe -17- a
    constructor Just :18: (a :19: Type) -> (x :20: a) -> Maybe -21- a
    not :22: (_x4 :23: B) -> B 
      [not] -24- T = F
      [not] -25- F = T
    constructor Id :26: (a :27: Type) -> (x :28: a) -> (y :29: a) -> Type
    constructor Refl :30: (a :31: Type) -> (x :32: a) -> Id -35- a -34- x -33- x
    id :36: (a :37: Type) -> (_x5 :38: a) -> a = (\a :39: Type. (\x :40: a. x))
    subst :41: (a :42: Type) -> (P :43: (_x6 :44: a) -> Type) -> (x :45: a) -> (y :46: a) -> (eq :47: Id -50- a -49- x -48- y) -> (w :51: P -52- x) -> P -53- y 
      a :54: Type P :55: (_x7 :56: a) -> Type x :57: a
        [subst] -62- a -61- P -60- x -59- [x] -58- [Refl -64- a -63- x] = (\w :65: P -66- x. w)
    cong :67: (a :68: Type) -> (b :69: Type) -> (f :70: (_x8 :71: a) -> b) -> (x :72: a) -> (y :73: a) -> (eq :74: Id -77- a -76- x -75- y) -> Id -80- b -79- (f -81- x) -78- (f -82- y) 
      a :83: Type b :84: Type f :85: (_x9 :86: a) -> b x :87: a
        [cong] -93- a -92- b -91- f -90- x -89- [x] -88- [Refl -95- a -94- x] = Refl -97- b -96- (f -98- x)
    one :99: (x :100: B) -> List = (\x :101: B. Cons -103- x -102- Nil)
    app :104: (_x10 :105: List) -> (_x11 :106: List) -> List 
      ys :107: List
        [app] -109- Nil -108- ys = ys
      x :110: B xs :111: List ys :112: List
        [app] -114- (Cons -116- x -115- xs) -113- ys = Cons -118- x -117- (app -120- xs -119- ys)
    appRightNeutral :121: (ys :122: List) -> Id -125- List -124- ys -123- (app -127- ys -126- Nil) 
      [appRightNeutral] -128- Nil = Refl -130- List -129- Nil
      x :131: B xs :132: List
        [appRightNeutral] -133- (Cons -135- x -134- xs) = cong -141- List -140- List -139- (Cons -142- x) -138- xs -137- (app -144- xs -143- Nil) -136- (appRightNeutral -145- xs)
    appAssoc :146: (xs :147: List) -> (ys :148: List) -> (zs :149: List) -> Id -152- List -151- (app -154- (app -156- xs -155- ys) -153- zs) -150- (app -158- xs -157- (app -160- ys -159- zs)) 
      ys :161: List zs :162: List
        [appAssoc] -165- Nil -164- ys -163- zs = Refl -167- List -166- (app -169- ys -168- zs)
      x :170: B xs :171: List ys :172: List zs :173: List
        [appAssoc] -176- (Cons -178- x -177- xs) -175- ys -174- zs = cong -184- List -183- List -182- (Cons -185- x) -181- (app -187- (app -189- xs -188- ys) -186- zs) -180- (app -191- xs -190- (app -193- ys -192- zs)) -179- (appAssoc -196- xs -195- ys -194- zs)
    constructor Rev :197: (_x12 :198: List) -> Type
    constructor RNil :199: Rev -200- Nil
    constructor RSnoc :201: (xs :202: List) -> (x :203: B) -> (rxs :204: Rev -205- xs) -> Rev -206- (app -208- xs -207- (one -209- x))
    rev' :210: (xs :211: List) -> (rxs :212: Rev -213- xs) -> (ys :214: List) -> Rev -215- (app -217- xs -216- ys) 
      xs :218: List rxs :219: Rev -220- xs
        [rev'] -223- xs -222- rxs -221- Nil = subst -229- List -228- Rev -227- xs -226- (app -231- xs -230- Nil) -225- (appRightNeutral -232- xs) -224- rxs
      xs :233: List rxs :234: Rev -235- xs y :236: B ys :237: List
        [rev'] -240- xs -239- rxs -238- (Cons -242- y -241- ys) = subst -248- List -247- Rev -246- (app -250- (app -252- xs -251- (one -253- y)) -249- ys) -245- (app -255- xs -254- (Cons -257- y -256- ys)) -244- (appAssoc -260- xs -259- (one -261- y) -258- ys) -243- (rev' -264- (app -266- xs -265- (one -267- y)) -263- (RSnoc -270- xs -269- y -268- rxs) -262- ys)
    rev :271: (xs :272: List) -> Rev -273- xs = (\xs :274: List. rev' -277- Nil -276- RNil -275- xs)
    reverse' :278: (xs :279: List) -> (rxs :280: Rev -281- xs) -> List 
      [reverse'] -283- [Nil] -282- RNil = Nil
      xs :284: List x :285: B rxs :286: Rev -287- xs
        [reverse'] -289- [app -291- xs -290- (one -292- x)] -288- (RSnoc -295- xs -294- x -293- rxs) = Cons -297- x -296- (reverse' -299- xs -298- rxs)
    reverse :300: (xs :301: List) -> List = (\xs :302: List. reverse' -304- xs -303- (rev -305- xs))
    constructor V :306: (_x13 :307: List) -> Type
    constructor VNil :308: V -309- Nil
    constructor VOne :310: (x :311: B) -> V -312- (Cons -314- x -313- Nil)
    constructor VTwo :315: (x :316: B) -> (xs :317: List) -> (u :318: V -319- xs) -> (y :320: B) -> V -321- (Cons -323- x -322- (app -325- xs -324- (one -326- y)))
    length :327: (_x14 :328: List) -> N 
      [length] -329- Nil = Z
      x :330: B xs :331: List
        [length] -332- (Cons -334- x -333- xs) = S -335- (length -336- xs)
    index :337: (_x15 :338: N) -> (_x16 :339: List) -> (_x17 :340: List) -> List 
      xs :341: List ys :342: List
        [index] -345- Z -344- xs -343- ys = Nil
      x :346: B xs :347: List y :348: B ys :349: List
        [index] -352- (S -353- Z) -351- (Cons -355- x -354- xs) -350- (Cons -357- y -356- ys) = Cons -359- x -358- Nil
      n :360: N x :361: B xs :362: List y :363: B ys :364: List
        [index] -367- (S -368- (S -369- n)) -366- (Cons -371- x -370- xs) -365- (Cons -373- y -372- ys) = Cons -375- x -374- (app -377- (index -380- n -379- xs -378- ys) -376- (one -381- y))
      n :382: N
        [index] -385- (S -386- n) -384- Nil -383- Nil = Nil
    build :387: (n :388: N) -> (xs :389: List) -> (ys :390: List) -> V -391- (index -394- n -393- xs -392- ys) 
      xs :395: List ys :396: List
        [build] -399- Z -398- xs -397- ys = VNil
      x :400: B xs :401: List y :402: B ys :403: List
        [build] -406- (S -407- Z) -405- (Cons -409- x -408- xs) -404- (Cons -411- y -410- ys) = VOne -412- x
      n :413: N x :414: B xs :415: List y :416: B ys :417: List
        [build] -420- (S -421- (S -422- n)) -419- (Cons -424- x -423- xs) -418- (Cons -426- y -425- ys) = VTwo -430- x -429- (index -433- n -432- xs -431- ys) -428- (build -436- n -435- xs -434- ys) -427- y
      n :437: N
        [build] -440- (S -441- n) -439- Nil -438- Nil = VNil
    postulate eq :442: (xs :443: List) -> Id -446- List -445- (index -449- (length -450- xs) -448- xs -447- (reverse -451- xs)) -444- xs
    toV :452: (xs :453: List) -> V -454- xs = (\xs :455: List. subst -461- List -460- V -459- (index -464- (length -465- xs) -463- xs -462- (reverse -466- xs)) -458- xs -457- (eq -467- xs) -456- (build -470- (length -471- xs) -469- xs -468- (reverse -472- xs)))
    constructor IsPalindrome :473: (_x18 :474: List) -> Type
    constructor PNil :475: IsPalindrome -476- Nil
    constructor POne :477: (b :478: B) -> IsPalindrome -479- (Cons -481- b -480- Nil)
    constructor PTwo :482: (b :483: B) -> (xs :484: List) -> (pf :485: IsPalindrome -486- xs) -> IsPalindrome -487- (Cons -489- b -488- (app -491- xs -490- (one -492- b)))
    decEq :493: (x :494: B) -> (y :495: B) -> Maybe -496- (Id -499- B -498- x -497- y) 
      [decEq] -501- T -500- T = Just -503- (Id -506- B -505- T -504- T) -502- (Refl -508- B -507- T)
      [decEq] -510- F -509- F = Just -512- (Id -515- B -514- F -513- F) -511- (Refl -517- B -516- F)
      [decEq] -519- T -518- F = Nothing -520- (Id -523- B -522- T -521- F)
      [decEq] -525- F -524- T = Nothing -526- (Id -529- B -528- F -527- T)
    isPalinV :530: (xs :531: List) -> (v :532: V -533- xs) -> Maybe -534- (IsPalindrome -535- xs) 
      [isPalinV] -537- [Nil] -536- VNil = Just -539- (IsPalindrome -540- Nil) -538- PNil
      x :541: B
        [isPalinV] -543- [Cons -545- x -544- Nil] -542- (VOne -546- x) = Just -548- (IsPalindrome -549- (Cons -551- x -550- Nil)) -547- (POne -552- x)
      x :553: B xs :554: List y :555: B v :556: V -557- xs
        [isPalinV] -559- [Cons -561- x -560- (app -563- xs -562- (one -564- y))] -558- (VTwo -568- x -567- xs -566- v -565- y) = 
          let isPalinV' :569: (x :570: B) -> (y :571: B) -> (xs :572: List) -> (v :573: V -574- xs) -> (pfB :575: Maybe -576- (Id -579- B -578- x -577- y)) -> (pfV :580: Maybe -581- (IsPalindrome -582- xs)) -> Maybe -583- (IsPalindrome -584- (Cons -586- x -585- (app -588- xs -587- (one -589- y)))) 
            x :590: B xs :591: List v :592: V -593- xs pfV :594: IsPalindrome -595- xs
              [isPalinV'] -601- x -600- [x] -599- xs -598- v -597- (Just -603- [Id -606- B -605- x -604- x] -602- [Refl -608- B -607- x]) -596- (Just -610- [IsPalindrome -611- xs] -609- pfV) = Just -613- (IsPalindrome -614- (Cons -616- x -615- (app -618- xs -617- (one -619- x)))) -612- (PTwo -622- x -621- xs -620- pfV)
            x :623: B y :624: B xs :625: List v :626: V -627- xs pfB :628: Maybe -629- (Id -632- B -631- x -630- y) pfV :633: Maybe -634- (IsPalindrome -635- xs)
              [isPalinV'] -641- x -640- y -639- xs -638- v -637- pfB -636- pfV = Nothing -642- (IsPalindrome -643- (Cons -645- x -644- (app -647- xs -646- (one -648- y))))
          in isPalinV' -654- x -653- y -652- xs -651- v -650- (decEq -656- x -655- y) -649- (isPalinV -658- xs -657- v)
    isPalindrome :659: (xs :660: List) -> Maybe -661- (IsPalindrome -662- xs) = (\xs :663: List. isPalinV -665- xs -664- (toV -666- xs))
    genList :667: (_x19 :668: B) -> (_x20 :669: N) -> List 
      b :670: B
        [genList] -672- b -671- Z = Nil
      b :673: B n :674: N
        [genList] -676- b -675- (S -677- n) = Cons -679- b -678- (genList -681- (not -682- b) -680- n)
    isJust :683: (a :684: Type) -> (x :685: Maybe -686- a) -> B 
      a :687: Type x :688: a
        [isJust] -690- a -689- (Just -692- [a] -691- x) = T
      a :693: Type
        [isJust] -695- a -694- (Nothing -696- [a]) = F
    main :697: B = 
      let
        foreign inputSize :698: N
        inputList :699: List = genList -701- T -700- inputSize
      in isJust -703- (IsPalindrome -704- inputList) -702- (isPalindrome -705- inputList)
  in main

### Constraints ###

[] -> [2,3,4,6,7,9,10,11,12,15,18,22,23,24,25,41,51,65,199,201,203,204,210,212,214,219,221,222,224,234,236,237,238,239,241,242,243,262,263,268,269,271,272,274,275,276,278,280,282,285,286,288,293,294,296,297,298,300,301,302,303,305,308,310,315,316,318,320,327,328,329,331,332,333,334,335,336,387,388,389,390,397,398,399,404,405,406,407,408,409,410,411,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,430,434,435,436,438,439,440,441,452,453,455,456,468,469,470,471,472,493,494,495,500,501,509,510,518,519,524,525,530,532,536,542,553,555,556,558,565,566,568,569,575,580,596,597,636,637,649,650,655,656,657,659,660,663,664,666,667,668,669,671,672,673,674,675,676,677,678,679,680,681,682,683,685,689,694,698,699,700,701,702,705,R]
[16] -> [520,526,642,696]
[17] -> [496,583,686]
[19] -> [503,512,539,548,603,610,613,692]
[20] -> [502,511,538,547,602,609,612,691]
[21] -> [496,534,576,581,583,686]
[21,577] -> [604]
[21,578] -> [605]
[21,579] -> [606]
[21,582] -> [611]
[21,604] -> [577]
[21,605] -> [578]
[21,606] -> [579]
[21,611] -> [582]
[27,503] -> [506]
[27,512] -> [515]
[27,520] -> [523]
[27,526] -> [529]
[27,603] -> [606]
[28,503] -> [505]
[28,512] -> [514]
[28,520] -> [522]
[28,526] -> [528]
[28,603] -> [605]
[29,503] -> [504]
[29,512] -> [513]
[29,520] -> [521]
[29,526] -> [527]
[29,603] -> [604]
[31,58] -> [64]
[31,58,459,462] -> [64]
[31,88,225] -> [95]
[31,88,225,459,462] -> [95]
[31,88,244] -> [95]
[31,88,244,459,462] -> [95]
[31,225] -> [97,130]
[31,225,459,462] -> [97,130]
[31,244] -> [97,167]
[31,244,459,462] -> [97,167]
[31,502] -> [508]
[31,511] -> [517]
[31,602] -> [608]
[32,58] -> [63]
[32,58,459,462] -> [63]
[32,88,225] -> [94]
[32,88,225,459,462] -> [94]
[32,88,244] -> [94]
[32,88,244,459,462] -> [94]
[32,225] -> [96,129]
[32,225,459,462] -> [96,129]
[32,244] -> [96,166]
[32,244,459,462] -> [96,166]
[32,502] -> [507]
[32,511] -> [516]
[32,602] -> [607]
[33,58] -> [48]
[33,58,459,462] -> [48]
[33,88,225] -> [75]
[33,88,225,459,462] -> [75]
[33,88,244] -> [75]
[33,88,244,459,462] -> [75]
[33,225] -> [78,123]
[33,225,459,462] -> [78,123]
[33,244] -> [78,150]
[33,244,459,462] -> [78,150]
[33,502] -> [504]
[33,511] -> [513]
[33,602] -> [604]
[34,58] -> [49]
[34,58,459,462] -> [49]
[34,88,225] -> [76]
[34,88,225,459,462] -> [76]
[34,88,244] -> [76]
[34,88,244,459,462] -> [76]
[34,225] -> [79,124]
[34,225,459,462] -> [79,124]
[34,244] -> [79,151]
[34,244,459,462] -> [79,151]
[34,502] -> [505]
[34,511] -> [514]
[34,602] -> [605]
[35,58] -> [50]
[35,58,459,462] -> [50]
[35,88,225] -> [77]
[35,88,225,459,462] -> [77]
[35,88,244] -> [77]
[35,88,244,459,462] -> [77]
[35,225] -> [80,125]
[35,225,459,462] -> [80,125]
[35,244] -> [80,152]
[35,244,459,462] -> [80,152]
[35,502] -> [506]
[35,511] -> [515]
[35,602] -> [606]
[42] -> [62,229,248,461]
[42,459,462] -> [62,229,248]
[43] -> [61,228,247,460]
[43,459,462] -> [61,228,247]
[44,61] -> [56]
[44,61,459,462] -> [56]
[44,228] -> [198]
[44,228,459,462] -> [198]
[44,247] -> [198]
[44,247,459,462] -> [198]
[44,460] -> [307]
[45] -> [60,227,246,459]
[45,459,462] -> [60,227,246]
[46] -> [59,226,245,458]
[46,459,462] -> [59,226,245]
[47] -> [58,225,244,457]
[47,459,462] -> [58,225,244]
[48,58] -> [33]
[48,58,459,462] -> [33]
[48,225] -> [123]
[48,225,459,462] -> [123]
[48,244] -> [150]
[48,244,459,462] -> [150]
[48,457] -> [444]
[49,58] -> [34]
[49,58,459,462] -> [34]
[49,225] -> [124]
[49,225,459,462] -> [124]
[49,244] -> [151]
[49,244,459,462] -> [151]
[49,457] -> [445]
[50,58] -> [35]
[50,58,459,462] -> [35]
[50,225] -> [125]
[50,225,459,462] -> [125]
[50,244] -> [152]
[50,244,459,462] -> [152]
[50,457] -> [446]
[52] -> [66,215,220,391]
[52,459,462] -> [66,215,220]
[53] -> [66,215,454]
[53,459,462] -> [66,215]
[54] -> [62]
[54,459,462] -> [62]
[55] -> [61]
[55,459,462] -> [61]
[56,61] -> [44]
[56,61,459,462] -> [44]
[57] -> [60]
[57,459,462] -> [60]
[58] -> [30,47,R]
[58,63] -> [32,57]
[58,63,459,462] -> [32,57]
[58,64] -> [31,54]
[58,64,459,462] -> [31,54]
[58,459,462] -> [30,47,R]
[59] -> [46,57,R]
[59,459,462] -> [46,57,R]
[60] -> [45,R]
[60,459,462] -> [45,R]
[61] -> [43,R]
[61,459,462] -> [43,R]
[62] -> [42,R]
[62,459,462] -> [42,R]
[66] -> [52,53]
[66,459,462] -> [52,53]
[68,225] -> [93,141]
[68,225,459,462] -> [93,141]
[68,244] -> [93,184]
[68,244,459,462] -> [93,184]
[69,225] -> [92,140]
[69,225,459,462] -> [92,140]
[69,244] -> [92,183]
[69,244,459,462] -> [92,183]
[70,225] -> [91,139]
[70,225,459,462] -> [91,139]
[70,244] -> [91,182]
[70,244,459,462] -> [91,182]
[71,91,225] -> [86]
[71,91,225,459,462] -> [86]
[71,91,244] -> [86]
[71,91,244,459,462] -> [86]
[71,139,225] -> [11]
[71,139,225,459,462] -> [11]
[71,182,244] -> [11]
[71,182,244,459,462] -> [11]
[72,225] -> [90,138]
[72,225,459,462] -> [90,138]
[72,244] -> [90,181]
[72,244,459,462] -> [90,181]
[73,225] -> [89,137]
[73,225,459,462] -> [89,137]
[73,244] -> [89,180]
[73,244,459,462] -> [89,180]
[74,225] -> [88,136]
[74,225,459,462] -> [88,136]
[74,244] -> [88,179]
[74,244,459,462] -> [88,179]
[75,88,225] -> [33]
[75,88,225,459,462] -> [33]
[75,88,244] -> [33]
[75,88,244,459,462] -> [33]
[75,136,225] -> [123]
[75,136,225,459,462] -> [123]
[75,179,244] -> [150]
[75,179,244,459,462] -> [150]
[76,88,225] -> [34]
[76,88,225,459,462] -> [34]
[76,88,244] -> [34]
[76,88,244,459,462] -> [34]
[76,136,225] -> [124]
[76,136,225,459,462] -> [124]
[76,179,244] -> [151]
[76,179,244,459,462] -> [151]
[77,88,225] -> [35]
[77,88,225,459,462] -> [35]
[77,88,244] -> [35]
[77,88,244,459,462] -> [35]
[77,136,225] -> [125]
[77,136,225,459,462] -> [125]
[77,179,244] -> [152]
[77,179,244,459,462] -> [152]
[78,82,225] -> [98]
[78,82,225,459,462] -> [98]
[78,82,244] -> [98]
[78,82,244,459,462] -> [98]
[78,98,225] -> [82]
[78,98,225,459,462] -> [82]
[78,98,244] -> [82]
[78,98,244,459,462] -> [82]
[78,225] -> [33,123]
[78,225,459,462] -> [33,123]
[78,244] -> [33,150]
[78,244,459,462] -> [33,150]
[79,81,225] -> [98]
[79,81,225,459,462] -> [98]
[79,81,244] -> [98]
[79,81,244,459,462] -> [98]
[79,98,225] -> [81]
[79,98,225,459,462] -> [81]
[79,98,244] -> [81]
[79,98,244,459,462] -> [81]
[79,225] -> [34,124]
[79,225,459,462] -> [34,124]
[79,244] -> [34,151]
[79,244,459,462] -> [34,151]
[80,225] -> [35,125]
[80,225,459,462] -> [35,125]
[80,244] -> [35,152]
[80,244,459,462] -> [35,152]
[81,124,225] -> [134]
[81,124,225,459,462] -> [134]
[81,151,244] -> [117]
[81,151,244,459,462] -> [117]
[82,123,225] -> [117]
[82,123,225,459,462] -> [117]
[82,150,244] -> [117]
[82,150,244,459,462] -> [117]
[83,225] -> [93]
[83,225,459,462] -> [93]
[83,244] -> [93]
[83,244,459,462] -> [93]
[84,225] -> [92]
[84,225,459,462] -> [92]
[84,244] -> [92]
[84,244,459,462] -> [92]
[85,225] -> [91]
[85,225,459,462] -> [91]
[85,244] -> [91]
[85,244,459,462] -> [91]
[86,91,225] -> [71]
[86,91,225,459,462] -> [71]
[86,91,244] -> [71]
[86,91,244,459,462] -> [71]
[86,96,225] -> [98]
[86,96,225,459,462] -> [98]
[86,96,244] -> [98]
[86,96,244,459,462] -> [98]
[87,225] -> [90]
[87,225,459,462] -> [90]
[87,244] -> [90]
[87,244,459,462] -> [90]
[88,94,225] -> [32,87]
[88,94,225,459,462] -> [32,87]
[88,94,244] -> [32,87]
[88,94,244,459,462] -> [32,87]
[88,95,225] -> [31,83]
[88,95,225,459,462] -> [31,83]
[88,95,244] -> [31,83]
[88,95,244,459,462] -> [31,83]
[88,225] -> [30,74,R]
[88,225,459,462] -> [30,74,R]
[88,244] -> [30,74,R]
[88,244,459,462] -> [30,74,R]
[89,225] -> [73,87,R]
[89,225,459,462] -> [73,87,R]
[89,244] -> [73,87,R]
[89,244,459,462] -> [73,87,R]
[90,225] -> [72,R]
[90,225,459,462] -> [72,R]
[90,244] -> [72,R]
[90,244,459,462] -> [72,R]
[91,225] -> [70,R]
[91,225,459,462] -> [70,R]
[91,244] -> [70,R]
[91,244,459,462] -> [70,R]
[92,225] -> [69,R]
[92,225,459,462] -> [69,R]
[92,244] -> [69,R]
[92,244,459,462] -> [69,R]
[93,225] -> [68,R]
[93,225,459,462] -> [68,R]
[93,244] -> [68,R]
[93,244,459,462] -> [68,R]
[96,98,225] -> [86,87]
[96,98,225,459,462] -> [86,87]
[96,98,244] -> [86,87]
[96,98,244,459,462] -> [86,87]
[96,225] -> [32,85]
[96,225,459,462] -> [32,85]
[96,244] -> [32,85]
[96,244,459,462] -> [32,85]
[97,225] -> [31,84]
[97,225,459,462] -> [31,84]
[97,244] -> [31,84]
[97,244,459,462] -> [31,84]
[100,244,259] -> [101,261]
[100,244,259,459,462] -> [101,261]
[100,246,250,251] -> [101,253]
[100,246,250,251,459,462] -> [101,253]
[100,264,265] -> [101,267]
[100,264,265,459,462] -> [101,267]
[100,289,290] -> [101,292]
[100,289,290,459,462] -> [101,292]
[100,374,376,429] -> [101,381]
[100,374,376,459] -> [101,381]
[100,559,560,562] -> [101,564]
[100,613,614,615,617] -> [101,619]
[100,642,643,644,646] -> [101,648]
[101,244,259] -> [100]
[101,244,259,459,462] -> [100]
[101,246,250,251] -> [100]
[101,246,250,251,459,462] -> [100]
[101,264,265] -> [100]
[101,264,265,459,462] -> [100]
[101,289,290] -> [100]
[101,289,290,459,462] -> [100]
[101,374,376,429] -> [100]
[101,374,376,459] -> [100]
[101,559,560,562] -> [100]
[101,613,614,615,617] -> [100]
[101,642,643,644,646] -> [100]
[102,151,154,155,244] -> [102]
[102,151,154,155,244,459,462] -> [102]
[102,206,207] -> [102]
[102,206,207,459,462] -> [102]
[102,215,217,265] -> [102]
[102,215,217,265,459,462] -> [102]
[102,244,259] -> [11,12]
[102,244,259,459,462] -> [11,12]
[102,246,250,251] -> [11,12]
[102,246,250,251,459,462] -> [11,12]
[102,264,265] -> [11,12]
[102,264,265,459,462] -> [11,12]
[102,289,290] -> [11,12]
[102,289,290,459,462] -> [11,12]
[102,321,322,324] -> [102]
[102,374,376,391] -> [102]
[102,374,376,429] -> [11,12]
[102,374,376,459] -> [11,12]
[102,487,488,490,612] -> [102]
[102,534,535,560,562] -> [102]
[102,559,560,562] -> [11,12]
[102,583,584,585,587] -> [102]
[102,613,614,615,617] -> [11,12]
[102,642,643,644,646] -> [11,12]
[103,151,154,155,244] -> [103]
[103,151,154,155,244,459,462] -> [103]
[103,206,207] -> [103]
[103,206,207,459,462] -> [103]
[103,215,217,265] -> [103]
[103,215,217,265,459,462] -> [103]
[103,244,259] -> [10,101]
[103,244,259,459,462] -> [10,101]
[103,246,250,251] -> [10,101]
[103,246,250,251,459,462] -> [10,101]
[103,264,265] -> [10,101]
[103,264,265,459,462] -> [10,101]
[103,289,290] -> [10,101]
[103,289,290,459,462] -> [10,101]
[103,321,322,324] -> [103]
[103,374,376,391] -> [103]
[103,374,376,429] -> [10,101]
[103,374,376,459] -> [10,101]
[103,487,488,490,612] -> [103]
[103,534,535,560,562] -> [103]
[103,559,560,562] -> [10,101]
[103,583,584,585,587] -> [103]
[103,613,614,615,617] -> [10,101]
[103,642,643,644,646] -> [10,101]
[105,137,225] -> [144]
[105,137,225,459,462] -> [144]
[105,166,244] -> [169]
[105,166,244,459,462] -> [169]
[105,180,190,244] -> [193]
[105,180,190,244,459,462] -> [193]
[105,180,244] -> [191]
[105,180,244,459,462] -> [191]
[105,181,187,244] -> [189]
[105,181,187,244,459,462] -> [189]
[105,181,244] -> [187]
[105,181,244,459,462] -> [187]
[105,226] -> [231]
[105,226,459,462] -> [231]
[105,245] -> [255]
[105,245,459,462] -> [255]
[105,246] -> [250]
[105,246,250] -> [252]
[105,246,250,459,462] -> [252]
[105,246,459,462] -> [250]
[105,264] -> [266]
[105,264,459,462] -> [266]
[105,289] -> [291]
[105,289,459,462] -> [291]
[105,374,429] -> [377]
[105,374,459] -> [377]
[105,559,560] -> [563]
[105,613,614,615] -> [618]
[105,642,643,644] -> [647]
[106,137,225] -> [143]
[106,137,225,459,462] -> [143]
[106,166,244] -> [168]
[106,166,244,459,462] -> [168]
[106,180,190,244] -> [192]
[106,180,190,244,459,462] -> [192]
[106,180,244] -> [190]
[106,180,244,459,462] -> [190]
[106,181,187,244] -> [188]
[106,181,187,244,459,462] -> [188]
[106,181,244] -> [186]
[106,181,244,459,462] -> [186]
[106,226] -> [230]
[106,226,459,462] -> [230]
[106,245] -> [254]
[106,245,459,462] -> [254]
[106,246] -> [249]
[106,246,250] -> [251]
[106,246,250,459,462] -> [251]
[106,246,459,462] -> [249]
[106,264] -> [265]
[106,264,459,462] -> [265]
[106,289] -> [290]
[106,289,459,462] -> [290]
[106,374,429] -> [376]
[106,374,459] -> [376]
[106,559,560] -> [562]
[106,613,614,615] -> [617]
[106,642,643,644] -> [646]
[110,137,225] -> [116]
[110,137,225,459,462] -> [116]
[110,166,244] -> [116]
[110,166,244,459,462] -> [116]
[110,180,190,244] -> [116]
[110,180,190,244,459,462] -> [116]
[110,180,244] -> [116]
[110,180,244,459,462] -> [116]
[110,181,187,244] -> [116]
[110,181,187,244,459,462] -> [116]
[110,181,244] -> [116]
[110,181,244,459,462] -> [116]
[110,226] -> [116]
[110,226,459,462] -> [116]
[110,245] -> [116]
[110,245,459,462] -> [116]
[110,246] -> [116]
[110,246,250] -> [116]
[110,246,250,459,462] -> [116]
[110,246,459,462] -> [116]
[110,264] -> [116]
[110,264,459,462] -> [116]
[110,289] -> [116]
[110,289,459,462] -> [116]
[110,374,429] -> [116]
[110,374,459] -> [116]
[110,559,560] -> [116]
[110,613,614,615] -> [116]
[110,642,643,644] -> [116]
[111,137,225] -> [115]
[111,137,225,459,462] -> [115]
[111,166,244] -> [115]
[111,166,244,459,462] -> [115]
[111,180,190,244] -> [115]
[111,180,190,244,459,462] -> [115]
[111,180,244] -> [115]
[111,180,244,459,462] -> [115]
[111,181,187,244] -> [115]
[111,181,187,244,459,462] -> [115]
[111,181,244] -> [115]
[111,181,244,459,462] -> [115]
[111,226] -> [115]
[111,226,459,462] -> [115]
[111,245] -> [115]
[111,245,459,462] -> [115]
[111,246] -> [115]
[111,246,250] -> [115]
[111,246,250,459,462] -> [115]
[111,246,459,462] -> [115]
[111,264] -> [115]
[111,264,459,462] -> [115]
[111,289] -> [115]
[111,289,459,462] -> [115]
[111,374,429] -> [115]
[111,374,459] -> [115]
[111,559,560] -> [115]
[111,613,614,615] -> [115]
[111,642,643,644] -> [115]
[112,137,225] -> [113]
[112,137,225,459,462] -> [113]
[112,166,244] -> [113]
[112,166,244,459,462] -> [113]
[112,180,190,244] -> [113]
[112,180,190,244,459,462] -> [113]
[112,180,244] -> [113]
[112,180,244,459,462] -> [113]
[112,181,187,244] -> [113]
[112,181,187,244,459,462] -> [113]
[112,181,244] -> [113]
[112,181,244,459,462] -> [113]
[112,226] -> [113]
[112,226,459,462] -> [113]
[112,245] -> [113]
[112,245,459,462] -> [113]
[112,246] -> [113]
[112,246,250] -> [113]
[112,246,250,459,462] -> [113]
[112,246,459,462] -> [113]
[112,264] -> [113]
[112,264,459,462] -> [113]
[112,289] -> [113]
[112,289,459,462] -> [113]
[112,374,429] -> [113]
[112,374,459] -> [113]
[112,559,560] -> [113]
[112,613,614,615] -> [113]
[112,642,643,644] -> [113]
[115,137,225] -> [11,114]
[115,137,225,459,462] -> [11,114]
[115,166,244] -> [11,114]
[115,166,244,459,462] -> [11,114]
[115,180,190,244] -> [11,114]
[115,180,190,244,459,462] -> [11,114]
[115,180,244] -> [11,114]
[115,180,244,459,462] -> [11,114]
[115,181,187,244] -> [11,114]
[115,181,187,244,459,462] -> [11,114]
[115,181,244] -> [11,114]
[115,181,244,459,462] -> [11,114]
[115,226] -> [11,114]
[115,226,459,462] -> [11,114]
[115,245] -> [11,114]
[115,245,459,462] -> [11,114]
[115,246] -> [11,114]
[115,246,250] -> [11,114]
[115,246,250,459,462] -> [11,114]
[115,246,459,462] -> [11,114]
[115,264] -> [11,114]
[115,264,459,462] -> [11,114]
[115,289] -> [11,114]
[115,289,459,462] -> [11,114]
[115,374,429] -> [11,114]
[115,374,459] -> [11,114]
[115,559,560] -> [11,114]
[115,613,614,615] -> [11,114]
[115,642,643,644] -> [11,114]
[116,137,225] -> [10,114]
[116,137,225,459,462] -> [10,114]
[116,166,244] -> [10,114]
[116,166,244,459,462] -> [10,114]
[116,180,190,244] -> [10,114]
[116,180,190,244,459,462] -> [10,114]
[116,180,244] -> [10,114]
[116,180,244,459,462] -> [10,114]
[116,181,187,244] -> [10,114]
[116,181,187,244,459,462] -> [10,114]
[116,181,244] -> [10,114]
[116,181,244,459,462] -> [10,114]
[116,226] -> [10,114]
[116,226,459,462] -> [10,114]
[116,245] -> [10,114]
[116,245,459,462] -> [10,114]
[116,246] -> [10,114]
[116,246,250] -> [10,114]
[116,246,250,459,462] -> [10,114]
[116,246,459,462] -> [10,114]
[116,264] -> [10,114]
[116,264,459,462] -> [10,114]
[116,289] -> [10,114]
[116,289,459,462] -> [10,114]
[116,374,429] -> [10,114]
[116,374,459] -> [10,114]
[116,559,560] -> [10,114]
[116,613,614,615] -> [10,114]
[116,642,643,644] -> [10,114]
[117,119,120,151,244] -> [188]
[117,119,120,151,244,459,462] -> [188]
[117,119,123,225] -> [143]
[117,119,123,225,459,462] -> [143]
[117,119,137,225] -> [106,112]
[117,119,137,225,459,462] -> [106,112]
[117,119,150,159,244] -> [192]
[117,119,150,159,244,459,462] -> [192]
[117,119,150,160,244] -> [193]
[117,119,150,160,244,459,462] -> [193]
[117,119,150,192,244] -> [159]
[117,119,150,192,244,459,462] -> [159]
[117,119,150,193,244] -> [160]
[117,119,150,193,244,459,462] -> [160]
[117,119,150,244] -> [190]
[117,119,150,244,459,462] -> [190]
[117,119,151,244] -> [186]
[117,119,151,244,459,462] -> [186]
[117,119,166,244] -> [106,112]
[117,119,166,244,459,462] -> [106,112]
[117,119,180,190,244] -> [106,112]
[117,119,180,190,244,459,462] -> [106,112]
[117,119,180,244] -> [106,112]
[117,119,180,244,459,462] -> [106,112]
[117,119,181,187,244] -> [106,112]
[117,119,181,187,244,459,462] -> [106,112]
[117,119,181,244] -> [106,112]
[117,119,181,244,459,462] -> [106,112]
[117,119,226] -> [106,112]
[117,119,226,459,462] -> [106,112]
[117,119,245] -> [106,112]
[117,119,245,459,462] -> [106,112]
[117,119,246] -> [106,112]
[117,119,246,250] -> [106,112]
[117,119,246,250,459,462] -> [106,112]
[117,119,246,459,462] -> [106,112]
[117,119,264] -> [106,112]
[117,119,264,459,462] -> [106,112]
[117,119,289] -> [106,112]
[117,119,289,459,462] -> [106,112]
[117,119,374,429] -> [106,112]
[117,119,374,459] -> [106,112]
[117,119,559,560] -> [106,112]
[117,119,613,614,615] -> [106,112]
[117,119,642,643,644] -> [106,112]
[117,120,123,225] -> [144]
[117,120,123,225,459,462] -> [144]
[117,120,137,225] -> [105,111]
[117,120,137,225,459,462] -> [105,111]
[117,120,150,244] -> [191]
[117,120,150,244,459,462] -> [191]
[117,120,151,188,244] -> [119]
[117,120,151,188,244,459,462] -> [119]
[117,120,151,189,244] -> [120]
[117,120,151,189,244,459,462] -> [120]
[117,120,151,244] -> [187,189]
[117,120,151,244,459,462] -> [187,189]
[117,120,166,244] -> [105,111]
[117,120,166,244,459,462] -> [105,111]
[117,120,180,190,244] -> [105,111]
[117,120,180,190,244,459,462] -> [105,111]
[117,120,180,244] -> [105,111]
[117,120,180,244,459,462] -> [105,111]
[117,120,181,187,244] -> [105,111]
[117,120,181,187,244,459,462] -> [105,111]
[117,120,181,244] -> [105,111]
[117,120,181,244,459,462] -> [105,111]
[117,120,226] -> [105,111]
[117,120,226,459,462] -> [105,111]
[117,120,245] -> [105,111]
[117,120,245,459,462] -> [105,111]
[117,120,246] -> [105,111]
[117,120,246,250] -> [105,111]
[117,120,246,250,459,462] -> [105,111]
[117,120,246,459,462] -> [105,111]
[117,120,264] -> [105,111]
[117,120,264,459,462] -> [105,111]
[117,120,289] -> [105,111]
[117,120,289,459,462] -> [105,111]
[117,120,374,429] -> [105,111]
[117,120,374,459] -> [105,111]
[117,120,559,560] -> [105,111]
[117,120,613,614,615] -> [105,111]
[117,120,642,643,644] -> [105,111]
[117,123,143,225] -> [119]
[117,123,143,225,459,462] -> [119]
[117,123,144,225] -> [120]
[117,123,144,225,459,462] -> [120]
[117,123,225] -> [82]
[117,123,225,459,462] -> [82]
[117,137,225] -> [11,104,119,120]
[117,137,225,459,462] -> [11,104,119,120]
[117,150,157,244] -> [256]
[117,150,157,244,459,462] -> [256]
[117,150,190,244] -> [119]
[117,150,190,244,459,462] -> [119]
[117,150,191,244] -> [120]
[117,150,191,244,459,462] -> [120]
[117,150,244] -> [82]
[117,150,244,459,462] -> [82]
[117,151,186,244] -> [119]
[117,151,186,244,459,462] -> [119]
[117,151,187,244] -> [120]
[117,151,187,244,459,462] -> [120]
[117,151,244] -> [81]
[117,151,244,459,462] -> [81]
[117,166,244] -> [11,104,119,120]
[117,166,244,459,462] -> [11,104,119,120]
[117,180,190,244] -> [11,104,119,120]
[117,180,190,244,459,462] -> [11,104,119,120]
[117,180,244] -> [11,104,119,120]
[117,180,244,459,462] -> [11,104,119,120]
[117,181,187,244] -> [11,104,119,120]
[117,181,187,244,459,462] -> [11,104,119,120]
[117,181,244] -> [11,104,119,120]
[117,181,244,459,462] -> [11,104,119,120]
[117,226] -> [11,104,119,120]
[117,226,459,462] -> [11,104,119,120]
[117,245] -> [11,104,119,120]
[117,245,459,462] -> [11,104,119,120]
[117,246] -> [11,104,119,120]
[117,246,250] -> [11,104,119,120]
[117,246,250,459,462] -> [11,104,119,120]
[117,246,459,462] -> [11,104,119,120]
[117,264] -> [11,104,119,120]
[117,264,459,462] -> [11,104,119,120]
[117,289] -> [11,104,119,120]
[117,289,459,462] -> [11,104,119,120]
[117,374,429] -> [11,104,119,120]
[117,374,459] -> [11,104,119,120]
[117,559,560] -> [11,104,119,120]
[117,613,614,615] -> [11,104,119,120]
[117,642,643,644] -> [11,104,119,120]
[118,123,225] -> [142]
[118,123,225,459,462] -> [142]
[118,137,225] -> [10,110]
[118,137,225,459,462] -> [10,110]
[118,150,157,244] -> [257]
[118,150,157,244,459,462] -> [257]
[118,150,244] -> [185]
[118,150,244,459,462] -> [185]
[118,151,244] -> [185]
[118,151,244,459,462] -> [185]
[118,166,244] -> [10,110]
[118,166,244,459,462] -> [10,110]
[118,180,190,244] -> [10,110]
[118,180,190,244,459,462] -> [10,110]
[118,180,244] -> [10,110]
[118,180,244,459,462] -> [10,110]
[118,181,187,244] -> [10,110]
[118,181,187,244,459,462] -> [10,110]
[118,181,244] -> [10,110]
[118,181,244,459,462] -> [10,110]
[118,226] -> [10,110]
[118,226,459,462] -> [10,110]
[118,245] -> [10,110]
[118,245,459,462] -> [10,110]
[118,246] -> [10,110]
[118,246,250] -> [10,110]
[118,246,250,459,462] -> [10,110]
[118,246,459,462] -> [10,110]
[118,264] -> [10,110]
[118,264,459,462] -> [10,110]
[118,289] -> [10,110]
[118,289,459,462] -> [10,110]
[118,374,429] -> [10,110]
[118,374,459] -> [10,110]
[118,559,560] -> [10,110]
[118,613,614,615] -> [10,110]
[118,642,643,644] -> [10,110]
[122,225] -> [232]
[122,225,459,462] -> [232]
[123,126,136,225] -> [143]
[123,126,136,225,459,462] -> [143]
[123,126,225] -> [230]
[123,126,225,459,462] -> [230]
[123,127,136,225] -> [144]
[123,127,136,225,459,462] -> [144]
[123,127,225] -> [231]
[123,127,225,459,462] -> [231]
[123,136,143,225] -> [126]
[123,136,143,225,459,462] -> [126]
[123,136,144,225] -> [127]
[123,136,144,225,459,462] -> [127]
[123,136,225] -> [75]
[123,136,225,459,462] -> [75]
[123,142,225] -> [118]
[123,142,225,459,462] -> [118]
[123,225] -> [33,48,78]
[123,225,230] -> [126]
[123,225,230,459,462] -> [126]
[123,225,231] -> [127]
[123,225,231,459,462] -> [127]
[123,225,459,462] -> [33,48,78]
[124,134,225] -> [81]
[124,134,225,459,462] -> [81]
[124,135,225] -> [142]
[124,135,225,459,462] -> [142]
[124,136,225] -> [76]
[124,136,225,459,462] -> [76]
[124,142,225] -> [135]
[124,142,225,459,462] -> [135]
[124,225] -> [34,49,79]
[124,225,459,462] -> [34,49,79]
[125,136,225] -> [77]
[125,136,225,459,462] -> [77]
[125,225] -> [35,50,80]
[125,225,459,462] -> [35,50,80]
[129,225] -> [12,32]
[129,225,459,462] -> [12,32]
[130,225] -> [8,31]
[130,225,459,462] -> [8,31]
[131,225] -> [135]
[131,225,459,462] -> [135]
[132,225] -> [134]
[132,225,459,462] -> [134]
[134,225] -> [11,133]
[134,225,459,462] -> [11,133]
[135,225] -> [10,133]
[135,225,459,462] -> [10,133]
[136,145,225] -> [122,132]
[136,145,225,459,462] -> [122,132]
[136,225] -> [74,121,145]
[136,225,459,462] -> [74,121,145]
[137,143,225] -> [12,106]
[137,143,225,459,462] -> [12,106]
[137,144,225] -> [105,132]
[137,144,225,459,462] -> [105,132]
[137,225] -> [9,12,73,104,105,106,107,108,109,113,114,115,116,117,118,R]
[137,225,459,462] -> [9,12,73,104,105,106,107,108,109,113,114,115,116,117,118,R]
[138,225] -> [72,132]
[138,225,459,462] -> [72,132]
[139,142,225] -> [10,131]
[139,142,225,459,462] -> [10,131]
[139,225] -> [9,70,71,142]
[139,225,459,462] -> [9,70,71,142]
[140,225] -> [8,69]
[140,225,459,462] -> [8,69]
[141,225] -> [8,68]
[141,225,459,462] -> [8,68]
[147,244] -> [260]
[147,244,459,462] -> [260]
[148,179,244] -> [195]
[148,179,244,459,462] -> [195]
[148,244] -> [164,175,259]
[148,244,459,462] -> [164,175,259]
[149,179,244] -> [194]
[149,179,244,459,462] -> [194]
[149,244] -> [163,174,258]
[149,244,459,462] -> [163,174,258]
[150,157,159,179,244] -> [192]
[150,157,159,179,244,459,462] -> [192]
[150,157,160,179,244] -> [193]
[150,157,160,179,244,459,462] -> [193]
[150,157,179,192,244] -> [159]
[150,157,179,192,244,459,462] -> [159]
[150,157,179,193,244] -> [160]
[150,157,179,193,244,459,462] -> [160]
[150,157,179,244] -> [190]
[150,157,179,244,459,462] -> [190]
[150,157,244] -> [254]
[150,157,244,256] -> [117]
[150,157,244,256,459,462] -> [117]
[150,157,244,257] -> [118]
[150,157,244,257,459,462] -> [118]
[150,157,244,459,462] -> [254]
[150,158,179,244] -> [191]
[150,158,179,244,459,462] -> [191]
[150,158,244] -> [255]
[150,158,244,459,462] -> [255]
[150,159,244] -> [168]
[150,159,244,459,462] -> [168]
[150,160,244] -> [169]
[150,160,244,459,462] -> [169]
[150,168,244] -> [159]
[150,168,244,459,462] -> [159]
[150,169,244] -> [160]
[150,169,244,459,462] -> [160]
[150,179,190,244] -> [157]
[150,179,190,244,459,462] -> [157]
[150,179,191,244] -> [158]
[150,179,191,244,459,462] -> [158]
[150,179,244] -> [75]
[150,179,244,459,462] -> [75]
[150,185,244] -> [118]
[150,185,244,459,462] -> [118]
[150,244] -> [33,48,78]
[150,244,254] -> [157]
[150,244,254,459,462] -> [157]
[150,244,255] -> [158]
[150,244,255,459,462] -> [158]
[150,244,459,462] -> [33,48,78]
[151,153,179,244] -> [186]
[151,153,179,244,459,462] -> [186]
[151,153,244] -> [168,249]
[151,153,244,459,462] -> [168,249]
[151,154,155,179,244] -> [188]
[151,154,155,179,244,459,462] -> [188]
[151,154,155,244] -> [251]
[151,154,155,244,459,462] -> [251]
[151,154,156,179,244] -> [189]
[151,154,156,179,244,459,462] -> [189]
[151,154,156,244] -> [252]
[151,154,156,244,459,462] -> [252]
[151,154,179,188,244] -> [155]
[151,154,179,188,244,459,462] -> [155]
[151,154,179,189,244] -> [156]
[151,154,179,189,244,459,462] -> [156]
[151,154,179,244] -> [187]
[151,154,179,244,459,462] -> [187]
[151,154,244] -> [169,250]
[151,154,244,251] -> [155]
[151,154,244,251,459,462] -> [155]
[151,154,244,252] -> [156]
[151,154,244,252,459,462] -> [156]
[151,154,244,459,462] -> [169,250]
[151,168,244] -> [153]
[151,168,244,459,462] -> [153]
[151,169,244] -> [154]
[151,169,244,459,462] -> [154]
[151,179,186,244] -> [153]
[151,179,186,244,459,462] -> [153]
[151,179,187,244] -> [154]
[151,179,187,244,459,462] -> [154]
[151,179,244] -> [76]
[151,179,244,459,462] -> [76]
[151,185,244] -> [118]
[151,185,244,459,462] -> [118]
[151,244] -> [34,49,79]
[151,244,249] -> [153]
[151,244,249,459,462] -> [153]
[151,244,250] -> [154]
[151,244,250,459,462] -> [154]
[151,244,459,462] -> [34,49,79]
[152,179,244] -> [77]
[152,179,244,459,462] -> [77]
[152,244] -> [35,50,80]
[152,244,459,462] -> [35,50,80]
[161,244] -> [164]
[161,244,459,462] -> [164]
[162,244] -> [163]
[162,244,459,462] -> [163]
[163,244] -> [149,R]
[163,244,459,462] -> [149,R]
[164,244] -> [148,R]
[164,244,459,462] -> [148,R]
[166,168,244] -> [106,162]
[166,168,244,459,462] -> [106,162]
[166,169,244] -> [105,161]
[166,169,244,459,462] -> [105,161]
[166,244] -> [9,12,32,104,105,106,107,108,109,113,114,115,116,117,118,R]
[166,244,459,462] -> [9,12,32,104,105,106,107,108,109,113,114,115,116,117,118,R]
[167,244] -> [8,31]
[167,244,459,462] -> [8,31]
[170,244] -> [178]
[170,244,459,462] -> [178]
[171,244] -> [177]
[171,244,459,462] -> [177]
[172,244] -> [175]
[172,244,459,462] -> [175]
[173,244] -> [174]
[173,244,459,462] -> [174]
[174,244] -> [149,R]
[174,244,459,462] -> [149,R]
[175,244] -> [148,R]
[175,244,459,462] -> [148,R]
[177,244] -> [11,176]
[177,244,459,462] -> [11,176]
[178,244] -> [10,176]
[178,244,459,462] -> [10,176]
[179,194,244] -> [149,173]
[179,194,244,459,462] -> [149,173]
[179,195,244] -> [148,172]
[179,195,244,459,462] -> [148,172]
[179,196,244] -> [147,171]
[179,196,244,459,462] -> [147,171]
[179,244] -> [74,146,196]
[179,244,459,462] -> [74,146,196]
[180,190,192,244] -> [106,173]
[180,190,192,244,459,462] -> [106,173]
[180,190,193,244] -> [105,172]
[180,190,193,244,459,462] -> [105,172]
[180,190,244] -> [9,12,104,105,106,107,108,109,113,114,115,116,117,118,R]
[180,190,244,459,462] -> [9,12,104,105,106,107,108,109,113,114,115,116,117,118,R]
[180,191,244] -> [105,171]
[180,191,244,459,462] -> [105,171]
[180,244] -> [9,12,73,104,105,106,107,108,109,113,114,115,116,117,118,R]
[180,244,459,462] -> [9,12,73,104,105,106,107,108,109,113,114,115,116,117,118,R]
[181,186,244] -> [106,173]
[181,186,244,459,462] -> [106,173]
[181,187,188,244] -> [106,172]
[181,187,188,244,459,462] -> [106,172]
[181,187,189,244] -> [105,171]
[181,187,189,244,459,462] -> [105,171]
[181,187,244] -> [9,12,104,105,106,107,108,109,113,114,115,116,117,118,R]
[181,187,244,459,462] -> [9,12,104,105,106,107,108,109,113,114,115,116,117,118,R]
[181,244] -> [9,12,72,104,105,106,107,108,109,113,114,115,116,117,118,R]
[181,244,459,462] -> [9,12,72,104,105,106,107,108,109,113,114,115,116,117,118,R]
[182,185,244] -> [10,170]
[182,185,244,459,462] -> [10,170]
[182,244] -> [9,70,71,185]
[182,244,459,462] -> [9,70,71,185]
[183,244] -> [8,69]
[183,244,459,462] -> [8,69]
[184,244] -> [8,68]
[184,244,459,462] -> [8,68]
[198,228] -> [44]
[198,228,459,462] -> [44]
[198,247] -> [44]
[198,247,459,462] -> [44]
[200] -> [213,281]
[200,459,462] -> [213,281]
[202] -> [270,295]
[202,459,462] -> [270,295]
[205] -> [235,287]
[205,459,462] -> [235,287]
[206] -> [213,281]
[206,207] -> [265,290]
[206,207,459,462] -> [265,290]
[206,208] -> [266,291]
[206,208,459,462] -> [266,291]
[206,265] -> [207]
[206,265,459,462] -> [207]
[206,266] -> [208]
[206,266,459,462] -> [208]
[206,290] -> [207]
[206,290,459,462] -> [207]
[206,291] -> [208]
[206,291,459,462] -> [208]
[206,459,462] -> [213,281]
[211] -> [223,240,264,277]
[211,459,462] -> [223,240,264,277]
[213] -> [200,206,220,235]
[213,459,462] -> [200,206,220,235]
[215] -> [52,53,273]
[215,216] -> [230,249,254,256,257]
[215,216,256] -> [241]
[215,216,256,459,462] -> [241]
[215,216,257] -> [242]
[215,216,257,459,462] -> [242]
[215,216,459,462] -> [230,249,254,256,257]
[215,217] -> [231,250,255]
[215,217,251] -> [265]
[215,217,251,459,462] -> [265]
[215,217,252] -> [266]
[215,217,252,459,462] -> [266]
[215,217,265] -> [251]
[215,217,265,459,462] -> [251]
[215,217,266] -> [252]
[215,217,266,459,462] -> [252]
[215,217,459,462] -> [231,250,255]
[215,230] -> [216]
[215,230,459,462] -> [216]
[215,231] -> [217]
[215,231,459,462] -> [217]
[215,249] -> [216]
[215,249,459,462] -> [216]
[215,250] -> [217]
[215,250,459,462] -> [217]
[215,254] -> [216]
[215,254,459,462] -> [216]
[215,255] -> [217]
[215,255,459,462] -> [217]
[215,459,462] -> [52,53,273]
[218] -> [223]
[218,459,462] -> [223]
[220] -> [52,213]
[220,459,462] -> [52,213]
[223] -> [211,R]
[223,459,462] -> [211,R]
[225] -> [9,12,30,47,67,121,122,128,133,134,135,R]
[225,232] -> [122,218]
[225,232,459,462] -> [122,218]
[225,459,462] -> [9,12,30,47,67,121,122,128,133,134,135,R]
[226] -> [9,12,46,104,105,106,107,108,109,113,114,115,116,117,118,R]
[226,230] -> [12,106]
[226,230,459,462] -> [12,106]
[226,231] -> [105,218]
[226,231,459,462] -> [105,218]
[226,459,462] -> [9,12,46,104,105,106,107,108,109,113,114,115,116,117,118,R]
[227] -> [45,218]
[227,459,462] -> [45,218]
[228] -> [43,197]
[228,459,462] -> [43,197]
[229] -> [8,42]
[229,459,462] -> [8,42]
[233] -> [240]
[233,459,462] -> [240]
[235] -> [205,213]
[235,459,462] -> [205,213]
[240] -> [211,R]
[240,459,462] -> [211,R]
[244] -> [9,12,30,47,67,146,147,165,176,177,178,R]
[244,258] -> [149,237]
[244,258,459,462] -> [149,237]
[244,259] -> [9,99,102,103,148,R]
[244,259,261] -> [100,236]
[244,259,261,459,462] -> [100,236]
[244,259,459,462] -> [9,99,102,103,148,R]
[244,260] -> [147,233]
[244,260,459,462] -> [147,233]
[244,459,462] -> [9,12,30,47,67,146,147,165,176,177,178,R]
[245] -> [9,12,46,104,105,106,107,108,109,113,114,115,116,117,118,R]
[245,254] -> [9,106,256,257]
[245,254,256] -> [11,237]
[245,254,256,459,462] -> [11,237]
[245,254,257] -> [10,236]
[245,254,257,459,462] -> [10,236]
[245,254,459,462] -> [9,106,256,257]
[245,255] -> [105,233]
[245,255,459,462] -> [105,233]
[245,459,462] -> [9,12,46,104,105,106,107,108,109,113,114,115,116,117,118,R]
[246] -> [9,12,45,104,105,106,107,108,109,113,114,115,116,117,118,R]
[246,249] -> [106,237]
[246,249,459,462] -> [106,237]
[246,250] -> [9,12,104,105,106,107,108,109,113,114,115,116,117,118,R]
[246,250,251] -> [9,99,102,103,106,R]
[246,250,251,253] -> [100,236]
[246,250,251,253,459,462] -> [100,236]
[246,250,251,459,462] -> [9,99,102,103,106,R]
[246,250,252] -> [105,233]
[246,250,252,459,462] -> [105,233]
[246,250,459,462] -> [9,12,104,105,106,107,108,109,113,114,115,116,117,118,R]
[246,459,462] -> [9,12,45,104,105,106,107,108,109,113,114,115,116,117,118,R]
[247] -> [43,197]
[247,459,462] -> [43,197]
[248] -> [8,42]
[248,459,462] -> [8,42]
[264] -> [9,12,104,105,106,107,108,109,113,114,115,116,117,118,211,R]
[264,265] -> [9,99,102,103,106,R]
[264,265,267] -> [100,236]
[264,265,267,459,462] -> [100,236]
[264,265,459,462] -> [9,99,102,103,106,R]
[264,266] -> [105,233]
[264,266,459,462] -> [105,233]
[264,459,462] -> [9,12,104,105,106,107,108,109,113,114,115,116,117,118,211,R]
[270] -> [202,233]
[270,459,462] -> [202,233]
[273] -> [215,281]
[273,459,462] -> [215,281]
[277] -> [12,211]
[277,391,392] -> [277]
[277,445,447,457] -> [277]
[277,459,462] -> [12,211]
[279] -> [283,289,299,304]
[279,459,462] -> [283,289,299,304]
[281] -> [200,206,273,287]
[281,459,462] -> [200,206,273,287]
[283] -> [12,279,R]
[283,459,462] -> [12,279,R]
[284] -> [295]
[284,459,462] -> [295]
[287] -> [205,281]
[287,459,462] -> [205,281]
[289] -> [9,12,104,105,106,107,108,109,113,114,115,116,117,118,279,R]
[289,290] -> [9,99,102,103,106,R]
[289,290,292] -> [100,285]
[289,290,292,459,462] -> [100,285]
[289,290,459,462] -> [9,99,102,103,106,R]
[289,291] -> [105,284]
[289,291,459,462] -> [105,284]
[289,459,462] -> [9,12,104,105,106,107,108,109,113,114,115,116,117,118,279,R]
[295] -> [202,288]
[295,459,462] -> [202,288]
[299] -> [279,284]
[299,459,462] -> [279,284]
[304] -> [279,302]
[304,391,392] -> [304]
[304,445,447,457] -> [304]
[304,459,462] -> [279,302]
[307,460] -> [44]
[309] -> [391,533]
[311] -> [412,546]
[312] -> [391,533]
[312,313] -> [544]
[312,314] -> [545]
[312,544] -> [313]
[312,545] -> [314]
[313,391] -> [358]
[314,391] -> [359]
[317] -> [429,567]
[319] -> [391,557]
[321] -> [391,533]
[321,322] -> [560]
[321,322,324] -> [562]
[321,322,325] -> [563]
[321,322,562] -> [324]
[321,322,563] -> [325]
[321,323] -> [561]
[321,560] -> [322]
[321,561] -> [323]
[322,391] -> [374]
[323,391] -> [375]
[324,374,391] -> [376]
[325,374,391] -> [377]
[330] -> [334]
[330,459,464] -> [334]
[338,429] -> [433]
[338,459] -> [464]
[339,429] -> [432]
[339,459] -> [463]
[340,429] -> [431]
[340,459] -> [462]
[341,429] -> [344]
[341,459] -> [344]
[342,429] -> [343]
[342,459] -> [343]
[346,429] -> [355]
[346,459] -> [355]
[347,429] -> [354]
[347,459] -> [354]
[348,429] -> [357]
[348,459] -> [357]
[349,429] -> [356]
[349,459] -> [356]
[354,429] -> [11,351]
[354,459] -> [11,351]
[355,429] -> [10,351]
[355,459] -> [10,351]
[356,429] -> [11,350]
[356,459] -> [11,350]
[357,429] -> [10,350]
[357,459] -> [10,350]
[358,391] -> [313]
[358,429] -> [11,12]
[358,459] -> [11,12]
[359,391] -> [314]
[359,429] -> [10,346]
[359,459] -> [10,346]
[360,429] -> [369]
[360,459] -> [369]
[361,429] -> [371]
[361,459] -> [371]
[362,429] -> [370]
[362,459] -> [370]
[363,429] -> [373]
[363,459] -> [373]
[364,429] -> [372]
[364,459] -> [372]
[370,429] -> [11,366]
[370,459] -> [11,366]
[371,429] -> [10,366]
[371,459] -> [10,366]
[372,429] -> [11,365]
[372,459] -> [11,365]
[373,429] -> [10,365]
[373,459] -> [10,365]
[374,376,381,429] -> [100,363]
[374,376,381,459] -> [100,363]
[374,376,391] -> [324]
[374,376,429] -> [9,99,102,103,106,R]
[374,376,459] -> [9,99,102,103,106,R]
[374,377,378,391] -> [431]
[374,377,378,429] -> [340,364]
[374,377,378,459] -> [340,364]
[374,377,379,391] -> [432]
[374,377,379,429] -> [339,362]
[374,377,379,459] -> [339,362]
[374,377,380,391] -> [433]
[374,377,380,429] -> [338,360]
[374,377,380,459] -> [338,360]
[374,377,391] -> [325]
[374,377,391,431] -> [378]
[374,377,391,432] -> [379]
[374,377,391,433] -> [380]
[374,377,429] -> [105,337,378,379,380]
[374,377,459] -> [105,337,378,379,380]
[374,391] -> [322]
[374,429] -> [9,11,12,104,105,106,107,108,109,113,114,115,116,117,118,R]
[374,459] -> [9,11,12,104,105,106,107,108,109,113,114,115,116,117,118,R]
[375,391] -> [323]
[375,429] -> [10,361]
[375,459] -> [10,361]
[382,429] -> [386]
[382,459] -> [386]
[391] -> [52,309,312,319,321]
[391,392] -> [275,276,303,431,462]
[391,393] -> [432,463]
[391,394] -> [433,464,465]
[391,394,465] -> [471]
[391,431] -> [392]
[391,432] -> [393]
[391,433] -> [394]
[391,462] -> [392]
[391,463] -> [393]
[391,464] -> [394]
[395] -> [398]
[396] -> [397]
[400] -> [409]
[401] -> [408]
[402] -> [411]
[403] -> [410]
[412] -> [311,400]
[429] -> [2,3,4,9,12,317,337,338,339,340,343,344,345,350,351,352,353,354,355,356,357,358,359,365,366,367,368,369,370,371,372,373,374,375,383,384,385,386,R]
[429,431] -> [340,417]
[429,432] -> [339,415]
[429,433] -> [338,413]
[437] -> [441]
[443,457] -> [467]
[444,457] -> [48]
[445,447,457] -> [275,276,303,462]
[445,448,457] -> [463]
[445,449,450,457] -> [465]
[445,449,457] -> [464]
[445,449,457,465] -> [450]
[445,457] -> [49]
[445,457,462] -> [447]
[445,457,463] -> [448]
[445,457,464] -> [449]
[446,457] -> [50]
[454] -> [53,533]
[457] -> [47,442]
[457,467] -> [443,455]
[458] -> [46,455]
[459] -> [2,3,4,9,12,45,337,338,339,340,343,344,345,350,351,352,353,354,355,356,357,358,359,365,366,367,368,369,370,371,372,373,374,375,383,384,385,386,R]
[459,462] -> [9,10,11,12,41,51,65,199,201,203,204,210,212,214,219,221,222,224,234,236,237,238,239,241,242,243,262,263,268,269,271,272,274,275,276,278,280,282,285,286,288,293,294,296,297,298,300,301,302,303,305,340,466,R]
[459,462,466] -> [301,455]
[459,463] -> [339,455]
[459,464] -> [2,3,4,9,10,11,12,327,328,329,331,332,333,334,335,336,338,465,R]
[459,464,465] -> [328,455]
[460] -> [43,306]
[461] -> [8,42]
[474,539] -> [540]
[474,548] -> [549]
[474,610] -> [611]
[474,613] -> [614]
[474,642] -> [643]
[474,703] -> [704]
[476,538] -> [540]
[478,547] -> [552]
[479,480,547] -> [550]
[479,481,547] -> [551]
[479,547] -> [549]
[479,547,550] -> [480]
[479,547,551] -> [481]
[483,612] -> [622]
[484,612] -> [621]
[485,612] -> [620]
[486,612,620] -> [595]
[487,488,490,612] -> [617]
[487,488,491,612] -> [618]
[487,488,612] -> [615]
[487,488,612,617] -> [490]
[487,488,612,618] -> [491]
[487,489,612] -> [616]
[487,612] -> [614]
[487,612,615] -> [488]
[487,612,616] -> [489]
[496] -> [17,21,576]
[496,497] -> [504,513,521,527,577]
[496,498] -> [505,514,522,528,578]
[496,499] -> [506,515,523,529,579]
[496,504] -> [497]
[496,505] -> [498]
[496,506] -> [499]
[496,513] -> [497]
[496,514] -> [498]
[496,515] -> [499]
[496,521] -> [497]
[496,522] -> [498]
[496,523] -> [499]
[496,527] -> [497]
[496,528] -> [498]
[496,529] -> [499]
[496,577] -> [497]
[496,578] -> [498]
[496,579] -> [499]
[502] -> [20,30]
[502,504] -> [33]
[502,505] -> [34]
[502,506] -> [35]
[502,507] -> [6,32]
[502,508] -> [5,31]
[503] -> [19,26]
[503,504] -> [6,29]
[503,505] -> [6,28]
[503,506] -> [5,27]
[511] -> [20,30]
[511,513] -> [33]
[511,514] -> [34]
[511,515] -> [35]
[511,516] -> [7,32]
[511,517] -> [5,31]
[512] -> [19,26]
[512,513] -> [7,29]
[512,514] -> [7,28]
[512,515] -> [5,27]
[520] -> [16,26]
[520,521] -> [7,29]
[520,522] -> [6,28]
[520,523] -> [5,27]
[526] -> [16,26]
[526,527] -> [6,29]
[526,528] -> [7,28]
[526,529] -> [5,27]
[531] -> [537,543,559,658,665]
[533] -> [309,312,321,454,557]
[534] -> [21,581,583,661]
[534,535] -> [540,549,582,584]
[534,535,544] -> [550]
[534,535,545] -> [551]
[534,535,550] -> [544]
[534,535,551] -> [545]
[534,535,560] -> [585]
[534,535,560,562] -> [587]
[534,535,560,563] -> [588]
[534,535,560,587] -> [562]
[534,535,560,588] -> [563]
[534,535,561] -> [586]
[534,535,585] -> [560]
[534,535,586] -> [561]
[534,540] -> [535]
[534,549] -> [535]
[534,582] -> [535]
[534,584] -> [535]
[535,661] -> [662]
[537] -> [12,531,R]
[538] -> [20,475]
[538,540] -> [476]
[539] -> [19,473]
[539,540] -> [12,474]
[541] -> [546]
[543] -> [9,531,544,545,R]
[543,544] -> [11,12]
[543,545] -> [10,541]
[546] -> [311,542]
[547] -> [20,477]
[547,549] -> [479]
[547,552] -> [478,541]
[548] -> [19,473]
[548,549] -> [9,474,550,551]
[548,549,550] -> [11,12]
[548,549,551] -> [10,541]
[554] -> [567]
[557] -> [319,533]
[557,651] -> [574]
[559] -> [9,531,560,561,R]
[559,560] -> [9,11,12,104,105,106,107,108,109,113,114,115,116,117,118,R]
[559,560,562] -> [9,99,102,103,106,R]
[559,560,562,564] -> [100,555]
[559,560,563] -> [105,554]
[559,561] -> [10,553]
[567] -> [317,558]
[570] -> [601,641,654]
[571] -> [600,640,653]
[572] -> [599,639,652]
[573] -> [598,638,651]
[574,598] -> [593]
[574,638] -> [627]
[574,651] -> [557]
[576] -> [21,496,629]
[577,629] -> [630]
[578,629] -> [631]
[579,629] -> [632]
[581] -> [21,534,634]
[582,634] -> [635]
[583] -> [17,21,534]
[583,584] -> [614,643]
[583,584,585] -> [615,644]
[583,584,585,587] -> [617,646]
[583,584,585,588] -> [618,647]
[583,584,585,617] -> [587]
[583,584,585,618] -> [588]
[583,584,585,646] -> [587]
[583,584,585,647] -> [588]
[583,584,586] -> [616,645]
[583,584,615] -> [585]
[583,584,616] -> [586]
[583,584,644] -> [585]
[583,584,645] -> [586]
[583,614] -> [584]
[583,643] -> [584]
[590] -> [601]
[591] -> [599]
[592] -> [598]
[593,598] -> [574]
[594] -> [609]
[595,609] -> [611]
[595,612,620] -> [486]
[598] -> [573,R]
[599] -> [572,R]
[600] -> [571,590,R]
[601] -> [570,R]
[602] -> [20,30,597]
[602,604] -> [33]
[602,605] -> [34]
[602,606] -> [35]
[602,607] -> [32,590]
[602,608] -> [5,31]
[603] -> [19,26,597]
[603,604] -> [29,590]
[603,605] -> [28,590]
[603,606] -> [5,27]
[609] -> [20,596]
[609,611] -> [595]
[610] -> [19,473,596]
[610,611] -> [474,591]
[612] -> [20,482]
[612,614] -> [487]
[612,620] -> [485,594]
[612,621] -> [484,591]
[612,622] -> [483,590]
[613] -> [19,473]
[613,614] -> [9,474,615,616]
[613,614,615] -> [9,11,12,104,105,106,107,108,109,113,114,115,116,117,118,R]
[613,614,615,617] -> [9,99,102,103,106,R]
[613,614,615,617,619] -> [100,590]
[613,614,615,618] -> [105,591]
[613,614,616] -> [10,590]
[623] -> [641]
[624] -> [640]
[625] -> [639]
[626] -> [638]
[627,638] -> [574]
[628] -> [637]
[629] -> [576]
[629,630] -> [577]
[629,631] -> [578]
[629,632] -> [579]
[633] -> [636]
[634] -> [581]
[634,635] -> [582]
[638] -> [573,R]
[639] -> [572,R]
[640] -> [571,R]
[641] -> [570,R]
[642] -> [16,473]
[642,643] -> [9,474,644,645]
[642,643,644] -> [9,11,12,104,105,106,107,108,109,113,114,115,116,117,118,R]
[642,643,644,646] -> [9,99,102,103,106,R]
[642,643,644,646,648] -> [100,624]
[642,643,644,647] -> [105,625]
[642,643,645] -> [10,623]
[651] -> [556,573]
[652] -> [554,572]
[653] -> [555,571]
[654] -> [553,570]
[658] -> [531,554]
[661] -> [534,686]
[661,662] -> [535,700,701,704]
[661,704] -> [662]
[665] -> [531,663]
[670] -> [672]
[670,703,704] -> [672]
[684] -> [690,695,703]
[686] -> [17,21,661]
[687] -> [690]
[688] -> [691]
[690] -> [684,R]
[691] -> [20,689]
[692] -> [19,687,689]
[693] -> [695]
[695] -> [684,R]
[696] -> [16,693,694]
[703] -> [473,684]
[703,704] -> [2,3,4,6,7,9,10,11,12,22,23,24,25,474,667,668,669,671,672,673,674,675,676,677,678,679,680,681,682,698,699,700,701,R]
[R] -> [697]

### Solution ###

[2,3,4,6,7,9,10,11,12,15,18,22,23,24,25,41,51,65,199,201,203,204,210,212,214,219,221,222,224,234,236,237,238,239,241,242,243,262,263,268,269,271,272,274,275,276,278,280,282,285,286,288,293,294,296,297,298,300,301,302,303,305,308,310,315,316,318,320,327,328,329,331,332,333,334,335,336,387,388,389,390,397,398,399,404,405,406,407,408,409,410,411,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,430,434,435,436,438,439,440,441,452,453,455,456,468,469,470,471,472,493,494,495,500,501,509,510,518,519,524,525,530,532,536,542,553,555,556,558,565,566,568,569,575,580,596,597,636,637,649,650,655,656,657,659,660,663,664,666,667,668,669,671,672,673,674,675,676,677,678,679,680,681,682,683,685,689,694,697,698,699,700,701,702,705,R]

### Annotated ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (_x0 :R: N) -> N
    constructor B :E: Type
    constructor T :R: B
    constructor F :R: B
    constructor List :E: Type
    constructor Cons :R: (_x1 :R: B) -> (_x2 :R: List) -> List
    constructor Nil :R: List
    constructor Maybe :E: (_x3 :E: Type) -> Type
    constructor Nothing :R: (a :E: Type) -> Maybe -E- a
    constructor Just :R: (a :E: Type) -> (x :E: a) -> Maybe -E- a
    not :R: (_x4 :R: B) -> B 
      [not] -R- T = F
      [not] -R- F = T
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    id :E: (a :E: Type) -> (_x5 :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    subst :R: (a :E: Type) -> (P :E: (_x6 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (w :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x7 :E: a) -> Type x :E: a
        [subst] -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\w :R: P -E- x. w)
    cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_x8 :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) 
      a :E: Type b :E: Type f :E: (_x9 :E: a) -> b x :E: a
        [cong] -E- a -E- b -E- f -E- x -E- [x] -E- [Refl -E- a -E- x] = Refl -E- b -E- (f -E- x)
    one :E: (x :E: B) -> List = (\x :E: B. Cons -E- x -E- Nil)
    app :E: (_x10 :E: List) -> (_x11 :E: List) -> List 
      ys :E: List
        [app] -E- Nil -E- ys = ys
      x :E: B xs :E: List ys :E: List
        [app] -E- (Cons -E- x -E- xs) -E- ys = Cons -E- x -E- (app -E- xs -E- ys)
    appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) 
      [appRightNeutral] -E- Nil = Refl -E- List -E- Nil
      x :E: B xs :E: List
        [appRightNeutral] -E- (Cons -E- x -E- xs) = cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)
    appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) 
      ys :E: List zs :E: List
        [appAssoc] -E- Nil -E- ys -E- zs = Refl -E- List -E- (app -E- ys -E- zs)
      x :E: B xs :E: List ys :E: List zs :E: List
        [appAssoc] -E- (Cons -E- x -E- xs) -E- ys -E- zs = cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs -E- ys -E- zs)
    constructor Rev :E: (_x12 :E: List) -> Type
    constructor RNil :R: Rev -E- Nil
    constructor RSnoc :R: (xs :E: List) -> (x :R: B) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))
    rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -E- xs -E- ys) 
      xs :E: List rxs :R: Rev -E- xs
        [rev'] -E- xs -R- rxs -R- Nil = subst -E- List -E- Rev -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs) -R- rxs
      xs :E: List rxs :R: Rev -E- xs y :R: B ys :R: List
        [rev'] -E- xs -R- rxs -R- (Cons -R- y -R- ys) = subst -E- List -E- Rev -E- (app -E- (app -E- xs -E- (one -E- y)) -E- ys) -E- (app -E- xs -E- (Cons -E- y -E- ys)) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys) -R- (rev' -E- (app -E- xs -E- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys)
    rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)
    reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List 
      [reverse'] -E- [Nil] -R- RNil = Nil
      xs :E: List x :R: B rxs :R: Rev -E- xs
        [reverse'] -E- [app -E- xs -E- (one -E- x)] -R- (RSnoc -E- xs -R- x -R- rxs) = Cons -R- x -R- (reverse' -E- xs -R- rxs)
    reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))
    constructor V :E: (_x13 :E: List) -> Type
    constructor VNil :R: V -E- Nil
    constructor VOne :R: (x :E: B) -> V -E- (Cons -E- x -E- Nil)
    constructor VTwo :R: (x :R: B) -> (xs :E: List) -> (u :R: V -E- xs) -> (y :R: B) -> V -E- (Cons -E- x -E- (app -E- xs -E- (one -E- y)))
    length :R: (_x14 :R: List) -> N 
      [length] -R- Nil = Z
      x :E: B xs :R: List
        [length] -R- (Cons -R- x -R- xs) = S -R- (length -R- xs)
    index :E: (_x15 :E: N) -> (_x16 :E: List) -> (_x17 :E: List) -> List 
      xs :E: List ys :E: List
        [index] -E- Z -E- xs -E- ys = Nil
      x :E: B xs :E: List y :E: B ys :E: List
        [index] -E- (S -E- Z) -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys) = Cons -E- x -E- Nil
      n :E: N x :E: B xs :E: List y :E: B ys :E: List
        [index] -E- (S -E- (S -E- n)) -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys) = Cons -E- x -E- (app -E- (index -E- n -E- xs -E- ys) -E- (one -E- y))
      n :E: N
        [index] -E- (S -E- n) -E- Nil -E- Nil = Nil
    build :R: (n :R: N) -> (xs :R: List) -> (ys :R: List) -> V -E- (index -E- n -E- xs -E- ys) 
      xs :E: List ys :E: List
        [build] -R- Z -R- xs -R- ys = VNil
      x :E: B xs :E: List y :E: B ys :E: List
        [build] -R- (S -R- Z) -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = VOne -E- x
      n :R: N x :R: B xs :R: List y :R: B ys :R: List
        [build] -R- (S -R- (S -R- n)) -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = VTwo -R- x -E- (index -E- n -E- xs -E- ys) -R- (build -R- n -R- xs -R- ys) -R- y
      n :E: N
        [build] -R- (S -R- n) -R- Nil -R- Nil = VNil
    postulate eq :E: (xs :E: List) -> Id -E- List -E- (index -E- (length -E- xs) -E- xs -E- (reverse -E- xs)) -E- xs
    toV :R: (xs :R: List) -> V -E- xs = (\xs :R: List. subst -E- List -E- V -E- (index -E- (length -E- xs) -E- xs -E- (reverse -E- xs)) -E- xs -E- (eq -E- xs) -R- (build -R- (length -R- xs) -R- xs -R- (reverse -R- xs)))
    constructor IsPalindrome :E: (_x18 :E: List) -> Type
    constructor PNil :E: IsPalindrome -E- Nil
    constructor POne :E: (b :E: B) -> IsPalindrome -E- (Cons -E- b -E- Nil)
    constructor PTwo :E: (b :E: B) -> (xs :E: List) -> (pf :E: IsPalindrome -E- xs) -> IsPalindrome -E- (Cons -E- b -E- (app -E- xs -E- (one -E- b)))
    decEq :R: (x :R: B) -> (y :R: B) -> Maybe -E- (Id -E- B -E- x -E- y) 
      [decEq] -R- T -R- T = Just -E- (Id -E- B -E- T -E- T) -E- (Refl -E- B -E- T)
      [decEq] -R- F -R- F = Just -E- (Id -E- B -E- F -E- F) -E- (Refl -E- B -E- F)
      [decEq] -R- T -R- F = Nothing -E- (Id -E- B -E- T -E- F)
      [decEq] -R- F -R- T = Nothing -E- (Id -E- B -E- F -E- T)
    isPalinV :R: (xs :E: List) -> (v :R: V -E- xs) -> Maybe -E- (IsPalindrome -E- xs) 
      [isPalinV] -E- [Nil] -R- VNil = Just -E- (IsPalindrome -E- Nil) -E- PNil
      x :E: B
        [isPalinV] -E- [Cons -E- x -E- Nil] -R- (VOne -E- x) = Just -E- (IsPalindrome -E- (Cons -E- x -E- Nil)) -E- (POne -E- x)
      x :R: B xs :E: List y :R: B v :R: V -E- xs
        [isPalinV] -E- [Cons -E- x -E- (app -E- xs -E- (one -E- y))] -R- (VTwo -R- x -E- xs -R- v -R- y) = 
          let isPalinV' :R: (x :E: B) -> (y :E: B) -> (xs :E: List) -> (v :E: V -E- xs) -> (pfB :R: Maybe -E- (Id -E- B -E- x -E- y)) -> (pfV :R: Maybe -E- (IsPalindrome -E- xs)) -> Maybe -E- (IsPalindrome -E- (Cons -E- x -E- (app -E- xs -E- (one -E- y)))) 
            x :E: B xs :E: List v :E: V -E- xs pfV :E: IsPalindrome -E- xs
              [isPalinV'] -E- x -E- [x] -E- xs -E- v -R- (Just -E- [Id -E- B -E- x -E- x] -E- [Refl -E- B -E- x]) -R- (Just -E- [IsPalindrome -E- xs] -E- pfV) = Just -E- (IsPalindrome -E- (Cons -E- x -E- (app -E- xs -E- (one -E- x)))) -E- (PTwo -E- x -E- xs -E- pfV)
            x :E: B y :E: B xs :E: List v :E: V -E- xs pfB :E: Maybe -E- (Id -E- B -E- x -E- y) pfV :E: Maybe -E- (IsPalindrome -E- xs)
              [isPalinV'] -E- x -E- y -E- xs -E- v -R- pfB -R- pfV = Nothing -E- (IsPalindrome -E- (Cons -E- x -E- (app -E- xs -E- (one -E- y))))
          in isPalinV' -E- x -E- y -E- xs -E- v -R- (decEq -R- x -R- y) -R- (isPalinV -E- xs -R- v)
    isPalindrome :R: (xs :R: List) -> Maybe -E- (IsPalindrome -E- xs) = (\xs :R: List. isPalinV -E- xs -R- (toV -R- xs))
    genList :R: (_x19 :R: B) -> (_x20 :R: N) -> List 
      b :E: B
        [genList] -R- b -R- Z = Nil
      b :R: B n :R: N
        [genList] -R- b -R- (S -R- n) = Cons -R- b -R- (genList -R- (not -R- b) -R- n)
    isJust :R: (a :E: Type) -> (x :R: Maybe -E- a) -> B 
      a :E: Type x :E: a
        [isJust] -E- a -R- (Just -E- [a] -E- x) = T
      a :E: Type
        [isJust] -E- a -R- (Nothing -E- [a]) = F
    main :R: B = 
      let
        foreign inputSize :R: N
        inputList :R: List = genList -R- T -R- inputSize
      in isJust -E- (IsPalindrome -E- inputList) -R- (isPalindrome -R- inputList)
  in main

### Specialised ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (_x0 :R: N) -> N
    constructor B :E: Type
    constructor T :R: B
    constructor F :R: B
    constructor List :E: Type
    constructor Cons :R: (_x1 :R: B) -> (_x2 :R: List) -> List
    constructor Nil :R: List
    constructor Maybe :E: (_x3 :E: Type) -> Type
    constructor Nothing :R: (a :E: Type) -> Maybe -E- a
    constructor Just :R: (a :E: Type) -> (x :E: a) -> Maybe -E- a
    not :R: (_x4 :R: B) -> B 
      [not] -R- T = F
      [not] -R- F = T
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    id :E: (a :E: Type) -> (_x5 :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    subst :R: (a :E: Type) -> (P :E: (_x6 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (w :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x7 :E: a) -> Type x :E: a
        [subst] -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\w :R: P -E- x. w)
    cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_x8 :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) 
      a :E: Type b :E: Type f :E: (_x9 :E: a) -> b x :E: a
        [cong] -E- a -E- b -E- f -E- x -E- [x] -E- [Refl -E- a -E- x] = Refl -E- b -E- (f -E- x)
    one :E: (x :E: B) -> List = (\x :E: B. Cons -E- x -E- Nil)
    app :E: (_x10 :E: List) -> (_x11 :E: List) -> List 
      ys :E: List
        [app] -E- Nil -E- ys = ys
      x :E: B xs :E: List ys :E: List
        [app] -E- (Cons -E- x -E- xs) -E- ys = Cons -E- x -E- (app -E- xs -E- ys)
    appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) 
      [appRightNeutral] -E- Nil = Refl -E- List -E- Nil
      x :E: B xs :E: List
        [appRightNeutral] -E- (Cons -E- x -E- xs) = cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)
    appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) 
      ys :E: List zs :E: List
        [appAssoc] -E- Nil -E- ys -E- zs = Refl -E- List -E- (app -E- ys -E- zs)
      x :E: B xs :E: List ys :E: List zs :E: List
        [appAssoc] -E- (Cons -E- x -E- xs) -E- ys -E- zs = cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs -E- ys -E- zs)
    constructor Rev :E: (_x12 :E: List) -> Type
    constructor RNil :R: Rev -E- Nil
    constructor RSnoc :R: (xs :E: List) -> (x :R: B) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))
    rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -E- xs -E- ys) 
      xs :E: List rxs :R: Rev -E- xs
        [rev'] -E- xs -R- rxs -R- Nil = subst -E- List -E- Rev -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs) -R- rxs
      xs :E: List rxs :R: Rev -E- xs y :R: B ys :R: List
        [rev'] -E- xs -R- rxs -R- (Cons -R- y -R- ys) = subst -E- List -E- Rev -E- (app -E- (app -E- xs -E- (one -E- y)) -E- ys) -E- (app -E- xs -E- (Cons -E- y -E- ys)) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys) -R- (rev' -E- (app -E- xs -E- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys)
    rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)
    reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List 
      [reverse'] -E- [Nil] -R- RNil = Nil
      xs :E: List x :R: B rxs :R: Rev -E- xs
        [reverse'] -E- [app -E- xs -E- (one -E- x)] -R- (RSnoc -E- xs -R- x -R- rxs) = Cons -R- x -R- (reverse' -E- xs -R- rxs)
    reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))
    constructor V :E: (_x13 :E: List) -> Type
    constructor VNil :R: V -E- Nil
    constructor VOne :R: (x :E: B) -> V -E- (Cons -E- x -E- Nil)
    constructor VTwo :R: (x :R: B) -> (xs :E: List) -> (u :R: V -E- xs) -> (y :R: B) -> V -E- (Cons -E- x -E- (app -E- xs -E- (one -E- y)))
    length :R: (_x14 :R: List) -> N 
      [length] -R- Nil = Z
      x :E: B xs :R: List
        [length] -R- (Cons -R- x -R- xs) = S -R- (length -R- xs)
    index :E: (_x15 :E: N) -> (_x16 :E: List) -> (_x17 :E: List) -> List 
      xs :E: List ys :E: List
        [index] -E- Z -E- xs -E- ys = Nil
      x :E: B xs :E: List y :E: B ys :E: List
        [index] -E- (S -E- Z) -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys) = Cons -E- x -E- Nil
      n :E: N x :E: B xs :E: List y :E: B ys :E: List
        [index] -E- (S -E- (S -E- n)) -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys) = Cons -E- x -E- (app -E- (index -E- n -E- xs -E- ys) -E- (one -E- y))
      n :E: N
        [index] -E- (S -E- n) -E- Nil -E- Nil = Nil
    build :R: (n :R: N) -> (xs :R: List) -> (ys :R: List) -> V -E- (index -E- n -E- xs -E- ys) 
      xs :E: List ys :E: List
        [build] -R- Z -R- xs -R- ys = VNil
      x :E: B xs :E: List y :E: B ys :E: List
        [build] -R- (S -R- Z) -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = VOne -E- x
      n :R: N x :R: B xs :R: List y :R: B ys :R: List
        [build] -R- (S -R- (S -R- n)) -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = VTwo -R- x -E- (index -E- n -E- xs -E- ys) -R- (build -R- n -R- xs -R- ys) -R- y
      n :E: N
        [build] -R- (S -R- n) -R- Nil -R- Nil = VNil
    postulate eq :E: (xs :E: List) -> Id -E- List -E- (index -E- (length -E- xs) -E- xs -E- (reverse -E- xs)) -E- xs
    toV :R: (xs :R: List) -> V -E- xs = (\xs :R: List. subst -E- List -E- V -E- (index -E- (length -E- xs) -E- xs -E- (reverse -E- xs)) -E- xs -E- (eq -E- xs) -R- (build -R- (length -R- xs) -R- xs -R- (reverse -R- xs)))
    constructor IsPalindrome :E: (_x18 :E: List) -> Type
    constructor PNil :E: IsPalindrome -E- Nil
    constructor POne :E: (b :E: B) -> IsPalindrome -E- (Cons -E- b -E- Nil)
    constructor PTwo :E: (b :E: B) -> (xs :E: List) -> (pf :E: IsPalindrome -E- xs) -> IsPalindrome -E- (Cons -E- b -E- (app -E- xs -E- (one -E- b)))
    decEq :R: (x :R: B) -> (y :R: B) -> Maybe -E- (Id -E- B -E- x -E- y) 
      [decEq] -R- T -R- T = Just -E- (Id -E- B -E- T -E- T) -E- (Refl -E- B -E- T)
      [decEq] -R- F -R- F = Just -E- (Id -E- B -E- F -E- F) -E- (Refl -E- B -E- F)
      [decEq] -R- T -R- F = Nothing -E- (Id -E- B -E- T -E- F)
      [decEq] -R- F -R- T = Nothing -E- (Id -E- B -E- F -E- T)
    isPalinV :R: (xs :E: List) -> (v :R: V -E- xs) -> Maybe -E- (IsPalindrome -E- xs) 
      [isPalinV] -E- [Nil] -R- VNil = Just -E- (IsPalindrome -E- Nil) -E- PNil
      x :E: B
        [isPalinV] -E- [Cons -E- x -E- Nil] -R- (VOne -E- x) = Just -E- (IsPalindrome -E- (Cons -E- x -E- Nil)) -E- (POne -E- x)
      x :R: B xs :E: List y :R: B v :R: V -E- xs
        [isPalinV] -E- [Cons -E- x -E- (app -E- xs -E- (one -E- y))] -R- (VTwo -R- x -E- xs -R- v -R- y) = 
          let isPalinV' :R: (x :E: B) -> (y :E: B) -> (xs :E: List) -> (v :E: V -E- xs) -> (pfB :R: Maybe -E- (Id -E- B -E- x -E- y)) -> (pfV :R: Maybe -E- (IsPalindrome -E- xs)) -> Maybe -E- (IsPalindrome -E- (Cons -E- x -E- (app -E- xs -E- (one -E- y)))) 
            x :E: B xs :E: List v :E: V -E- xs pfV :E: IsPalindrome -E- xs
              [isPalinV'] -E- x -E- [x] -E- xs -E- v -R- (Just -E- [Id -E- B -E- x -E- x] -E- [Refl -E- B -E- x]) -R- (Just -E- [IsPalindrome -E- xs] -E- pfV) = Just -E- (IsPalindrome -E- (Cons -E- x -E- (app -E- xs -E- (one -E- x)))) -E- (PTwo -E- x -E- xs -E- pfV)
            x :E: B y :E: B xs :E: List v :E: V -E- xs pfB :E: Maybe -E- (Id -E- B -E- x -E- y) pfV :E: Maybe -E- (IsPalindrome -E- xs)
              [isPalinV'] -E- x -E- y -E- xs -E- v -R- pfB -R- pfV = Nothing -E- (IsPalindrome -E- (Cons -E- x -E- (app -E- xs -E- (one -E- y))))
          in isPalinV' -E- x -E- y -E- xs -E- v -R- (decEq -R- x -R- y) -R- (isPalinV -E- xs -R- v)
    isPalindrome :R: (xs :R: List) -> Maybe -E- (IsPalindrome -E- xs) = (\xs :R: List. isPalinV -E- xs -R- (toV -R- xs))
    genList :R: (_x19 :R: B) -> (_x20 :R: N) -> List 
      b :E: B
        [genList] -R- b -R- Z = Nil
      b :R: B n :R: N
        [genList] -R- b -R- (S -R- n) = Cons -R- b -R- (genList -R- (not -R- b) -R- n)
    isJust :R: (a :E: Type) -> (x :R: Maybe -E- a) -> B 
      a :E: Type x :E: a
        [isJust] -E- a -R- (Just -E- [a] -E- x) = T
      a :E: Type
        [isJust] -E- a -R- (Nothing -E- [a]) = F
    main :R: B = 
      let
        foreign inputSize :R: N
        inputList :R: List = genList -R- T -R- inputSize
      in isJust -E- (IsPalindrome -E- inputList) -R- (isPalindrome -R- inputList)
  in main

### Final annotation ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (_x0 :R: N) -> N
    constructor B :E: Type
    constructor T :R: B
    constructor F :R: B
    constructor List :E: Type
    constructor Cons :R: (_x1 :R: B) -> (_x2 :R: List) -> List
    constructor Nil :R: List
    constructor Maybe :E: (_x3 :E: Type) -> Type
    constructor Nothing :R: (a :E: Type) -> Maybe -E- a
    constructor Just :R: (a :E: Type) -> (x :E: a) -> Maybe -E- a
    not :R: (_x4 :R: B) -> B 
      [not] -R- T = F
      [not] -R- F = T
    constructor Id :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    id :E: (a :E: Type) -> (_x5 :E: a) -> a = (\a :E: Type. (\x :E: a. x))
    subst :R: (a :E: Type) -> (P :E: (_x6 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> (w :R: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x7 :E: a) -> Type x :E: a
        [subst] -E- a -E- P -E- x -E- [x] -E- [Refl -E- a -E- x] = (\w :R: P -E- x. w)
    cong :E: (a :E: Type) -> (b :E: Type) -> (f :E: (_x8 :E: a) -> b) -> (x :E: a) -> (y :E: a) -> (eq :E: Id -E- a -E- x -E- y) -> Id -E- b -E- (f -E- x) -E- (f -E- y) 
      a :E: Type b :E: Type f :E: (_x9 :E: a) -> b x :E: a
        [cong] -E- a -E- b -E- f -E- x -E- [x] -E- [Refl -E- a -E- x] = Refl -E- b -E- (f -E- x)
    one :E: (x :E: B) -> List = (\x :E: B. Cons -E- x -E- Nil)
    app :E: (_x10 :E: List) -> (_x11 :E: List) -> List 
      ys :E: List
        [app] -E- Nil -E- ys = ys
      x :E: B xs :E: List ys :E: List
        [app] -E- (Cons -E- x -E- xs) -E- ys = Cons -E- x -E- (app -E- xs -E- ys)
    appRightNeutral :E: (ys :E: List) -> Id -E- List -E- ys -E- (app -E- ys -E- Nil) 
      [appRightNeutral] -E- Nil = Refl -E- List -E- Nil
      x :E: B xs :E: List
        [appRightNeutral] -E- (Cons -E- x -E- xs) = cong -E- List -E- List -E- (Cons -E- x) -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs)
    appAssoc :E: (xs :E: List) -> (ys :E: List) -> (zs :E: List) -> Id -E- List -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) 
      ys :E: List zs :E: List
        [appAssoc] -E- Nil -E- ys -E- zs = Refl -E- List -E- (app -E- ys -E- zs)
      x :E: B xs :E: List ys :E: List zs :E: List
        [appAssoc] -E- (Cons -E- x -E- xs) -E- ys -E- zs = cong -E- List -E- List -E- (Cons -E- x) -E- (app -E- (app -E- xs -E- ys) -E- zs) -E- (app -E- xs -E- (app -E- ys -E- zs)) -E- (appAssoc -E- xs -E- ys -E- zs)
    constructor Rev :E: (_x12 :E: List) -> Type
    constructor RNil :R: Rev -E- Nil
    constructor RSnoc :R: (xs :E: List) -> (x :R: B) -> (rxs :R: Rev -E- xs) -> Rev -E- (app -E- xs -E- (one -E- x))
    rev' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> (ys :R: List) -> Rev -E- (app -E- xs -E- ys) 
      xs :E: List rxs :R: Rev -E- xs
        [rev'] -E- xs -R- rxs -R- Nil = subst -E- List -E- Rev -E- xs -E- (app -E- xs -E- Nil) -E- (appRightNeutral -E- xs) -R- rxs
      xs :E: List rxs :R: Rev -E- xs y :R: B ys :R: List
        [rev'] -E- xs -R- rxs -R- (Cons -R- y -R- ys) = subst -E- List -E- Rev -E- (app -E- (app -E- xs -E- (one -E- y)) -E- ys) -E- (app -E- xs -E- (Cons -E- y -E- ys)) -E- (appAssoc -E- xs -E- (one -E- y) -E- ys) -R- (rev' -E- (app -E- xs -E- (one -E- y)) -R- (RSnoc -E- xs -R- y -R- rxs) -R- ys)
    rev :R: (xs :R: List) -> Rev -E- xs = (\xs :R: List. rev' -E- Nil -R- RNil -R- xs)
    reverse' :R: (xs :E: List) -> (rxs :R: Rev -E- xs) -> List 
      [reverse'] -E- [Nil] -R- RNil = Nil
      xs :E: List x :R: B rxs :R: Rev -E- xs
        [reverse'] -E- [app -E- xs -E- (one -E- x)] -R- (RSnoc -E- xs -R- x -R- rxs) = Cons -R- x -R- (reverse' -E- xs -R- rxs)
    reverse :R: (xs :R: List) -> List = (\xs :R: List. reverse' -E- xs -R- (rev -R- xs))
    constructor V :E: (_x13 :E: List) -> Type
    constructor VNil :R: V -E- Nil
    constructor VOne :R: (x :E: B) -> V -E- (Cons -E- x -E- Nil)
    constructor VTwo :R: (x :R: B) -> (xs :E: List) -> (u :R: V -E- xs) -> (y :R: B) -> V -E- (Cons -E- x -E- (app -E- xs -E- (one -E- y)))
    length :R: (_x14 :R: List) -> N 
      [length] -R- Nil = Z
      x :E: B xs :R: List
        [length] -R- (Cons -R- x -R- xs) = S -R- (length -R- xs)
    index :E: (_x15 :E: N) -> (_x16 :E: List) -> (_x17 :E: List) -> List 
      xs :E: List ys :E: List
        [index] -E- Z -E- xs -E- ys = Nil
      x :E: B xs :E: List y :E: B ys :E: List
        [index] -E- (S -E- Z) -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys) = Cons -E- x -E- Nil
      n :E: N x :E: B xs :E: List y :E: B ys :E: List
        [index] -E- (S -E- (S -E- n)) -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys) = Cons -E- x -E- (app -E- (index -E- n -E- xs -E- ys) -E- (one -E- y))
      n :E: N
        [index] -E- (S -E- n) -E- Nil -E- Nil = Nil
    build :R: (n :R: N) -> (xs :R: List) -> (ys :R: List) -> V -E- (index -E- n -E- xs -E- ys) 
      xs :E: List ys :E: List
        [build] -R- Z -R- xs -R- ys = VNil
      x :E: B xs :E: List y :E: B ys :E: List
        [build] -R- (S -R- Z) -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = VOne -E- x
      n :R: N x :R: B xs :R: List y :R: B ys :R: List
        [build] -R- (S -R- (S -R- n)) -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = VTwo -R- x -E- (index -E- n -E- xs -E- ys) -R- (build -R- n -R- xs -R- ys) -R- y
      n :E: N
        [build] -R- (S -R- n) -R- Nil -R- Nil = VNil
    postulate eq :E: (xs :E: List) -> Id -E- List -E- (index -E- (length -E- xs) -E- xs -E- (reverse -E- xs)) -E- xs
    toV :R: (xs :R: List) -> V -E- xs = (\xs :R: List. subst -E- List -E- V -E- (index -E- (length -E- xs) -E- xs -E- (reverse -E- xs)) -E- xs -E- (eq -E- xs) -R- (build -R- (length -R- xs) -R- xs -R- (reverse -R- xs)))
    constructor IsPalindrome :E: (_x18 :E: List) -> Type
    constructor PNil :E: IsPalindrome -E- Nil
    constructor POne :E: (b :E: B) -> IsPalindrome -E- (Cons -E- b -E- Nil)
    constructor PTwo :E: (b :E: B) -> (xs :E: List) -> (pf :E: IsPalindrome -E- xs) -> IsPalindrome -E- (Cons -E- b -E- (app -E- xs -E- (one -E- b)))
    decEq :R: (x :R: B) -> (y :R: B) -> Maybe -E- (Id -E- B -E- x -E- y) 
      [decEq] -R- T -R- T = Just -E- (Id -E- B -E- T -E- T) -E- (Refl -E- B -E- T)
      [decEq] -R- F -R- F = Just -E- (Id -E- B -E- F -E- F) -E- (Refl -E- B -E- F)
      [decEq] -R- T -R- F = Nothing -E- (Id -E- B -E- T -E- F)
      [decEq] -R- F -R- T = Nothing -E- (Id -E- B -E- F -E- T)
    isPalinV :R: (xs :E: List) -> (v :R: V -E- xs) -> Maybe -E- (IsPalindrome -E- xs) 
      [isPalinV] -E- [Nil] -R- VNil = Just -E- (IsPalindrome -E- Nil) -E- PNil
      x :E: B
        [isPalinV] -E- [Cons -E- x -E- Nil] -R- (VOne -E- x) = Just -E- (IsPalindrome -E- (Cons -E- x -E- Nil)) -E- (POne -E- x)
      x :R: B xs :E: List y :R: B v :R: V -E- xs
        [isPalinV] -E- [Cons -E- x -E- (app -E- xs -E- (one -E- y))] -R- (VTwo -R- x -E- xs -R- v -R- y) = 
          let isPalinV' :R: (x :E: B) -> (y :E: B) -> (xs :E: List) -> (v :E: V -E- xs) -> (pfB :R: Maybe -E- (Id -E- B -E- x -E- y)) -> (pfV :R: Maybe -E- (IsPalindrome -E- xs)) -> Maybe -E- (IsPalindrome -E- (Cons -E- x -E- (app -E- xs -E- (one -E- y)))) 
            x :E: B xs :E: List v :E: V -E- xs pfV :E: IsPalindrome -E- xs
              [isPalinV'] -E- x -E- [x] -E- xs -E- v -R- (Just -E- [Id -E- B -E- x -E- x] -E- [Refl -E- B -E- x]) -R- (Just -E- [IsPalindrome -E- xs] -E- pfV) = Just -E- (IsPalindrome -E- (Cons -E- x -E- (app -E- xs -E- (one -E- x)))) -E- (PTwo -E- x -E- xs -E- pfV)
            x :E: B y :E: B xs :E: List v :E: V -E- xs pfB :E: Maybe -E- (Id -E- B -E- x -E- y) pfV :E: Maybe -E- (IsPalindrome -E- xs)
              [isPalinV'] -E- x -E- y -E- xs -E- v -R- pfB -R- pfV = Nothing -E- (IsPalindrome -E- (Cons -E- x -E- (app -E- xs -E- (one -E- y))))
          in isPalinV' -E- x -E- y -E- xs -E- v -R- (decEq -R- x -R- y) -R- (isPalinV -E- xs -R- v)
    isPalindrome :R: (xs :R: List) -> Maybe -E- (IsPalindrome -E- xs) = (\xs :R: List. isPalinV -E- xs -R- (toV -R- xs))
    genList :R: (_x19 :R: B) -> (_x20 :R: N) -> List 
      b :E: B
        [genList] -R- b -R- Z = Nil
      b :R: B n :R: N
        [genList] -R- b -R- (S -R- n) = Cons -R- b -R- (genList -R- (not -R- b) -R- n)
    isJust :R: (a :E: Type) -> (x :R: Maybe -E- a) -> B 
      a :E: Type x :E: a
        [isJust] -E- a -R- (Just -E- [a] -E- x) = T
      a :E: Type
        [isJust] -E- a -R- (Nothing -E- [a]) = F
    main :R: B = 
      let
        foreign inputSize :R: N
        inputList :R: List = genList -R- T -R- inputSize
      in isJust -E- (IsPalindrome -E- inputList) -R- (isPalindrome -R- inputList)
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor Z : N
    constructor S : (_x0) -> N
    constructor T : B
    constructor F : B
    constructor Cons : (_x1) -> (_x2) -> List
    constructor Nil : List
    constructor Nothing : Maybe
    constructor Just : Maybe
    not 
      [_] T = F
      [_] F = T
    subst = (\w. w)
    constructor RNil : Rev
    constructor RSnoc : (x) -> (rxs) -> Rev
    rev' 
      [_] rxs Nil = subst rxs
      [_] rxs (Cons y ys) = subst (rev' (RSnoc y rxs) ys)
    rev = (\xs. rev' RNil xs)
    reverse' 
      [_] RNil = Nil
      [_] (RSnoc x rxs) = Cons x (reverse' rxs)
    reverse = (\xs. reverse' (rev xs))
    constructor VNil : V
    constructor VOne : V
    constructor VTwo : (x) -> (u) -> (y) -> V
    length 
      [_] Nil = Z
      [_] (Cons _ xs) = S (length xs)
    build 
      [_] Z _ _ = VNil
      [_] (S Z) (Cons _ _) (Cons _ _) = VOne
      [_] (S (S n)) (Cons x xs) (Cons y ys) = VTwo x (build n xs ys) y
      [_] (S _) Nil Nil = VNil
    toV = (\xs. subst (build (length xs) xs (reverse xs)))
    decEq 
      [_] T T = Just
      [_] F F = Just
      [_] T F = Nothing
      [_] F T = Nothing
    isPalinV 
      [_] VNil = Just
      [_] VOne = Just
      [_] (VTwo x v y) = 
        let isPalinV' 
          [_] Just Just = Just
          [_] _ _ = Nothing
        in isPalinV' (decEq x y) (isPalinV v)
    isPalindrome = (\xs. isPalinV (toV xs))
    genList 
      [_] _ Z = Nil
      [_] b (S n) = Cons b (genList (not b) n)
    isJust 
      [_] Just = T
      [_] Nothing = F
    main = 
      let
        foreign inputSize
        inputList = genList T inputSize
      in isJust (isPalindrome inputList)
  in main

### Intermediate representation ###
let Z = constructor 0
  in let S = constructor 1
    in let T = constructor 0
      in let F = constructor 0
        in let Cons = constructor 2
          in let Nil = constructor 0
            in let Nothing = constructor 0
              in let Just = constructor 0
                in let not = \_pv0.
                  case _pv0 of
                    F => T
                    T => F
                  in let subst = \w. w
                    in let RNil = constructor 0
                      in let RSnoc = constructor 2
                        in let rev' = \_pv0. \_pv1.
                          case _pv1 of
                            Cons _pv2 _pv3 => (subst ((rev' ((RSnoc _pv2) _pv0)) _pv3))
                            Nil => (subst _pv0)
                          in let rev = \xs. ((rev' RNil) xs)
                            in let reverse' = \_pv0.
                              case _pv0 of
                                RNil => Nil
                                RSnoc _pv1 _pv2 => ((Cons _pv1) (reverse' _pv2))
                              in let reverse = \xs. (reverse' (rev xs))
                                in let VNil = constructor 0
                                  in let VOne = constructor 0
                                    in let VTwo = constructor 3
                                      in let length = \_pv0.
                                        case _pv0 of
                                          Cons _pv1 _pv2 => (S (length _pv2))
                                          Nil => Z
                                        in let build = \_pv0. \_pv1. \_pv2.
                                          case _pv0 of
                                            S _pv3 => case _pv3 of
                                              S _pv4 => case _pv1 of
                                                Cons _pv5 _pv6 => case _pv2 of
                                                  Cons _pv7 _pv8 => (((VTwo _pv5) (((build _pv4) _pv6) _pv8)) _pv7)
                                              Z => case _pv1 of
                                                Cons _pv4 _pv5 => case _pv2 of
                                                  Cons _pv6 _pv7 => VOne
                                              _ => case _pv1 of
                                                Nil => case _pv2 of
                                                  Nil => VNil
                                            Z => VNil
                                          in let toV = \xs. (subst (((build (length xs)) xs) (reverse xs)))
                                            in let decEq = \_pv0. \_pv1.
                                              case _pv0 of
                                                F => case _pv1 of
                                                  F => Just
                                                  T => Nothing
                                                T => case _pv1 of
                                                  F => Nothing
                                                  T => Just
                                              in let isPalinV = \_pv0.
                                                case _pv0 of
                                                  VNil => Just
                                                  VOne => Just
                                                  VTwo _pv1 _pv2 _pv3 => let isPalinV' = \_pv4. \_pv5.
                                                    case _pv4 of
                                                      Just => case _pv5 of
                                                        Just => Just
                                                      _ => Nothing
                                                    in ((isPalinV' ((decEq _pv1) _pv3)) (isPalinV _pv2))
                                                in let isPalindrome = \xs. (isPalinV (toV xs))
                                                  in let genList = \_pv0. \_pv1.
                                                    case _pv1 of
                                                      S _pv2 => ((Cons _pv0) ((genList (not _pv0)) _pv2))
                                                      Z => Nil
                                                    in let isJust = \_pv0.
                                                      case _pv0 of
                                                        Just => T
                                                        Nothing => F
                                                      in let main = let inputSize = foreign "(rts-arg-peano 'Z 'S 0)"
                                                        in let inputList = ((genList T) inputSize)
                                                          in (isJust (isPalindrome inputList))
                                                        in main

### Normal forms ###

unerased:
  
  let
    constructor N : Type
    constructor Z : N
    constructor S : (_x0 : N) -> N
    constructor B : Type
    constructor T : B
    constructor F : B
    constructor List : Type
    constructor Cons : (_x1 : B) -> (_x2 : List) -> List
    constructor Nil : List
    constructor Maybe : (_x3 : Type) -> Type
    constructor Nothing : (a : Type) -> Maybe a
    constructor Just : (a : Type) -> (x : a) -> Maybe a
    not : (_x4 : B) -> B 
      [not] T = F
      [not] F = T
    constructor Id : (a : Type) -> (x : a) -> (y : a) -> Type
    constructor Refl : (a : Type) -> (x : a) -> Id a x x
    subst : (a : Type) -> (P : (_x6 : a) -> Type) -> (x : a) -> (y : a) -> (eq : Id a x y) -> (w : P x) -> P y 
      a : Type P : (_x7 : a) -> Type x : a
        [subst] a P x [x] [Refl a x] = (\w : P x. w)
    cong : (a : Type) -> (b : Type) -> (f : (_x8 : a) -> b) -> (x : a) -> (y : a) -> (eq : Id a x y) -> Id b (f x) (f y) 
      a : Type b : Type f : (_x9 : a) -> b x : a
        [cong] a b f x [x] [Refl a x] = Refl b (f x)
    one : (x : B) -> List = (\x : B. Cons x Nil)
    app : (_x10 : List) -> (_x11 : List) -> List 
      ys : List
        [app] Nil ys = ys
      x : B xs : List ys : List
        [app] (Cons x xs) ys = Cons x (app xs ys)
    appRightNeutral : (ys : List) -> Id List ys (app ys Nil) 
      [appRightNeutral] Nil = Refl List Nil
      x : B xs : List
        [appRightNeutral] (Cons x xs) = cong List List (Cons x) xs (app xs Nil) (appRightNeutral xs)
    appAssoc : (xs : List) -> (ys : List) -> (zs : List) -> Id List (app (app xs ys) zs) (app xs (app ys zs)) 
      ys : List zs : List
        [appAssoc] Nil ys zs = Refl List (app ys zs)
      x : B xs : List ys : List zs : List
        [appAssoc] (Cons x xs) ys zs = cong List List (Cons x) (app (app xs ys) zs) (app xs (app ys zs)) (appAssoc xs ys zs)
    constructor Rev : (_x12 : List) -> Type
    constructor RNil : Rev Nil
    constructor RSnoc : (xs : List) -> (x : B) -> (rxs : Rev xs) -> Rev (app xs (one x))
    rev' : (xs : List) -> (rxs : Rev xs) -> (ys : List) -> Rev (app xs ys) 
      xs : List rxs : Rev xs
        [rev'] xs rxs Nil = subst List Rev xs (app xs Nil) (appRightNeutral xs) rxs
      xs : List rxs : Rev xs y : B ys : List
        [rev'] xs rxs (Cons y ys) = subst List Rev (app (app xs (one y)) ys) (app xs (Cons y ys)) (appAssoc xs (one y) ys) (rev' (app xs (one y)) (RSnoc xs y rxs) ys)
    reverse' : (xs : List) -> (rxs : Rev xs) -> List 
      [reverse'] [Nil] RNil = Nil
      xs : List x : B rxs : Rev xs
        [reverse'] [app xs (one x)] (RSnoc xs x rxs) = Cons x (reverse' xs rxs)
    constructor V : (_x13 : List) -> Type
    constructor VNil : V Nil
    constructor VOne : (x : B) -> V (Cons x Nil)
    constructor VTwo : (x : B) -> (xs : List) -> (u : V xs) -> (y : B) -> V (Cons x (app xs (one y)))
    length : (_x14 : List) -> N 
      [length] Nil = Z
      x : B xs : List
        [length] (Cons x xs) = S (length xs)
    index : (_x15 : N) -> (_x16 : List) -> (_x17 : List) -> List 
      xs : List ys : List
        [index] Z xs ys = Nil
      x : B xs : List y : B ys : List
        [index] (S Z) (Cons x xs) (Cons y ys) = Cons x Nil
      n : N x : B xs : List y : B ys : List
        [index] (S (S n)) (Cons x xs) (Cons y ys) = Cons x (app (index n xs ys) (one y))
      n : N
        [index] (S n) Nil Nil = Nil
    build : (n : N) -> (xs : List) -> (ys : List) -> V (index n xs ys) 
      xs : List ys : List
        [build] Z xs ys = VNil
      x : B xs : List y : B ys : List
        [build] (S Z) (Cons x xs) (Cons y ys) = VOne x
      n : N x : B xs : List y : B ys : List
        [build] (S (S n)) (Cons x xs) (Cons y ys) = VTwo x (index n xs ys) (build n xs ys) y
      n : N
        [build] (S n) Nil Nil = VNil
    constructor IsPalindrome : (_x18 : List) -> Type
    constructor PNil : IsPalindrome Nil
    constructor POne : (b : B) -> IsPalindrome (Cons b Nil)
    constructor PTwo : (b : B) -> (xs : List) -> (pf : IsPalindrome xs) -> IsPalindrome (Cons b (app xs (one b)))
    decEq : (x : B) -> (y : B) -> Maybe (Id B x y) 
      [decEq] T T = Just (Id B T T) (Refl B T)
      [decEq] F F = Just (Id B F F) (Refl B F)
      [decEq] T F = Nothing (Id B T F)
      [decEq] F T = Nothing (Id B F T)
    isPalinV : (xs : List) -> (v : V xs) -> Maybe (IsPalindrome xs) 
      [isPalinV] [Nil] VNil = Just (IsPalindrome Nil) PNil
      x : B
        [isPalinV] [Cons x Nil] (VOne x) = Just (IsPalindrome (Cons x Nil)) (POne x)
      x : B xs : List y : B v : V xs
        [isPalinV] [Cons x (app xs (one y))] (VTwo x xs v y) = 
          let isPalinV' : (x : B) -> (y : B) -> (xs : List) -> (v : V xs) -> (pfB : Maybe (Id B x y)) -> (pfV : Maybe (IsPalindrome xs)) -> Maybe (IsPalindrome (Cons x (app xs (one y)))) 
            x : B xs : List v : V xs pfV : IsPalindrome xs
              [isPalinV'] x [x] xs v (Just [Id B x x] [Refl B x]) (Just [IsPalindrome xs] pfV) = Just (IsPalindrome (Cons x (app xs (one x)))) (PTwo x xs pfV)
            x : B y : B xs : List v : V xs pfB : Maybe (Id B x y) pfV : Maybe (IsPalindrome xs)
              [isPalinV'] x y xs v pfB pfV = Nothing (IsPalindrome (Cons x (app xs (one y))))
          in isPalinV' x y xs v (decEq x y) (isPalinV xs v)
    genList : (_x19 : B) -> (_x20 : N) -> List 
      b : B
        [genList] b Z = Nil
      b : B n : N
        [genList] b (S n) = Cons b (genList (not b) n)
    isJust : (a : Type) -> (x : Maybe a) -> B 
      a : Type x : a
        [isJust] a (Just [a] x) = T
      a : Type
        [isJust] a (Nothing [a]) = F
  in 
    let foreign inputSize : N
    in isJust (IsPalindrome (genList T inputSize)) (isPalinV (genList T inputSize) (build (length (genList T inputSize)) (genList T inputSize) (reverse' (genList T inputSize) (rev' Nil RNil (genList T inputSize)))))

erased:
  
  let
    constructor Z : N
    constructor S : (_x0) -> N
    constructor T : B
    constructor F : B
    constructor Cons : (_x1) -> (_x2) -> List
    constructor Nil : List
    constructor Nothing : Maybe
    constructor Just : Maybe
    not 
      [_] T = F
      [_] F = T
    subst = (\w. w)
    constructor RNil : Rev
    constructor RSnoc : (x) -> (rxs) -> Rev
    rev' 
      [_] rxs Nil = subst rxs
      [_] rxs (Cons y ys) = subst (rev' (RSnoc y rxs) ys)
    reverse' 
      [_] RNil = Nil
      [_] (RSnoc x rxs) = Cons x (reverse' rxs)
    constructor VNil : V
    constructor VOne : V
    constructor VTwo : (x) -> (u) -> (y) -> V
    length 
      [_] Nil = Z
      [_] (Cons _ xs) = S (length xs)
    build 
      [_] Z _ _ = VNil
      [_] (S Z) (Cons _ _) (Cons _ _) = VOne
      [_] (S (S n)) (Cons x xs) (Cons y ys) = VTwo x (build n xs ys) y
      [_] (S _) Nil Nil = VNil
    decEq 
      [_] T T = Just
      [_] F F = Just
      [_] T F = Nothing
      [_] F T = Nothing
    isPalinV 
      [_] VNil = Just
      [_] VOne = Just
      [_] (VTwo x v y) = 
        let isPalinV' 
          [_] Just Just = Just
          [_] _ _ = Nothing
        in isPalinV' (decEq x y) (isPalinV v)
    genList 
      [_] _ Z = Nil
      [_] b (S n) = Cons b (genList (not b) n)
    isJust 
      [_] Just = T
      [_] Nothing = F
  in 
    let foreign inputSize
    in isJust (isPalinV (build (length (genList T inputSize)) (genList T inputSize) (reverse' (rev' RNil (genList T inputSize)))))

