-- vim: ft=ttstar
let Z = constructor 0
  in let S = constructor 1
    in let T = constructor 0
      in let F = constructor 0
        in let Cons = constructor 2
          in let Nil = constructor 0
            in let Nothing = constructor 0
              in let Just = constructor 0
                in let not = \_pv0.
                  case _pv0 of
                    F => T
                    T => F
                  in let RNil = constructor 0
                    in let RSnoc = constructor 2
                      in let rev' = \_pv0. \_pv1.
                        case _pv1 of
                          Cons _pv2 _pv3 => ((rev' ((RSnoc _pv2) _pv0)) _pv3)
                          Nil => _pv0
                        in let rev = \xs. ((rev' RNil) xs)
                          in let reverse' = \_pv0.
                            case _pv0 of
                              RNil => Nil
                              RSnoc _pv1 _pv2 => ((Cons _pv1) (reverse' _pv2))
                            in let reverse = \xs. (reverse' (rev xs))
                              in let VNil = constructor 0
                                in let VOne = constructor 0
                                  in let VTwo = constructor 3
                                    in let length = \_pv0.
                                      case _pv0 of
                                        Cons _pv1 _pv2 => (S (length _pv2))
                                        Nil => Z
                                      in let build = \_pv0. \_pv1. \_pv2.
                                        case _pv0 of
                                          S _pv3 => case _pv3 of
                                            S _pv4 => case _pv1 of
                                              Cons _pv5 _pv6 => case _pv2 of
                                                Cons _pv7 _pv8 => (((VTwo _pv5) (((build _pv4) _pv6) _pv8)) _pv7)
                                                _ => VNil
                                              _ => VNil
                                            Z => case _pv1 of
                                              Cons _pv4 _pv5 => case _pv2 of
                                                Cons _pv6 _pv7 => VOne
                                                _ => VNil
                                              _ => VNil
                                            _ => VNil
                                          Z => VNil
                                        in let toV = \xs. (((build (length xs)) xs) (reverse xs))
                                          in let decEq = \_pv0. \_pv1.
                                            case _pv0 of
                                              F => case _pv1 of
                                                F => Just
                                                T => Nothing
                                              T => case _pv1 of
                                                F => Nothing
                                                T => Just
                                            in let isPalinV = \_pv0.
                                              case _pv0 of
                                                VNil => Just
                                                VOne => Just
                                                VTwo _pv1 _pv2 _pv3 => let isPalinV' = \_pv4. \_pv5.
                                                  case _pv4 of
                                                    Just => case _pv5 of
                                                      Just => Just
                                                      _ => Nothing
                                                    _ => Nothing
                                                  in ((isPalinV' ((decEq _pv1) _pv3)) (isPalinV _pv2))
                                              in let isPalindrome = \xs. (isPalinV (toV xs))
                                                in let genList = \_pv0. \_pv1.
                                                  case _pv1 of
                                                    S _pv2 => ((Cons _pv0) ((genList (not _pv0)) _pv2))
                                                    Z => Nil
                                                  in let isJust = \_pv0.
                                                    case _pv0 of
                                                      Just => T
                                                      Nothing => F
                                                    in let main = let inputSize = foreign "(rts-arg-peano 'Z 'S 0)"
                                                      in let inputList = ((genList T) inputSize)
                                                        in (isJust (isPalindrome inputList))
                                                      in main
