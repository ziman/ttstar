-- vim: ft=ttstar

### Desugared ###

  let
    constructor N : Type
    constructor Z : N
    constructor S : (x :R: N) -> N
    constructor Vec : (_x0 : N) -> (_x1 : Type) -> Type
    constructor Nil : (a : Type) -> Vec Z a
    constructor Cons : (a : Type) -> (n : N) -> (x :R: a) -> (xs :R: Vec n a) -> Vec (S n) a
    plus : (_x2 : N) -> (_x3 : N) -> N 
      n : N
        [plus] Z n = n
      m : N n : N
        [plus] (S m) n = S (plus m n)
    append : (a : Type) -> (m : N) -> (n : N) -> (xs : Vec m a) -> (ys : Vec n a) -> Vec (plus m n) a 
      a : Type n : N ys : Vec n a
        [append] a [Z] n (Nil [a]) ys = ys
      a : Type m : N n : N x : a xs : Vec m a ys : Vec n a
        [append] a ([S] m) n (Cons [a] [m] x xs) ys = Cons a (plus m n) x (append a m n xs ys)
    main : Vec 1 N = append N Z 1 (Nil N) (Cons N Z 4 (Nil N))
  in main

### Evarified ###

  let
    constructor N :1: Type
    constructor Z :2: N
    constructor S :3: (x :R: N) -> N
    constructor Vec :4: (_x0 :5: N) -> (_x1 :6: Type) -> Type
    constructor Nil :7: (a :8: Type) -> Vec -10- Z -9- a
    constructor Cons :11: (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
    plus :19: (_x2 :20: N) -> (_x3 :21: N) -> N 
      n :22: N
        [plus] -24- Z -23- n = n
      m :25: N n :26: N
        [plus] -28- (S -29- m) -27- n = S -30- (plus -32- m -31- n)
    append :33: (a :34: Type) -> (m :35: N) -> (n :36: N) -> (xs :37: Vec -39- m -38- a) -> (ys :40: Vec -42- n -41- a) -> Vec -44- (plus -46- m -45- n) -43- a 
      a :47: Type n :48: N ys :49: Vec -51- n -50- a
        [append] -56- a -55- [Z] -54- n -53- (Nil -57- [a]) -52- ys = ys
      a :58: Type m :59: N n :60: N x :61: a xs :62: Vec -64- m -63- a ys :65: Vec -67- n -66- a
        [append] -72- a -71- ([S] -73- m) -70- n -69- (Cons -77- [a] -76- [m] -75- x -74- xs) -68- ys = Cons -81- a -80- (plus -83- m -82- n) -79- x -78- (append -88- a -87- m -86- n -85- xs -84- ys)
    main :89: Vec -91- 1 -90- N = append -97- N -96- Z -95- 1 -94- (Nil -99- N) -93- (Cons -103- N -102- Z -101- 4 -100- (Nil -108- N))
  in main

### Constraints ###

[8,53] -> [57]
[8,93,100] -> [108]
[8,94] -> [99]
[9,53] -> [38]
[9,93,100] -> [14]
[9,94] -> [38]
[10,53] -> [39]
[10,93,100] -> [15]
[10,94] -> [39]
[12] -> [81]
[12,69] -> [77]
[12,93] -> [103]
[13] -> [80]
[13,69] -> [76]
[13,93] -> [102]
[14,74] -> [63]
[14,78] -> [43]
[14,93,100] -> [9]
[15,74] -> [64]
[15,78] -> [44]
[15,93,100] -> [10]
[16] -> [43]
[16,69] -> [38]
[16,93] -> [41]
[17] -> [44]
[17,18,69] -> [73]
[17,18,93] -> [98]
[17,69] -> [39]
[17,69,73] -> [18]
[17,93] -> [42]
[17,93,98] -> [18]
[18,44] -> [30]
[20,30,80] -> [32]
[20,80] -> [83]
[20,80,R] -> [24,28]
[21,30,80] -> [31]
[21,80] -> [82]
[21,80,R] -> [23,27]
[22,80] -> [23]
[23,80] -> [R]
[23,80,R] -> [21]
[24,80] -> [R]
[24,80,R] -> [20]
[25,80] -> [29]
[26,80] -> [27]
[27,80] -> [R]
[27,80,R] -> [21]
[28,29,80] -> [R]
[28,80] -> [R]
[28,80,R] -> [20,29]
[29,80] -> [28]
[30,31,44] -> [82]
[30,31,80] -> [21]
[30,31,80,R] -> [26]
[30,32,44] -> [83]
[30,32,80] -> [20]
[30,32,80,R] -> [25]
[30,44] -> [18]
[30,44,82] -> [31]
[30,44,83] -> [32]
[30,80] -> [R]
[30,80,R] -> [19]
[34] -> [97]
[34,78] -> [88]
[34,R] -> [56,72]
[35] -> [96]
[35,78] -> [87]
[35,R] -> [55,71]
[36] -> [95]
[36,78] -> [86]
[36,R] -> [54,70]
[37] -> [94]
[37,78] -> [85]
[37,R] -> [53,69]
[38,53] -> [9]
[38,69] -> [16]
[38,78,85] -> [63]
[38,94] -> [9]
[39,53] -> [10]
[39,69] -> [17]
[39,78,85] -> [64]
[39,94] -> [10]
[40] -> [93]
[40,78] -> [84]
[40,R] -> [52,68]
[41,52] -> [50]
[41,68] -> [66]
[41,78,84] -> [66]
[41,93] -> [16]
[42,52] -> [51]
[42,68] -> [67]
[42,78,84] -> [67]
[42,93] -> [17]
[43] -> [16,50,90]
[43,78] -> [14]
[44] -> [17,51,91]
[44,45,78] -> [82]
[44,46,78] -> [83]
[44,78] -> [15]
[44,78,82] -> [45]
[44,78,83] -> [46]
[47] -> [56]
[48] -> [54]
[49] -> [52]
[50] -> [43]
[50,52] -> [41]
[51] -> [44]
[51,52] -> [42]
[52] -> [R]
[52,R] -> [40]
[53] -> [R]
[53,57] -> [8]
[53,R] -> [37]
[54] -> [R]
[54,R] -> [36]
[55] -> [R]
[55,R] -> [2,35]
[56] -> [R]
[56,R] -> [34]
[57] -> [53]
[57,R] -> [47]
[58] -> [72]
[59] -> [73]
[60] -> [70]
[61] -> [75]
[62] -> [74]
[63,74] -> [14]
[63,78,85] -> [38]
[64,74] -> [15]
[64,78,85] -> [39]
[65] -> [68]
[66,68] -> [41]
[66,78,84] -> [41]
[67,68] -> [42]
[67,78,84] -> [42]
[68] -> [R]
[68,R] -> [40]
[69] -> [R]
[69,74] -> [R]
[69,75] -> [R]
[69,76] -> [13]
[69,77] -> [12]
[69,R] -> [37,74,75]
[70] -> [R]
[70,R] -> [36]
[71] -> [R]
[71,73] -> [R]
[71,R] -> [3,35,73]
[72] -> [R]
[72,R] -> [34]
[73] -> [71]
[74] -> [69]
[75] -> [69]
[76] -> [69]
[76,R] -> [59]
[77] -> [69]
[77,R] -> [58]
[78] -> [R]
[78,84] -> [40]
[78,84,R] -> [65]
[78,85] -> [37]
[78,85,R] -> [62]
[78,86] -> [36]
[78,86,R] -> [60]
[78,87] -> [35]
[78,87,R] -> [59]
[78,88] -> [34]
[78,88,R] -> [58]
[78,R] -> [33]
[79] -> [R]
[79,R] -> [61]
[80] -> [13]
[80,82] -> [21]
[80,82,R] -> [60]
[80,83] -> [20]
[80,83,R] -> [59]
[80,R] -> [2,3,19,22,24,28,30]
[81] -> [12]
[81,R] -> [58]
[90] -> [43]
[91] -> [44]
[91,92] -> [98]
[91,98] -> [92]
[93] -> [40]
[93,100] -> [R]
[93,100,108] -> [8]
[93,100,108,R] -> [1]
[93,100,R] -> [7]
[93,101] -> [R]
[93,101,104] -> [R]
[93,101,104,105] -> [R]
[93,101,104,105,106] -> [R]
[93,101,104,105,106,107] -> [R]
[93,101,104,105,106,107,R] -> [2]
[93,101,104,105,106,R] -> [3,107]
[93,101,104,105,R] -> [3,106]
[93,101,104,R] -> [3,105]
[93,101,R] -> [3,104]
[93,102] -> [13]
[93,102,R] -> [2]
[93,103] -> [12]
[93,103,R] -> [1]
[93,R] -> [11,100,101]
[94] -> [37]
[94,99] -> [8]
[94,99,R] -> [1]
[94,R] -> [7]
[95] -> [36]
[95,98] -> [R]
[95,98,R] -> [2]
[95,R] -> [3,98]
[96] -> [35]
[96,R] -> [2]
[97] -> [34]
[97,R] -> [1]
[R] -> [7,11,33,49,53,69,78,79,89]

### Solution ###

[2,3,7,11,33,37,40,49,52,53,61,62,65,68,69,74,75,78,79,84,85,89,93,94,100,101,104,105,106,107,R]

### Annotated ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (x :R: N) -> N
    constructor Vec :E: (_x0 :E: N) -> (_x1 :E: Type) -> Type
    constructor Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    constructor Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    plus :E: (_x2 :E: N) -> (_x3 :E: N) -> N 
      n :E: N
        [plus] -E- Z -E- n = n
      m :E: N n :E: N
        [plus] -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    append :R: (a :E: Type) -> (m :E: N) -> (n :E: N) -> (xs :R: Vec -E- m -E- a) -> (ys :R: Vec -E- n -E- a) -> Vec -E- (plus -E- m -E- n) -E- a 
      a :E: Type n :E: N ys :R: Vec -E- n -E- a
        [append] -E- a -E- [Z] -E- n -R- (Nil -E- [a]) -R- ys = ys
      a :E: Type m :E: N n :E: N x :R: a xs :R: Vec -E- m -E- a ys :R: Vec -E- n -E- a
        [append] -E- a -E- ([S] -E- m) -E- n -R- (Cons -E- [a] -E- [m] -R- x -R- xs) -R- ys = Cons -E- a -E- (plus -E- m -E- n) -R- x -R- (append -E- a -E- m -E- n -R- xs -R- ys)
    main :R: Vec -E- 1 -E- N = append -E- N -E- Z -E- 1 -R- (Nil -E- N) -R- (Cons -E- N -E- Z -R- 4 -R- (Nil -E- N))
  in main

### Specialised ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (x :R: N) -> N
    constructor Vec :E: (_x0 :E: N) -> (_x1 :E: Type) -> Type
    constructor Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    constructor Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    plus :E: (_x2 :E: N) -> (_x3 :E: N) -> N 
      n :E: N
        [plus] -E- Z -E- n = n
      m :E: N n :E: N
        [plus] -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    append :R: (a :E: Type) -> (m :E: N) -> (n :E: N) -> (xs :R: Vec -E- m -E- a) -> (ys :R: Vec -E- n -E- a) -> Vec -E- (plus -E- m -E- n) -E- a 
      a :E: Type n :E: N ys :R: Vec -E- n -E- a
        [append] -E- a -E- [Z] -E- n -R- (Nil -E- [a]) -R- ys = ys
      a :E: Type m :E: N n :E: N x :R: a xs :R: Vec -E- m -E- a ys :R: Vec -E- n -E- a
        [append] -E- a -E- ([S] -E- m) -E- n -R- (Cons -E- [a] -E- [m] -R- x -R- xs) -R- ys = Cons -E- a -E- (plus -E- m -E- n) -R- x -R- (append -E- a -E- m -E- n -R- xs -R- ys)
    main :R: Vec -E- 1 -E- N = append -E- N -E- Z -E- 1 -R- (Nil -E- N) -R- (Cons -E- N -E- Z -R- 4 -R- (Nil -E- N))
  in main

### Final annotation ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (x :R: N) -> N
    constructor Vec :E: (_x0 :E: N) -> (_x1 :E: Type) -> Type
    constructor Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    constructor Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    plus :E: (_x2 :E: N) -> (_x3 :E: N) -> N 
      n :E: N
        [plus] -E- Z -E- n = n
      m :E: N n :E: N
        [plus] -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    append :R: (a :E: Type) -> (m :E: N) -> (n :E: N) -> (xs :R: Vec -E- m -E- a) -> (ys :R: Vec -E- n -E- a) -> Vec -E- (plus -E- m -E- n) -E- a 
      a :E: Type n :E: N ys :R: Vec -E- n -E- a
        [append] -E- a -E- [Z] -E- n -R- (Nil -E- [a]) -R- ys = ys
      a :E: Type m :E: N n :E: N x :R: a xs :R: Vec -E- m -E- a ys :R: Vec -E- n -E- a
        [append] -E- a -E- ([S] -E- m) -E- n -R- (Cons -E- [a] -E- [m] -R- x -R- xs) -R- ys = Cons -E- a -E- (plus -E- m -E- n) -R- x -R- (append -E- a -E- m -E- n -R- xs -R- ys)
    main :R: Vec -E- 1 -E- N = append -E- N -E- Z -E- 1 -R- (Nil -E- N) -R- (Cons -E- N -E- Z -R- 4 -R- (Nil -E- N))
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor Z : N
    constructor S : (x) -> N
    constructor Nil : Vec
    constructor Cons : (x) -> (xs) -> Vec
    append 
      [_] Nil ys = ys
      [_] (Cons x xs) ys = Cons x (append xs ys)
    main = append Nil (Cons 4 Nil)
  in main

### Normal forms ###

unerased:
  
  let
    constructor N : Type
    constructor Z : N
    constructor S : (x :R: N) -> N
    constructor Vec : (_x0 : N) -> (_x1 : Type) -> Type
    constructor Nil : (a : Type) -> Vec Z a
    constructor Cons : (a : Type) -> (n : N) -> (x :R: a) -> (xs :R: Vec n a) -> Vec (S n) a
  in Cons N Z 4 (Nil N)

erased:
  
  let
    constructor Z : N
    constructor S : (x) -> N
    constructor Nil : Vec
    constructor Cons : (x) -> (xs) -> Vec
  in Cons 4 Nil

