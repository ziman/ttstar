-- vim: ft=ttstar

### Desugared ###

  let
    constructor N : Type
    constructor Z : N
    constructor S : (x :R: N) -> N
    constructor Vec : (_x0 : N) -> (_x1 : Type) -> Type
    constructor Nil : (a : Type) -> Vec Z a
    constructor Cons : (a : Type) -> (n : N) -> (x :R: a) -> (xs :R: Vec n a) -> Vec (S n) a
    plus : (_x2 : N) -> (_x3 : N) -> N 
      n : N
        [plus] Z n = n
      m : N n : N
        [plus] (S m) n = S (plus m n)
    append : (a : Type) -> (m : N) -> (n : N) -> (xs : Vec m a) -> (ys : Vec n a) -> Vec (plus m n) a 
      a : Type n : N ys : Vec n a
        [append] a [Z] n (Nil [a]) ys = ys
      a : Type m : N n : N x : a xs : Vec m a ys : Vec n a
        [append] a ([S] m) n (Cons [a] [m] x xs) ys = Cons a (plus m n) x (append a m n xs ys)
    main : Vec 1 N = append N Z 1 (Nil N) (Cons N Z 4 (Nil N))
  in main

### Evarified ###

  let
    constructor N :1: Type
    constructor Z :2: N
    constructor S :3: (x :R: N) -> N
    constructor Vec :4: (_x0 :5: N) -> (_x1 :6: Type) -> Type
    constructor Nil :7: (a :8: Type) -> Vec -10- Z -9- a
    constructor Cons :11: (a :12: Type) -> (n :13: N) -> (x :R: a) -> (xs :R: Vec -15- n -14- a) -> Vec -17- (S -18- n) -16- a
    plus :19: (_x2 :20: N) -> (_x3 :21: N) -> N 
      n :22: N
        [plus] -24- Z -23- n = n
      m :25: N n :26: N
        [plus] -28- (S -29- m) -27- n = S -30- (plus -32- m -31- n)
    append :33: (a :34: Type) -> (m :35: N) -> (n :36: N) -> (xs :37: Vec -39- m -38- a) -> (ys :40: Vec -42- n -41- a) -> Vec -44- (plus -46- m -45- n) -43- a 
      a :47: Type n :48: N ys :49: Vec -51- n -50- a
        [append] -56- a -55- [Z] -54- n -53- (Nil -57- [a]) -52- ys = ys
      a :58: Type m :59: N n :60: N x :61: a xs :62: Vec -64- m -63- a ys :65: Vec -67- n -66- a
        [append] -72- a -71- ([S] -73- m) -70- n -69- (Cons -77- [a] -76- [m] -75- x -74- xs) -68- ys = Cons -81- a -80- (plus -83- m -82- n) -79- x -78- (append -88- a -87- m -86- n -85- xs -84- ys)
    main :89: Vec -91- 1 -90- N = append -97- N -96- Z -95- 1 -94- (Nil -99- N) -93- (Cons -103- N -102- Z -101- 4 -100- (Nil -108- N))
  in main

### Constraints ###

[] -> [2,3,7,11,33,37,40,49,52,53,61,62,65,68,69,74,75,78,79,84,85,93,94,100,101,104,105,106,107,R]
[8] -> [57,99,108]
[9] -> [14,38]
[10] -> [15,39]
[12] -> [77,81,103]
[13] -> [76,80,102]
[14] -> [9,43,63]
[15] -> [10,44,64]
[16] -> [38,41,43]
[17] -> [39,42,44]
[17,18] -> [73,98]
[17,73] -> [18]
[17,98] -> [18]
[18,44] -> [30]
[20,80] -> [83]
[21,80] -> [82]
[30,31,44] -> [82]
[30,32,44] -> [83]
[30,44] -> [18]
[30,44,82] -> [31]
[30,44,83] -> [32]
[34] -> [56,72,88,97]
[35] -> [55,71,87,96]
[36] -> [54,70,86,95]
[38] -> [9,16,63]
[39] -> [10,17,64]
[41] -> [16,50,66]
[42] -> [17,51,67]
[43] -> [14,16,50,90]
[44] -> [15,17,51,91]
[44,45] -> [82]
[44,46] -> [83]
[44,82] -> [45]
[44,83] -> [46]
[47] -> [56]
[48] -> [54]
[50] -> [41,43]
[51] -> [42,44]
[54] -> [36,R]
[55] -> [2,35,R]
[56] -> [34,R]
[57] -> [8,47,53]
[58] -> [72]
[59] -> [73]
[60] -> [70]
[63] -> [14,38]
[64] -> [15,39]
[66] -> [41]
[67] -> [42]
[70] -> [36,R]
[71] -> [3,35,73,R]
[71,73] -> [R]
[72] -> [34,R]
[73] -> [71]
[76] -> [13,59,69]
[77] -> [12,58,69]
[80] -> [2,3,13,19,20,21,22,23,24,25,26,27,28,29,30,31,32,R]
[80,82] -> [21,60]
[80,83] -> [20,59]
[81] -> [12,58]
[86] -> [36,60]
[87] -> [35,59]
[88] -> [34,58]
[90] -> [43]
[91] -> [44]
[91,92] -> [98]
[91,98] -> [92]
[95] -> [3,36,98]
[95,98] -> [2,R]
[96] -> [2,35]
[97] -> [1,34]
[99] -> [1,8]
[102] -> [2,13]
[103] -> [1,12]
[108] -> [1,8]
[R] -> [89]

### Solution ###

[2,3,7,11,33,37,40,49,52,53,61,62,65,68,69,74,75,78,79,84,85,89,93,94,100,101,104,105,106,107,R]

### Annotated ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (x :R: N) -> N
    constructor Vec :E: (_x0 :E: N) -> (_x1 :E: Type) -> Type
    constructor Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    constructor Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    plus :E: (_x2 :E: N) -> (_x3 :E: N) -> N 
      n :E: N
        [plus] -E- Z -E- n = n
      m :E: N n :E: N
        [plus] -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    append :R: (a :E: Type) -> (m :E: N) -> (n :E: N) -> (xs :R: Vec -E- m -E- a) -> (ys :R: Vec -E- n -E- a) -> Vec -E- (plus -E- m -E- n) -E- a 
      a :E: Type n :E: N ys :R: Vec -E- n -E- a
        [append] -E- a -E- [Z] -E- n -R- (Nil -E- [a]) -R- ys = ys
      a :E: Type m :E: N n :E: N x :R: a xs :R: Vec -E- m -E- a ys :R: Vec -E- n -E- a
        [append] -E- a -E- ([S] -E- m) -E- n -R- (Cons -E- [a] -E- [m] -R- x -R- xs) -R- ys = Cons -E- a -E- (plus -E- m -E- n) -R- x -R- (append -E- a -E- m -E- n -R- xs -R- ys)
    main :R: Vec -E- 1 -E- N = append -E- N -E- Z -E- 1 -R- (Nil -E- N) -R- (Cons -E- N -E- Z -R- 4 -R- (Nil -E- N))
  in main

### Specialised ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (x :R: N) -> N
    constructor Vec :E: (_x0 :E: N) -> (_x1 :E: Type) -> Type
    constructor Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    constructor Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    plus :E: (_x2 :E: N) -> (_x3 :E: N) -> N 
      n :E: N
        [plus] -E- Z -E- n = n
      m :E: N n :E: N
        [plus] -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    append :R: (a :E: Type) -> (m :E: N) -> (n :E: N) -> (xs :R: Vec -E- m -E- a) -> (ys :R: Vec -E- n -E- a) -> Vec -E- (plus -E- m -E- n) -E- a 
      a :E: Type n :E: N ys :R: Vec -E- n -E- a
        [append] -E- a -E- [Z] -E- n -R- (Nil -E- [a]) -R- ys = ys
      a :E: Type m :E: N n :E: N x :R: a xs :R: Vec -E- m -E- a ys :R: Vec -E- n -E- a
        [append] -E- a -E- ([S] -E- m) -E- n -R- (Cons -E- [a] -E- [m] -R- x -R- xs) -R- ys = Cons -E- a -E- (plus -E- m -E- n) -R- x -R- (append -E- a -E- m -E- n -R- xs -R- ys)
    main :R: Vec -E- 1 -E- N = append -E- N -E- Z -E- 1 -R- (Nil -E- N) -R- (Cons -E- N -E- Z -R- 4 -R- (Nil -E- N))
  in main

### Final annotation ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (x :R: N) -> N
    constructor Vec :E: (_x0 :E: N) -> (_x1 :E: Type) -> Type
    constructor Nil :R: (a :E: Type) -> Vec -E- Z -E- a
    constructor Cons :R: (a :E: Type) -> (n :E: N) -> (x :R: a) -> (xs :R: Vec -E- n -E- a) -> Vec -E- (S -E- n) -E- a
    plus :E: (_x2 :E: N) -> (_x3 :E: N) -> N 
      n :E: N
        [plus] -E- Z -E- n = n
      m :E: N n :E: N
        [plus] -E- (S -E- m) -E- n = S -E- (plus -E- m -E- n)
    append :R: (a :E: Type) -> (m :E: N) -> (n :E: N) -> (xs :R: Vec -E- m -E- a) -> (ys :R: Vec -E- n -E- a) -> Vec -E- (plus -E- m -E- n) -E- a 
      a :E: Type n :E: N ys :R: Vec -E- n -E- a
        [append] -E- a -E- [Z] -E- n -R- (Nil -E- [a]) -R- ys = ys
      a :E: Type m :E: N n :E: N x :R: a xs :R: Vec -E- m -E- a ys :R: Vec -E- n -E- a
        [append] -E- a -E- ([S] -E- m) -E- n -R- (Cons -E- [a] -E- [m] -R- x -R- xs) -R- ys = Cons -E- a -E- (plus -E- m -E- n) -R- x -R- (append -E- a -E- m -E- n -R- xs -R- ys)
    main :R: Vec -E- 1 -E- N = append -E- N -E- Z -E- 1 -R- (Nil -E- N) -R- (Cons -E- N -E- Z -R- 4 -R- (Nil -E- N))
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor Z : N
    constructor S : (x) -> N
    constructor Nil : Vec
    constructor Cons : (x) -> (xs) -> Vec
    append 
      [_] Nil ys = ys
      [_] (Cons x xs) ys = Cons x (append xs ys)
    main = append Nil (Cons 4 Nil)
  in main

### Normal forms ###

unerased:
  
  let
    constructor N : Type
    constructor Z : N
    constructor S : (x :R: N) -> N
    constructor Vec : (_x0 : N) -> (_x1 : Type) -> Type
    constructor Nil : (a : Type) -> Vec Z a
    constructor Cons : (a : Type) -> (n : N) -> (x :R: a) -> (xs :R: Vec n a) -> Vec (S n) a
  in Cons N Z 4 (Nil N)

erased:
  
  let
    constructor Z : N
    constructor S : (x) -> N
    constructor Nil : Vec
    constructor Cons : (x) -> (xs) -> Vec
  in Cons 4 Nil

