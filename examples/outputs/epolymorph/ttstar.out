-- vim: ft=ttstar

### Desugared ###

  let
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (n :R: Nat) -> Nat
    postulate Plus : (x :R: Nat) -> (y :R: Nat) -> Nat
    id : (_x0 : Nat) -> Nat 
      [id] Z = Z
      y : Nat
        [id] (S y) = 
          let result : Nat = S y
          in result
    const_3 : (x : Nat) -> Nat = (\x : Nat. 3)
    two : Nat = 2
    f : (g : (_x1 : Nat) -> Nat) -> (z : Nat) -> (h : (_x2 : Nat) -> Nat) -> (w : Nat) -> Nat = (\g : (_x1 : Nat) -> Nat. (\z : Nat. (\h : (_x2 : Nat) -> Nat. (\w : Nat. Plus (g z) (h w)))))
    apply : (f : (_x3 : Nat) -> Nat) -> (x : Nat) -> Nat = (\f : (_x3 : Nat) -> Nat. (\x : Nat. f x))
    test_1 : Nat = Plus (apply id 2) (apply const_3 two)
    test_2 : Nat = f id 2 const_3 1
    main : Nat = Plus test_1 test_2
  in main

### Evarified ###

  let
    constructor Bool :1: Type
    constructor True :2: Bool
    constructor False :3: Bool
    constructor Nat :4: Type
    constructor Z :5: Nat
    constructor S :6: (n :R: Nat) -> Nat
    postulate Plus :7: (x :R: Nat) -> (y :R: Nat) -> Nat
    id :8: (_x0 :9: Nat) -> Nat 
      [id] -10- Z = Z
      y :11: Nat
        [id] -12- (S -13- y) = 
          let result :14: Nat = S -15- y
          in result
    const_3 :16: (x :17: Nat) -> Nat = (\x :18: Nat. 3)
    two :22: Nat = 2
    f :25: (g :26: (_x1 :27: Nat) -> Nat) -> (z :28: Nat) -> (h :29: (_x2 :30: Nat) -> Nat) -> (w :31: Nat) -> Nat = (\g :32: (_x1 :33: Nat) -> Nat. (\z :34: Nat. (\h :35: (_x2 :36: Nat) -> Nat. (\w :37: Nat. Plus -39- (g -40- z) -38- (h -41- w)))))
    apply :42: (f :43: (_x3 :44: Nat) -> Nat) -> (x :45: Nat) -> Nat = (\f :46: (_x3 :47: Nat) -> Nat. (\x :48: Nat. f -49- x))
    test_1 :50: Nat = Plus -52- (apply -54- id -53- 2) -51- (apply -58- const_3 -57- two)
    test_2 :59: Nat = f -63- id -62- 2 -61- const_3 -60- 1
    main :67: Nat = Plus -69- test_1 -68- test_2
  in main

### Constraints ###

[] -> [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,R]
[R] -> [67]

### Solution ###

[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,R]

### Annotated ###

  let
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    constructor Nat :E: Type
    constructor Z :R: Nat
    constructor S :R: (n :R: Nat) -> Nat
    postulate Plus :R: (x :R: Nat) -> (y :R: Nat) -> Nat
    id :R: (_x0 :R: Nat) -> Nat 
      [id] -R- Z = Z
      y :R: Nat
        [id] -R- (S -R- y) = 
          let result :R: Nat = S -R- y
          in result
    const_3 :R: (x :R: Nat) -> Nat = (\x :R: Nat. 3)
    two :R: Nat = 2
    f :R: (g :R: (_x1 :R: Nat) -> Nat) -> (z :R: Nat) -> (h :R: (_x2 :R: Nat) -> Nat) -> (w :R: Nat) -> Nat = (\g :R: (_x1 :R: Nat) -> Nat. (\z :R: Nat. (\h :R: (_x2 :R: Nat) -> Nat. (\w :R: Nat. Plus -R- (g -R- z) -R- (h -R- w)))))
    apply :R: (f :R: (_x3 :R: Nat) -> Nat) -> (x :R: Nat) -> Nat = (\f :R: (_x3 :R: Nat) -> Nat. (\x :R: Nat. f -R- x))
    test_1 :R: Nat = Plus -R- (apply -R- id -R- 2) -R- (apply -R- const_3 -R- two)
    test_2 :R: Nat = f -R- id -R- 2 -R- const_3 -R- 1
    main :R: Nat = Plus -R- test_1 -R- test_2
  in main

### Specialised ###

  let
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    constructor Nat :E: Type
    constructor Z :R: Nat
    constructor S :R: (n :R: Nat) -> Nat
    postulate Plus :R: (x :R: Nat) -> (y :R: Nat) -> Nat
    id :R: (_x0 :R: Nat) -> Nat 
      [id] -R- Z = Z
      y :R: Nat
        [id] -R- (S -R- y) = 
          let result :R: Nat = S -R- y
          in result
    const_3 :R: (x :R: Nat) -> Nat = (\x :R: Nat. 3)
    two :R: Nat = 2
    f :R: (g :R: (_x1 :R: Nat) -> Nat) -> (z :R: Nat) -> (h :R: (_x2 :R: Nat) -> Nat) -> (w :R: Nat) -> Nat = (\g :R: (_x1 :R: Nat) -> Nat. (\z :R: Nat. (\h :R: (_x2 :R: Nat) -> Nat. (\w :R: Nat. Plus -R- (g -R- z) -R- (h -R- w)))))
    apply :R: (f :R: (_x3 :R: Nat) -> Nat) -> (x :R: Nat) -> Nat = (\f :R: (_x3 :R: Nat) -> Nat. (\x :R: Nat. f -R- x))
    test_1 :R: Nat = Plus -R- (apply -R- id -R- 2) -R- (apply -R- const_3 -R- two)
    test_2 :R: Nat = f -R- id -R- 2 -R- const_3 -R- 1
    main :R: Nat = Plus -R- test_1 -R- test_2
  in main

### Final annotation ###

  let
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    constructor Nat :E: Type
    constructor Z :R: Nat
    constructor S :R: (n :R: Nat) -> Nat
    postulate Plus :R: (x :R: Nat) -> (y :R: Nat) -> Nat
    id :R: (_x0 :R: Nat) -> Nat 
      [id] -R- Z = Z
      y :R: Nat
        [id] -R- (S -R- y) = 
          let result :R: Nat = S -R- y
          in result
    const_3 :R: (x :R: Nat) -> Nat = (\x :R: Nat. 3)
    two :R: Nat = 2
    f :R: (g :R: (_x1 :R: Nat) -> Nat) -> (z :R: Nat) -> (h :R: (_x2 :R: Nat) -> Nat) -> (w :R: Nat) -> Nat = (\g :R: (_x1 :R: Nat) -> Nat. (\z :R: Nat. (\h :R: (_x2 :R: Nat) -> Nat. (\w :R: Nat. Plus -R- (g -R- z) -R- (h -R- w)))))
    apply :R: (f :R: (_x3 :R: Nat) -> Nat) -> (x :R: Nat) -> Nat = (\f :R: (_x3 :R: Nat) -> Nat. (\x :R: Nat. f -R- x))
    test_1 :R: Nat = Plus -R- (apply -R- id -R- 2) -R- (apply -R- const_3 -R- two)
    test_2 :R: Nat = f -R- id -R- 2 -R- const_3 -R- 1
    main :R: Nat = Plus -R- test_1 -R- test_2
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor Z : Nat
    constructor S : (n) -> Nat
    postulate Plus : (x) -> (y) -> Nat
    id 
      [_] Z = Z
      [_] (S y) = 
        let result = S y
        in result
    const_3 = (\x. 3)
    two = 2
    f = (\g. (\z. (\h. (\w. Plus (g z) (h w)))))
    apply = (\f. (\x. f x))
    test_1 = Plus (apply id 2) (apply const_3 two)
    test_2 = f id 2 const_3 1
    main = Plus test_1 test_2
  in main

### Intermediate representation ###

let Z = constructor 0
  in let S = constructor 1
    in let Plus = constructor 2
      in let id = \_pv0.
        case _pv0 of
          S _pv1 => let result = (S _pv1)
            in result
          Z => Z
        in let const_3 = \x. (S (S (S Z)))
          in let two = (S (S Z))
            in let f = \g. \z. \h. \w. ((Plus (g z)) (h w))
              in let apply = \f. \x. (f x)
                in let test_1 = ((Plus ((apply id) (S (S Z)))) ((apply const_3) two))
                  in let test_2 = ((((f id) (S (S Z))) const_3) (S Z))
                    in let main = ((Plus test_1) test_2)
                      in main

### Normal forms ###

unerased:
  
  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (n :R: Nat) -> Nat
    postulate Plus : (x :R: Nat) -> (y :R: Nat) -> Nat
  in Plus (Plus 2 3) (Plus 2 3)

erased:
  
  let
    constructor Z : Nat
    constructor S : (n) -> Nat
    postulate Plus : (x) -> (y) -> Nat
  in Plus (Plus 2 3) (Plus 2 3)

