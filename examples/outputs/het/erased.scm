(import (chicken process-context))
(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Tuple (lambda (x)
      (lambda (y)
        (lambda (z)
          (lambda (w)
            `(Tuple ,x ,y ,z ,w))))))
    (Bool `(Bool))
    (T `(T))
    (F `(F))
    (Mool `(Mool))
    (Q `(Q))
    (W `(W))
    (f (lambda (_e0)
      (match (list _e0)
        ((('T))
          Bool)
        ((('F))
          Mool)
        ((('Q))
          Bool)
        ((('W))
          Mool))))
    (main ((((Tuple (f T)) (f F)) (f Q)) (f W)))
  )
    main))
