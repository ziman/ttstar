-- vim: ft=ttstar

### Desugared ###

  let
    postulate Tuple : (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type
    constructor Bool : Type
    constructor T : Bool
    constructor F : Bool
    constructor Mool : Type
    constructor Q : Mool
    constructor W : Mool
    constructor U : Type
    constructor B : U
    constructor M : U
    ty : (_x0 : U) -> Type 
      ty B = Bool
      ty M = Mool
    f : (u : U) -> (x : ty u) -> Type 
      f [B] T = Bool
      f [B] F = Mool
      f [M] Q = Bool
      f [M] W = Mool
    main : Type = Tuple (f B T) (f B F) (f M Q) (f M W)
  in main

### Evarified ###

  let
    postulate Tuple :1: (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type
    constructor Bool :2: Type
    constructor T :3: Bool
    constructor F :4: Bool
    constructor Mool :5: Type
    constructor Q :6: Mool
    constructor W :7: Mool
    constructor U :8: Type
    constructor B :9: U
    constructor M :10: U
    ty :11: (_x0 :12: U) -> Type 
      ty -13- B = Bool
      ty -14- M = Mool
    f :15: (u :16: U) -> (x :17: ty -18- u) -> Type 
      f -20- [B] -19- T = Bool
      f -22- [B] -21- F = Mool
      f -24- [M] -23- Q = Bool
      f -26- [M] -25- W = Mool
    main :27: Type = Tuple -31- (f -33- B -32- T) -30- (f -35- B -34- F) -29- (f -37- M -36- Q) -28- (f -39- M -38- W)
  in main

### Constraints ###

[] -> [27,28,29,30,31,R]
[11] -> [2,5,9,10,11,13,14]
[12] -> [13,14,18]
[13] -> [12]
[14] -> [12]
[15] -> [2,3,4,5,6,7,15,19,21,23,25]
[15,20] -> [9]
[15,22] -> [9]
[15,24] -> [10]
[15,26] -> [10]
[16] -> [20,22,24,26,33,35,37,39]
[17] -> [19,21,23,25,32,34,36,38]
[18] -> [12]
[19] -> [17]
[20] -> [16]
[21] -> [17]
[22] -> [16]
[23] -> [17]
[24] -> [16]
[25] -> [17]
[26] -> [16]
[27] -> [1,15]
[27,32] -> [3]
[27,33] -> [9]
[27,34] -> [4]
[27,35] -> [9]
[27,36] -> [6]
[27,37] -> [10]
[27,38] -> [7]
[27,39] -> [10]
[32] -> [17]
[33] -> [16]
[34] -> [17]
[35] -> [16]
[36] -> [17]
[37] -> [16]
[38] -> [17]
[39] -> [16]

### Solution ###

[1,2,3,4,5,6,7,15,17,19,21,23,25,27,28,29,30,31,32,34,36,38,R]

### Annotated ###

  let
    postulate Tuple :R: (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type
    constructor Bool :R: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor Mool :R: Type
    constructor Q :R: Mool
    constructor W :R: Mool
    constructor U :E: Type
    constructor B :E: U
    constructor M :E: U
    ty :E: (_x0 :E: U) -> Type 
      ty -E- B = Bool
      ty -E- M = Mool
    f :R: (u :E: U) -> (x :R: ty -E- u) -> Type 
      f -E- [B] -R- T = Bool
      f -E- [B] -R- F = Mool
      f -E- [M] -R- Q = Bool
      f -E- [M] -R- W = Mool
    main :R: Type = Tuple -R- (f -E- B -R- T) -R- (f -E- B -R- F) -R- (f -E- M -R- Q) -R- (f -E- M -R- W)
  in main

### Specialised ###

  let
    postulate Tuple :R: (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type
    constructor Bool :R: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor Mool :R: Type
    constructor Q :R: Mool
    constructor W :R: Mool
    constructor U :E: Type
    constructor B :E: U
    constructor M :E: U
    ty :E: (_x0 :E: U) -> Type 
      ty -E- B = Bool
      ty -E- M = Mool
    f :R: (u :E: U) -> (x :R: ty -E- u) -> Type 
      f -E- [B] -R- T = Bool
      f -E- [B] -R- F = Mool
      f -E- [M] -R- Q = Bool
      f -E- [M] -R- W = Mool
    main :R: Type = Tuple -R- (f -E- B -R- T) -R- (f -E- B -R- F) -R- (f -E- M -R- Q) -R- (f -E- M -R- W)
  in main

### Final annotation ###

  let
    postulate Tuple :R: (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type
    constructor Bool :R: Type
    constructor T :R: Bool
    constructor F :R: Bool
    constructor Mool :R: Type
    constructor Q :R: Mool
    constructor W :R: Mool
    constructor U :E: Type
    constructor B :E: U
    constructor M :E: U
    ty :E: (_x0 :E: U) -> Type 
      ty -E- B = Bool
      ty -E- M = Mool
    f :R: (u :E: U) -> (x :R: ty -E- u) -> Type 
      f -E- [B] -R- T = Bool
      f -E- [B] -R- F = Mool
      f -E- [M] -R- Q = Bool
      f -E- [M] -R- W = Mool
    main :R: Type = Tuple -R- (f -E- B -R- T) -R- (f -E- B -R- F) -R- (f -E- M -R- Q) -R- (f -E- M -R- W)
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    postulate Tuple : (x) -> (y) -> (z) -> (w) -> Type
    constructor Bool : Type
    constructor T : Bool
    constructor F : Bool
    constructor Mool : Type
    constructor Q : Mool
    constructor W : Mool
    f 
      f T = Bool
      f F = Mool
      f Q = Bool
      f W = Mool
    main = Tuple (f T) (f F) (f Q) (f W)
  in main

### Intermediate representation ###

let Tuple = constructor 4
  in let Bool = constructor 0
    in let T = constructor 0
      in let F = constructor 0
        in let Mool = constructor 0
          in let Q = constructor 0
            in let W = constructor 0
              in let f = \_pv0.
                case _pv0 of
                  F => Mool
                  Q => Bool
                  T => Bool
                  W => Mool
                in let main = ((((Tuple (f T)) (f F)) (f Q)) (f W))
                  in main

### Normal forms ###

unerased:
  
  let
    postulate Tuple : (x :R: Type) -> (y :R: Type) -> (z :R: Type) -> (w :R: Type) -> Type
    constructor Bool : Type
    constructor Mool : Type
  in Tuple Bool Mool Bool Mool

erased:
  
  let
    postulate Tuple : (x) -> (y) -> (z) -> (w) -> Type
    constructor Bool : Type
    constructor Mool : Type
  in Tuple Bool Mool Bool Mool

