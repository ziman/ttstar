-- vim: ft=ttstar

### Desugared ###

  let
    constructor N : Type
    constructor Z : N
    constructor S : (x :R: N) -> N
    constructor B : Type
    constructor T : B
    constructor F : B
    constructor List : Type
    constructor Cons : (_x0 : B) -> (_x1 : List) -> List
    constructor Nil : List
    not : (_x2 : B) -> B 
      [not] T = F
      [not] F = T
    foreign input : N
    genList : (_x3 : B) -> (_x4 : N) -> List 
      b : B
        [genList] b Z = Nil
      b : B n : N
        [genList] b (S n) = Cons b (genList (not b) n)
    constructor Eq : (a : Type) -> (_x5 : a) -> (_x6 : a) -> Type
    constructor Refl : (a : Type) -> (x : a) -> Eq a x x
    constructor Maybe : (_x7 : Type) -> Type
    constructor Nothing : (a : Type) -> Maybe a
    constructor Just : (a : Type) -> (x : a) -> Maybe a
    semiDecEqB : (x : B) -> (y : B) -> Maybe (Eq B x y) 
      [semiDecEqB] T T = Just (Eq B T T) (Refl B T)
      [semiDecEqB] F F = Just (Eq B F F) (Refl B F)
      [semiDecEqB] T F = Nothing (Eq B T F)
      [semiDecEqB] F T = Nothing (Eq B F T)
    semiDecEq : (xs : List) -> (ys : List) -> Maybe (Eq List xs ys) 
      b : B ys : List
        [semiDecEq] Nil (Cons b ys) = Nothing (Eq List Nil (Cons b ys))
      b : B xs : List
        [semiDecEq] (Cons b xs) Nil = Nothing (Eq List (Cons b xs) Nil)
      [semiDecEq] Nil Nil = Just (Eq List Nil Nil) (Refl List Nil)
      x : B y : B xs : List ys : List
        [semiDecEq] (Cons x xs) (Cons y ys) = 
          let semiDecEq' : (x : B) -> (y : B) -> (xs : List) -> (ys : List) -> (pfH : Maybe (Eq B x y)) -> (pfT : Maybe (Eq List xs ys)) -> Maybe (Eq List (Cons x xs) (Cons y ys)) 
            x : B y : B xs : List ys : List pfT : Maybe (Eq List xs ys)
              [semiDecEq'] x y xs ys (Nothing [Eq B x y]) pfT = Nothing (Eq List (Cons x xs) (Cons y ys))
            x : B y : B xs : List ys : List pfH : Maybe (Eq B x y)
              [semiDecEq'] x y xs ys pfH (Nothing [Eq List xs ys]) = Nothing (Eq List (Cons x xs) (Cons y ys))
            x : B xs : List
              [semiDecEq'] x [x] xs [xs] (Just [Eq B x x] [Refl B x]) (Just [Eq List xs xs] [Refl List xs]) = Just (Eq List (Cons x xs) (Cons x xs)) (Refl List (Cons x xs))
          in semiDecEq' x y xs ys (semiDecEqB x y) (semiDecEq xs ys)
    sampleList : List = genList T input
    main : Maybe (Eq List sampleList sampleList) 
      [main] = semiDecEq sampleList sampleList
  in main

### Evarified ###

  let
    constructor N :1: Type
    constructor Z :2: N
    constructor S :3: (x :R: N) -> N
    constructor B :4: Type
    constructor T :5: B
    constructor F :6: B
    constructor List :7: Type
    constructor Cons :8: (_x0 :9: B) -> (_x1 :10: List) -> List
    constructor Nil :11: List
    not :12: (_x2 :13: B) -> B 
      [not] -14- T = F
      [not] -15- F = T
    foreign input :16: N
    genList :17: (_x3 :18: B) -> (_x4 :19: N) -> List 
      b :20: B
        [genList] -22- b -21- Z = Nil
      b :23: B n :24: N
        [genList] -26- b -25- (S -27- n) = Cons -29- b -28- (genList -31- (not -32- b) -30- n)
    constructor Eq :33: (a :34: Type) -> (_x5 :35: a) -> (_x6 :36: a) -> Type
    constructor Refl :37: (a :38: Type) -> (x :39: a) -> Eq -42- a -41- x -40- x
    constructor Maybe :43: (_x7 :44: Type) -> Type
    constructor Nothing :45: (a :46: Type) -> Maybe -47- a
    constructor Just :48: (a :49: Type) -> (x :50: a) -> Maybe -51- a
    semiDecEqB :52: (x :53: B) -> (y :54: B) -> Maybe -55- (Eq -58- B -57- x -56- y) 
      [semiDecEqB] -60- T -59- T = Just -62- (Eq -65- B -64- T -63- T) -61- (Refl -67- B -66- T)
      [semiDecEqB] -69- F -68- F = Just -71- (Eq -74- B -73- F -72- F) -70- (Refl -76- B -75- F)
      [semiDecEqB] -78- T -77- F = Nothing -79- (Eq -82- B -81- T -80- F)
      [semiDecEqB] -84- F -83- T = Nothing -85- (Eq -88- B -87- F -86- T)
    semiDecEq :89: (xs :90: List) -> (ys :91: List) -> Maybe -92- (Eq -95- List -94- xs -93- ys) 
      b :96: B ys :97: List
        [semiDecEq] -99- Nil -98- (Cons -101- b -100- ys) = Nothing -102- (Eq -105- List -104- Nil -103- (Cons -107- b -106- ys))
      b :108: B xs :109: List
        [semiDecEq] -111- (Cons -113- b -112- xs) -110- Nil = Nothing -114- (Eq -117- List -116- (Cons -119- b -118- xs) -115- Nil)
      [semiDecEq] -121- Nil -120- Nil = Just -123- (Eq -126- List -125- Nil -124- Nil) -122- (Refl -128- List -127- Nil)
      x :129: B y :130: B xs :131: List ys :132: List
        [semiDecEq] -134- (Cons -136- x -135- xs) -133- (Cons -138- y -137- ys) = 
          let semiDecEq' :139: (x :140: B) -> (y :141: B) -> (xs :142: List) -> (ys :143: List) -> (pfH :144: Maybe -145- (Eq -148- B -147- x -146- y)) -> (pfT :149: Maybe -150- (Eq -153- List -152- xs -151- ys)) -> Maybe -154- (Eq -157- List -156- (Cons -159- x -158- xs) -155- (Cons -161- y -160- ys)) 
            x :162: B y :163: B xs :164: List ys :165: List pfT :166: Maybe -167- (Eq -170- List -169- xs -168- ys)
              [semiDecEq'] -176- x -175- y -174- xs -173- ys -172- (Nothing -177- [Eq -180- B -179- x -178- y]) -171- pfT = Nothing -181- (Eq -184- List -183- (Cons -186- x -185- xs) -182- (Cons -188- y -187- ys))
            x :189: B y :190: B xs :191: List ys :192: List pfH :193: Maybe -194- (Eq -197- B -196- x -195- y)
              [semiDecEq'] -203- x -202- y -201- xs -200- ys -199- pfH -198- (Nothing -204- [Eq -207- List -206- xs -205- ys]) = Nothing -208- (Eq -211- List -210- (Cons -213- x -212- xs) -209- (Cons -215- y -214- ys))
            x :216: B xs :217: List
              [semiDecEq'] -223- x -222- [x] -221- xs -220- [xs] -219- (Just -225- [Eq -228- B -227- x -226- x] -224- [Refl -230- B -229- x]) -218- (Just -232- [Eq -235- List -234- xs -233- xs] -231- [Refl -237- List -236- xs]) = Just -239- (Eq -242- List -241- (Cons -244- x -243- xs) -240- (Cons -246- x -245- xs)) -238- (Refl -248- List -247- (Cons -250- x -249- xs))
          in semiDecEq' -256- x -255- y -254- xs -253- ys -252- (semiDecEqB -258- x -257- y) -251- (semiDecEq -260- xs -259- ys)
    sampleList :261: List = genList -263- T -262- input
    main :264: Maybe -265- (Eq -268- List -267- sampleList -266- sampleList) 
      [main] = semiDecEq -270- sampleList -269- sampleList
  in main

### Constraints ###

[9,98] -> [101]
[9,102,103] -> [107]
[9,111] -> [113]
[9,114,116] -> [119]
[9,133] -> [138]
[9,134] -> [136]
[9,181,182] -> [188]
[9,181,183] -> [186]
[9,208,209] -> [215]
[9,208,210] -> [213]
[9,238,247] -> [250]
[9,239,240] -> [246]
[9,239,241] -> [244]
[9,269] -> [29]
[9,270] -> [29]
[10,98] -> [100]
[10,102,103] -> [106]
[10,111] -> [112]
[10,114,116] -> [118]
[10,133] -> [137]
[10,134] -> [135]
[10,181,182] -> [187]
[10,181,183] -> [185]
[10,208,209] -> [214]
[10,208,210] -> [212]
[10,238,247] -> [249]
[10,239,240] -> [245]
[10,239,241] -> [243]
[10,269] -> [28]
[10,270] -> [28]
[13,28,31,269] -> [32]
[13,28,31,269,R] -> [14,15]
[13,28,31,270] -> [32]
[13,28,31,270,R] -> [14,15]
[14,28,31,269] -> [R]
[14,28,31,269,R] -> [13]
[14,28,31,270] -> [R]
[14,28,31,270,R] -> [13]
[15,28,31,269] -> [R]
[15,28,31,269,R] -> [13]
[15,28,31,270] -> [R]
[15,28,31,270,R] -> [13]
[18,28,269] -> [31]
[18,28,270] -> [31]
[18,269] -> [263]
[18,269,R] -> [22,26]
[18,270] -> [263]
[18,270,R] -> [22,26]
[19,28,269] -> [30]
[19,28,270] -> [30]
[19,269] -> [262]
[19,269,R] -> [21,25]
[19,270] -> [262]
[19,270,R] -> [21,25]
[20,269] -> [22]
[20,270] -> [22]
[21,269] -> [R]
[21,269,R] -> [19]
[21,270] -> [R]
[21,270,R] -> [19]
[22,269] -> [R]
[22,269,R] -> [18]
[22,270] -> [R]
[22,270,R] -> [18]
[23,269] -> [26]
[23,270] -> [26]
[24,269] -> [27]
[24,270] -> [27]
[25,27,269] -> [R]
[25,27,270] -> [R]
[25,269] -> [R]
[25,269,R] -> [19,27]
[25,270] -> [R]
[25,270,R] -> [19,27]
[26,269] -> [R]
[26,269,R] -> [18]
[26,270] -> [R]
[26,270,R] -> [18]
[27,269] -> [25]
[27,270] -> [25]
[28,30,269] -> [19]
[28,30,269,R] -> [24]
[28,30,270] -> [19]
[28,30,270,R] -> [24]
[28,31,32,269] -> [13]
[28,31,32,269,R] -> [23]
[28,31,32,270] -> [13]
[28,31,32,270,R] -> [23]
[28,31,269] -> [18]
[28,31,269,R] -> [5,6,12,14,15]
[28,31,270] -> [18]
[28,31,270,R] -> [5,6,12,14,15]
[28,269] -> [10]
[28,269,R] -> [17]
[28,270] -> [10]
[28,270,R] -> [17]
[29,269] -> [9]
[29,269,R] -> [23]
[29,270] -> [9]
[29,270,R] -> [23]
[34,62,252] -> [65]
[34,71,252] -> [74]
[34,79,252] -> [82]
[34,85,252] -> [88]
[34,102] -> [105]
[34,114] -> [117]
[34,123] -> [126]
[34,177] -> [180]
[34,181] -> [184]
[34,204] -> [207]
[34,208] -> [211]
[34,225] -> [228]
[34,232] -> [235]
[34,239] -> [242]
[35,62,252] -> [64]
[35,71,252] -> [73]
[35,79,252] -> [81]
[35,85,252] -> [87]
[35,102] -> [104]
[35,114] -> [116]
[35,123] -> [125]
[35,177] -> [179]
[35,181] -> [183]
[35,204] -> [206]
[35,208] -> [210]
[35,225] -> [227]
[35,232] -> [234]
[35,239] -> [241]
[36,62,252] -> [63]
[36,71,252] -> [72]
[36,79,252] -> [80]
[36,85,252] -> [86]
[36,102] -> [103]
[36,114] -> [115]
[36,123] -> [124]
[36,177] -> [178]
[36,181] -> [182]
[36,204] -> [205]
[36,208] -> [209]
[36,225] -> [226]
[36,232] -> [233]
[36,239] -> [240]
[38,61,252] -> [67]
[38,70,252] -> [76]
[38,122] -> [128]
[38,224] -> [230]
[38,231] -> [237]
[38,238] -> [248]
[39,61,252] -> [66]
[39,70,252] -> [75]
[39,122] -> [127]
[39,224] -> [229]
[39,231] -> [236]
[39,238] -> [247]
[40,61,252] -> [63]
[40,70,252] -> [72]
[40,122] -> [124]
[40,224] -> [226]
[40,231] -> [233]
[40,238] -> [240]
[40,238,245] -> [249]
[40,238,246] -> [250]
[40,238,249] -> [245]
[40,238,250] -> [246]
[41,61,252] -> [64]
[41,70,252] -> [73]
[41,122] -> [125]
[41,224] -> [227]
[41,231] -> [234]
[41,238] -> [241]
[41,238,243] -> [249]
[41,238,244] -> [250]
[41,238,249] -> [243]
[41,238,250] -> [244]
[42,61,252] -> [65]
[42,70,252] -> [74]
[42,122] -> [126]
[42,224] -> [228]
[42,231] -> [235]
[42,238] -> [242]
[46] -> [102,114,181,208]
[46,172] -> [177]
[46,198] -> [204]
[46,252] -> [79,85]
[47] -> [92,154]
[47,146,172] -> [178]
[47,147,172] -> [179]
[47,148,172] -> [180]
[47,151,198] -> [205]
[47,152,198] -> [206]
[47,153,198] -> [207]
[47,172] -> [145]
[47,172,178] -> [146]
[47,172,179] -> [147]
[47,172,180] -> [148]
[47,198] -> [150]
[47,198,205] -> [151]
[47,198,206] -> [152]
[47,198,207] -> [153]
[47,252] -> [55]
[49] -> [123,239]
[49,218] -> [232]
[49,219] -> [225]
[49,252] -> [62,71]
[50] -> [122,238]
[50,218] -> [231]
[50,219] -> [224]
[50,252] -> [61,70]
[51] -> [92,154]
[51,146,219] -> [226]
[51,147,219] -> [227]
[51,148,219] -> [228]
[51,151,218] -> [233]
[51,152,218] -> [234]
[51,153,218] -> [235]
[51,218] -> [150]
[51,218,233] -> [151]
[51,218,234] -> [152]
[51,218,235] -> [153]
[51,219] -> [145]
[51,219,226] -> [146]
[51,219,227] -> [147]
[51,219,228] -> [148]
[51,252] -> [55]
[53,252] -> [258]
[53,252,R] -> [60,69,78,84]
[54,252] -> [257]
[54,252,R] -> [59,68,77,83]
[55,56,252] -> [63,72,80,86,146]
[55,57,252] -> [64,73,81,87,147]
[55,58,252] -> [65,74,82,88,148]
[55,63,252] -> [56]
[55,64,252] -> [57]
[55,65,252] -> [58]
[55,72,252] -> [56]
[55,73,252] -> [57]
[55,74,252] -> [58]
[55,80,252] -> [56]
[55,81,252] -> [57]
[55,82,252] -> [58]
[55,86,252] -> [56]
[55,87,252] -> [57]
[55,88,252] -> [58]
[55,146,252] -> [56]
[55,147,252] -> [57]
[55,148,252] -> [58]
[55,252] -> [47,51,145]
[59,252] -> [R]
[59,252,R] -> [54]
[60,252] -> [R]
[60,252,R] -> [53]
[61,63,252] -> [40]
[61,64,252] -> [41]
[61,65,252] -> [42]
[61,66,252] -> [39]
[61,66,252,R] -> [5]
[61,67,252] -> [38]
[61,67,252,R] -> [4]
[61,252] -> [50]
[61,252,R] -> [37]
[62,63,252] -> [36]
[62,63,252,R] -> [5]
[62,64,252] -> [35]
[62,64,252,R] -> [5]
[62,65,252] -> [34]
[62,65,252,R] -> [4]
[62,252] -> [49]
[62,252,R] -> [33]
[68,252] -> [R]
[68,252,R] -> [54]
[69,252] -> [R]
[69,252,R] -> [53]
[70,72,252] -> [40]
[70,73,252] -> [41]
[70,74,252] -> [42]
[70,75,252] -> [39]
[70,75,252,R] -> [6]
[70,76,252] -> [38]
[70,76,252,R] -> [4]
[70,252] -> [50]
[70,252,R] -> [37]
[71,72,252] -> [36]
[71,72,252,R] -> [6]
[71,73,252] -> [35]
[71,73,252,R] -> [6]
[71,74,252] -> [34]
[71,74,252,R] -> [4]
[71,252] -> [49]
[71,252,R] -> [33]
[77,252] -> [R]
[77,252,R] -> [54]
[78,252] -> [R]
[78,252,R] -> [53]
[79,80,252] -> [36]
[79,80,252,R] -> [6]
[79,81,252] -> [35]
[79,81,252,R] -> [5]
[79,82,252] -> [34]
[79,82,252,R] -> [4]
[79,252] -> [46]
[79,252,R] -> [33]
[83,252] -> [R]
[83,252,R] -> [54]
[84,252] -> [R]
[84,252,R] -> [53]
[85,86,252] -> [36]
[85,86,252,R] -> [5]
[85,87,252] -> [35]
[85,87,252,R] -> [6]
[85,88,252] -> [34]
[85,88,252,R] -> [4]
[85,252] -> [46]
[85,252,R] -> [33]
[90] -> [270]
[90,251] -> [260]
[90,R] -> [99,111,121,134]
[91] -> [269]
[91,251] -> [259]
[91,R] -> [98,110,120,133]
[92] -> [47,51,154,265]
[92,93] -> [103,115,124,155]
[92,93,100] -> [106]
[92,93,101] -> [107]
[92,93,106] -> [100]
[92,93,107] -> [101]
[92,93,137] -> [160]
[92,93,138] -> [161]
[92,93,160] -> [137]
[92,93,161] -> [138]
[92,93,251] -> [151]
[92,94] -> [104,116,125,156]
[92,94,112] -> [118]
[92,94,113] -> [119]
[92,94,118] -> [112]
[92,94,119] -> [113]
[92,94,135] -> [158]
[92,94,136] -> [159]
[92,94,158] -> [135]
[92,94,159] -> [136]
[92,94,251] -> [152]
[92,95] -> [105,117,126,157]
[92,95,251] -> [153]
[92,103] -> [93]
[92,104] -> [94]
[92,105] -> [95]
[92,115] -> [93]
[92,116] -> [94]
[92,117] -> [95]
[92,124] -> [93]
[92,125] -> [94]
[92,126] -> [95]
[92,151,251] -> [93]
[92,152,251] -> [94]
[92,153,251] -> [95]
[92,155] -> [93]
[92,156] -> [94]
[92,157] -> [95]
[92,251] -> [150]
[93,265] -> [266]
[94,265] -> [267]
[95,265] -> [268]
[96] -> [101]
[97] -> [100]
[98] -> [R]
[98,100] -> [10]
[98,101] -> [9]
[98,R] -> [91]
[99] -> [R]
[99,R] -> [90]
[100] -> [98]
[101] -> [98]
[102] -> [46]
[102,103] -> [36]
[102,103,106] -> [10]
[102,103,106,R] -> [97]
[102,103,107] -> [9]
[102,103,107,R] -> [96]
[102,103,R] -> [8]
[102,104] -> [35]
[102,104,R] -> [11]
[102,105] -> [34]
[102,105,R] -> [7]
[102,R] -> [33]
[108] -> [113]
[109] -> [112]
[110] -> [R]
[110,R] -> [91]
[111] -> [R]
[111,112] -> [10]
[111,113] -> [9]
[111,R] -> [90]
[112] -> [111]
[113] -> [111]
[114] -> [46]
[114,115] -> [36]
[114,115,R] -> [11]
[114,116] -> [35]
[114,116,118] -> [10]
[114,116,118,R] -> [109]
[114,116,119] -> [9]
[114,116,119,R] -> [108]
[114,116,R] -> [8]
[114,117] -> [34]
[114,117,R] -> [7]
[114,R] -> [33]
[120] -> [R]
[120,R] -> [91]
[121] -> [R]
[121,R] -> [90]
[122] -> [50]
[122,124] -> [40]
[122,125] -> [41]
[122,126] -> [42]
[122,127] -> [39]
[122,127,R] -> [11]
[122,128] -> [38]
[122,128,R] -> [7]
[122,R] -> [37]
[123] -> [49]
[123,124] -> [36]
[123,124,R] -> [11]
[123,125] -> [35]
[123,125,R] -> [11]
[123,126] -> [34]
[123,126,R] -> [7]
[123,R] -> [33]
[129] -> [136]
[130] -> [138]
[131] -> [135]
[132] -> [137]
[133] -> [R]
[133,137] -> [10]
[133,138] -> [9]
[133,R] -> [91]
[134] -> [R]
[134,135] -> [10]
[134,136] -> [9]
[134,R] -> [90]
[135] -> [134]
[136] -> [134]
[137] -> [133]
[138] -> [133]
[140] -> [256]
[140,R] -> [176,203,223]
[141] -> [255]
[141,R] -> [175,202,222]
[142] -> [254]
[142,R] -> [174,201,221]
[143] -> [253]
[143,R] -> [173,200,220]
[144] -> [252]
[144,R] -> [172,199,219]
[145,172] -> [47]
[145,199] -> [194]
[145,219] -> [51]
[145,252] -> [55]
[146,194,199] -> [195]
[147,194,199] -> [196]
[148,194,199] -> [197]
[149] -> [251]
[149,R] -> [171,198,218]
[150,171] -> [167]
[150,198] -> [47]
[150,218] -> [51]
[150,251] -> [92]
[151,167,171] -> [168]
[152,167,171] -> [169]
[153,167,171] -> [170]
[154] -> [47,51,92]
[154,155] -> [182,209,240]
[154,155,160] -> [187,214,245]
[154,155,161] -> [188,215,246]
[154,155,187] -> [160]
[154,155,188] -> [161]
[154,155,214] -> [160]
[154,155,215] -> [161]
[154,155,245] -> [160]
[154,155,246] -> [161]
[154,156] -> [183,210,241]
[154,156,158] -> [185,212,243]
[154,156,159] -> [186,213,244]
[154,156,185] -> [158]
[154,156,186] -> [159]
[154,156,212] -> [158]
[154,156,213] -> [159]
[154,156,243] -> [158]
[154,156,244] -> [159]
[154,157] -> [184,211,242]
[154,182] -> [155]
[154,183] -> [156]
[154,184] -> [157]
[154,209] -> [155]
[154,210] -> [156]
[154,211] -> [157]
[154,240] -> [155]
[154,241] -> [156]
[154,242] -> [157]
[162] -> [176]
[163] -> [175]
[164] -> [174]
[165] -> [173]
[166] -> [171]
[167,168,171] -> [151]
[167,169,171] -> [152]
[167,170,171] -> [153]
[167,171] -> [150]
[171] -> [R]
[171,R] -> [149]
[172] -> [R]
[172,177] -> [46]
[172,R] -> [144]
[173] -> [R]
[173,R] -> [143]
[174] -> [R]
[174,R] -> [142]
[175] -> [R]
[175,R] -> [141]
[176] -> [R]
[176,R] -> [140]
[177] -> [172]
[177,178] -> [36]
[177,178,R] -> [163]
[177,179] -> [35]
[177,179,R] -> [162]
[177,180] -> [34]
[177,180,R] -> [4]
[177,R] -> [33]
[181] -> [46]
[181,182] -> [36]
[181,182,187] -> [10]
[181,182,187,R] -> [165]
[181,182,188] -> [9]
[181,182,188,R] -> [163]
[181,182,R] -> [8]
[181,183] -> [35]
[181,183,185] -> [10]
[181,183,185,R] -> [164]
[181,183,186] -> [9]
[181,183,186,R] -> [162]
[181,183,R] -> [8]
[181,184] -> [34]
[181,184,R] -> [7]
[181,R] -> [33]
[189] -> [203]
[190] -> [202]
[191] -> [201]
[192] -> [200]
[193] -> [199]
[194,195,199] -> [146]
[194,196,199] -> [147]
[194,197,199] -> [148]
[194,199] -> [145]
[198] -> [R]
[198,204] -> [46]
[198,R] -> [149]
[199] -> [R]
[199,R] -> [144]
[200] -> [R]
[200,R] -> [143]
[201] -> [R]
[201,R] -> [142]
[202] -> [R]
[202,R] -> [141]
[203] -> [R]
[203,R] -> [140]
[204] -> [198]
[204,205] -> [36]
[204,205,R] -> [192]
[204,206] -> [35]
[204,206,R] -> [191]
[204,207] -> [34]
[204,207,R] -> [7]
[204,R] -> [33]
[208] -> [46]
[208,209] -> [36]
[208,209,214] -> [10]
[208,209,214,R] -> [192]
[208,209,215] -> [9]
[208,209,215,R] -> [190]
[208,209,R] -> [8]
[208,210] -> [35]
[208,210,212] -> [10]
[208,210,212,R] -> [191]
[208,210,213] -> [9]
[208,210,213,R] -> [189]
[208,210,R] -> [8]
[208,211] -> [34]
[208,211,R] -> [7]
[208,R] -> [33]
[216] -> [223]
[217] -> [221]
[218] -> [R]
[218,231] -> [50]
[218,232] -> [49]
[218,R] -> [149]
[219] -> [R]
[219,224] -> [50]
[219,225] -> [49]
[219,R] -> [144]
[220] -> [R]
[220,R] -> [143,217]
[221] -> [R]
[221,R] -> [142]
[222] -> [R]
[222,R] -> [141,216]
[223] -> [R]
[223,R] -> [140]
[224] -> [219]
[224,226] -> [40]
[224,227] -> [41]
[224,228] -> [42]
[224,229] -> [39]
[224,229,R] -> [216]
[224,230] -> [38]
[224,230,R] -> [4]
[224,R] -> [37]
[225] -> [219]
[225,226] -> [36]
[225,226,R] -> [216]
[225,227] -> [35]
[225,227,R] -> [216]
[225,228] -> [34]
[225,228,R] -> [4]
[225,R] -> [33]
[231] -> [218]
[231,233] -> [40]
[231,234] -> [41]
[231,235] -> [42]
[231,236] -> [39]
[231,236,R] -> [217]
[231,237] -> [38]
[231,237,R] -> [7]
[231,R] -> [37]
[232] -> [218]
[232,233] -> [36]
[232,233,R] -> [217]
[232,234] -> [35]
[232,234,R] -> [217]
[232,235] -> [34]
[232,235,R] -> [7]
[232,R] -> [33]
[238] -> [50]
[238,240] -> [40]
[238,241] -> [41]
[238,242] -> [42]
[238,247] -> [39]
[238,247,249] -> [10]
[238,247,249,R] -> [217]
[238,247,250] -> [9]
[238,247,250,R] -> [216]
[238,247,R] -> [8]
[238,248] -> [38]
[238,248,R] -> [7]
[238,R] -> [37]
[239] -> [49]
[239,240] -> [36]
[239,240,245] -> [10]
[239,240,245,R] -> [217]
[239,240,246] -> [9]
[239,240,246,R] -> [216]
[239,240,R] -> [8]
[239,241] -> [35]
[239,241,243] -> [10]
[239,241,243,R] -> [217]
[239,241,244] -> [9]
[239,241,244,R] -> [216]
[239,241,R] -> [8]
[239,242] -> [34]
[239,242,R] -> [7]
[239,R] -> [33]
[251] -> [149]
[251,259] -> [91]
[251,259,R] -> [132]
[251,260] -> [90]
[251,260,R] -> [131]
[251,R] -> [89]
[252] -> [144]
[252,257] -> [54]
[252,257,R] -> [130]
[252,258] -> [53]
[252,258,R] -> [129]
[252,R] -> [5,6,45,48,52,59,60,68,69,77,78,83,84]
[253] -> [143]
[253,R] -> [132]
[254] -> [142]
[254,R] -> [131]
[255] -> [141]
[255,R] -> [130]
[256] -> [140]
[256,R] -> [129]
[262,265,266] -> [262]
[262,265,267] -> [262]
[262,269] -> [19]
[262,269,R] -> [16]
[262,270] -> [19]
[262,270,R] -> [16]
[263,265,266] -> [263]
[263,265,267] -> [263]
[263,269] -> [18]
[263,269,R] -> [5]
[263,270] -> [18]
[263,270,R] -> [5]
[265] -> [92]
[265,266] -> [93]
[265,267] -> [94]
[265,268] -> [95]
[269] -> [91]
[269,R] -> [2,3,8,11,17,21,25,261]
[270] -> [90]
[270,R] -> [2,3,8,11,17,21,25,261]
[R] -> [8,11,45,48,89,98,99,110,111,120,121,133,134,139,172,198,218,219,264]

### Solution ###

[2,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,45,48,52,53,54,59,60,68,69,77,78,83,84,89,90,91,98,99,100,101,110,111,112,113,120,121,129,130,131,132,133,134,135,136,137,138,139,144,149,171,172,198,199,218,219,251,252,257,258,259,260,261,262,263,264,269,270,R]

### Annotated ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (x :R: N) -> N
    constructor B :E: Type
    constructor T :R: B
    constructor F :R: B
    constructor List :E: Type
    constructor Cons :R: (_x0 :R: B) -> (_x1 :R: List) -> List
    constructor Nil :R: List
    not :R: (_x2 :R: B) -> B 
      [not] -R- T = F
      [not] -R- F = T
    foreign input :R: N
    genList :R: (_x3 :R: B) -> (_x4 :R: N) -> List 
      b :E: B
        [genList] -R- b -R- Z = Nil
      b :R: B n :R: N
        [genList] -R- b -R- (S -R- n) = Cons -R- b -R- (genList -R- (not -R- b) -R- n)
    constructor Eq :E: (a :E: Type) -> (_x5 :E: a) -> (_x6 :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Eq -E- a -E- x -E- x
    constructor Maybe :E: (_x7 :E: Type) -> Type
    constructor Nothing :R: (a :E: Type) -> Maybe -E- a
    constructor Just :R: (a :E: Type) -> (x :E: a) -> Maybe -E- a
    semiDecEqB :R: (x :R: B) -> (y :R: B) -> Maybe -E- (Eq -E- B -E- x -E- y) 
      [semiDecEqB] -R- T -R- T = Just -E- (Eq -E- B -E- T -E- T) -E- (Refl -E- B -E- T)
      [semiDecEqB] -R- F -R- F = Just -E- (Eq -E- B -E- F -E- F) -E- (Refl -E- B -E- F)
      [semiDecEqB] -R- T -R- F = Nothing -E- (Eq -E- B -E- T -E- F)
      [semiDecEqB] -R- F -R- T = Nothing -E- (Eq -E- B -E- F -E- T)
    semiDecEq :R: (xs :R: List) -> (ys :R: List) -> Maybe -E- (Eq -E- List -E- xs -E- ys) 
      b :E: B ys :E: List
        [semiDecEq] -R- Nil -R- (Cons -R- b -R- ys) = Nothing -E- (Eq -E- List -E- Nil -E- (Cons -E- b -E- ys))
      b :E: B xs :E: List
        [semiDecEq] -R- (Cons -R- b -R- xs) -R- Nil = Nothing -E- (Eq -E- List -E- (Cons -E- b -E- xs) -E- Nil)
      [semiDecEq] -R- Nil -R- Nil = Just -E- (Eq -E- List -E- Nil -E- Nil) -E- (Refl -E- List -E- Nil)
      x :R: B y :R: B xs :R: List ys :R: List
        [semiDecEq] -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = 
          let semiDecEq' :R: (x :E: B) -> (y :E: B) -> (xs :E: List) -> (ys :E: List) -> (pfH :R: Maybe -E- (Eq -E- B -E- x -E- y)) -> (pfT :R: Maybe -E- (Eq -E- List -E- xs -E- ys)) -> Maybe -E- (Eq -E- List -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys)) 
            x :E: B y :E: B xs :E: List ys :E: List pfT :E: Maybe -E- (Eq -E- List -E- xs -E- ys)
              [semiDecEq'] -E- x -E- y -E- xs -E- ys -R- (Nothing -E- [Eq -E- B -E- x -E- y]) -R- pfT = Nothing -E- (Eq -E- List -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys))
            x :E: B y :E: B xs :E: List ys :E: List pfH :E: Maybe -E- (Eq -E- B -E- x -E- y)
              [semiDecEq'] -E- x -E- y -E- xs -E- ys -R- pfH -R- (Nothing -E- [Eq -E- List -E- xs -E- ys]) = Nothing -E- (Eq -E- List -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys))
            x :E: B xs :E: List
              [semiDecEq'] -E- x -E- [x] -E- xs -E- [xs] -R- (Just -E- [Eq -E- B -E- x -E- x] -E- [Refl -E- B -E- x]) -R- (Just -E- [Eq -E- List -E- xs -E- xs] -E- [Refl -E- List -E- xs]) = Just -E- (Eq -E- List -E- (Cons -E- x -E- xs) -E- (Cons -E- x -E- xs)) -E- (Refl -E- List -E- (Cons -E- x -E- xs))
          in semiDecEq' -E- x -E- y -E- xs -E- ys -R- (semiDecEqB -R- x -R- y) -R- (semiDecEq -R- xs -R- ys)
    sampleList :R: List = genList -R- T -R- input
    main :R: Maybe -E- (Eq -E- List -E- sampleList -E- sampleList) 
      [main] = semiDecEq -R- sampleList -R- sampleList
  in main

### Specialised ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (x :R: N) -> N
    constructor B :E: Type
    constructor T :R: B
    constructor F :R: B
    constructor List :E: Type
    constructor Cons :R: (_x0 :R: B) -> (_x1 :R: List) -> List
    constructor Nil :R: List
    not :R: (_x2 :R: B) -> B 
      [not] -R- T = F
      [not] -R- F = T
    foreign input :R: N
    genList :R: (_x3 :R: B) -> (_x4 :R: N) -> List 
      b :E: B
        [genList] -R- b -R- Z = Nil
      b :R: B n :R: N
        [genList] -R- b -R- (S -R- n) = Cons -R- b -R- (genList -R- (not -R- b) -R- n)
    constructor Eq :E: (a :E: Type) -> (_x5 :E: a) -> (_x6 :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Eq -E- a -E- x -E- x
    constructor Maybe :E: (_x7 :E: Type) -> Type
    constructor Nothing :R: (a :E: Type) -> Maybe -E- a
    constructor Just :R: (a :E: Type) -> (x :E: a) -> Maybe -E- a
    semiDecEqB :R: (x :R: B) -> (y :R: B) -> Maybe -E- (Eq -E- B -E- x -E- y) 
      [semiDecEqB] -R- T -R- T = Just -E- (Eq -E- B -E- T -E- T) -E- (Refl -E- B -E- T)
      [semiDecEqB] -R- F -R- F = Just -E- (Eq -E- B -E- F -E- F) -E- (Refl -E- B -E- F)
      [semiDecEqB] -R- T -R- F = Nothing -E- (Eq -E- B -E- T -E- F)
      [semiDecEqB] -R- F -R- T = Nothing -E- (Eq -E- B -E- F -E- T)
    semiDecEq :R: (xs :R: List) -> (ys :R: List) -> Maybe -E- (Eq -E- List -E- xs -E- ys) 
      b :E: B ys :E: List
        [semiDecEq] -R- Nil -R- (Cons -R- b -R- ys) = Nothing -E- (Eq -E- List -E- Nil -E- (Cons -E- b -E- ys))
      b :E: B xs :E: List
        [semiDecEq] -R- (Cons -R- b -R- xs) -R- Nil = Nothing -E- (Eq -E- List -E- (Cons -E- b -E- xs) -E- Nil)
      [semiDecEq] -R- Nil -R- Nil = Just -E- (Eq -E- List -E- Nil -E- Nil) -E- (Refl -E- List -E- Nil)
      x :R: B y :R: B xs :R: List ys :R: List
        [semiDecEq] -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = 
          let semiDecEq' :R: (x :E: B) -> (y :E: B) -> (xs :E: List) -> (ys :E: List) -> (pfH :R: Maybe -E- (Eq -E- B -E- x -E- y)) -> (pfT :R: Maybe -E- (Eq -E- List -E- xs -E- ys)) -> Maybe -E- (Eq -E- List -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys)) 
            x :E: B y :E: B xs :E: List ys :E: List pfT :E: Maybe -E- (Eq -E- List -E- xs -E- ys)
              [semiDecEq'] -E- x -E- y -E- xs -E- ys -R- (Nothing -E- [Eq -E- B -E- x -E- y]) -R- pfT = Nothing -E- (Eq -E- List -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys))
            x :E: B y :E: B xs :E: List ys :E: List pfH :E: Maybe -E- (Eq -E- B -E- x -E- y)
              [semiDecEq'] -E- x -E- y -E- xs -E- ys -R- pfH -R- (Nothing -E- [Eq -E- List -E- xs -E- ys]) = Nothing -E- (Eq -E- List -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys))
            x :E: B xs :E: List
              [semiDecEq'] -E- x -E- [x] -E- xs -E- [xs] -R- (Just -E- [Eq -E- B -E- x -E- x] -E- [Refl -E- B -E- x]) -R- (Just -E- [Eq -E- List -E- xs -E- xs] -E- [Refl -E- List -E- xs]) = Just -E- (Eq -E- List -E- (Cons -E- x -E- xs) -E- (Cons -E- x -E- xs)) -E- (Refl -E- List -E- (Cons -E- x -E- xs))
          in semiDecEq' -E- x -E- y -E- xs -E- ys -R- (semiDecEqB -R- x -R- y) -R- (semiDecEq -R- xs -R- ys)
    sampleList :R: List = genList -R- T -R- input
    main :R: Maybe -E- (Eq -E- List -E- sampleList -E- sampleList) 
      [main] = semiDecEq -R- sampleList -R- sampleList
  in main

### Final annotation ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (x :R: N) -> N
    constructor B :E: Type
    constructor T :R: B
    constructor F :R: B
    constructor List :E: Type
    constructor Cons :R: (_x0 :R: B) -> (_x1 :R: List) -> List
    constructor Nil :R: List
    not :R: (_x2 :R: B) -> B 
      [not] -R- T = F
      [not] -R- F = T
    foreign input :R: N
    genList :R: (_x3 :R: B) -> (_x4 :R: N) -> List 
      b :E: B
        [genList] -R- b -R- Z = Nil
      b :R: B n :R: N
        [genList] -R- b -R- (S -R- n) = Cons -R- b -R- (genList -R- (not -R- b) -R- n)
    constructor Eq :E: (a :E: Type) -> (_x5 :E: a) -> (_x6 :E: a) -> Type
    constructor Refl :E: (a :E: Type) -> (x :E: a) -> Eq -E- a -E- x -E- x
    constructor Maybe :E: (_x7 :E: Type) -> Type
    constructor Nothing :R: (a :E: Type) -> Maybe -E- a
    constructor Just :R: (a :E: Type) -> (x :E: a) -> Maybe -E- a
    semiDecEqB :R: (x :R: B) -> (y :R: B) -> Maybe -E- (Eq -E- B -E- x -E- y) 
      [semiDecEqB] -R- T -R- T = Just -E- (Eq -E- B -E- T -E- T) -E- (Refl -E- B -E- T)
      [semiDecEqB] -R- F -R- F = Just -E- (Eq -E- B -E- F -E- F) -E- (Refl -E- B -E- F)
      [semiDecEqB] -R- T -R- F = Nothing -E- (Eq -E- B -E- T -E- F)
      [semiDecEqB] -R- F -R- T = Nothing -E- (Eq -E- B -E- F -E- T)
    semiDecEq :R: (xs :R: List) -> (ys :R: List) -> Maybe -E- (Eq -E- List -E- xs -E- ys) 
      b :E: B ys :E: List
        [semiDecEq] -R- Nil -R- (Cons -R- b -R- ys) = Nothing -E- (Eq -E- List -E- Nil -E- (Cons -E- b -E- ys))
      b :E: B xs :E: List
        [semiDecEq] -R- (Cons -R- b -R- xs) -R- Nil = Nothing -E- (Eq -E- List -E- (Cons -E- b -E- xs) -E- Nil)
      [semiDecEq] -R- Nil -R- Nil = Just -E- (Eq -E- List -E- Nil -E- Nil) -E- (Refl -E- List -E- Nil)
      x :R: B y :R: B xs :R: List ys :R: List
        [semiDecEq] -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = 
          let semiDecEq' :R: (x :E: B) -> (y :E: B) -> (xs :E: List) -> (ys :E: List) -> (pfH :R: Maybe -E- (Eq -E- B -E- x -E- y)) -> (pfT :R: Maybe -E- (Eq -E- List -E- xs -E- ys)) -> Maybe -E- (Eq -E- List -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys)) 
            x :E: B y :E: B xs :E: List ys :E: List pfT :E: Maybe -E- (Eq -E- List -E- xs -E- ys)
              [semiDecEq'] -E- x -E- y -E- xs -E- ys -R- (Nothing -E- [Eq -E- B -E- x -E- y]) -R- pfT = Nothing -E- (Eq -E- List -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys))
            x :E: B y :E: B xs :E: List ys :E: List pfH :E: Maybe -E- (Eq -E- B -E- x -E- y)
              [semiDecEq'] -E- x -E- y -E- xs -E- ys -R- pfH -R- (Nothing -E- [Eq -E- List -E- xs -E- ys]) = Nothing -E- (Eq -E- List -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys))
            x :E: B xs :E: List
              [semiDecEq'] -E- x -E- [x] -E- xs -E- [xs] -R- (Just -E- [Eq -E- B -E- x -E- x] -E- [Refl -E- B -E- x]) -R- (Just -E- [Eq -E- List -E- xs -E- xs] -E- [Refl -E- List -E- xs]) = Just -E- (Eq -E- List -E- (Cons -E- x -E- xs) -E- (Cons -E- x -E- xs)) -E- (Refl -E- List -E- (Cons -E- x -E- xs))
          in semiDecEq' -E- x -E- y -E- xs -E- ys -R- (semiDecEqB -R- x -R- y) -R- (semiDecEq -R- xs -R- ys)
    sampleList :R: List = genList -R- T -R- input
    main :R: Maybe -E- (Eq -E- List -E- sampleList -E- sampleList) 
      [main] = semiDecEq -R- sampleList -R- sampleList
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor Z : N
    constructor S : (x) -> N
    constructor T : B
    constructor F : B
    constructor Cons : (_x0) -> (_x1) -> List
    constructor Nil : List
    not 
      [_] T = F
      [_] F = T
    foreign input
    genList 
      [_] _ Z = Nil
      [_] b (S n) = Cons b (genList (not b) n)
    constructor Nothing : Maybe
    constructor Just : Maybe
    semiDecEqB 
      [_] T T = Just
      [_] F F = Just
      [_] T F = Nothing
      [_] F T = Nothing
    semiDecEq 
      [_] Nil (Cons _ _) = Nothing
      [_] (Cons _ _) Nil = Nothing
      [_] Nil Nil = Just
      [_] (Cons x xs) (Cons y ys) = 
        let semiDecEq' 
          [_] Nothing _ = Nothing
          [_] _ Nothing = Nothing
          [_] Just Just = Just
        in semiDecEq' (semiDecEqB x y) (semiDecEq xs ys)
    sampleList = genList T input
    main = semiDecEq sampleList sampleList
  in main

### Normal forms ###

unerased:
  
  let
    constructor N : Type
    constructor Z : N
    constructor S : (x :R: N) -> N
    constructor B : Type
    constructor T : B
    constructor F : B
    constructor List : Type
    constructor Cons : (_x0 : B) -> (_x1 : List) -> List
    constructor Nil : List
    not : (_x2 : B) -> B 
      [not] T = F
      [not] F = T
    foreign input : N
    genList : (_x3 : B) -> (_x4 : N) -> List 
      b : B
        [genList] b Z = Nil
      b : B n : N
        [genList] b (S n) = Cons b (genList (not b) n)
    constructor Eq : (a : Type) -> (_x5 : a) -> (_x6 : a) -> Type
    constructor Refl : (a : Type) -> (x : a) -> Eq a x x
    constructor Maybe : (_x7 : Type) -> Type
    constructor Nothing : (a : Type) -> Maybe a
    constructor Just : (a : Type) -> (x : a) -> Maybe a
    semiDecEqB : (x : B) -> (y : B) -> Maybe (Eq B x y) 
      [semiDecEqB] T T = Just (Eq B T T) (Refl B T)
      [semiDecEqB] F F = Just (Eq B F F) (Refl B F)
      [semiDecEqB] T F = Nothing (Eq B T F)
      [semiDecEqB] F T = Nothing (Eq B F T)
    semiDecEq : (xs : List) -> (ys : List) -> Maybe (Eq List xs ys) 
      b : B ys : List
        [semiDecEq] Nil (Cons b ys) = Nothing (Eq List Nil (Cons b ys))
      b : B xs : List
        [semiDecEq] (Cons b xs) Nil = Nothing (Eq List (Cons b xs) Nil)
      [semiDecEq] Nil Nil = Just (Eq List Nil Nil) (Refl List Nil)
      x : B y : B xs : List ys : List
        [semiDecEq] (Cons x xs) (Cons y ys) = 
          let semiDecEq' : (x : B) -> (y : B) -> (xs : List) -> (ys : List) -> (pfH : Maybe (Eq B x y)) -> (pfT : Maybe (Eq List xs ys)) -> Maybe (Eq List (Cons x xs) (Cons y ys)) 
            x : B y : B xs : List ys : List pfT : Maybe (Eq List xs ys)
              [semiDecEq'] x y xs ys (Nothing [Eq B x y]) pfT = Nothing (Eq List (Cons x xs) (Cons y ys))
            x : B y : B xs : List ys : List pfH : Maybe (Eq B x y)
              [semiDecEq'] x y xs ys pfH (Nothing [Eq List xs ys]) = Nothing (Eq List (Cons x xs) (Cons y ys))
            x : B xs : List
              [semiDecEq'] x [x] xs [xs] (Just [Eq B x x] [Refl B x]) (Just [Eq List xs xs] [Refl List xs]) = Just (Eq List (Cons x xs) (Cons x xs)) (Refl List (Cons x xs))
          in semiDecEq' x y xs ys (semiDecEqB x y) (semiDecEq xs ys)
  in semiDecEq (genList T input) (genList T input)

erased:
  
  let
    constructor Z : N
    constructor S : (x) -> N
    constructor T : B
    constructor F : B
    constructor Cons : (_x0) -> (_x1) -> List
    constructor Nil : List
    not 
      [_] T = F
      [_] F = T
    foreign input
    genList 
      [_] _ Z = Nil
      [_] b (S n) = Cons b (genList (not b) n)
    constructor Nothing : Maybe
    constructor Just : Maybe
    semiDecEqB 
      [_] T T = Just
      [_] F F = Just
      [_] T F = Nothing
      [_] F T = Nothing
    semiDecEq 
      [_] Nil (Cons _ _) = Nothing
      [_] (Cons _ _) Nil = Nothing
      [_] Nil Nil = Just
      [_] (Cons x xs) (Cons y ys) = 
        let semiDecEq' 
          [_] Nothing _ = Nothing
          [_] _ Nothing = Nothing
          [_] Just Just = Just
        in semiDecEq' (semiDecEqB x y) (semiDecEq xs ys)
  in semiDecEq (genList T input) (genList T input)

