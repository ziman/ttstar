(import (chicken process-context))
(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Bool `(Bool))
    (True `(True))
    (False `(False))
    (Squash (lambda (_x0)
      `(Squash ,_x0)))
    (Poof `(Poof))
    (Eq (lambda (a)
      (lambda (x)
        (lambda (y)
          `(Eq ,a ,x ,y)))))
    (Refl (lambda (x)
      `(Refl ,x)))
    (const (lambda (y)
      y))
    (subst (lambda (_e0)
      (lambda (_e1)
        (lambda (_e2)
          (lambda (_e3)
            (lambda (_e4)
              (match (list _e0 _e1 _e2 _e3 _e4)
                ((a P x _ ('Refl _))
                  (lambda (z)
                    z)))))))))
    (main (Refl Poof))
  )
    main))
