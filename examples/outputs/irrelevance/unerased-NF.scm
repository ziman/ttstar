(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Squash (lambda (_x0)
      `(Squash ,_x0)))
    (Poof `(Poof))
    (Eq (lambda (a)
      (lambda (x)
        (lambda (y)
          `(Eq ,a ,x ,y)))))
    (Refl (lambda (x)
      `(Refl ,x)))
  )
    (Refl Poof)))
