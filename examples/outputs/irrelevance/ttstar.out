-- vim: ft=ttstar

### Desugared ###

  let
    constructor Bool : Type
    constructor True : Bool
    constructor False : Bool
    constructor Squash : (_x0 : Type) -> Type
    constructor Poof : (a :I: Type) -> (x :I: a) -> Squash a
    constructor Eq : (a : Type) -> (x : a) -> (y : a) -> Type
    constructor Refl : (a :I: Type) -> (x : a) -> Eq a x x
    const : (x :I: Type) -> (y : Type) -> Type = (\x :I: Type. (\y : Type. y))
    subst : (a : Type) -> (P : (_x1 : a) -> Type) -> (x : a) -> (y : a) -> (_x2 : Eq a x y) -> (_x3 : P x) -> P y 
      a : Type P : (_x4 : a) -> Type x : a
        subst a P x [x] (Refl -I- [a] [x]) = (\z : P x. z)
    main : Eq (Squash Bool) (Poof -I- Bool -I- True) (Poof -I- Bool -I- False) = Refl -I- (Squash Bool) (Poof -I- Bool -I- True)
  in main

### Evarified ###

  let
    constructor Bool :1: Type
    constructor True :2: Bool
    constructor False :3: Bool
    constructor Squash :4: (_x0 :5: Type) -> Type
    constructor Poof :6: (a :I: Type) -> (x :I: a) -> Squash -7- a
    constructor Eq :8: (a :9: Type) -> (x :10: a) -> (y :11: a) -> Type
    constructor Refl :12: (a :I: Type) -> (x :13: a) -> Eq -16- a -15- x -14- x
    const :17: (x :I: Type) -> (y :18: Type) -> Type = (\x :I: Type. (\y :19: Type. y))
    subst :20: (a :21: Type) -> (P :22: (_x1 :23: a) -> Type) -> (x :24: a) -> (y :25: a) -> (_x2 :26: Eq -29- a -28- x -27- y) -> (_x3 :30: P -31- x) -> P -32- y 
      a :33: Type P :34: (_x4 :35: a) -> Type x :36: a
        subst -41- a -40- P -39- x -38- [x] -37- (Refl -I- [a] -42- [x]) = (\z :43: P -44- x. z)
    main :45: Eq -48- (Squash -49- Bool) -47- (Poof -I- Bool -I- True) -46- (Poof -I- Bool -I- False) = Refl -I- (Squash -51- Bool) -50- (Poof -I- Bool -I- True)
  in main

### Constraints ###

[] -> [45]
[5] -> [7,49,51]
[7] -> [5,49,51]
[9] -> [16,29,48]
[10] -> [15,28,47]
[11] -> [14,27,46]
[13] -> [42,50]
[14] -> [11,27,46]
[15] -> [10,15]
[16] -> [9,16]
[17] -> [19]
[18] -> [19]
[19] -> [18]
[20] -> [12,20,37,43]
[20,37,42] -> [36]
[20,37,I] -> [33]
[20,38] -> [36]
[20,39] -> [36]
[20,40] -> [34]
[20,41] -> [33]
[21] -> [41]
[22] -> [40]
[23] -> [31,32,35]
[24] -> [39]
[25] -> [38]
[26] -> [37]
[27] -> [11,14]
[28] -> [10]
[29] -> [9]
[30] -> [43]
[31] -> [23,44]
[32] -> [23,44]
[33] -> [20,41]
[34] -> [20,40]
[35] -> [23,44]
[36] -> [20,39]
[37] -> [26]
[38] -> [25]
[39] -> [24]
[40] -> [22]
[41] -> [21]
[42] -> [13]
[43] -> [30]
[44] -> [31,32,35]
[45] -> [12]
[45,50] -> [6]
[45,50,I] -> [1,2]
[45,51,I] -> [1]
[45,I] -> [4]
[46] -> [11,14]
[47] -> [10,47]
[48] -> [9,48]
[49] -> [5,7,49]
[50] -> [13]
[51] -> [5,7]
[I] -> [I]

### Solution ###

[12,45,R]

### Annotated ###

  let
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    constructor Squash :E: (_x0 :E: Type) -> Type
    constructor Poof :E: (a :I: Type) -> (x :I: a) -> Squash -E- a
    constructor Eq :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :R: (a :I: Type) -> (x :E: a) -> Eq -E- a -E- x -E- x
    const :E: (x :I: Type) -> (y :E: Type) -> Type = (\x :I: Type. (\y :E: Type. y))
    subst :E: (a :E: Type) -> (P :E: (_x1 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (_x2 :E: Eq -E- a -E- x -E- y) -> (_x3 :E: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x4 :E: a) -> Type x :E: a
        subst -E- a -E- P -E- x -E- [x] -E- (Refl -I- [a] -E- [x]) = (\z :E: P -E- x. z)
    main :R: Eq -E- (Squash -E- Bool) -E- (Poof -I- Bool -I- True) -E- (Poof -I- Bool -I- False) = Refl -I- (Squash -E- Bool) -E- (Poof -I- Bool -I- True)
  in main

### Specialised ###

  let
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    constructor Squash :E: (_x0 :E: Type) -> Type
    constructor Poof :E: (a :I: Type) -> (x :I: a) -> Squash -E- a
    constructor Eq :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :R: (a :I: Type) -> (x :E: a) -> Eq -E- a -E- x -E- x
    const :E: (x :I: Type) -> (y :E: Type) -> Type = (\x :I: Type. (\y :E: Type. y))
    subst :E: (a :E: Type) -> (P :E: (_x1 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (_x2 :E: Eq -E- a -E- x -E- y) -> (_x3 :E: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x4 :E: a) -> Type x :E: a
        subst -E- a -E- P -E- x -E- [x] -E- (Refl -I- [a] -E- [x]) = (\z :E: P -E- x. z)
    main :R: Eq -E- (Squash -E- Bool) -E- (Poof -I- Bool -I- True) -E- (Poof -I- Bool -I- False) = Refl -I- (Squash -E- Bool) -E- (Poof -I- Bool -I- True)
  in main

### Final annotation ###

  let
    constructor Bool :E: Type
    constructor True :E: Bool
    constructor False :E: Bool
    constructor Squash :E: (_x0 :E: Type) -> Type
    constructor Poof :E: (a :I: Type) -> (x :I: a) -> Squash -E- a
    constructor Eq :E: (a :E: Type) -> (x :E: a) -> (y :E: a) -> Type
    constructor Refl :R: (a :I: Type) -> (x :E: a) -> Eq -E- a -E- x -E- x
    const :E: (x :I: Type) -> (y :E: Type) -> Type = (\x :I: Type. (\y :E: Type. y))
    subst :E: (a :E: Type) -> (P :E: (_x1 :E: a) -> Type) -> (x :E: a) -> (y :E: a) -> (_x2 :E: Eq -E- a -E- x -E- y) -> (_x3 :E: P -E- x) -> P -E- y 
      a :E: Type P :E: (_x4 :E: a) -> Type x :E: a
        subst -E- a -E- P -E- x -E- [x] -E- (Refl -I- [a] -E- [x]) = (\z :E: P -E- x. z)
    main :R: Eq -E- (Squash -E- Bool) -E- (Poof -I- Bool -I- True) -E- (Poof -I- Bool -I- False) = Refl -I- (Squash -E- Bool) -E- (Poof -I- Bool -I- True)
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor Refl : Eq
    main = Refl
  in main

### Intermediate representation ###

let Refl = constructor 0
  in let main = Refl
    in main

### Normal forms ###

unerased:
  
  let
    constructor Bool : Type
    constructor True : Bool
    constructor Squash : (_x0 : Type) -> Type
    constructor Poof : (a :I: Type) -> (x :I: a) -> Squash a
    constructor Eq : (a : Type) -> (x : a) -> (y : a) -> Type
    constructor Refl : (a :I: Type) -> (x : a) -> Eq a x x
  in Refl -I- (Squash Bool) (Poof -I- Bool -I- True)

erased:
  
  let constructor Refl : Eq
  in Refl

