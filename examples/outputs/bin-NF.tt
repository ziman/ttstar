-- vim: ft=ttstar
  let
    postulate Z : Nat
    postulate S : (x) -> Nat
    postulate True : Bool
    postulate False : Bool
    postulate N : Bin
    postulate C : (rest) -> Bin
    add' 
      [_] {_} N N = C N
      [_] ({_} w) (C xn) (C yn) = 
        let f 
          [_] = C (add' w xn yn)
        in f
    foreign inputSize
    mkBin 
      [_] _ Z = N
      [_] True (S n) = C (mkBin False n)
      [_] False (S n) = C (mkBin True n)
  in add' inputSize (mkBin True inputSize) (mkBin False inputSize)
