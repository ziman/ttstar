(import (chicken process-context))
(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (N `(N))
    (Z `(Z))
    (S (lambda (x)
      `(S ,x)))
    (Vec (lambda (_x0)
      (lambda (_x1)
        `(Vec ,_x0 ,_x1))))
    (Nil (lambda (a)
      `(Nil ,a)))
    (Cons (lambda (a)
      (lambda (n)
        (lambda (x)
          (lambda (xs)
            `(Cons ,a ,n ,x ,xs))))))
    (plus (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((('Z) n)
            n)
          ((('S m) n)
            (S ((plus m) n)))))))
    (append_TT (lambda (_e0)
      (lambda (_e1)
        (lambda (_e2)
          (lambda (_e3)
            (lambda (_e4)
              (match (list _e0 _e1 _e2 _e3 _e4)
                ((a _ n ('Nil _) ys)
                  ys)
                ((a (_ m) n ('Cons _ _ x xs) ys)
                  ((((Cons a) ((plus m) n)) x) (((((append_TT a) m) n) xs) ys))))))))))
    (main (((((append_TT N) Z) (S Z)) (Nil N)) ((((Cons N) Z) (S (S (S (S Z))))) (Nil N))))
  )
    main))
