(require-extension matchable)
(define Type #(Type))
(define (number->peano z s i) (if (= i 0) (vector z) (vector s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (S (vector 'S))
    (T (vector 'T))
    (F (vector 'F))
    (isSuc (lambda (_e0)
      (match (list _e0)
        ((#('S))
          T)
        ((_)
          F))))
  )
    (lambda (x)
      (isSuc x))))
