-- vim: ft=ttstar

### Desugared ###

  let
    constructor N : Type
    constructor Z : N
    constructor S : (_x0 : N) -> N
    constructor Fin : (_x1 : N) -> Type
    constructor FZ : (n : N) -> Fin (S n)
    constructor FS : (n : N) -> (x :R: Fin n) -> Fin (S n)
    embed : (n : N) -> (_x2 : Fin n) -> Fin (S n) 
      n : N
        embed [S n] (FZ n) = FZ (S n)
      n : N x : Fin n
        embed [S n] (FS n x) = FS (S n) (embed n x)
    fsuc : (n : N) -> (x : Fin n) -> Fin (S n) = FS
    constructor Pair : Type
    constructor P : (x :R: Fin 3) -> (y :R: Fin 4) -> Pair
    main : Pair = P (fsuc 2 (FS 1 (FZ Z))) (embed 3 (FS 2 (FS 1 (FZ Z))))
  in main

### Evarified ###

  let
    constructor N :1: Type
    constructor Z :2: N
    constructor S :3: (_x0 :4: N) -> N
    constructor Fin :5: (_x1 :6: N) -> Type
    constructor FZ :7: (n :8: N) -> Fin -9- (S -10- n)
    constructor FS :11: (n :12: N) -> (x :R: Fin -13- n) -> Fin -14- (S -15- n)
    embed :16: (n :17: N) -> (_x2 :18: Fin -19- n) -> Fin -20- (S -21- n) 
      n :22: N
        embed -24- [S -25- n] -23- (FZ -26- n) = FZ -27- (S -28- n)
      n :29: N x :30: Fin -31- n
        embed -33- [S -34- n] -32- (FS -36- n -35- x) = FS -38- (S -39- n) -37- (embed -41- n -40- x)
    fsuc :42: (n :43: N) -> (x :44: Fin -45- n) -> Fin -46- (S -47- n) = FS
    constructor Pair :48: Type
    constructor P :49: (x :R: Fin -50- 3) -> (y :R: Fin -54- 4) -> Pair
    main :59: Pair = P -61- (fsuc -63- 2 -62- (FS -67- 1 -66- (FZ -69- Z))) -60- (embed -71- 3 -70- (FS -76- 2 -75- (FS -80- 1 -79- (FZ -82- Z))))
  in main

### Constraints ###

[] -> [35,37,44,59,60,61,66,75,79]
[4] -> [10,15,21,25,28,34,39,47,51,52,53,55,56,57,58,64,65,68,72,73,74,77,78,81]
[6] -> [9,13,14,19,20,31,45,46,50,54]
[8] -> [26,27,69,82]
[9] -> [6,13,19,20]
[10] -> [4,10]
[12] -> [36,38,43,67,76,80]
[13] -> [6,9,14,20,31,45]
[14] -> [6,13,19,20,45,46]
[15] -> [4,15]
[16] -> [7,11,16,23,32]
[16,23,26] -> [22]
[16,24] -> [3]
[16,24,25] -> [22]
[16,27] -> [3]
[16,27,28] -> [22]
[16,32,35] -> [30]
[16,32,36] -> [29]
[16,33] -> [3]
[16,33,34] -> [29]
[16,37] -> [16]
[16,37,40] -> [30]
[16,37,41] -> [29]
[16,38] -> [3]
[16,38,39] -> [29]
[17] -> [24,33,41,71]
[18] -> [23,32,40,70]
[19] -> [6,9,14,31]
[20] -> [6,9,13,14,54]
[21] -> [4,21]
[22] -> [16,23,26]
[23] -> [18]
[24] -> [17]
[25] -> [4,25]
[26] -> [8]
[27] -> [8]
[28] -> [4]
[29] -> [16,32,36]
[30] -> [16,32,35]
[31] -> [6,13,19]
[32] -> [18]
[33] -> [17]
[34] -> [4,34]
[36] -> [12]
[38] -> [12]
[39] -> [4]
[40] -> [18]
[41] -> [17]
[42] -> [11]
[43] -> [12,63]
[44] -> [62]
[45] -> [6,13,14]
[46] -> [6,14,50]
[47] -> [4,47]
[50] -> [6,46]
[51] -> [4]
[52] -> [4]
[53] -> [4]
[54] -> [6,20]
[55] -> [4]
[56] -> [4]
[57] -> [4]
[58] -> [4]
[59] -> [49]
[59,60] -> [16]
[59,60,70] -> [11]
[59,60,70,75] -> [11]
[59,60,70,75,79] -> [7]
[59,60,70,75,79,82] -> [2]
[59,60,70,75,80] -> [3]
[59,60,70,75,80,81] -> [2]
[59,60,70,76] -> [3]
[59,60,70,76,77] -> [3]
[59,60,70,76,77,78] -> [2]
[59,60,71] -> [3]
[59,60,71,72] -> [3]
[59,60,71,72,73] -> [3]
[59,60,71,72,73,74] -> [2]
[59,61] -> [42]
[59,61,62] -> [11]
[59,61,62,66] -> [7]
[59,61,62,66,69] -> [2]
[59,61,62,67] -> [3]
[59,61,62,67,68] -> [2]
[59,61,63] -> [3]
[59,61,63,64] -> [3]
[59,61,63,64,65] -> [2]
[62] -> [44]
[63] -> [43]
[64] -> [4,64]
[65] -> [4,65]
[67] -> [12]
[68] -> [4,68]
[69] -> [8]
[70] -> [18]
[71] -> [17]
[72] -> [4,72]
[73] -> [4,73]
[74] -> [4,74]
[76] -> [12]
[77] -> [4,77]
[78] -> [4,78]
[80] -> [12]
[81] -> [4,81]
[82] -> [8]

### Solution ###

[7,11,16,18,23,30,32,35,37,40,42,44,49,59,60,61,62,66,70,75,79,R]

### Annotated ###

  let
    constructor N :E: Type
    constructor Z :E: N
    constructor S :E: (_x0 :E: N) -> N
    constructor Fin :E: (_x1 :E: N) -> Type
    constructor FZ :R: (n :E: N) -> Fin -E- (S -E- n)
    constructor FS :R: (n :E: N) -> (x :R: Fin -E- n) -> Fin -E- (S -E- n)
    embed :R: (n :E: N) -> (_x2 :R: Fin -E- n) -> Fin -E- (S -E- n) 
      n :E: N
        embed -E- [S -E- n] -R- (FZ -E- n) = FZ -E- (S -E- n)
      n :E: N x :R: Fin -E- n
        embed -E- [S -E- n] -R- (FS -E- n -R- x) = FS -E- (S -E- n) -R- (embed -E- n -R- x)
    fsuc :R: (n :E: N) -> (x :R: Fin -E- n) -> Fin -E- (S -E- n) = FS
    constructor Pair :E: Type
    constructor P :R: (x :R: Fin -E- 3) -> (y :R: Fin -E- 4) -> Pair
    main :R: Pair = P -R- (fsuc -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (embed -E- 3 -R- (FS -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))
  in main

### Specialised ###

  let
    constructor N :E: Type
    constructor Z :E: N
    constructor S :E: (_x0 :E: N) -> N
    constructor Fin :E: (_x1 :E: N) -> Type
    constructor FZ :R: (n :E: N) -> Fin -E- (S -E- n)
    constructor FS :R: (n :E: N) -> (x :R: Fin -E- n) -> Fin -E- (S -E- n)
    embed :R: (n :E: N) -> (_x2 :R: Fin -E- n) -> Fin -E- (S -E- n) 
      n :E: N
        embed -E- [S -E- n] -R- (FZ -E- n) = FZ -E- (S -E- n)
      n :E: N x :R: Fin -E- n
        embed -E- [S -E- n] -R- (FS -E- n -R- x) = FS -E- (S -E- n) -R- (embed -E- n -R- x)
    fsuc :R: (n :E: N) -> (x :R: Fin -E- n) -> Fin -E- (S -E- n) = FS
    constructor Pair :E: Type
    constructor P :R: (x :R: Fin -E- 3) -> (y :R: Fin -E- 4) -> Pair
    main :R: Pair = P -R- (fsuc -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (embed -E- 3 -R- (FS -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))
  in main

### Final annotation ###

  let
    constructor N :E: Type
    constructor Z :E: N
    constructor S :E: (_x0 :E: N) -> N
    constructor Fin :E: (_x1 :E: N) -> Type
    constructor FZ :R: (n :E: N) -> Fin -E- (S -E- n)
    constructor FS :R: (n :E: N) -> (x :R: Fin -E- n) -> Fin -E- (S -E- n)
    embed :R: (n :E: N) -> (_x2 :R: Fin -E- n) -> Fin -E- (S -E- n) 
      n :E: N
        embed -E- [S -E- n] -R- (FZ -E- n) = FZ -E- (S -E- n)
      n :E: N x :R: Fin -E- n
        embed -E- [S -E- n] -R- (FS -E- n -R- x) = FS -E- (S -E- n) -R- (embed -E- n -R- x)
    fsuc :R: (n :E: N) -> (x :R: Fin -E- n) -> Fin -E- (S -E- n) = FS
    constructor Pair :E: Type
    constructor P :R: (x :R: Fin -E- 3) -> (y :R: Fin -E- 4) -> Pair
    main :R: Pair = P -R- (fsuc -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))) -R- (embed -E- 3 -R- (FS -E- 2 -R- (FS -E- 1 -R- (FZ -E- Z))))
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor FZ : Fin
    constructor FS : (x) -> Fin
    embed 
      embed FZ = FZ
      embed (FS x) = FS (embed x)
    fsuc = FS
    constructor P : (x) -> (y) -> Pair
    main = P (fsuc (FS FZ)) (embed (FS (FS FZ)))
  in main

### Intermediate representation ###

let FZ = constructor 0
  in let FS = constructor 1
    in let embed = \_pv0.
      case _pv0 of
        FS _pv1 => (FS (embed _pv1))
        FZ => FZ
      in let fsuc = FS
        in let P = constructor 2
          in let main = ((P (fsuc (FS FZ))) (embed (FS (FS FZ))))
            in main

### Normal forms ###

unerased:
  
  let
    constructor N : Type
    constructor Z : N
    constructor S : (_x0 : N) -> N
    constructor Fin : (_x1 : N) -> Type
    constructor FZ : (n : N) -> Fin (S n)
    constructor FS : (n : N) -> (x :R: Fin n) -> Fin (S n)
    constructor Pair : Type
    constructor P : (x :R: Fin 3) -> (y :R: Fin 4) -> Pair
  in P (FS 2 (FS 1 (FZ Z))) (FS 3 (FS 2 (FZ 1)))

erased:
  
  let
    constructor FZ : Fin
    constructor FS : (x) -> Fin
    constructor P : (x) -> (y) -> Pair
  in P (FS (FS FZ)) (FS (FS FZ))

