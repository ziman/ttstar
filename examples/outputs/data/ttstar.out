-- vim: ft=ttstar

### Desugared ###

  let
    constructor N : Type
    constructor Z : N
    constructor S : (_x0 : N) -> N
    plus : (_x1 : N) -> (_x2 : N) -> N 
      m : N
        plus Z m = m
      m : N n : N
        plus (S n) m = S (plus n m)
    main : N = 
      let pred : (_x3 : N) -> N 
        pred Z = Z
        n : N
          pred (S n) = n
      in plus 2 3
  in main

### Evarified ###

  let
    constructor N :1: Type
    constructor Z :2: N
    constructor S :3: (_x0 :4: N) -> N
    plus :5: (_x1 :6: N) -> (_x2 :7: N) -> N 
      m :8: N
        plus -10- Z -9- m = m
      m :11: N n :12: N
        plus -14- (S -15- n) -13- m = S -16- (plus -18- n -17- m)
    main :19: N = 
      let pred :20: (_x3 :21: N) -> N 
        pred -22- Z = Z
        n :23: N
          pred -24- (S -25- n) = n
      in plus -27- 2 -26- 3
  in main

### Constraints ###

[] -> [19]
[4] -> [15,16,25,28,29,30,31,32]
[5] -> [2,3,5,8,10,14]
[5,9] -> [8]
[5,13] -> [11]
[5,14,15] -> [12]
[5,16] -> [5]
[5,16,17] -> [11]
[5,16,18] -> [12]
[6] -> [10,14,18,27]
[7] -> [9,13,17,26]
[8] -> [5,9]
[9] -> [7]
[10] -> [6]
[11] -> [5,13]
[12] -> [5,14,15]
[13] -> [7]
[14] -> [6]
[15] -> [4]
[16] -> [4]
[17] -> [7]
[18] -> [6]
[19] -> [5]
[19,26] -> [3]
[19,26,30] -> [3]
[19,26,30,31] -> [3]
[19,26,30,31,32] -> [2]
[19,27] -> [3]
[19,27,28] -> [3]
[19,27,28,29] -> [2]
[20] -> [2,3,20,22,23,24]
[20,24,25] -> [23]
[21] -> [22,24]
[22] -> [21]
[23] -> [20,24,25]
[24] -> [21]
[25] -> [4]
[26] -> [7]
[27] -> [6]
[28] -> [4]
[29] -> [4]
[30] -> [4]
[31] -> [4]
[32] -> [4]

### Solution ###

[2,3,5,6,7,8,9,10,11,13,14,17,18,19,26,27,R]

### Annotated ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (_x0 :E: N) -> N
    plus :R: (_x1 :R: N) -> (_x2 :R: N) -> N 
      m :R: N
        plus -R- Z -R- m = m
      m :R: N n :E: N
        plus -R- (S -E- n) -R- m = S -E- (plus -R- n -R- m)
    main :R: N = 
      let pred :E: (_x3 :E: N) -> N 
        pred -E- Z = Z
        n :E: N
          pred -E- (S -E- n) = n
      in plus -R- 2 -R- 3
  in main

### Specialised ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (_x0 :E: N) -> N
    plus :R: (_x1 :R: N) -> (_x2 :R: N) -> N 
      m :R: N
        plus -R- Z -R- m = m
      m :R: N n :E: N
        plus -R- (S -E- n) -R- m = S -E- (plus -R- n -R- m)
    main :R: N = 
      let pred :E: (_x3 :E: N) -> N 
        pred -E- Z = Z
        n :E: N
          pred -E- (S -E- n) = n
      in plus -R- 2 -R- 3
  in main

### Final annotation ###

  let
    constructor N :E: Type
    constructor Z :R: N
    constructor S :R: (_x0 :E: N) -> N
    plus :R: (_x1 :R: N) -> (_x2 :R: N) -> N 
      m :R: N
        plus -R- Z -R- m = m
      m :R: N n :E: N
        plus -R- (S -E- n) -R- m = S -E- (plus -R- n -R- m)
    main :R: N = 
      let pred :E: (_x3 :E: N) -> N 
        pred -E- Z = Z
        n :E: N
          pred -E- (S -E- n) = n
      in plus -R- 2 -R- 3
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor Z : N
    constructor S : N
    plus 
      plus Z m = m
      plus S m = S
    main = plus S S
  in main

### Intermediate representation ###

let Z = constructor 0
  in let S = constructor 0
    in let plus = \_pv0. \_pv1.
      case _pv0 of
        S => S
        Z => _pv1
      in let main = ((plus S) S)
        in main

### Normal forms ###

unerased:
  
  let
    constructor N : Type
    constructor Z : N
    constructor S : (_x0 : N) -> N
  in 5

erased:
  
  let constructor S : N
  in S

