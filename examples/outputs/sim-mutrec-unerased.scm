(require-extension matchable)
(define Type #(Type))
(define (number->peano z s i) (if (= i 0) (vector z) (vector s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Bool (vector 'Bool))
    (True (vector 'True))
    (False (vector 'False))
    (Nat (vector 'Nat))
    (Z (vector 'Z))
    (S (lambda (_x0)
      (vector 'S _x0)))
    (plus (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((#('Z) n)
            n)
          ((#('S m) n)
            (S ((plus m) n)))))))
    (Tag (vector 'Tag))
    (Even (vector 'Even))
    (Odd (vector 'Odd))
    (funTy (lambda (_e0)
      (match (list _e0)
        ((#('Even))
          '_)
        ((#('Odd))
          '_))))
    (fun (lambda (_e0)
      (match (list _e0)
        ((#('Even))
          (lambda (n)
            (letrec* ((f (lambda (_e0)
              (match (list _e0)
                ((#('Z))
                  True)
                ((#('S m))
                  (((fun Odd) m) ((plus m) m)))))))
              (f n))))
        ((#('Odd))
          (lambda (n)
            (lambda (q)
              (letrec* ((f (lambda (_e0)
                (match (list _e0)
                  ((#('Z))
                    False)
                  ((#('S m))
                    ((fun Even) m))))))
                (f n))))))))
    (even (fun Even))
    (odd (fun Odd))
    (main (even (S (S (S (S (S (S (S (S Z))))))))))
  )
    main))
