(import (chicken process-context))
(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Nat `(Nat))
    (Z `(Z))
    (S (lambda (_x0)
      `(S ,_x0)))
    (double (lambda (_e0)
      (match (list _e0)
        ((('Z))
          Z)
        ((('S n))
          (S (S (double n)))))))
    (Bin (lambda (_x2)
      `(Bin ,_x2)))
    (N `(N))
    (O (lambda (n)
      (lambda (b)
        `(O ,n ,b))))
    (I (lambda (n)
      (lambda (b)
        `(I ,n ,b))))
    (add1 (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((_ ('N))
            ((I Z) N))
          ((_ ('O n b))
            ((I n) b))
          ((_ ('I n b))
            ((O (S n)) ((add1 n) b)))))))
    (main (match (list)
      (()
        ((add1 (S Z)) ((I Z) N)))))
  )
    main))
