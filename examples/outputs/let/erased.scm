(import (chicken process-context))
(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Z `(Z))
    (S (lambda (x)
      `(S ,x)))
    (plus (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((('Z) m)
            m)
          ((('S n) m)
            (S ((plus n) m)))))))
    (const (lambda (x)
      (lambda (y)
        x)))
    (main (letrec* (
      (apply_TT (lambda (_e0)
        (lambda (_e1)
          (match (list _e0 _e1)
            ((f ('Z))
              (f Z))
            ((f ('S x))
              (f (S x)))))))
      (Q `(Q))
      (three (S (S (S Z))))
    )
      ((plus ((apply_TT (lambda (x)
        x)) (S (S Z)))) ((apply_TT (const Q)) three))))
  )
    main))
