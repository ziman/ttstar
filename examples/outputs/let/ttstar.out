-- vim: ft=ttstar

### Desugared ###

  let
    constructor Nat : Type
    constructor Z : Nat
    constructor S : (x :R: Nat) -> Nat
    plus : (_x0 : Nat) -> (_x1 : Nat) -> Nat 
      m : Nat
        [plus] Z m = m
      n : Nat m : Nat
        [plus] (S n) m = S (plus n m)
    id : (x : Nat) -> Nat = (\x : Nat. x)
    const : (x : Nat) -> (y : Nat) -> Nat = (\x : Nat. (\y : Nat. x))
    main : Nat = 
      let apply : (_x2 : (_x3 : Nat) -> Nat) -> (_x4 : Nat) -> Nat 
        f : (_x5 : Nat) -> Nat
          [apply] f Z = f Z
        f : (_x6 : Nat) -> Nat x : Nat
          [apply] f (S x) = f (S x)
      in 
        let
          postulate Q : Nat
          three : Nat = 3
        in plus (apply id 2) (apply (const Q) three)
  in main

### Evarified ###

  let
    constructor Nat :1: Type
    constructor Z :2: Nat
    constructor S :3: (x :R: Nat) -> Nat
    plus :4: (_x0 :5: Nat) -> (_x1 :6: Nat) -> Nat 
      m :7: Nat
        [plus] -9- Z -8- m = m
      n :10: Nat m :11: Nat
        [plus] -13- (S -14- n) -12- m = S -15- (plus -17- n -16- m)
    id :18: (x :19: Nat) -> Nat = (\x :20: Nat. x)
    const :21: (x :22: Nat) -> (y :23: Nat) -> Nat = (\x :24: Nat. (\y :25: Nat. x))
    main :26: Nat = 
      let apply :27: (_x2 :28: (_x3 :29: Nat) -> Nat) -> (_x4 :30: Nat) -> Nat 
        f :31: (_x5 :32: Nat) -> Nat
          [apply] -34- f -33- Z = f -35- Z
        f :36: (_x6 :37: Nat) -> Nat x :38: Nat
          [apply] -40- f -39- (S -41- x) = f -42- (S -43- x)
      in 
        let
          postulate Q :44: Nat
          three :45: Nat = 3
        in plus -50- (apply -52- id -51- 2) -49- (apply -56- (const -57- Q) -55- three)
  in main

### Constraints ###

[] -> [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,R]
[R] -> [26]

### Solution ###

[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,R]

### Annotated ###

  let
    constructor Nat :E: Type
    constructor Z :R: Nat
    constructor S :R: (x :R: Nat) -> Nat
    plus :R: (_x0 :R: Nat) -> (_x1 :R: Nat) -> Nat 
      m :R: Nat
        [plus] -R- Z -R- m = m
      n :R: Nat m :R: Nat
        [plus] -R- (S -R- n) -R- m = S -R- (plus -R- n -R- m)
    id :R: (x :R: Nat) -> Nat = (\x :R: Nat. x)
    const :R: (x :R: Nat) -> (y :R: Nat) -> Nat = (\x :R: Nat. (\y :R: Nat. x))
    main :R: Nat = 
      let apply :R: (_x2 :R: (_x3 :R: Nat) -> Nat) -> (_x4 :R: Nat) -> Nat 
        f :R: (_x5 :R: Nat) -> Nat
          [apply] -R- f -R- Z = f -R- Z
        f :R: (_x6 :R: Nat) -> Nat x :R: Nat
          [apply] -R- f -R- (S -R- x) = f -R- (S -R- x)
      in 
        let
          postulate Q :R: Nat
          three :R: Nat = 3
        in plus -R- (apply -R- id -R- 2) -R- (apply -R- (const -R- Q) -R- three)
  in main

### Specialised ###

  let
    constructor Nat :E: Type
    constructor Z :R: Nat
    constructor S :R: (x :R: Nat) -> Nat
    plus :R: (_x0 :R: Nat) -> (_x1 :R: Nat) -> Nat 
      m :R: Nat
        [plus] -R- Z -R- m = m
      n :R: Nat m :R: Nat
        [plus] -R- (S -R- n) -R- m = S -R- (plus -R- n -R- m)
    id :R: (x :R: Nat) -> Nat = (\x :R: Nat. x)
    const :R: (x :R: Nat) -> (y :R: Nat) -> Nat = (\x :R: Nat. (\y :R: Nat. x))
    main :R: Nat = 
      let apply :R: (_x2 :R: (_x3 :R: Nat) -> Nat) -> (_x4 :R: Nat) -> Nat 
        f :R: (_x5 :R: Nat) -> Nat
          [apply] -R- f -R- Z = f -R- Z
        f :R: (_x6 :R: Nat) -> Nat x :R: Nat
          [apply] -R- f -R- (S -R- x) = f -R- (S -R- x)
      in 
        let
          postulate Q :R: Nat
          three :R: Nat = 3
        in plus -R- (apply -R- id -R- 2) -R- (apply -R- (const -R- Q) -R- three)
  in main

### Final annotation ###

  let
    constructor Nat :E: Type
    constructor Z :R: Nat
    constructor S :R: (x :R: Nat) -> Nat
    plus :R: (_x0 :R: Nat) -> (_x1 :R: Nat) -> Nat 
      m :R: Nat
        [plus] -R- Z -R- m = m
      n :R: Nat m :R: Nat
        [plus] -R- (S -R- n) -R- m = S -R- (plus -R- n -R- m)
    id :R: (x :R: Nat) -> Nat = (\x :R: Nat. x)
    const :R: (x :R: Nat) -> (y :R: Nat) -> Nat = (\x :R: Nat. (\y :R: Nat. x))
    main :R: Nat = 
      let apply :R: (_x2 :R: (_x3 :R: Nat) -> Nat) -> (_x4 :R: Nat) -> Nat 
        f :R: (_x5 :R: Nat) -> Nat
          [apply] -R- f -R- Z = f -R- Z
        f :R: (_x6 :R: Nat) -> Nat x :R: Nat
          [apply] -R- f -R- (S -R- x) = f -R- (S -R- x)
      in 
        let
          postulate Q :R: Nat
          three :R: Nat = 3
        in plus -R- (apply -R- id -R- 2) -R- (apply -R- (const -R- Q) -R- three)
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    constructor Z : Nat
    constructor S : (x) -> Nat
    plus 
      [_] Z m = m
      [_] (S n) m = S (plus n m)
    id = (\x. x)
    const = (\x. (\y. x))
    main = 
      let apply 
        [_] f Z = f Z
        [_] f (S x) = f (S x)
      in 
        let
          postulate Q : Nat
          three = 3
        in plus (apply id 2) (apply (const Q) three)
  in main

### Intermediate representation ###
let Z = constructor 0
  in let S = constructor 1
    in let plus = \_pv0. \_pv1.
      case _pv0 of
        S _pv2 => (S ((plus _pv2) _pv1))
        Z => _pv1
      in let id = \x. x
        in let const = \x. \y. x
          in let main = let apply = \_pv0. \_pv1.
            case _pv1 of
              S _pv2 => (_pv0 (S _pv2))
              Z => (_pv0 Z)
            in let Q = constructor 0
              in let three = (S (S (S Z)))
                in ((plus ((apply id) (S (S Z)))) ((apply (const Q)) three))
            in main

### Normal forms ###

unerased:
  
  let
    constructor Nat : Type
    constructor S : (x :R: Nat) -> Nat
  in 
    let postulate Q : Nat
    in S (S Q)

erased:
  
  let constructor S : (x) -> Nat
  in 
    let postulate Q : Nat
    in S (S Q)

