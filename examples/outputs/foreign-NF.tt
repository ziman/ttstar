-- vim: ft=ttstar
  let
    postulate Z : N
    postulate S : (x) -> N
    postulate T : B
    postulate F : B
    postulate Cons : (_x0) -> (_x1) -> List
    postulate Nil : List
    not 
      [_] T = F
      [_] F = T
    foreign input
    genList 
      [_] _ Z = Nil
      [_] b (S n) = Cons b (genList (not b) n)
    postulate Nothing : Maybe
    postulate Just : Maybe
    semiDecEqB 
      [_] T T = Just
      [_] F F = Just
      [_] T F = Nothing
      [_] F T = Nothing
    semiDecEq 
      [_] Nil (Cons _ _) = Nothing
      [_] (Cons _ _) Nil = Nothing
      [_] Nil Nil = Just
      [_] (Cons x xs) (Cons y ys) = 
        let semiDecEq' 
          [_] Nothing _ = Nothing
          [_] _ Nothing = Nothing
          [_] Just Just = Just
        in semiDecEq' (semiDecEqB x y) (semiDecEq xs ys)
  in semiDecEq (genList T input) (genList T input)
