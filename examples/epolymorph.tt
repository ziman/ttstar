-- vim: ft=idris

data Bool : Type.
  True : Bool,
  False : Bool.

data Maybe : Type -> Type.
  Just : (a : Type) -> a -> Type,
  Nothing : (a : Type) -> Type.

data Nat : Type.
  Z : Nat,
  S : (n :R: Nat) -> Nat.

-- let's say this is a built-in primitive function
postulate Plus : (x :R: Nat) -> (y :R: Nat) -> Nat.

id (x : Nat) : Nat
  = case x of
      Z => Z,
      S (y : Nat)
        => let result : Nat = S y. in result.

const_3 (_ : Nat) : Nat = 3.

two : Nat = S (S Z).

f (g : Nat -> Nat) (z : Nat) (h : Nat -> Nat) (w : Nat) : Nat
  = Plus (g z) (h w).

apply (f : Nat -> Nat) (x : Nat) : Nat = f x.

-- WARNING: this is not meant to be erasure-polymorphic
-- because instances of apply have not been requested!
{-
-- This will in turn cause the argument of const-3 to be R,
-- disabling erasure in test-2
-}
test_1 : Nat
  = Plus (apply id 2) (apply const_3 two).

test_2 : Nat
  = f id 2 const_3 1.

main :R: Nat
  = Plus test_1 test_2.
