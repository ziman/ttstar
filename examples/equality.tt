-- vim: ft=ttstar

data Bool : Type where
  T : Bool
  F : Bool

data Id : (a : Type) -> (x : a) -> (y : a) -> Type where
  Refl : (a : Type) -> (x : a) -> Id a x x

not : Bool -> Bool
not T = F
not F = T

-- a proof that pointwise, not.not = id
notnot : (x : Bool) -> Id Bool x (not (not x))
notnot T = Refl Bool T
notnot F = Refl Bool F

subst : (a : Type)
  -> (P : a -> Type)
  -> (x : a)
  -> (y : a)
  -> (eq : Id a x y)
  -> (w : P x)
  -> P y
(a : Type) (P : a -> Type) (x : a)
subst a P x [x] [Refl a x] = \w : P x. w

main : Id Bool F (not (not F))
  = notnot (
      subst Type (\a:Type. a) Bool Bool (Refl Type Bool) F
     )
