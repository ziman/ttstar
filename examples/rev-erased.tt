
  let
    subst 
      [_] = (\w. w)
    postulate T : Bool
    postulate F : Bool
    postulate Nil : List
    postulate Cons : (x) -> (xs) -> List
    postulate RNil : Rev
    postulate RSnoc : (x) -> (rxs) -> Rev
    rev' 
      [_] rxs Nil = subst rxs
      [_] rxs (Cons y ys) = subst (rev' (RSnoc y rxs) ys)
    rev = (\xs. rev' RNil xs)
    reverse' 
      [_] RNil = Nil
      [_] (RSnoc x rxs) = Cons x (reverse' rxs)
    reverse = (\xs. reverse' (rev xs))
    main = reverse (Cons T (Cons F (Cons T (Cons F Nil))))
  in main
