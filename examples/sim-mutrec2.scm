(require-extension matchable)
(define Type '(Type))
(print
  (letrec* (
    (True `(True))
    (False `(False))
    (Z `(Z))
    (S (lambda (_x0)
      `(S ,_x0)))
    (Even `(Even))
    (Odd `(Odd))
    (fun (letrec* (
      (even (lambda (_e0)
        (match (list _e0)
          [(('Z))
            True]
          [(('S n))
            ((fun Odd) n)])))
      (odd (lambda (_e0)
        (match (list _e0)
          [(('Z))
            False]
          [(('S m))
            ((fun Even) m)])))
    )
      (lambda (tag)
        (letrec* ((f (lambda (_e0)
          (match (list _e0)
            [(('Even))
              even]
            [(('Odd))
              odd]))))
          (f tag)))))
    (even (fun Even))
    (main (even (S (S (S (S (S (S (S (S Z))))))))))
  )
    main))
