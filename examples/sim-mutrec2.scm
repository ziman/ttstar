(print
  (letrec* (
    (True (list 'True))
    (False (list 'False))
    (Z (list 'Z))
    (S (lambda (_x0)
      (list 'S _x0)))
    (Even (list 'Even))
    (Odd (list 'Odd))
    (fun (lambda (tag)
      (case (car tag)
        ((Even) (letrec* ((even (lambda (n)
          (case (car n)
            ((Z) True)
            ((S) (let* (
              (_args-n_ (cdr n))
              (n_ (car _args-n_))
            )
              ((fun Odd) n_)))))))
          even))
        ((Odd) (letrec* ((odd (lambda (n)
          (case (car n)
            ((Z) False)
            ((S) (let* (
              (_args-n_ (cdr n))
              (n_ (car _args-n_))
            )
              ((fun Even) n_)))))))
          odd)))))
    (even (fun Even))
    (main (even (S (S (S (S (S (S (S (S Z))))))))))
  )
    main))
