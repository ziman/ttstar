-- vim: ft=agda

### Desugared ###

postulate Mool : Type

postulate Q : Mool

postulate W : Mool

postulate Bool : Type

postulate T : Bool

postulate F : Bool

postulate Id : (a : Type) -> (x : a) -> (y : a) -> Type

postulate Refl : (a : Type) -> (x : a) -> Id x x

not : (x : Bool) -> Bool = \(x : Bool).
  case x of
    T
      => F
    F
      => T

notnot : (x : Bool) -> Id x (not (not x)) = \(x : Bool).
  case x of
    T
      => Refl Bool T
    F
      => Refl Bool F

retTy : (x : Bool) -> Type = \(x : Bool).
  case x of
    T
      => Bool
    F
      => Mool

mot : (m : Mool) -> Mool = \(m : Mool).
  case m of
    Q
      => W
    W
      => Q

invert : (t : Bool) -> (x : retTy t) -> retTy t = \(t : Bool) (x : retTy t).
  case t of
    T
      => not x
    F
      => mot x

main  -R-  Mool = invert F Q

### Metaified ###

postulate Mool :?1: Type

postulate Q :?2: Mool

postulate W :?3: Mool

postulate Bool :?4: Type

postulate T :?5: Bool

postulate F :?6: Bool

postulate Id :?7: (a :?8: Type) -> (x :?9: a) -> (y :?10: a) -> Type

postulate Refl :?11: (a :?12: Type) -> (x :?13: a) -> Id -?15- x -?14- x

not :?16: (x :?17: Bool) -> Bool = \(x :?18: Bool).
  case -?19- x of
    T
      => F
    F
      => T

notnot :?20: (x :?21: Bool) -> Id -?23- x -?22- (not -?24- (not -?25- x)) = \(x :?26: Bool).
  case -?27- x of
    T
      => Refl -?29- Bool -?28- T
    F
      => Refl -?31- Bool -?30- F

retTy :?32: (x :?33: Bool) -> Type = \(x :?34: Bool).
  case -?35- x of
    T
      => Bool
    F
      => Mool

mot :?36: (m :?37: Mool) -> Mool = \(m :?38: Mool).
  case -?39- m of
    Q
      => W
    W
      => Q

invert :?40: (t :?41: Bool) -> (x :?42: retTy -?43- t) -> retTy -?44- t = \(t :?45: Bool) (x :?46: retTy -?47- t).
  case -?48- t of
    T
      => not -?49- x
    F
      => mot -?50- x

main :!R: Mool = invert -?52- F -?51- Q

### Inferred definitions ###

