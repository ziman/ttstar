-- vim: ft=agda

### Desugared ###

postulate Mool : Type

postulate Q : Mool

postulate W : Mool

postulate Bool : Type

postulate T : Bool

postulate F : Bool

postulate Id : (a : Type) -> (x : a) -> (y : a) -> Type

postulate Refl : (a : Type) -> (x : a) -> Id x x

not : (x : Bool) -> Bool = \(x : Bool).
  case x of
    T
      => F
    F
      => T

notnot : (x : Bool) -> Id x (not (not x)) = \(x : Bool).
  case x of
    T
      => Refl Bool T
    F
      => Refl Bool F

retTy : (x : Bool) -> Type = \(x : Bool).
  case x of
    T
      => Bool
    F
      => Mool

mot : (m : Mool) -> Mool = \(m : Mool).
  case m of
    Q
      => W
    W
      => Q

invert : (t : Bool) -> (x : retTy t) -> retTy t = \(t : Bool) (x : retTy t).
  case t of
    T
      => not x
    F
      => mot x

main :ᴿ Mool = invert F Q

### Metaified ###

postulate Mool :¹ Type

postulate Q :² Mool

postulate W :³ Mool

postulate Bool :⁴ Type

postulate T :⁵ Bool

postulate F :⁶ Bool

postulate Id :⁷ (a :⁸ Type) -> (x :⁹ a) -> (y :¹⁰ a) -> Type

postulate Refl :¹¹ (a :¹² Type) -> (x :¹³ a) -> Id ¹⁵ x ¹⁴ x

not :¹⁶ (x :¹⁷ Bool) -> Bool = \(x :¹⁸ Bool).
  case ¹⁹ x of
    T
      => F
    F
      => T

notnot :²⁰ (x :²¹ Bool) -> Id ²³ x ²² (not ²⁴ (not ²⁵ x)) = \(x :²⁶ Bool).
  case ²⁷ x of
    T
      => Refl ²⁹ Bool ²⁸ T
    F
      => Refl ³¹ Bool ³⁰ F

retTy :³² (x :³³ Bool) -> Type = \(x :³⁴ Bool).
  case ³⁵ x of
    T
      => Bool
    F
      => Mool

mot :³⁶ (m :³⁷ Mool) -> Mool = \(m :³⁸ Mool).
  case ³⁹ m of
    Q
      => W
    W
      => Q

invert :⁴⁰ (t :⁴¹ Bool) -> (x :⁴² retTy ⁴³ t) -> retTy ⁴⁴ t = \(t :⁴⁵ Bool) (x :⁴⁶ retTy ⁴⁷ t).
  case ⁴⁸ t of
    T
      => not ⁴⁹ x
    F
      => mot ⁵⁰ x

main :ᴿ Mool = invert ⁵² F ⁵¹ Q

### Inferred definitions ###

postulate Bool :⁴ Type

postulate F :⁶ Bool

postulate Id :⁷ (a :⁸ Type) -> (x :⁹ a) -> (y :¹⁰ a) -> Type

postulate Mool :¹ Type

postulate Q :² Mool

postulate Refl :¹¹ (a :¹² Type) -> (x :¹³ a) -> Id ¹⁵ x ¹⁴ x

postulate T :⁵ Bool

postulate Type :ᴿ Type

postulate W :³ Mool

invert :⁴⁰ (t :⁴¹ Bool) -> (x :⁴² retTy ⁴³ t) -> retTy ⁴⁴ t = \(t :⁴⁵ Bool) (x :⁴⁶ retTy ⁴⁷ t).
  case ⁴⁸ t of
    T
      => not ⁴⁹ x
    F
      => mot ⁵⁰ x
  [5,40] -> [41]
  [6,40] -> [41]
  [17,40] -> [46,49]
  [37,40] -> [46,50]
  [40] -> [16,36,48]
  [40,41] -> [45]
  [40,42] -> [46]
  [40,45] -> [41]
  [40,46] -> [42]
  [40,48] -> [45]
  [40,49] -> [17]
  [40,50] -> [37]

main :ᴿ Mool = invert ⁵² F ⁵¹ Q
  [] -> [40,R]
  [41] -> [6,52]
  [42] -> [2,51]
  [51] -> [42]
  [52] -> [41]

mot :³⁶ (m :³⁷ Mool) -> Mool = \(m :³⁸ Mool).
  case ³⁹ m of
    Q
      => W
    W
      => Q
  [2,36] -> [37]
  [3,36] -> [37]
  [36] -> [2,3,39]
  [36,37] -> [38]
  [36,38] -> [37]
  [36,39] -> [38]

not :¹⁶ (x :¹⁷ Bool) -> Bool = \(x :¹⁸ Bool).
  case ¹⁹ x of
    T
      => F
    F
      => T
  [5,16] -> [17]
  [6,16] -> [17]
  [16] -> [5,6,19]
  [16,17] -> [18]
  [16,18] -> [17]
  [16,19] -> [18]

notnot :²⁰ (x :²¹ Bool) -> Id ²³ x ²² (not ²⁴ (not ²⁵ x)) = \(x :²⁶ Bool).
  case ²⁷ x of
    T
      => Refl ²⁹ Bool ²⁸ T
    F
      => Refl ³¹ Bool ³⁰ F
  [5,20] -> [21]
  [6,20] -> [21]
  [12,20] -> [4,29,31]
  [13,20] -> [5,6,28,30]
  [14,20] -> [22]
  [15,20] -> [23]
  [20] -> [11,27]
  [20,21] -> [26]
  [20,22] -> [14]
  [20,23] -> [15]
  [20,26] -> [21]
  [20,27] -> [26]
  [20,28] -> [13]
  [20,29] -> [12]
  [20,30] -> [13]
  [20,31] -> [12]

retTy :³² (x :³³ Bool) -> Type = \(x :³⁴ Bool).
  case ³⁵ x of
    T
      => Bool
    F
      => Mool
  [5,32] -> [33]
  [6,32] -> [33]
  [32] -> [1,4,35]
  [32,33] -> [34]
  [32,34] -> [33]
  [32,35] -> [34]


### Constraints ###

[] -> [40,R]
[2,36] -> [37]
[3,36] -> [37]
[5,16] -> [17]
[5,20] -> [21]
[5,32] -> [33]
[5,40] -> [41]
[6,16] -> [17]
[6,20] -> [21]
[6,32] -> [33]
[6,40] -> [41]
[12,20] -> [4,29,31]
[13,20] -> [5,6,28,30]
[14,20] -> [22]
[15,20] -> [23]
[16] -> [5,6,19]
[16,17] -> [18]
[16,18] -> [17]
[16,19] -> [18]
[17,40] -> [46,49]
[20] -> [11,27]
[20,21] -> [26]
[20,22] -> [14]
[20,23] -> [15]
[20,26] -> [21]
[20,27] -> [26]
[20,28] -> [13]
[20,29] -> [12]
[20,30] -> [13]
[20,31] -> [12]
[32] -> [1,4,35]
[32,33] -> [34]
[32,34] -> [33]
[32,35] -> [34]
[36] -> [2,3,39]
[36,37] -> [38]
[36,38] -> [37]
[36,39] -> [38]
[37,40] -> [46,50]
[40] -> [16,36,48]
[40,41] -> [45]
[40,42] -> [46]
[40,45] -> [41]
[40,46] -> [42]
[40,48] -> [45]
[40,49] -> [17]
[40,50] -> [37]
[41] -> [6,52]
[42] -> [2,51]
[51] -> [42]
[52] -> [41]

### Solution ###

[2,3,5,6,16,17,18,19,36,37,38,39,40,41,42,45,46,48,49,50,51,52,R]

### Annotated ###

postulate Mool :ᴱ Type

postulate Q :ᴿ Mool

postulate W :ᴿ Mool

postulate Bool :ᴱ Type

postulate T :ᴿ Bool

postulate F :ᴿ Bool

postulate Id :ᴱ (a :ᴱ Type) -> (x :ᴱ a) -> (y :ᴱ a) -> Type

postulate Refl :ᴱ (a :ᴱ Type) -> (x :ᴱ a) -> Id ᴱ x ᴱ x

not :ᴿ (x :ᴿ Bool) -> Bool = \(x :ᴿ Bool).
  case ᴿ x of
    T
      => F
    F
      => T

notnot :ᴱ (x :ᴱ Bool) -> Id ᴱ x ᴱ (not ᴱ (not ᴱ x)) = \(x :ᴱ Bool).
  case ᴱ x of
    T
      => Refl ᴱ Bool ᴱ T
    F
      => Refl ᴱ Bool ᴱ F

retTy :ᴱ (x :ᴱ Bool) -> Type = \(x :ᴱ Bool).
  case ᴱ x of
    T
      => Bool
    F
      => Mool

mot :ᴿ (m :ᴿ Mool) -> Mool = \(m :ᴿ Mool).
  case ᴿ m of
    Q
      => W
    W
      => Q

invert :ᴿ (t :ᴿ Bool) -> (x :ᴿ retTy ᴱ t) -> retTy ᴱ t = \(t :ᴿ Bool) (x :ᴿ retTy ᴱ t).
  case ᴿ t of
    T
      => not ᴿ x
    F
      => mot ᴿ x

main :ᴿ Mool = invert ᴿ F ᴿ Q

### Specialised ###

postulate Mool :ᴱ Type

postulate Q :ᴿ Mool

postulate W :ᴿ Mool

postulate Bool :ᴱ Type

postulate T :ᴿ Bool

postulate F :ᴿ Bool

postulate Id :ᴱ (a :ᴱ Type) -> (x :ᴱ a) -> (y :ᴱ a) -> Type

postulate Refl :ᴱ (a :ᴱ Type) -> (x :ᴱ a) -> Id ᴱ x ᴱ x

not :ᴿ (x :ᴿ Bool) -> Bool = \(x :ᴿ Bool).
  case ᴿ x of
    T
      => F
    F
      => T

notnot :ᴱ (x :ᴱ Bool) -> Id ᴱ x ᴱ (not ᴱ (not ᴱ x)) = \(x :ᴱ Bool).
  case ᴱ x of
    T
      => Refl ᴱ Bool ᴱ T
    F
      => Refl ᴱ Bool ᴱ F

retTy :ᴱ (x :ᴱ Bool) -> Type = \(x :ᴱ Bool).
  case ᴱ x of
    T
      => Bool
    F
      => Mool

mot :ᴿ (m :ᴿ Mool) -> Mool = \(m :ᴿ Mool).
  case ᴿ m of
    Q
      => W
    W
      => Q

invert :ᴿ (t :ᴿ Bool) -> (x :ᴿ retTy ᴱ t) -> retTy ᴱ t = \(t :ᴿ Bool) (x :ᴿ retTy ᴱ t).
  case ᴿ t of
    T
      => not ᴿ x
    F
      => mot ᴿ x

main :ᴿ Mool = invert ᴿ F ᴿ Q

### Final annotation ###

postulate Mool :ᴱ Type

postulate Q :ᴿ Mool

postulate W :ᴿ Mool

postulate Bool :ᴱ Type

postulate T :ᴿ Bool

postulate F :ᴿ Bool

postulate Id :ᴱ (a :ᴱ Type) -> (x :ᴱ a) -> (y :ᴱ a) -> Type

postulate Refl :ᴱ (a :ᴱ Type) -> (x :ᴱ a) -> Id ᴱ x ᴱ x

not :ᴿ (x :ᴿ Bool) -> Bool = \(x :ᴿ Bool).
  case ᴿ x of
    T
      => F
    F
      => T

notnot :ᴱ (x :ᴱ Bool) -> Id ᴱ x ᴱ (not ᴱ (not ᴱ x)) = \(x :ᴱ Bool).
  case ᴱ x of
    T
      => Refl ᴱ Bool ᴱ T
    F
      => Refl ᴱ Bool ᴱ F

retTy :ᴱ (x :ᴱ Bool) -> Type = \(x :ᴱ Bool).
  case ᴱ x of
    T
      => Bool
    F
      => Mool

mot :ᴿ (m :ᴿ Mool) -> Mool = \(m :ᴿ Mool).
  case ᴿ m of
    Q
      => W
    W
      => Q

invert :ᴿ (t :ᴿ Bool) -> (x :ᴿ retTy ᴱ t) -> retTy ᴱ t = \(t :ᴿ Bool) (x :ᴿ retTy ᴱ t).
  case ᴿ t of
    T
      => not ᴿ x
    F
      => mot ᴿ x

main :ᴿ Mool = invert ᴿ F ᴿ Q

### Verification ###

Verification successful.

### Pruned ###

postulate Q

postulate W

postulate T

postulate F

not = \x.
  case x of
    T
      => F
    F
      => T

mot = \m.
  case m of
    Q
      => W
    W
      => Q

invert = \t x.
  case t of
    T
      => not x
    F
      => mot x

main = invert F Q

### Normal forms ###

unerased:
  W
erased:
  W
