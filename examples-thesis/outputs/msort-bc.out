-- vim: ft=ttstar

### Desugared ###

  let
    postulate Nat : Type
    postulate Z : Nat
    postulate S : (n :R: Nat) -> Nat
    postulate Bool : Type
    postulate True : Bool
    postulate False : Bool
    postulate NList : Type
    postulate Nil : NList
    postulate Cons : (x :R: Nat) -> (xs :R: NList) -> NList
    someList : NList = Cons 9 (Cons 5 (Cons 1 (Cons 3 (Cons 1 (Cons 5 (Cons 2 Nil))))))
    Rel2 : (a : Type) -> Type = (\a : Type. (x : a) -> (y : a) -> Type)
    postulate Acc : (a : Type) -> (lt : Rel2 a) -> (x : a) -> Type
    postulate MkAcc : (a : Type) -> (lt : Rel2 a) -> (x : a) -> (acc : (y : a) -> (pf : lt y x) -> Acc a lt y) -> Acc a lt x
    postulate LE : (_x0 : Nat) -> (_x1 : Nat) -> Type
    postulate LEZ : (n : Nat) -> LE Z n
    postulate LES : (m : Nat) -> (n : Nat) -> (_x2 : LE m n) -> LE (S m) (S n)
    LT : (x : Nat) -> (y : Nat) -> Type = (\x : Nat. (\y : Nat. LE (S x) y))
    leRefl : (x : Nat) -> LE x x 
      [leRefl] Z = LEZ Z
      x : Nat
        [leRefl] (S x) = LES x x (leRefl x)
    leTrans : (x : Nat) -> (y : Nat) -> (z : Nat) -> (_x3 : LE x y) -> (_x4 : LE y z) -> LE x z 
      y : Nat z : Nat pf : LE y z
        [leTrans] Z y z ({LEZ} [y]) pf = LEZ z
      x : Nat y : Nat z : Nat xLEy : LE x y yLEz : LE y z
        [leTrans] (S x) (S y) (S z) ({LES} [x] [y] xLEy) ({LES} [y] [z] yLEz) = LES x z (leTrans x y z xLEy yLEz)
    leS : (x : Nat) -> (y : Nat) -> (_x5 : LE x y) -> LE x (S y) 
      y : Nat
        [leS] Z y ({LEZ} [y]) = LEZ (S y)
      x : Nat y : Nat xLEy : LE x y
        [leS] (S x) (S y) ({LES} [x] [y] xLEy) = LES x (S y) (leS x y xLEy)
    lemmaLTZ : (a : Type) -> (n : Nat) -> (_x6 : LT n Z) -> a 
    wfLT : (x : Nat) -> Acc Nat LT x = (\x : Nat. 
      let f : (x : Nat) -> (y : Nat) -> (_x7 : LT y x) -> Acc Nat LT y 
        y : Nat pf : LT y Z
          [f] Z y pf = lemmaLTZ (Acc Nat LT y) y pf
        x : Nat y : Nat yLEx : LE y x
          [f] (S x) y ({LES} [y] [x] yLEx) = MkAcc Nat LT y (\z : Nat. (\zLTy : LT z y. f x z (leTrans (S z) y x zLTy yLEx)))
      in MkAcc Nat LT x (f x))
    length : (_x8 : NList) -> Nat 
      [length] Nil = Z
      x : Nat xs : NList
        [length] (Cons x xs) = S (length xs)
    Shorter : (xs : NList) -> (ys : NList) -> Type = (\xs : NList. (\ys : NList. LT (length xs) (length ys)))
    wfShorter : (xs : NList) -> Acc NList Shorter xs = (\xs : NList. 
      let f : (xs : NList) -> (ys : NList) -> (_x9 : Shorter ys xs) -> Acc NList Shorter ys 
        ys : NList pf : Shorter ys Nil
          [f] Nil ys pf = lemmaLTZ (Acc NList Shorter ys) (length ys) pf
        x : Nat xs : NList ys : NList yLEx : LE (length ys) (length xs)
          [f] (Cons x xs) ys ({LES} [length ys] [length xs] yLEx) = MkAcc NList Shorter ys (\zs : NList. (\zLTy : LT (length zs) (length ys). f xs zs (leTrans (S (length zs)) (length ys) (length xs) zLTy yLEx)))
      in MkAcc NList Shorter xs (f xs))
    leq : (_x10 : Nat) -> (_x11 : Nat) -> Bool 
      y : Nat
        [leq] Z y = True
      x : Nat
        [leq] (S x) Z = False
      x : Nat y : Nat
        [leq] (S x) (S y) = leq x y
    not : (_x12 : Bool) -> Bool 
      [not] True = False
      [not] False = True
    qel : (y : Nat) -> (x : Nat) -> Bool = (\y : Nat. (\x : Nat. leq x y))
    gt : (x : Nat) -> (y : Nat) -> Bool = (\x : Nat. (\y : Nat. not (leq y x)))
    condCons : (_x13 : Bool) -> (_x14 : Nat) -> (_x15 : NList) -> NList 
      [condCons] True = Cons
      [condCons] False = (\x : Nat. (\xs : NList. xs))
    filter : (_x16 : (_x17 : Nat) -> Bool) -> (_x18 : NList) -> NList 
      p : (_x19 : Nat) -> Bool
        [filter] p Nil = Nil
      p : (_x20 : Nat) -> Bool x : Nat xs : NList
        [filter] p (Cons x xs) = condCons (p x) x (filter p xs)
    append : (_x21 : NList) -> (_x22 : NList) -> NList 
      ys : NList
        [append] Nil ys = ys
      x : Nat xs : NList ys : NList
        [append] (Cons x xs) ys = Cons x (append xs ys)
    postulate Id : (a : Type) -> (_x23 : a) -> (_x24 : a) -> Type
    postulate Refl : (a : Type) -> (x : a) -> Id a x x
    postulate Split : (_x25 : NList) -> Type
    postulate SNil : Split Nil
    postulate SOne : (x : Nat) -> Split (Cons x Nil)
    postulate SMore : (x : Nat) -> (xs : NList) -> (y : Nat) -> (ys : NList) -> Split (append (Cons x xs) (Cons y ys))
    pushL : (x : Nat) -> (xs : NList) -> (_x26 : Split xs) -> Split (Cons x xs) 
      x : Nat
        [pushL] x [Nil] SNil = SOne x
      x : Nat y : Nat
        [pushL] x [Cons y Nil] (SOne y) = SMore x Nil y Nil
      x : Nat y : Nat ys : NList z : Nat zs : NList
        [pushL] x [append (Cons y ys) (Cons z zs)] (SMore y ys z zs) = SMore x (Cons y ys) z zs
    split : (xs : NList) -> Split xs 
      [split] Nil = SNil
      x : Nat
        [split] (Cons x Nil) = SOne x
      x : Nat y : Nat xs : NList
        [split] (Cons x (Cons y xs)) = 
          let step : (counter : Nat) -> (x : Nat) -> (y : Nat) -> (xs : NList) -> Split (Cons x (Cons y xs)) 
            x : Nat y : Nat xs : NList
              [step] Z x y xs = SMore x Nil y xs
            x : Nat y : Nat xs : NList
              [step] (S Z) x y xs = SMore x Nil y xs
            c : Nat x : Nat y : Nat
              [step] (S (S c)) x y Nil = SMore x Nil y Nil
            c : Nat x : Nat y : Nat z : Nat xs : NList
              [step] (S (S c)) x y (Cons z xs) = pushL x (Cons y (Cons z xs)) (step c y z xs)
          in step (S (length xs)) x y xs
    merge : (_x27 : NList) -> (_x28 : NList) -> NList 
      ys : NList
        [merge] Nil ys = ys
      xs : NList
        [merge] xs Nil = xs
      x : Nat xs : NList y : Nat ys : NList
        [merge] (Cons x xs) (Cons y ys) = 
          let f : (_x29 : Bool) -> NList 
            [f] True = Cons x (merge xs (Cons y ys))
            [f] False = Cons y (merge (Cons x xs) ys)
          in f (leq x y)
    postulate MSAcc : (xs : NList) -> (_x0 : Split xs) -> Type
    postulate MSNil : MSAcc Nil SNil
    postulate MSOne : (x : Nat) -> MSAcc (Cons x Nil) (SOne x)
    postulate MSMore : (x : Nat) -> (xs : NList) -> (y : Nat) -> (ys : NList) -> (_x1 : MSAcc (Cons x xs) (split (Cons x xs))) -> (_x2 : MSAcc (Cons y ys) (split (Cons y ys))) -> MSAcc (append (Cons x xs) (Cons y ys)) (SMore x xs y ys)
    lemmaL : (x : Nat) -> (xs : NList) -> (y : Nat) -> (ys : NList) -> Shorter (Cons x xs) (append (Cons x xs) (Cons y ys)) 
      x : Nat y : Nat ys : NList
        [lemmaL] x Nil y ys = LES 1 (S (length ys)) (LES Z (length ys) (LEZ (length ys)))
      x : Nat z : Nat xs : NList y : Nat ys : NList
        [lemmaL] x (Cons z xs) y ys = LES (S (length (Cons x xs))) (length (append (Cons x xs) (Cons y ys))) (lemmaL x xs y ys)
    lemmaR : (x : Nat) -> (xs : NList) -> (y : Nat) -> (ys : NList) -> Shorter (Cons y ys) (append (Cons x xs) (Cons y ys)) 
      x : Nat y : Nat ys : NList
        [lemmaR] x Nil y ys = LES (S (length ys)) (S (length ys)) (LES (length ys) (length ys) (leRefl (length ys)))
      x : Nat z : Nat xs : NList y : Nat ys : NList
        [lemmaR] x (Cons z xs) y ys = leS (S (S (length ys))) (length (append (Cons x xs) (Cons y ys))) (lemmaR x xs y ys)
    msAcc : (xs : NList) -> (acc : Acc NList Shorter xs) -> MSAcc xs (split xs) = (\xs : NList. (\acc : Acc NList Shorter xs. 
      let fx : (xs : NList) -> (acc : Acc NList Shorter xs) -> (sxs : Split xs) -> MSAcc xs sxs 
        acc : Acc NList Shorter Nil
          [fx] [Nil] acc SNil = MSNil
        x : Nat acc : Acc NList Shorter (Cons x Nil)
          [fx] [Cons x Nil] acc (SOne x) = MSOne x
        y : Nat ys : NList z : Nat zs : NList acc : (qs : NList) -> (_x3 : Shorter qs (append (Cons y ys) (Cons z zs))) -> Acc NList Shorter qs
          [fx] [append (Cons y ys) (Cons z zs)] ({MkAcc} [NList] [Shorter] [append (Cons y ys) (Cons z zs)] acc) (SMore y ys z zs) = MSMore y ys z zs (msAcc (Cons y ys) (acc (Cons y ys) (lemmaL y ys z zs))) (msAcc (Cons z zs) (acc (Cons z zs) (lemmaR y ys z zs)))
      in fx xs acc (split xs)))
    msort' : (xs : NList) -> (acc : MSAcc xs (split xs)) -> NList = (\xs : NList. (\acc : MSAcc xs (split xs). 
      let gx : (xs : NList) -> (sxs : Split xs) -> (acc : MSAcc xs sxs) -> NList 
        [gx] [Nil] SNil [MSNil] = Nil
        x : Nat
          [gx] [Cons x Nil] (SOne x) [MSOne x] = Cons x Nil
        y : Nat ys : NList z : Nat zs : NList accL : MSAcc (Cons y ys) (split (Cons y ys)) accR : MSAcc (Cons z zs) (split (Cons z zs))
          [gx] [append (Cons y ys) (Cons z zs)] (SMore y ys z zs) ({MSMore} [y] [ys] [z] [zs] accL accR) = merge (msort' (Cons y ys) accL) (msort' (Cons z zs) accR)
      in gx xs (split xs) acc))
    msort : (xs : NList) -> NList = (\xs : NList. msort' xs (msAcc xs (wfShorter xs)))
    main : NList = msort someList
  in main

### Evarified ###

  let
    postulate Nat :1: Type
    postulate Z :2: Nat
    postulate S :3: (n :R: Nat) -> Nat
    postulate Bool :4: Type
    postulate True :5: Bool
    postulate False :6: Bool
    postulate NList :7: Type
    postulate Nil :8: NList
    postulate Cons :9: (x :R: Nat) -> (xs :R: NList) -> NList
    someList :10: NList = Cons -12- 9 -11- (Cons -23- 5 -22- (Cons -30- 1 -29- (Cons -33- 3 -32- (Cons -38- 1 -37- (Cons -41- 5 -40- (Cons -48- 2 -47- Nil))))))
    Rel2 :51: (a :52: Type) -> Type = (\a :53: Type. (x :54: a) -> (y :55: a) -> Type)
    postulate Acc :56: (a :57: Type) -> (lt :58: Rel2 -59- a) -> (x :60: a) -> Type
    postulate MkAcc :61: (a :62: Type) -> (lt :63: Rel2 -64- a) -> (x :65: a) -> (acc :66: (y :67: a) -> (pf :68: lt -70- y -69- x) -> Acc -73- a -72- lt -71- y) -> Acc -76- a -75- lt -74- x
    postulate LE :77: (_x0 :78: Nat) -> (_x1 :79: Nat) -> Type
    postulate LEZ :80: (n :81: Nat) -> LE -83- Z -82- n
    postulate LES :84: (m :85: Nat) -> (n :86: Nat) -> (_x2 :87: LE -89- m -88- n) -> LE -91- (S -92- m) -90- (S -93- n)
    LT :94: (x :95: Nat) -> (y :96: Nat) -> Type = (\x :97: Nat. (\y :98: Nat. LE -100- (S -101- x) -99- y))
    leRefl :102: (x :103: Nat) -> LE -105- x -104- x 
      [leRefl] -106- Z = LEZ -107- Z
      x :108: Nat
        [leRefl] -109- (S -110- x) = LES -113- x -112- x -111- (leRefl -114- x)
    leTrans :115: (x :116: Nat) -> (y :117: Nat) -> (z :118: Nat) -> (_x3 :119: LE -121- x -120- y) -> (_x4 :122: LE -124- y -123- z) -> LE -126- x -125- z 
      y :127: Nat z :128: Nat pf :129: LE -131- y -130- z
        [leTrans] -136- Z -135- y -134- z -133- ({LEZ} -137- [y]) -132- pf = LEZ -138- z
      x :139: Nat y :140: Nat z :141: Nat xLEy :142: LE -144- x -143- y yLEz :145: LE -147- y -146- z
        [leTrans] -152- (S -153- x) -151- (S -154- y) -150- (S -155- z) -149- ({LES} -158- [x] -157- [y] -156- xLEy) -148- ({LES} -161- [y] -160- [z] -159- yLEz) = LES -164- x -163- z -162- (leTrans -169- x -168- y -167- z -166- xLEy -165- yLEz)
    leS :170: (x :171: Nat) -> (y :172: Nat) -> (_x5 :173: LE -175- x -174- y) -> LE -177- x -176- (S -178- y) 
      y :179: Nat
        [leS] -182- Z -181- y -180- ({LEZ} -183- [y]) = LEZ -184- (S -185- y)
      x :186: Nat y :187: Nat xLEy :188: LE -190- x -189- y
        [leS] -193- (S -194- x) -192- (S -195- y) -191- ({LES} -198- [x] -197- [y] -196- xLEy) = LES -201- x -200- (S -202- y) -199- (leS -205- x -204- y -203- xLEy)
    lemmaLTZ :206: (a :207: Type) -> (n :208: Nat) -> (_x6 :209: LT -211- n -210- Z) -> a 
    wfLT :212: (x :213: Nat) -> Acc -216- Nat -215- LT -214- x = (\x :217: Nat. 
      let f :218: (x :219: Nat) -> (y :220: Nat) -> (_x7 :221: LT -223- y -222- x) -> Acc -226- Nat -225- LT -224- y 
        y :227: Nat pf :228: LT -230- y -229- Z
          [f] -233- Z -232- y -231- pf = lemmaLTZ -236- (Acc -239- Nat -238- LT -237- y) -235- y -234- pf
        x :240: Nat y :241: Nat yLEx :242: LE -244- y -243- x
          [f] -247- (S -248- x) -246- y -245- ({LES} -251- [y] -250- [x] -249- yLEx) = MkAcc -255- Nat -254- LT -253- y -252- (\z :256: Nat. (\zLTy :257: LT -259- z -258- y. f -262- x -261- z -260- (leTrans -267- (S -268- z) -266- y -265- x -264- zLTy -263- yLEx)))
      in MkAcc -272- Nat -271- LT -270- x -269- (f -273- x))
    length :274: (_x8 :275: NList) -> Nat 
      [length] -276- Nil = Z
      x :277: Nat xs :278: NList
        [length] -279- (Cons -281- x -280- xs) = S -282- (length -283- xs)
    Shorter :284: (xs :285: NList) -> (ys :286: NList) -> Type = (\xs :287: NList. (\ys :288: NList. LT -290- (length -291- xs) -289- (length -292- ys)))
    wfShorter :293: (xs :294: NList) -> Acc -297- NList -296- Shorter -295- xs = (\xs :298: NList. 
      let f :299: (xs :300: NList) -> (ys :301: NList) -> (_x9 :302: Shorter -304- ys -303- xs) -> Acc -307- NList -306- Shorter -305- ys 
        ys :308: NList pf :309: Shorter -311- ys -310- Nil
          [f] -314- Nil -313- ys -312- pf = lemmaLTZ -317- (Acc -320- NList -319- Shorter -318- ys) -316- (length -321- ys) -315- pf
        x :322: Nat xs :323: NList ys :324: NList yLEx :325: LE -327- (length -328- ys) -326- (length -329- xs)
          [f] -332- (Cons -334- x -333- xs) -331- ys -330- ({LES} -337- [length -338- ys] -336- [length -339- xs] -335- yLEx) = MkAcc -343- NList -342- Shorter -341- ys -340- (\zs :344: NList. (\zLTy :345: LT -347- (length -348- zs) -346- (length -349- ys). f -352- xs -351- zs -350- (leTrans -357- (S -358- (length -359- zs)) -356- (length -360- ys) -355- (length -361- xs) -354- zLTy -353- yLEx)))
      in MkAcc -365- NList -364- Shorter -363- xs -362- (f -366- xs))
    leq :367: (_x10 :368: Nat) -> (_x11 :369: Nat) -> Bool 
      y :370: Nat
        [leq] -372- Z -371- y = True
      x :373: Nat
        [leq] -375- (S -376- x) -374- Z = False
      x :377: Nat y :378: Nat
        [leq] -380- (S -381- x) -379- (S -382- y) = leq -384- x -383- y
    not :385: (_x12 :386: Bool) -> Bool 
      [not] -387- True = False
      [not] -388- False = True
    qel :389: (y :390: Nat) -> (x :391: Nat) -> Bool = (\y :392: Nat. (\x :393: Nat. leq -395- x -394- y))
    gt :396: (x :397: Nat) -> (y :398: Nat) -> Bool = (\x :399: Nat. (\y :400: Nat. not -401- (leq -403- y -402- x)))
    condCons :404: (_x13 :405: Bool) -> (_x14 :406: Nat) -> (_x15 :407: NList) -> NList 
      [condCons] -408- True = Cons
      [condCons] -409- False = (\x :410: Nat. (\xs :411: NList. xs))
    filter :412: (_x16 :413: (_x17 :414: Nat) -> Bool) -> (_x18 :415: NList) -> NList 
      p :416: (_x19 :417: Nat) -> Bool
        [filter] -419- p -418- Nil = Nil
      p :420: (_x20 :421: Nat) -> Bool x :422: Nat xs :423: NList
        [filter] -425- p -424- (Cons -427- x -426- xs) = condCons -430- (p -431- x) -429- x -428- (filter -433- p -432- xs)
    append :434: (_x21 :435: NList) -> (_x22 :436: NList) -> NList 
      ys :437: NList
        [append] -439- Nil -438- ys = ys
      x :440: Nat xs :441: NList ys :442: NList
        [append] -444- (Cons -446- x -445- xs) -443- ys = Cons -448- x -447- (append -450- xs -449- ys)
    postulate Id :451: (a :452: Type) -> (_x23 :453: a) -> (_x24 :454: a) -> Type
    postulate Refl :455: (a :456: Type) -> (x :457: a) -> Id -460- a -459- x -458- x
    postulate Split :461: (_x25 :462: NList) -> Type
    postulate SNil :463: Split -464- Nil
    postulate SOne :465: (x :466: Nat) -> Split -467- (Cons -469- x -468- Nil)
    postulate SMore :470: (x :471: Nat) -> (xs :472: NList) -> (y :473: Nat) -> (ys :474: NList) -> Split -475- (append -477- (Cons -479- x -478- xs) -476- (Cons -481- y -480- ys))
    pushL :482: (x :483: Nat) -> (xs :484: NList) -> (_x26 :485: Split -486- xs) -> Split -487- (Cons -489- x -488- xs) 
      x :490: Nat
        [pushL] -493- x -492- [Nil] -491- SNil = SOne -494- x
      x :495: Nat y :496: Nat
        [pushL] -499- x -498- [Cons -501- y -500- Nil] -497- (SOne -502- y) = SMore -506- x -505- Nil -504- y -503- Nil
      x :507: Nat y :508: Nat ys :509: NList z :510: Nat zs :511: NList
        [pushL] -514- x -513- [append -516- (Cons -518- y -517- ys) -515- (Cons -520- z -519- zs)] -512- (SMore -524- y -523- ys -522- z -521- zs) = SMore -528- x -527- (Cons -530- y -529- ys) -526- z -525- zs
    split :531: (xs :532: NList) -> Split -533- xs 
      [split] -534- Nil = SNil
      x :535: Nat
        [split] -536- (Cons -538- x -537- Nil) = SOne -539- x
      x :540: Nat y :541: Nat xs :542: NList
        [split] -543- (Cons -545- x -544- (Cons -547- y -546- xs)) = 
          let step :548: (counter :549: Nat) -> (x :550: Nat) -> (y :551: Nat) -> (xs :552: NList) -> Split -553- (Cons -555- x -554- (Cons -557- y -556- xs)) 
            x :558: Nat y :559: Nat xs :560: NList
              [step] -564- Z -563- x -562- y -561- xs = SMore -568- x -567- Nil -566- y -565- xs
            x :569: Nat y :570: Nat xs :571: NList
              [step] -575- (S -576- Z) -574- x -573- y -572- xs = SMore -580- x -579- Nil -578- y -577- xs
            c :581: Nat x :582: Nat y :583: Nat
              [step] -587- (S -588- (S -589- c)) -586- x -585- y -584- Nil = SMore -593- x -592- Nil -591- y -590- Nil
            c :594: Nat x :595: Nat y :596: Nat z :597: Nat xs :598: NList
              [step] -602- (S -603- (S -604- c)) -601- x -600- y -599- (Cons -606- z -605- xs) = pushL -609- x -608- (Cons -611- y -610- (Cons -613- z -612- xs)) -607- (step -617- c -616- y -615- z -614- xs)
          in step -621- (S -622- (length -623- xs)) -620- x -619- y -618- xs
    merge :624: (_x27 :625: NList) -> (_x28 :626: NList) -> NList 
      ys :627: NList
        [merge] -629- Nil -628- ys = ys
      xs :630: NList
        [merge] -632- xs -631- Nil = xs
      x :633: Nat xs :634: NList y :635: Nat ys :636: NList
        [merge] -638- (Cons -640- x -639- xs) -637- (Cons -642- y -641- ys) = 
          let f :643: (_x29 :644: Bool) -> NList 
            [f] -645- True = Cons -647- x -646- (merge -649- xs -648- (Cons -651- y -650- ys))
            [f] -652- False = Cons -654- y -653- (merge -656- (Cons -658- x -657- xs) -655- ys)
          in f -659- (leq -661- x -660- y)
    postulate MSAcc :662: (xs :663: NList) -> (_x0 :664: Split -665- xs) -> Type
    postulate MSNil :666: MSAcc -668- Nil -667- SNil
    postulate MSOne :669: (x :670: Nat) -> MSAcc -672- (Cons -674- x -673- Nil) -671- (SOne -675- x)
    postulate MSMore :676: (x :677: Nat) -> (xs :678: NList) -> (y :679: Nat) -> (ys :680: NList) -> (_x1 :681: MSAcc -683- (Cons -685- x -684- xs) -682- (split -686- (Cons -688- x -687- xs))) -> (_x2 :689: MSAcc -691- (Cons -693- y -692- ys) -690- (split -694- (Cons -696- y -695- ys))) -> MSAcc -698- (append -700- (Cons -702- x -701- xs) -699- (Cons -704- y -703- ys)) -697- (SMore -708- x -707- xs -706- y -705- ys)
    lemmaL :709: (x :710: Nat) -> (xs :711: NList) -> (y :712: Nat) -> (ys :713: NList) -> Shorter -715- (Cons -717- x -716- xs) -714- (append -719- (Cons -721- x -720- xs) -718- (Cons -723- y -722- ys)) 
      x :724: Nat y :725: Nat ys :726: NList
        [lemmaL] -730- x -729- Nil -728- y -727- ys = LES -733- 1 -732- (S -735- (length -736- ys)) -731- (LES -739- Z -738- (length -740- ys) -737- (LEZ -741- (length -742- ys)))
      x :743: Nat z :744: Nat xs :745: NList y :746: Nat ys :747: NList
        [lemmaL] -751- x -750- (Cons -753- z -752- xs) -749- y -748- ys = LES -756- (S -757- (length -758- (Cons -760- x -759- xs))) -755- (length -761- (append -763- (Cons -765- x -764- xs) -762- (Cons -767- y -766- ys))) -754- (lemmaL -771- x -770- xs -769- y -768- ys)
    lemmaR :772: (x :773: Nat) -> (xs :774: NList) -> (y :775: Nat) -> (ys :776: NList) -> Shorter -778- (Cons -780- y -779- ys) -777- (append -782- (Cons -784- x -783- xs) -781- (Cons -786- y -785- ys)) 
      x :787: Nat y :788: Nat ys :789: NList
        [lemmaR] -793- x -792- Nil -791- y -790- ys = LES -796- (S -797- (length -798- ys)) -795- (S -799- (length -800- ys)) -794- (LES -803- (length -804- ys) -802- (length -805- ys) -801- (leRefl -806- (length -807- ys)))
      x :808: Nat z :809: Nat xs :810: NList y :811: Nat ys :812: NList
        [lemmaR] -816- x -815- (Cons -818- z -817- xs) -814- y -813- ys = leS -821- (S -822- (S -823- (length -824- ys))) -820- (length -825- (append -827- (Cons -829- x -828- xs) -826- (Cons -831- y -830- ys))) -819- (lemmaR -835- x -834- xs -833- y -832- ys)
    msAcc :836: (xs :837: NList) -> (acc :838: Acc -841- NList -840- Shorter -839- xs) -> MSAcc -843- xs -842- (split -844- xs) = (\xs :845: NList. (\acc :846: Acc -849- NList -848- Shorter -847- xs. 
      let fx :850: (xs :851: NList) -> (acc :852: Acc -855- NList -854- Shorter -853- xs) -> (sxs :856: Split -857- xs) -> MSAcc -859- xs -858- sxs 
        acc :860: Acc -863- NList -862- Shorter -861- Nil
          [fx] -866- [Nil] -865- acc -864- SNil = MSNil
        x :867: Nat acc :868: Acc -871- NList -870- Shorter -869- (Cons -873- x -872- Nil)
          [fx] -876- [Cons -878- x -877- Nil] -875- acc -874- (SOne -879- x) = MSOne -880- x
        y :881: Nat ys :882: NList z :883: Nat zs :884: NList acc :885: (qs :886: NList) -> (_x3 :887: Shorter -889- qs -888- (append -891- (Cons -893- y -892- ys) -890- (Cons -895- z -894- zs))) -> Acc -898- NList -897- Shorter -896- qs
          [fx] -901- [append -903- (Cons -905- y -904- ys) -902- (Cons -907- z -906- zs)] -900- ({MkAcc} -911- [NList] -910- [Shorter] -909- [append -913- (Cons -915- y -914- ys) -912- (Cons -917- z -916- zs)] -908- acc) -899- (SMore -921- y -920- ys -919- z -918- zs) = MSMore -927- y -926- ys -925- z -924- zs -923- (msAcc -929- (Cons -931- y -930- ys) -928- (acc -933- (Cons -935- y -934- ys) -932- (lemmaL -939- y -938- ys -937- z -936- zs))) -922- (msAcc -941- (Cons -943- z -942- zs) -940- (acc -945- (Cons -947- z -946- zs) -944- (lemmaR -951- y -950- ys -949- z -948- zs)))
      in fx -954- xs -953- acc -952- (split -955- xs)))
    msort' :956: (xs :957: NList) -> (acc :958: MSAcc -960- xs -959- (split -961- xs)) -> NList = (\xs :962: NList. (\acc :963: MSAcc -965- xs -964- (split -966- xs). 
      let gx :967: (xs :968: NList) -> (sxs :969: Split -970- xs) -> (acc :971: MSAcc -973- xs -972- sxs) -> NList 
        [gx] -976- [Nil] -975- SNil -974- [MSNil] = Nil
        x :977: Nat
          [gx] -980- [Cons -982- x -981- Nil] -979- (SOne -983- x) -978- [MSOne -984- x] = Cons -986- x -985- Nil
        y :987: Nat ys :988: NList z :989: Nat zs :990: NList accL :991: MSAcc -993- (Cons -995- y -994- ys) -992- (split -996- (Cons -998- y -997- ys)) accR :999: MSAcc -1001- (Cons -1003- z -1002- zs) -1000- (split -1004- (Cons -1006- z -1005- zs))
          [gx] -1009- [append -1011- (Cons -1013- y -1012- ys) -1010- (Cons -1015- z -1014- zs)] -1008- (SMore -1019- y -1018- ys -1017- z -1016- zs) -1007- ({MSMore} -1025- [y] -1024- [ys] -1023- [z] -1022- [zs] -1021- accL -1020- accR) = merge -1027- (msort' -1029- (Cons -1031- y -1030- ys) -1028- accL) -1026- (msort' -1033- (Cons -1035- z -1034- zs) -1032- accR)
      in gx -1038- xs -1037- (split -1039- xs) -1036- acc))
    msort :1040: (xs :1041: NList) -> NList = (\xs :1042: NList. msort' -1044- xs -1043- (msAcc -1046- xs -1045- (wfShorter -1047- xs)))
    main :1048: NList = msort -1049- someList
  in main

### Constraints ###

[] -> [2,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,274,275,276,278,279,280,281,282,283,367,368,369,371,372,374,375,376,377,378,379,380,381,382,383,384,447,448,463,465,466,468,469,470,471,472,473,474,480,481,482,483,485,488,489,490,491,493,494,495,496,497,499,500,501,502,503,504,505,506,507,508,509,510,511,512,514,519,520,521,522,523,524,525,526,527,528,529,530,531,532,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,673,674,675,703,704,705,706,707,708,956,957,962,967,969,975,977,979,981,982,983,985,986,987,988,989,990,1008,1014,1015,1016,1017,1018,1019,1026,1027,1029,1030,1031,1033,1034,1035,1037,1039,1040,1041,1042,1044,1049,R]
[54,58,66,207,838,958] -> [285]
[54,63,66,838,958] -> [285]
[54,63,838,958] -> [285]
[54,958] -> [285]
[55,58,66,207,838,958] -> [286]
[55,63,66,838,958] -> [286]
[55,63,838,958] -> [286]
[55,958] -> [286]
[57,66,207,838,958] -> [7,320]
[58,66,78,207,838,958] -> [97,100,101]
[58,66,79,207,838,958] -> [98,99]
[58,66,95,207,838,958] -> [97,287,290,291]
[58,66,96,207,838,958] -> [98,288,289,292]
[58,66,97,207,838,958] -> [95]
[58,66,98,207,838,958] -> [96]
[58,66,99,207,838,958] -> [79]
[58,66,100,207,838,958] -> [78]
[58,66,207,285,838,958] -> [54,287]
[58,66,207,286,838,958] -> [55,288]
[58,66,207,287,838,958] -> [285]
[58,66,207,288,838,958] -> [286]
[58,66,207,289,838,958] -> [96]
[58,66,207,290,838,958] -> [95]
[58,66,207,838,958] -> [77,94,284,319]
[60,66,207,838,958] -> [308,318]
[62,66,838,958] -> [7,343]
[62,838,958] -> [7,365]
[62,900,958] -> [911]
[63,66,78,838,958] -> [97,100,101]
[63,66,79,838,958] -> [98,99]
[63,66,95,838,958] -> [97,287,290,291]
[63,66,96,838,958] -> [98,288,289,292]
[63,66,97,838,958] -> [95]
[63,66,98,838,958] -> [96]
[63,66,99,838,958] -> [79]
[63,66,100,838,958] -> [78]
[63,66,285,838,958] -> [54,287]
[63,66,286,838,958] -> [55,288]
[63,66,287,838,958] -> [285]
[63,66,288,838,958] -> [286]
[63,66,289,838,958] -> [96]
[63,66,290,838,958] -> [95]
[63,66,838,958] -> [77,94,284,342]
[63,78,838,958] -> [97,100,101]
[63,79,838,958] -> [98,99]
[63,95,838,958] -> [97,287,290,291]
[63,96,838,958] -> [98,288,289,292]
[63,97,838,958] -> [95]
[63,98,838,958] -> [96]
[63,99,838,958] -> [79]
[63,100,838,958] -> [78]
[63,285,838,958] -> [54,287]
[63,286,838,958] -> [55,288]
[63,287,838,958] -> [285]
[63,288,838,958] -> [286]
[63,289,838,958] -> [96]
[63,290,838,958] -> [95]
[63,838,958] -> [77,94,284,364]
[63,900,958] -> [910]
[65,66,838,958] -> [324,341]
[65,838,958] -> [298,363]
[65,900,958] -> [909]
[66,67,838,958] -> [301,344]
[66,68,838,958] -> [302,345]
[66,71,838,958] -> [305]
[66,72,838,958] -> [306]
[66,73,838,958] -> [307]
[66,74,838,958] -> [305]
[66,75,838,958] -> [306]
[66,76,838,958] -> [307]
[66,81,133,302,838,958] -> [137]
[66,81,302,838,958] -> [128,138]
[66,82,302,838,958] -> [120,125]
[66,83,302,838,958] -> [121,126]
[66,85,148,302,838,958] -> [161]
[66,85,149,302,838,958] -> [158]
[66,85,302,838,958] -> [139,164]
[66,85,330,838,958] -> [337]
[66,86,148,302,838,958] -> [160]
[66,86,149,302,838,958] -> [157]
[66,86,302,838,958] -> [141,163]
[66,86,330,838,958] -> [336]
[66,87,88,302,838,958] -> [125]
[66,87,89,302,838,958] -> [126]
[66,87,119,120,302,838,958] -> [143]
[66,87,119,121,302,838,958] -> [144]
[66,87,119,143,302,838,958] -> [120]
[66,87,119,144,302,838,958] -> [121]
[66,87,119,302,838,958] -> [142,166]
[66,87,122,123,302,838,958] -> [146]
[66,87,122,124,302,838,958] -> [147]
[66,87,122,146,302,838,958] -> [123]
[66,87,122,147,302,838,958] -> [124]
[66,87,122,302,838,958] -> [145,165]
[66,87,125,302,838,958] -> [88]
[66,87,126,302,838,958] -> [89]
[66,87,148,302,838,958] -> [159]
[66,87,149,302,838,958] -> [156]
[66,87,165,302,838,958] -> [122]
[66,87,166,302,838,958] -> [119]
[66,87,302,838,958] -> [139,140,141,162,167,168,169]
[66,87,330,838,958] -> [335]
[66,88,302,838,958] -> [143,146]
[66,88,838,958] -> [326]
[66,89,302,838,958] -> [144,147]
[66,89,838,958] -> [327]
[66,90,302,838,958] -> [120,123,125]
[66,90,838,958] -> [99]
[66,91,302,838,958] -> [121,124,126]
[66,91,838,958] -> [100]
[66,92,838,958] -> [101]
[66,99,119,302,838,958] -> [120]
[66,99,209,838,958] -> [99]
[66,99,302,838,958] -> [125]
[66,99,838,958] -> [90,99]
[66,100,119,302,838,958] -> [121]
[66,100,209,838,958] -> [100]
[66,100,302,838,958] -> [126]
[66,100,838,958] -> [91,100]
[66,101,119,302,838,958] -> [358]
[66,101,209,838,958] -> [101]
[66,101,302,838,958] -> [358]
[66,101,838,958] -> [92,101]
[66,116,302,838,958] -> [344,357,358,359]
[66,117,302,838,958] -> [324,356,360]
[66,118,302,838,958] -> [323,355,361]
[66,119,120,302,838,958] -> [99]
[66,119,121,302,838,958] -> [100]
[66,119,302,348,838,958] -> [359]
[66,119,302,349,838,958] -> [360]
[66,119,302,358,838,958] -> [101]
[66,119,302,359,838,958] -> [348]
[66,119,302,360,838,958] -> [349]
[66,119,302,838,958] -> [133,149,345,354]
[66,120,302,838,958] -> [82,90]
[66,121,302,838,958] -> [83,91]
[66,122,123,302,838,958] -> [326]
[66,122,124,302,838,958] -> [327]
[66,122,302,326,838,958] -> [123]
[66,122,302,327,838,958] -> [124]
[66,122,302,328,838,958] -> [360]
[66,122,302,329,838,958] -> [361]
[66,122,302,360,838,958] -> [328]
[66,122,302,361,838,958] -> [329]
[66,122,302,838,958] -> [132,148,325,353]
[66,123,302,838,958] -> [90,130]
[66,124,302,838,958] -> [91,131]
[66,125,302,838,958] -> [82,90,99]
[66,126,302,838,958] -> [83,91,100]
[66,129,302,838,958] -> [132]
[66,130,302,838,958] -> [123]
[66,131,302,838,958] -> [124]
[66,132,302,838,958] -> [122]
[66,133,137,302,838,958] -> [81]
[66,133,302,838,958] -> [119]
[66,137,302,838,958] -> [127,133]
[66,138,302,838,958] -> [81]
[66,142,302,838,958] -> [156]
[66,143,302,838,958] -> [88]
[66,144,302,838,958] -> [89]
[66,145,302,838,958] -> [159]
[66,146,302,838,958] -> [88]
[66,147,302,838,958] -> [89]
[66,148,159,302,838,958] -> [87]
[66,148,160,302,838,958] -> [86]
[66,148,161,302,838,958] -> [85]
[66,148,302,838,958] -> [122]
[66,149,156,302,838,958] -> [87]
[66,149,157,302,838,958] -> [86]
[66,149,158,302,838,958] -> [85]
[66,149,302,838,958] -> [119]
[66,156,302,838,958] -> [149]
[66,157,302,838,958] -> [140,149]
[66,158,302,838,958] -> [139,149]
[66,159,302,838,958] -> [148]
[66,160,302,838,958] -> [141,148]
[66,161,302,838,958] -> [140,148]
[66,162,302,838,958] -> [87]
[66,163,302,838,958] -> [86]
[66,164,302,838,958] -> [85]
[66,207,318,838,958] -> [60]
[66,207,319,838,958] -> [58]
[66,207,320,838,958] -> [57]
[66,207,838,958] -> [56,317]
[66,208,838,958] -> [308,316,321]
[66,209,291,838,958] -> [321]
[66,209,321,838,958] -> [291]
[66,209,838,958] -> [309,315]
[66,287,838,958] -> [287]
[66,288,838,958] -> [288]
[66,291,302,838,958] -> [359]
[66,291,838,958] -> [291,338,348]
[66,292,302,838,958] -> [361]
[66,292,838,958] -> [292,349]
[66,300,838,958] -> [298,366]
[66,301,838,958] -> [67,313,331,344,351]
[66,302,353,838,958] -> [122]
[66,302,354,838,958] -> [119]
[66,302,355,838,958] -> [118]
[66,302,356,838,958] -> [117]
[66,302,357,838,958] -> [116]
[66,302,358,838,958] -> [101]
[66,302,359,838,958] -> [291]
[66,302,361,838,958] -> [292]
[66,302,838,958] -> [68,80,84,92,93,115,116,117,118,134,135,136,150,151,152,153,154,155,312,330,350]
[66,305,838,958] -> [71,74,318]
[66,306,838,958] -> [72,75,319]
[66,307,838,958] -> [73,76,320]
[66,308,838,958] -> [313]
[66,309,838,958] -> [312]
[66,312,838,958] -> [302]
[66,313,838,958] -> [301]
[66,315,838,958] -> [209]
[66,316,838,958] -> [208]
[66,317,838,958] -> [207]
[66,318,838,958] -> [305]
[66,319,838,958] -> [306]
[66,320,838,958] -> [307]
[66,324,838,958] -> [331]
[66,325,838,958] -> [335]
[66,326,838,958] -> [88]
[66,327,838,958] -> [89]
[66,328,838,958] -> [338]
[66,329,838,958] -> [339]
[66,330,335,838,958] -> [87]
[66,330,336,838,958] -> [86]
[66,330,337,838,958] -> [85]
[66,330,838,958] -> [302]
[66,331,838,958] -> [301]
[66,335,838,958] -> [330]
[66,336,838,958] -> [323,330,339]
[66,337,838,958] -> [324,330,338]
[66,338,838,958] -> [291,328]
[66,339,838,958] -> [329]
[66,340,838,958] -> [66]
[66,341,838,958] -> [65]
[66,342,838,958] -> [63]
[66,343,838,958] -> [62]
[66,344,838,958] -> [67]
[66,345,838,958] -> [68]
[66,348,838,958] -> [291]
[66,349,838,958] -> [292]
[66,350,838,958] -> [302]
[66,351,838,958] -> [301]
[66,366,838,958] -> [300]
[66,838,958] -> [93,206,299,300,314,323,332,333,334,339,340,352,362]
[66,900,958] -> [908]
[67,958] -> [886]
[68,958] -> [887]
[71,958] -> [896]
[72,958] -> [897]
[73,958] -> [898]
[74,838,958] -> [295]
[74,958] -> [853]
[75,838,958] -> [296]
[75,958] -> [854]
[76,838,958] -> [297]
[76,958] -> [855]
[78,910,958] -> [97,100,101]
[79,910,958] -> [98,99]
[81,87,681,838,887,958] -> [726,741,742]
[81,87,689,838,887,958] -> [107]
[81,180,689,838,887,958] -> [183]
[81,689,838,887,958] -> [179,184]
[82,87,681,838,887,958] -> [88]
[82,87,689,838,887,958] -> [104]
[82,689,838,887,958] -> [174,176]
[83,87,681,838,887,958] -> [89]
[83,87,689,838,887,958] -> [105]
[83,689,838,887,958] -> [175,177]
[85,87,681,838,887,958] -> [739]
[85,87,689,838,887,958] -> [108,113,789,803,804]
[85,191,689,838,887,958] -> [198]
[85,681,838,887,958] -> [733,734,743,745,756,757,758,759,760]
[85,689,838,887,958] -> [186,201,789,796]
[86,87,681,838,887,958] -> [726,738,740]
[86,87,689,838,887,958] -> [108,112,789,802,805]
[86,191,689,838,887,958] -> [197]
[86,435,681,838,887,958] -> [743,745,763,764,765]
[86,436,681,838,887,958] -> [746,747,762,766,767]
[86,681,762,838,887,958] -> [436]
[86,681,763,838,887,958] -> [435]
[86,681,838,887,958] -> [434,435,436,437,438,439,440,441,442,443,444,445,446,449,450,726,732,735,736,755,761]
[86,689,838,887,958] -> [187,200,789,795]
[87,88,681,838,887,958] -> [82,90,99]
[87,88,689,838,887,958] -> [90,104,176]
[87,89,681,838,887,958] -> [83,91,100]
[87,89,689,838,887,958] -> [91,105,177]
[87,90,681,838,887,958] -> [88]
[87,90,689,838,887,958] -> [88,104]
[87,91,681,838,887,958] -> [89]
[87,91,689,838,887,958] -> [89,105]
[87,92,681,838,887,958] -> [734]
[87,93,681,838,887,958] -> [735]
[87,99,681,838,887,958] -> [88]
[87,100,681,838,887,958] -> [89]
[87,101,681,838,887,958] -> [757]
[87,103,689,838,887,958] -> [789,806,807]
[87,104,689,838,887,958] -> [82,88,90]
[87,105,689,838,887,958] -> [83,89,91]
[87,107,689,838,887,958] -> [81]
[87,111,689,838,887,958] -> [87]
[87,112,689,838,887,958] -> [86]
[87,113,689,838,887,958] -> [85]
[87,173,174,689,838,887,958] -> [189]
[87,173,175,689,838,887,958] -> [190]
[87,173,189,689,838,887,958] -> [174]
[87,173,190,689,838,887,958] -> [175]
[87,173,689,838,887,958] -> [188,203]
[87,176,689,838,887,958] -> [88]
[87,177,689,838,887,958] -> [89]
[87,191,689,838,887,958] -> [196]
[87,203,689,838,887,958] -> [173]
[87,449,681,838,887,958] -> [449]
[87,450,681,838,887,958] -> [450]
[87,681,710,838,887,958] -> [743,771]
[87,681,712,838,887,958] -> [746,769]
[87,681,713,838,887,958] -> [747,768]
[87,681,722,838,887,958] -> [766]
[87,681,723,838,887,958] -> [767]
[87,681,734,838,887,958] -> [92]
[87,681,735,838,887,958] -> [93]
[87,681,736,838,887,958] -> [740]
[87,681,737,838,887,958] -> [87]
[87,681,738,838,887,958] -> [86]
[87,681,739,838,887,958] -> [85]
[87,681,740,838,887,958] -> [736,742]
[87,681,741,838,887,958] -> [81]
[87,681,742,838,887,958] -> [740]
[87,681,757,838,887,958] -> [101]
[87,681,766,838,887,958] -> [722]
[87,681,767,838,887,958] -> [723]
[87,681,768,838,887,958] -> [713]
[87,681,769,838,887,958] -> [712]
[87,681,771,838,887,958] -> [710]
[87,681,838,887,958] -> [80,731,737,745,754,770]
[87,689,801,838,887,958] -> [87]
[87,689,802,838,887,958] -> [86]
[87,689,803,838,887,958] -> [85]
[87,689,804,838,887,958] -> [807]
[87,689,805,838,887,958] -> [807]
[87,689,806,838,887,958] -> [103]
[87,689,807,838,887,958] -> [804,805]
[87,689,838,887,958] -> [102,103,106,108,109,110,111,114,186,187,199,204,205,794,801,804,805]
[88,689,838,887,958] -> [189]
[89,689,838,887,958] -> [190]
[90,681,838,887,958] -> [99]
[90,689,838,887,958] -> [99,174,176]
[91,681,838,887,958] -> [100]
[91,689,838,887,958] -> [100,175,177]
[92,681,838,887,958] -> [101]
[95,910,958] -> [97,287,290,291]
[96,910,958] -> [98,288,289,292]
[97,910,958] -> [95]
[98,910,958] -> [96]
[99,173,689,838,887,958] -> [174]
[99,681,838,887,958] -> [90,99]
[99,681,838,958] -> [99]
[99,689,838,887,958] -> [90,99,176]
[99,689,838,958] -> [99]
[99,838,958] -> [99]
[99,852,958] -> [99]
[99,910,958] -> [79]
[99,958] -> [99]
[100,173,689,838,887,958] -> [175]
[100,681,838,887,958] -> [91,100]
[100,681,838,958] -> [100]
[100,689,838,887,958] -> [91,100,177]
[100,689,838,958] -> [100]
[100,838,958] -> [100]
[100,852,958] -> [100]
[100,910,958] -> [78]
[100,958] -> [100]
[101,681,838,887,958] -> [92,101]
[101,681,838,958] -> [101]
[101,689,838,887,958] -> [101]
[101,689,838,958] -> [101]
[101,838,958] -> [101]
[101,852,958] -> [101]
[101,958] -> [101]
[173,174,689,838,887,958] -> [99]
[173,175,689,838,887,958] -> [100]
[173,689,838,887,958] -> [180,191,819,832,833,834,835]
[174,689,838,887,958] -> [82,90]
[175,689,838,887,958] -> [83,91]
[176,689,838,887,958] -> [82,90,99]
[177,689,838,887,958] -> [83,91,100]
[180,183,689,838,887,958] -> [81]
[180,689,838,887,958] -> [173]
[183,689,838,887,958] -> [179,180]
[184,689,838,887,958] -> [81]
[188,689,838,887,958] -> [196]
[189,689,838,887,958] -> [88]
[190,689,838,887,958] -> [89]
[191,196,689,838,887,958] -> [87]
[191,197,689,838,887,958] -> [86]
[191,198,689,838,887,958] -> [85]
[191,689,838,887,958] -> [173]
[196,689,838,887,958] -> [191]
[197,689,838,887,958] -> [187,191]
[198,689,838,887,958] -> [186,191]
[199,689,838,887,958] -> [87]
[200,689,838,887,958] -> [86]
[201,689,838,887,958] -> [85]
[285,910,958] -> [287]
[285,958] -> [54]
[286,910,958] -> [288]
[286,958] -> [55]
[287,681,838,958] -> [287]
[287,689,838,958] -> [287]
[287,838,958] -> [287]
[287,852,958] -> [287]
[287,910,958] -> [285]
[287,958] -> [287]
[288,681,838,958] -> [288]
[288,689,838,958] -> [288]
[288,838,958] -> [288]
[288,852,958] -> [288]
[288,910,958] -> [286]
[288,958] -> [288]
[289,910,958] -> [96]
[290,910,958] -> [95]
[291,681,838,958] -> [291]
[291,689,838,958] -> [291]
[291,838,958] -> [291]
[291,852,958] -> [291]
[291,958] -> [291]
[292,681,838,958] -> [292]
[292,689,838,958] -> [292]
[292,838,958] -> [292]
[292,852,958] -> [292]
[292,958] -> [292]
[294,838,958] -> [298,1047]
[295,838,958] -> [74,839]
[296,838,958] -> [75,840]
[297,838,958] -> [76,841]
[298,838,958] -> [294]
[362,838,958] -> [66]
[363,838,958] -> [65]
[364,838,958] -> [63]
[365,838,958] -> [62]
[435,513] -> [516,517,518]
[435,513,958] -> [516,517,518]
[435,901,958] -> [881,882,903,904,905]
[435,909,958] -> [881,882,913,914,915]
[435,1009] -> [1011,1012,1013]
[436,513] -> [515]
[436,513,958] -> [515]
[436,901,958] -> [883,884,902]
[436,909,958] -> [883,884,912]
[436,1009] -> [1010]
[449] -> [449]
[449,681,838,887,958] -> [449]
[449,689,838,887,958] -> [449]
[449,958] -> [449]
[450] -> [450]
[450,681,838,887,958] -> [450]
[450,689,838,887,958] -> [450]
[450,958] -> [450]
[464] -> [486,533,970]
[464,958] -> [486,533,857]
[467] -> [486,487,533,970]
[467,958] -> [486,487,533,857]
[475] -> [486,487,553,970]
[475,958] -> [486,487,553,857]
[484] -> [492,498,513,608]
[484,958] -> [492,498,513,608]
[486] -> [464,467,475,553]
[486,958] -> [464,467,475,553]
[487] -> [467,475,553]
[487,958] -> [467,475,553]
[492] -> [484]
[492,958] -> [484]
[498] -> [484]
[498,958] -> [484]
[513] -> [434,435,436,437,438,439,440,441,442,443,444,445,446,449,450,484]
[513,515] -> [436]
[513,515,958] -> [436]
[513,516] -> [435]
[513,516,958] -> [435]
[513,958] -> [434,435,436,437,438,439,440,441,442,443,444,445,446,449,450,484]
[533] -> [464,467,553,970]
[533,958] -> [464,467,553,857]
[553] -> [475,486,487,533]
[553,958] -> [475,486,487,533]
[608] -> [484]
[608,958] -> [484]
[667] -> [972]
[667,958] -> [858]
[668] -> [973]
[668,958] -> [859]
[670,958] -> [867,880]
[670,978] -> [984]
[671] -> [972]
[671,958] -> [858]
[672] -> [973]
[672,958] -> [859]
[677,958] -> [881,927]
[677,1007] -> [1025]
[678,958] -> [882,926]
[678,1007] -> [1024]
[679,958] -> [883,925]
[679,1007] -> [1023]
[680,958] -> [884,924]
[680,1007] -> [1022]
[681,682,958] -> [842]
[681,683,958] -> [843]
[681,684,958] -> [930]
[681,685,958] -> [931]
[681,687,958] -> [930]
[681,688,958] -> [931]
[681,710,838,887,958] -> [730,751,881,939]
[681,711,838,887,958] -> [882,938]
[681,712,838,887,958] -> [728,749,883,937]
[681,713,838,887,958] -> [727,748,884,936]
[681,722,838,887,958] -> [766]
[681,723,838,887,958] -> [767]
[681,724,838,887,958] -> [730]
[681,725,838,887,958] -> [728]
[681,726,838,887,958] -> [727]
[681,727,838,887,958] -> [713]
[681,728,838,887,958] -> [712]
[681,730,838,887,958] -> [710]
[681,731,838,887,958] -> [87]
[681,732,838,887,958] -> [86]
[681,733,838,887,958] -> [85]
[681,743,838,887,958] -> [751]
[681,746,838,887,958] -> [749]
[681,747,838,887,958] -> [748]
[681,748,838,887,958] -> [713]
[681,749,838,887,958] -> [712]
[681,751,838,887,958] -> [710]
[681,754,838,887,958] -> [87]
[681,755,838,887,958] -> [86]
[681,756,838,887,958] -> [85]
[681,766,838,887,958] -> [722]
[681,767,838,887,958] -> [723]
[681,838,839,958] -> [896]
[681,838,840,958] -> [897]
[681,838,841,958] -> [898]
[681,838,886,958] -> [881,882,933,934,935]
[681,838,887,936,958] -> [713]
[681,838,887,937,958] -> [712]
[681,838,887,938,958] -> [711]
[681,838,887,939,958] -> [710]
[681,838,887,958] -> [84,93,709,711,722,723,729,734,735,736,750,752,753,757,932]
[681,838,896,958] -> [839]
[681,838,897,958] -> [840]
[681,838,898,958] -> [841]
[681,838,930,958] -> [934]
[681,838,931,958] -> [935]
[681,838,932,958] -> [887]
[681,838,933,958] -> [886]
[681,838,934,958] -> [930]
[681,838,935,958] -> [931]
[681,838,958] -> [885,928]
[681,842,958] -> [682]
[681,843,958] -> [683]
[681,928,958] -> [838]
[681,930,958] -> [684,687]
[681,931,958] -> [685,688]
[681,958] -> [686,836,881,882,923,929,930,931]
[681,1007] -> [1021]
[682] -> [992]
[683] -> [993]
[684] -> [994]
[685] -> [995]
[686] -> [996]
[687] -> [997]
[688] -> [998]
[689,690,958] -> [842]
[689,691,958] -> [843]
[689,692,958] -> [942]
[689,693,958] -> [943]
[689,695,958] -> [942]
[689,696,958] -> [943]
[689,773,838,887,958] -> [881,951]
[689,774,838,887,958] -> [882,950]
[689,775,838,887,958] -> [883,949]
[689,776,838,887,958] -> [884,948]
[689,794,838,887,958] -> [87]
[689,795,838,887,958] -> [86]
[689,796,838,887,958] -> [85]
[689,819,838,887,958] -> [173]
[689,838,839,958] -> [896]
[689,838,840,958] -> [897]
[689,838,841,958] -> [898]
[689,838,886,958] -> [883,884,945,946,947]
[689,838,887,948,958] -> [776]
[689,838,887,949,958] -> [775]
[689,838,887,950,958] -> [774]
[689,838,887,951,958] -> [773]
[689,838,887,958] -> [80,84,92,93,101,170,171,172,178,181,182,185,192,193,194,195,202,434,435,436,437,438,439,440,441,442,443,444,445,446,449,450,772,773,774,775,776,785,786,790,791,792,793,797,798,799,800,808,810,811,812,813,814,815,816,817,818,820,821,822,823,824,825,826,827,828,829,830,831,944]
[689,838,896,958] -> [839]
[689,838,897,958] -> [840]
[689,838,898,958] -> [841]
[689,838,942,958] -> [946]
[689,838,943,958] -> [947]
[689,838,944,958] -> [887]
[689,838,945,958] -> [886]
[689,838,946,958] -> [942]
[689,838,947,958] -> [943]
[689,838,958] -> [885,940]
[689,842,958] -> [690]
[689,843,958] -> [691]
[689,940,958] -> [838]
[689,942,958] -> [692,695]
[689,943,958] -> [693,696]
[689,958] -> [694,836,883,884,922,941,942,943]
[689,1007] -> [1020]
[690] -> [1000]
[691] -> [1001]
[692] -> [1002]
[693] -> [1003]
[694] -> [1004]
[695] -> [1005]
[696] -> [1006]
[697] -> [972]
[697,958] -> [858]
[698] -> [973]
[698,958] -> [859]
[837,958] -> [1046]
[838,839,958] -> [295]
[838,840,958] -> [296]
[838,841,958] -> [297]
[838,958] -> [61,293,846,1045]
[838,958,1047] -> [294]
[839,958] -> [847]
[840,958] -> [848]
[841,958] -> [849]
[842,958] -> [858,959]
[843,958] -> [859,960]
[844,958] -> [961]
[846,958] -> [838]
[847,852,958] -> [853]
[847,958] -> [839]
[848,852,958] -> [854]
[848,958] -> [840]
[849,852,958] -> [855]
[849,958] -> [841]
[851,958] -> [866,876,901,954]
[852,853,958] -> [847]
[852,854,958] -> [848]
[852,855,958] -> [849]
[852,958] -> [846,865,875,900,953]
[853,958] -> [74,861,869]
[854,958] -> [75,862,870]
[855,958] -> [76,863,871]
[857,958] -> [464,467,475,533]
[858,958] -> [667,671,697,842]
[859,958] -> [668,672,698,843]
[860,958] -> [865]
[861,958] -> [853]
[862,958] -> [854]
[863,958] -> [855]
[865,958] -> [852]
[866,958] -> [851]
[867,958] -> [879]
[868,958] -> [875]
[869,958] -> [853]
[870,958] -> [854]
[871,958] -> [855]
[875,958] -> [852]
[876,958] -> [851,867]
[880,958] -> [670]
[881,958] -> [921]
[882,958] -> [920]
[883,958] -> [919]
[884,958] -> [918]
[885,958] -> [908]
[886,958] -> [67]
[887,958] -> [68]
[896,958] -> [71]
[897,958] -> [72]
[898,958] -> [73]
[900,908,958] -> [66]
[900,909,958] -> [65]
[900,910,958] -> [63]
[900,911,958] -> [62]
[900,958] -> [852]
[901,902,958] -> [436]
[901,903,958] -> [435]
[901,958] -> [434,435,436,437,438,439,440,441,442,443,444,445,446,449,450,851]
[908,958] -> [900]
[909,912,958] -> [436]
[909,913,958] -> [435]
[909,958] -> [434,435,436,437,438,439,440,441,442,443,444,445,446,449,450,900]
[910,958] -> [77,94,284,900]
[911,958] -> [7,900]
[922,958] -> [689]
[923,958] -> [681]
[924,958] -> [680]
[925,958] -> [679]
[926,958] -> [678]
[927,958] -> [677]
[953,958] -> [852]
[954,958] -> [851]
[958] -> [666,669,676,836,837,844,845,850,856,864,872,873,874,877,878,879,894,895,899,906,907,916,917,918,919,920,921,952,955,963,991,994,995,997,998,999,1002,1003,1005,1006,1028,1032,1043]
[958,959] -> [842,992,1000]
[958,960] -> [843,993,1001]
[958,961] -> [844,996,1004]
[958,992] -> [959]
[958,993] -> [960]
[958,996] -> [961]
[958,1000] -> [959]
[958,1001] -> [960]
[958,1004] -> [961]
[958,1045] -> [838]
[958,1046] -> [837]
[959] -> [964]
[960] -> [965]
[961] -> [966]
[963] -> [958]
[964] -> [959]
[964,971] -> [972]
[965] -> [960]
[965,971] -> [973]
[966] -> [961]
[968] -> [976,980,1009,1038]
[970] -> [464,467,475,533]
[971] -> [963,966,974,978,1007,1036]
[971,972] -> [964]
[971,973] -> [965]
[972] -> [667,671,697]
[973] -> [668,672,698]
[974] -> [666,971]
[976] -> [968]
[978] -> [669,971]
[978,984] -> [670]
[980] -> [968]
[991] -> [1021]
[992] -> [682]
[993] -> [683]
[994] -> [684]
[995] -> [685]
[996] -> [686]
[997] -> [687]
[998] -> [688]
[999] -> [1020]
[1000] -> [690]
[1001] -> [691]
[1002] -> [692]
[1003] -> [693]
[1004] -> [694]
[1005] -> [695]
[1006] -> [696]
[1007] -> [971]
[1007,1020] -> [689]
[1007,1021] -> [681]
[1007,1022] -> [680]
[1007,1023] -> [679]
[1007,1024] -> [678]
[1007,1025] -> [677]
[1009] -> [434,435,436,437,438,439,440,441,442,443,444,445,446,449,450,968]
[1009,1010] -> [436]
[1009,1011] -> [435]
[1020] -> [1007]
[1021] -> [1007]
[1022] -> [1007]
[1023] -> [1007]
[1024] -> [1007]
[1025] -> [1007]
[1028] -> [958]
[1032] -> [958]
[1036] -> [971]
[1038] -> [968]
[1043] -> [958]
[R] -> [1048]

### Solution ###

[2,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,274,275,276,278,279,280,281,282,283,367,368,369,371,372,374,375,376,377,378,379,380,381,382,383,384,447,448,463,465,466,468,469,470,471,472,473,474,480,481,482,483,485,488,489,490,491,493,494,495,496,497,499,500,501,502,503,504,505,506,507,508,509,510,511,512,514,519,520,521,522,523,524,525,526,527,528,529,530,531,532,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,673,674,675,703,704,705,706,707,708,956,957,962,967,969,975,977,979,981,982,983,985,986,987,988,989,990,1008,1014,1015,1016,1017,1018,1019,1026,1027,1029,1030,1031,1033,1034,1035,1037,1039,1040,1041,1042,1044,1048,1049,R]

### Annotated ###

  let
    postulate Nat :E: Type
    postulate Z :R: Nat
    postulate S :R: (n :R: Nat) -> Nat
    postulate Bool :E: Type
    postulate True :R: Bool
    postulate False :R: Bool
    postulate NList :E: Type
    postulate Nil :R: NList
    postulate Cons :R: (x :R: Nat) -> (xs :R: NList) -> NList
    someList :R: NList = Cons -R- 9 -R- (Cons -R- 5 -R- (Cons -R- 1 -R- (Cons -R- 3 -R- (Cons -R- 1 -R- (Cons -R- 5 -R- (Cons -R- 2 -R- Nil))))))
    Rel2 :E: (a :E: Type) -> Type = (\a :E: Type. (x :E: a) -> (y :E: a) -> Type)
    postulate Acc :E: (a :E: Type) -> (lt :E: Rel2 -E- a) -> (x :E: a) -> Type
    postulate MkAcc :E: (a :E: Type) -> (lt :E: Rel2 -E- a) -> (x :E: a) -> (acc :E: (y :E: a) -> (pf :E: lt -E- y -E- x) -> Acc -E- a -E- lt -E- y) -> Acc -E- a -E- lt -E- x
    postulate LE :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Type
    postulate LEZ :E: (n :E: Nat) -> LE -E- Z -E- n
    postulate LES :E: (m :E: Nat) -> (n :E: Nat) -> (_x2 :E: LE -E- m -E- n) -> LE -E- (S -E- m) -E- (S -E- n)
    LT :E: (x :E: Nat) -> (y :E: Nat) -> Type = (\x :E: Nat. (\y :E: Nat. LE -E- (S -E- x) -E- y))
    leRefl :E: (x :E: Nat) -> LE -E- x -E- x 
      [leRefl] -E- Z = LEZ -E- Z
      x :E: Nat
        [leRefl] -E- (S -E- x) = LES -E- x -E- x -E- (leRefl -E- x)
    leTrans :E: (x :E: Nat) -> (y :E: Nat) -> (z :E: Nat) -> (_x3 :E: LE -E- x -E- y) -> (_x4 :E: LE -E- y -E- z) -> LE -E- x -E- z 
      y :E: Nat z :E: Nat pf :E: LE -E- y -E- z
        [leTrans] -E- Z -E- y -E- z -E- ({LEZ} -E- [y]) -E- pf = LEZ -E- z
      x :E: Nat y :E: Nat z :E: Nat xLEy :E: LE -E- x -E- y yLEz :E: LE -E- y -E- z
        [leTrans] -E- (S -E- x) -E- (S -E- y) -E- (S -E- z) -E- ({LES} -E- [x] -E- [y] -E- xLEy) -E- ({LES} -E- [y] -E- [z] -E- yLEz) = LES -E- x -E- z -E- (leTrans -E- x -E- y -E- z -E- xLEy -E- yLEz)
    leS :E: (x :E: Nat) -> (y :E: Nat) -> (_x5 :E: LE -E- x -E- y) -> LE -E- x -E- (S -E- y) 
      y :E: Nat
        [leS] -E- Z -E- y -E- ({LEZ} -E- [y]) = LEZ -E- (S -E- y)
      x :E: Nat y :E: Nat xLEy :E: LE -E- x -E- y
        [leS] -E- (S -E- x) -E- (S -E- y) -E- ({LES} -E- [x] -E- [y] -E- xLEy) = LES -E- x -E- (S -E- y) -E- (leS -E- x -E- y -E- xLEy)
    lemmaLTZ :E: (a :E: Type) -> (n :E: Nat) -> (_x6 :E: LT -E- n -E- Z) -> a 
    wfLT :E: (x :E: Nat) -> Acc -E- Nat -E- LT -E- x = (\x :E: Nat. 
      let f :E: (x :E: Nat) -> (y :E: Nat) -> (_x7 :E: LT -E- y -E- x) -> Acc -E- Nat -E- LT -E- y 
        y :E: Nat pf :E: LT -E- y -E- Z
          [f] -E- Z -E- y -E- pf = lemmaLTZ -E- (Acc -E- Nat -E- LT -E- y) -E- y -E- pf
        x :E: Nat y :E: Nat yLEx :E: LE -E- y -E- x
          [f] -E- (S -E- x) -E- y -E- ({LES} -E- [y] -E- [x] -E- yLEx) = MkAcc -E- Nat -E- LT -E- y -E- (\z :E: Nat. (\zLTy :E: LT -E- z -E- y. f -E- x -E- z -E- (leTrans -E- (S -E- z) -E- y -E- x -E- zLTy -E- yLEx)))
      in MkAcc -E- Nat -E- LT -E- x -E- (f -E- x))
    length :R: (_x8 :R: NList) -> Nat 
      [length] -R- Nil = Z
      x :E: Nat xs :R: NList
        [length] -R- (Cons -R- x -R- xs) = S -R- (length -R- xs)
    Shorter :E: (xs :E: NList) -> (ys :E: NList) -> Type = (\xs :E: NList. (\ys :E: NList. LT -E- (length -E- xs) -E- (length -E- ys)))
    wfShorter :E: (xs :E: NList) -> Acc -E- NList -E- Shorter -E- xs = (\xs :E: NList. 
      let f :E: (xs :E: NList) -> (ys :E: NList) -> (_x9 :E: Shorter -E- ys -E- xs) -> Acc -E- NList -E- Shorter -E- ys 
        ys :E: NList pf :E: Shorter -E- ys -E- Nil
          [f] -E- Nil -E- ys -E- pf = lemmaLTZ -E- (Acc -E- NList -E- Shorter -E- ys) -E- (length -E- ys) -E- pf
        x :E: Nat xs :E: NList ys :E: NList yLEx :E: LE -E- (length -E- ys) -E- (length -E- xs)
          [f] -E- (Cons -E- x -E- xs) -E- ys -E- ({LES} -E- [length -E- ys] -E- [length -E- xs] -E- yLEx) = MkAcc -E- NList -E- Shorter -E- ys -E- (\zs :E: NList. (\zLTy :E: LT -E- (length -E- zs) -E- (length -E- ys). f -E- xs -E- zs -E- (leTrans -E- (S -E- (length -E- zs)) -E- (length -E- ys) -E- (length -E- xs) -E- zLTy -E- yLEx)))
      in MkAcc -E- NList -E- Shorter -E- xs -E- (f -E- xs))
    leq :R: (_x10 :R: Nat) -> (_x11 :R: Nat) -> Bool 
      y :E: Nat
        [leq] -R- Z -R- y = True
      x :E: Nat
        [leq] -R- (S -R- x) -R- Z = False
      x :R: Nat y :R: Nat
        [leq] -R- (S -R- x) -R- (S -R- y) = leq -R- x -R- y
    not :E: (_x12 :E: Bool) -> Bool 
      [not] -E- True = False
      [not] -E- False = True
    qel :E: (y :E: Nat) -> (x :E: Nat) -> Bool = (\y :E: Nat. (\x :E: Nat. leq -E- x -E- y))
    gt :E: (x :E: Nat) -> (y :E: Nat) -> Bool = (\x :E: Nat. (\y :E: Nat. not -E- (leq -E- y -E- x)))
    condCons :E: (_x13 :E: Bool) -> (_x14 :E: Nat) -> (_x15 :E: NList) -> NList 
      [condCons] -E- True = Cons
      [condCons] -E- False = (\x :E: Nat. (\xs :E: NList. xs))
    filter :E: (_x16 :E: (_x17 :E: Nat) -> Bool) -> (_x18 :E: NList) -> NList 
      p :E: (_x19 :E: Nat) -> Bool
        [filter] -E- p -E- Nil = Nil
      p :E: (_x20 :E: Nat) -> Bool x :E: Nat xs :E: NList
        [filter] -E- p -E- (Cons -E- x -E- xs) = condCons -E- (p -E- x) -E- x -E- (filter -E- p -E- xs)
    append :E: (_x21 :E: NList) -> (_x22 :E: NList) -> NList 
      ys :E: NList
        [append] -E- Nil -E- ys = ys
      x :E: Nat xs :E: NList ys :E: NList
        [append] -E- (Cons -E- x -E- xs) -E- ys = Cons -R- x -R- (append -E- xs -E- ys)
    postulate Id :E: (a :E: Type) -> (_x23 :E: a) -> (_x24 :E: a) -> Type
    postulate Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    postulate Split :E: (_x25 :E: NList) -> Type
    postulate SNil :R: Split -E- Nil
    postulate SOne :R: (x :R: Nat) -> Split -E- (Cons -R- x -R- Nil)
    postulate SMore :R: (x :R: Nat) -> (xs :R: NList) -> (y :R: Nat) -> (ys :R: NList) -> Split -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -R- y -R- ys))
    pushL :R: (x :R: Nat) -> (xs :E: NList) -> (_x26 :R: Split -E- xs) -> Split -E- (Cons -R- x -R- xs) 
      x :R: Nat
        [pushL] -R- x -E- [Nil] -R- SNil = SOne -R- x
      x :R: Nat y :R: Nat
        [pushL] -R- x -E- [Cons -R- y -R- Nil] -R- (SOne -R- y) = SMore -R- x -R- Nil -R- y -R- Nil
      x :R: Nat y :R: Nat ys :R: NList z :R: Nat zs :R: NList
        [pushL] -R- x -E- [append -E- (Cons -E- y -E- ys) -E- (Cons -R- z -R- zs)] -R- (SMore -R- y -R- ys -R- z -R- zs) = SMore -R- x -R- (Cons -R- y -R- ys) -R- z -R- zs
    split :R: (xs :R: NList) -> Split -E- xs 
      [split] -R- Nil = SNil
      x :R: Nat
        [split] -R- (Cons -R- x -R- Nil) = SOne -R- x
      x :R: Nat y :R: Nat xs :R: NList
        [split] -R- (Cons -R- x -R- (Cons -R- y -R- xs)) = 
          let step :R: (counter :R: Nat) -> (x :R: Nat) -> (y :R: Nat) -> (xs :R: NList) -> Split -E- (Cons -R- x -R- (Cons -R- y -R- xs)) 
            x :R: Nat y :R: Nat xs :R: NList
              [step] -R- Z -R- x -R- y -R- xs = SMore -R- x -R- Nil -R- y -R- xs
            x :R: Nat y :R: Nat xs :R: NList
              [step] -R- (S -R- Z) -R- x -R- y -R- xs = SMore -R- x -R- Nil -R- y -R- xs
            c :E: Nat x :R: Nat y :R: Nat
              [step] -R- (S -R- (S -R- c)) -R- x -R- y -R- Nil = SMore -R- x -R- Nil -R- y -R- Nil
            c :R: Nat x :R: Nat y :R: Nat z :R: Nat xs :R: NList
              [step] -R- (S -R- (S -R- c)) -R- x -R- y -R- (Cons -R- z -R- xs) = pushL -R- x -E- (Cons -R- y -R- (Cons -R- z -R- xs)) -R- (step -R- c -R- y -R- z -R- xs)
          in step -R- (S -R- (length -R- xs)) -R- x -R- y -R- xs
    merge :R: (_x27 :R: NList) -> (_x28 :R: NList) -> NList 
      ys :R: NList
        [merge] -R- Nil -R- ys = ys
      xs :R: NList
        [merge] -R- xs -R- Nil = xs
      x :R: Nat xs :R: NList y :R: Nat ys :R: NList
        [merge] -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = 
          let f :R: (_x29 :R: Bool) -> NList 
            [f] -R- True = Cons -R- x -R- (merge -R- xs -R- (Cons -R- y -R- ys))
            [f] -R- False = Cons -R- y -R- (merge -R- (Cons -R- x -R- xs) -R- ys)
          in f -R- (leq -R- x -R- y)
    postulate MSAcc :E: (xs :E: NList) -> (_x0 :E: Split -E- xs) -> Type
    postulate MSNil :E: MSAcc -E- Nil -E- SNil
    postulate MSOne :E: (x :E: Nat) -> MSAcc -E- (Cons -R- x -R- Nil) -E- (SOne -R- x)
    postulate MSMore :E: (x :E: Nat) -> (xs :E: NList) -> (y :E: Nat) -> (ys :E: NList) -> (_x1 :E: MSAcc -E- (Cons -E- x -E- xs) -E- (split -E- (Cons -E- x -E- xs))) -> (_x2 :E: MSAcc -E- (Cons -E- y -E- ys) -E- (split -E- (Cons -E- y -E- ys))) -> MSAcc -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -R- y -R- ys)) -E- (SMore -R- x -R- xs -R- y -R- ys)
    lemmaL :E: (x :E: Nat) -> (xs :E: NList) -> (y :E: Nat) -> (ys :E: NList) -> Shorter -E- (Cons -E- x -E- xs) -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys)) 
      x :E: Nat y :E: Nat ys :E: NList
        [lemmaL] -E- x -E- Nil -E- y -E- ys = LES -E- 1 -E- (S -E- (length -E- ys)) -E- (LES -E- Z -E- (length -E- ys) -E- (LEZ -E- (length -E- ys)))
      x :E: Nat z :E: Nat xs :E: NList y :E: Nat ys :E: NList
        [lemmaL] -E- x -E- (Cons -E- z -E- xs) -E- y -E- ys = LES -E- (S -E- (length -E- (Cons -E- x -E- xs))) -E- (length -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys))) -E- (lemmaL -E- x -E- xs -E- y -E- ys)
    lemmaR :E: (x :E: Nat) -> (xs :E: NList) -> (y :E: Nat) -> (ys :E: NList) -> Shorter -E- (Cons -E- y -E- ys) -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys)) 
      x :E: Nat y :E: Nat ys :E: NList
        [lemmaR] -E- x -E- Nil -E- y -E- ys = LES -E- (S -E- (length -E- ys)) -E- (S -E- (length -E- ys)) -E- (LES -E- (length -E- ys) -E- (length -E- ys) -E- (leRefl -E- (length -E- ys)))
      x :E: Nat z :E: Nat xs :E: NList y :E: Nat ys :E: NList
        [lemmaR] -E- x -E- (Cons -E- z -E- xs) -E- y -E- ys = leS -E- (S -E- (S -E- (length -E- ys))) -E- (length -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys))) -E- (lemmaR -E- x -E- xs -E- y -E- ys)
    msAcc :E: (xs :E: NList) -> (acc :E: Acc -E- NList -E- Shorter -E- xs) -> MSAcc -E- xs -E- (split -E- xs) = (\xs :E: NList. (\acc :E: Acc -E- NList -E- Shorter -E- xs. 
      let fx :E: (xs :E: NList) -> (acc :E: Acc -E- NList -E- Shorter -E- xs) -> (sxs :E: Split -E- xs) -> MSAcc -E- xs -E- sxs 
        acc :E: Acc -E- NList -E- Shorter -E- Nil
          [fx] -E- [Nil] -E- acc -E- SNil = MSNil
        x :E: Nat acc :E: Acc -E- NList -E- Shorter -E- (Cons -E- x -E- Nil)
          [fx] -E- [Cons -E- x -E- Nil] -E- acc -E- (SOne -E- x) = MSOne -E- x
        y :E: Nat ys :E: NList z :E: Nat zs :E: NList acc :E: (qs :E: NList) -> (_x3 :E: Shorter -E- qs -E- (append -E- (Cons -E- y -E- ys) -E- (Cons -E- z -E- zs))) -> Acc -E- NList -E- Shorter -E- qs
          [fx] -E- [append -E- (Cons -E- y -E- ys) -E- (Cons -E- z -E- zs)] -E- ({MkAcc} -E- [NList] -E- [Shorter] -E- [append -E- (Cons -E- y -E- ys) -E- (Cons -E- z -E- zs)] -E- acc) -E- (SMore -E- y -E- ys -E- z -E- zs) = MSMore -E- y -E- ys -E- z -E- zs -E- (msAcc -E- (Cons -E- y -E- ys) -E- (acc -E- (Cons -E- y -E- ys) -E- (lemmaL -E- y -E- ys -E- z -E- zs))) -E- (msAcc -E- (Cons -E- z -E- zs) -E- (acc -E- (Cons -E- z -E- zs) -E- (lemmaR -E- y -E- ys -E- z -E- zs)))
      in fx -E- xs -E- acc -E- (split -E- xs)))
    msort' :R: (xs :R: NList) -> (acc :E: MSAcc -E- xs -E- (split -E- xs)) -> NList = (\xs :R: NList. (\acc :E: MSAcc -E- xs -E- (split -E- xs). 
      let gx :R: (xs :E: NList) -> (sxs :R: Split -E- xs) -> (acc :E: MSAcc -E- xs -E- sxs) -> NList 
        [gx] -E- [Nil] -R- SNil -E- [MSNil] = Nil
        x :R: Nat
          [gx] -E- [Cons -R- x -R- Nil] -R- (SOne -R- x) -E- [MSOne -E- x] = Cons -R- x -R- Nil
        y :R: Nat ys :R: NList z :R: Nat zs :R: NList accL :E: MSAcc -E- (Cons -E- y -E- ys) -E- (split -E- (Cons -E- y -E- ys)) accR :E: MSAcc -E- (Cons -E- z -E- zs) -E- (split -E- (Cons -E- z -E- zs))
          [gx] -E- [append -E- (Cons -E- y -E- ys) -E- (Cons -R- z -R- zs)] -R- (SMore -R- y -R- ys -R- z -R- zs) -E- ({MSMore} -E- [y] -E- [ys] -E- [z] -E- [zs] -E- accL -E- accR) = merge -R- (msort' -R- (Cons -R- y -R- ys) -E- accL) -R- (msort' -R- (Cons -R- z -R- zs) -E- accR)
      in gx -E- xs -R- (split -R- xs) -E- acc))
    msort :R: (xs :R: NList) -> NList = (\xs :R: NList. msort' -R- xs -E- (msAcc -E- xs -E- (wfShorter -E- xs)))
    main :R: NList = msort -R- someList
  in main

### Specialised ###

  let
    postulate Nat :E: Type
    postulate Z :R: Nat
    postulate S :R: (n :R: Nat) -> Nat
    postulate Bool :E: Type
    postulate True :R: Bool
    postulate False :R: Bool
    postulate NList :E: Type
    postulate Nil :R: NList
    postulate Cons :R: (x :R: Nat) -> (xs :R: NList) -> NList
    someList :R: NList = Cons -R- 9 -R- (Cons -R- 5 -R- (Cons -R- 1 -R- (Cons -R- 3 -R- (Cons -R- 1 -R- (Cons -R- 5 -R- (Cons -R- 2 -R- Nil))))))
    Rel2 :E: (a :E: Type) -> Type = (\a :E: Type. (x :E: a) -> (y :E: a) -> Type)
    postulate Acc :E: (a :E: Type) -> (lt :E: Rel2 -E- a) -> (x :E: a) -> Type
    postulate MkAcc :E: (a :E: Type) -> (lt :E: Rel2 -E- a) -> (x :E: a) -> (acc :E: (y :E: a) -> (pf :E: lt -E- y -E- x) -> Acc -E- a -E- lt -E- y) -> Acc -E- a -E- lt -E- x
    postulate LE :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Type
    postulate LEZ :E: (n :E: Nat) -> LE -E- Z -E- n
    postulate LES :E: (m :E: Nat) -> (n :E: Nat) -> (_x2 :E: LE -E- m -E- n) -> LE -E- (S -E- m) -E- (S -E- n)
    LT :E: (x :E: Nat) -> (y :E: Nat) -> Type = (\x :E: Nat. (\y :E: Nat. LE -E- (S -E- x) -E- y))
    leRefl :E: (x :E: Nat) -> LE -E- x -E- x 
      [leRefl] -E- Z = LEZ -E- Z
      x :E: Nat
        [leRefl] -E- (S -E- x) = LES -E- x -E- x -E- (leRefl -E- x)
    leTrans :E: (x :E: Nat) -> (y :E: Nat) -> (z :E: Nat) -> (_x3 :E: LE -E- x -E- y) -> (_x4 :E: LE -E- y -E- z) -> LE -E- x -E- z 
      y :E: Nat z :E: Nat pf :E: LE -E- y -E- z
        [leTrans] -E- Z -E- y -E- z -E- ({LEZ} -E- [y]) -E- pf = LEZ -E- z
      x :E: Nat y :E: Nat z :E: Nat xLEy :E: LE -E- x -E- y yLEz :E: LE -E- y -E- z
        [leTrans] -E- (S -E- x) -E- (S -E- y) -E- (S -E- z) -E- ({LES} -E- [x] -E- [y] -E- xLEy) -E- ({LES} -E- [y] -E- [z] -E- yLEz) = LES -E- x -E- z -E- (leTrans -E- x -E- y -E- z -E- xLEy -E- yLEz)
    leS :E: (x :E: Nat) -> (y :E: Nat) -> (_x5 :E: LE -E- x -E- y) -> LE -E- x -E- (S -E- y) 
      y :E: Nat
        [leS] -E- Z -E- y -E- ({LEZ} -E- [y]) = LEZ -E- (S -E- y)
      x :E: Nat y :E: Nat xLEy :E: LE -E- x -E- y
        [leS] -E- (S -E- x) -E- (S -E- y) -E- ({LES} -E- [x] -E- [y] -E- xLEy) = LES -E- x -E- (S -E- y) -E- (leS -E- x -E- y -E- xLEy)
    lemmaLTZ :E: (a :E: Type) -> (n :E: Nat) -> (_x6 :E: LT -E- n -E- Z) -> a 
    wfLT :E: (x :E: Nat) -> Acc -E- Nat -E- LT -E- x = (\x :E: Nat. 
      let f :E: (x :E: Nat) -> (y :E: Nat) -> (_x7 :E: LT -E- y -E- x) -> Acc -E- Nat -E- LT -E- y 
        y :E: Nat pf :E: LT -E- y -E- Z
          [f] -E- Z -E- y -E- pf = lemmaLTZ -E- (Acc -E- Nat -E- LT -E- y) -E- y -E- pf
        x :E: Nat y :E: Nat yLEx :E: LE -E- y -E- x
          [f] -E- (S -E- x) -E- y -E- ({LES} -E- [y] -E- [x] -E- yLEx) = MkAcc -E- Nat -E- LT -E- y -E- (\z :E: Nat. (\zLTy :E: LT -E- z -E- y. f -E- x -E- z -E- (leTrans -E- (S -E- z) -E- y -E- x -E- zLTy -E- yLEx)))
      in MkAcc -E- Nat -E- LT -E- x -E- (f -E- x))
    length :R: (_x8 :R: NList) -> Nat 
      [length] -R- Nil = Z
      x :E: Nat xs :R: NList
        [length] -R- (Cons -R- x -R- xs) = S -R- (length -R- xs)
    Shorter :E: (xs :E: NList) -> (ys :E: NList) -> Type = (\xs :E: NList. (\ys :E: NList. LT -E- (length -E- xs) -E- (length -E- ys)))
    wfShorter :E: (xs :E: NList) -> Acc -E- NList -E- Shorter -E- xs = (\xs :E: NList. 
      let f :E: (xs :E: NList) -> (ys :E: NList) -> (_x9 :E: Shorter -E- ys -E- xs) -> Acc -E- NList -E- Shorter -E- ys 
        ys :E: NList pf :E: Shorter -E- ys -E- Nil
          [f] -E- Nil -E- ys -E- pf = lemmaLTZ -E- (Acc -E- NList -E- Shorter -E- ys) -E- (length -E- ys) -E- pf
        x :E: Nat xs :E: NList ys :E: NList yLEx :E: LE -E- (length -E- ys) -E- (length -E- xs)
          [f] -E- (Cons -E- x -E- xs) -E- ys -E- ({LES} -E- [length -E- ys] -E- [length -E- xs] -E- yLEx) = MkAcc -E- NList -E- Shorter -E- ys -E- (\zs :E: NList. (\zLTy :E: LT -E- (length -E- zs) -E- (length -E- ys). f -E- xs -E- zs -E- (leTrans -E- (S -E- (length -E- zs)) -E- (length -E- ys) -E- (length -E- xs) -E- zLTy -E- yLEx)))
      in MkAcc -E- NList -E- Shorter -E- xs -E- (f -E- xs))
    leq :R: (_x10 :R: Nat) -> (_x11 :R: Nat) -> Bool 
      y :E: Nat
        [leq] -R- Z -R- y = True
      x :E: Nat
        [leq] -R- (S -R- x) -R- Z = False
      x :R: Nat y :R: Nat
        [leq] -R- (S -R- x) -R- (S -R- y) = leq -R- x -R- y
    not :E: (_x12 :E: Bool) -> Bool 
      [not] -E- True = False
      [not] -E- False = True
    qel :E: (y :E: Nat) -> (x :E: Nat) -> Bool = (\y :E: Nat. (\x :E: Nat. leq -E- x -E- y))
    gt :E: (x :E: Nat) -> (y :E: Nat) -> Bool = (\x :E: Nat. (\y :E: Nat. not -E- (leq -E- y -E- x)))
    condCons :E: (_x13 :E: Bool) -> (_x14 :E: Nat) -> (_x15 :E: NList) -> NList 
      [condCons] -E- True = Cons
      [condCons] -E- False = (\x :E: Nat. (\xs :E: NList. xs))
    filter :E: (_x16 :E: (_x17 :E: Nat) -> Bool) -> (_x18 :E: NList) -> NList 
      p :E: (_x19 :E: Nat) -> Bool
        [filter] -E- p -E- Nil = Nil
      p :E: (_x20 :E: Nat) -> Bool x :E: Nat xs :E: NList
        [filter] -E- p -E- (Cons -E- x -E- xs) = condCons -E- (p -E- x) -E- x -E- (filter -E- p -E- xs)
    append :E: (_x21 :E: NList) -> (_x22 :E: NList) -> NList 
      ys :E: NList
        [append] -E- Nil -E- ys = ys
      x :E: Nat xs :E: NList ys :E: NList
        [append] -E- (Cons -E- x -E- xs) -E- ys = Cons -R- x -R- (append -E- xs -E- ys)
    postulate Id :E: (a :E: Type) -> (_x23 :E: a) -> (_x24 :E: a) -> Type
    postulate Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    postulate Split :E: (_x25 :E: NList) -> Type
    postulate SNil :R: Split -E- Nil
    postulate SOne :R: (x :R: Nat) -> Split -E- (Cons -R- x -R- Nil)
    postulate SMore :R: (x :R: Nat) -> (xs :R: NList) -> (y :R: Nat) -> (ys :R: NList) -> Split -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -R- y -R- ys))
    pushL :R: (x :R: Nat) -> (xs :E: NList) -> (_x26 :R: Split -E- xs) -> Split -E- (Cons -R- x -R- xs) 
      x :R: Nat
        [pushL] -R- x -E- [Nil] -R- SNil = SOne -R- x
      x :R: Nat y :R: Nat
        [pushL] -R- x -E- [Cons -R- y -R- Nil] -R- (SOne -R- y) = SMore -R- x -R- Nil -R- y -R- Nil
      x :R: Nat y :R: Nat ys :R: NList z :R: Nat zs :R: NList
        [pushL] -R- x -E- [append -E- (Cons -E- y -E- ys) -E- (Cons -R- z -R- zs)] -R- (SMore -R- y -R- ys -R- z -R- zs) = SMore -R- x -R- (Cons -R- y -R- ys) -R- z -R- zs
    split :R: (xs :R: NList) -> Split -E- xs 
      [split] -R- Nil = SNil
      x :R: Nat
        [split] -R- (Cons -R- x -R- Nil) = SOne -R- x
      x :R: Nat y :R: Nat xs :R: NList
        [split] -R- (Cons -R- x -R- (Cons -R- y -R- xs)) = 
          let step :R: (counter :R: Nat) -> (x :R: Nat) -> (y :R: Nat) -> (xs :R: NList) -> Split -E- (Cons -R- x -R- (Cons -R- y -R- xs)) 
            x :R: Nat y :R: Nat xs :R: NList
              [step] -R- Z -R- x -R- y -R- xs = SMore -R- x -R- Nil -R- y -R- xs
            x :R: Nat y :R: Nat xs :R: NList
              [step] -R- (S -R- Z) -R- x -R- y -R- xs = SMore -R- x -R- Nil -R- y -R- xs
            c :E: Nat x :R: Nat y :R: Nat
              [step] -R- (S -R- (S -R- c)) -R- x -R- y -R- Nil = SMore -R- x -R- Nil -R- y -R- Nil
            c :R: Nat x :R: Nat y :R: Nat z :R: Nat xs :R: NList
              [step] -R- (S -R- (S -R- c)) -R- x -R- y -R- (Cons -R- z -R- xs) = pushL -R- x -E- (Cons -R- y -R- (Cons -R- z -R- xs)) -R- (step -R- c -R- y -R- z -R- xs)
          in step -R- (S -R- (length -R- xs)) -R- x -R- y -R- xs
    merge :R: (_x27 :R: NList) -> (_x28 :R: NList) -> NList 
      ys :R: NList
        [merge] -R- Nil -R- ys = ys
      xs :R: NList
        [merge] -R- xs -R- Nil = xs
      x :R: Nat xs :R: NList y :R: Nat ys :R: NList
        [merge] -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = 
          let f :R: (_x29 :R: Bool) -> NList 
            [f] -R- True = Cons -R- x -R- (merge -R- xs -R- (Cons -R- y -R- ys))
            [f] -R- False = Cons -R- y -R- (merge -R- (Cons -R- x -R- xs) -R- ys)
          in f -R- (leq -R- x -R- y)
    postulate MSAcc :E: (xs :E: NList) -> (_x0 :E: Split -E- xs) -> Type
    postulate MSNil :E: MSAcc -E- Nil -E- SNil
    postulate MSOne :E: (x :E: Nat) -> MSAcc -E- (Cons -R- x -R- Nil) -E- (SOne -R- x)
    postulate MSMore :E: (x :E: Nat) -> (xs :E: NList) -> (y :E: Nat) -> (ys :E: NList) -> (_x1 :E: MSAcc -E- (Cons -E- x -E- xs) -E- (split -E- (Cons -E- x -E- xs))) -> (_x2 :E: MSAcc -E- (Cons -E- y -E- ys) -E- (split -E- (Cons -E- y -E- ys))) -> MSAcc -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -R- y -R- ys)) -E- (SMore -R- x -R- xs -R- y -R- ys)
    lemmaL :E: (x :E: Nat) -> (xs :E: NList) -> (y :E: Nat) -> (ys :E: NList) -> Shorter -E- (Cons -E- x -E- xs) -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys)) 
      x :E: Nat y :E: Nat ys :E: NList
        [lemmaL] -E- x -E- Nil -E- y -E- ys = LES -E- 1 -E- (S -E- (length -E- ys)) -E- (LES -E- Z -E- (length -E- ys) -E- (LEZ -E- (length -E- ys)))
      x :E: Nat z :E: Nat xs :E: NList y :E: Nat ys :E: NList
        [lemmaL] -E- x -E- (Cons -E- z -E- xs) -E- y -E- ys = LES -E- (S -E- (length -E- (Cons -E- x -E- xs))) -E- (length -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys))) -E- (lemmaL -E- x -E- xs -E- y -E- ys)
    lemmaR :E: (x :E: Nat) -> (xs :E: NList) -> (y :E: Nat) -> (ys :E: NList) -> Shorter -E- (Cons -E- y -E- ys) -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys)) 
      x :E: Nat y :E: Nat ys :E: NList
        [lemmaR] -E- x -E- Nil -E- y -E- ys = LES -E- (S -E- (length -E- ys)) -E- (S -E- (length -E- ys)) -E- (LES -E- (length -E- ys) -E- (length -E- ys) -E- (leRefl -E- (length -E- ys)))
      x :E: Nat z :E: Nat xs :E: NList y :E: Nat ys :E: NList
        [lemmaR] -E- x -E- (Cons -E- z -E- xs) -E- y -E- ys = leS -E- (S -E- (S -E- (length -E- ys))) -E- (length -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys))) -E- (lemmaR -E- x -E- xs -E- y -E- ys)
    msAcc :E: (xs :E: NList) -> (acc :E: Acc -E- NList -E- Shorter -E- xs) -> MSAcc -E- xs -E- (split -E- xs) = (\xs :E: NList. (\acc :E: Acc -E- NList -E- Shorter -E- xs. 
      let fx :E: (xs :E: NList) -> (acc :E: Acc -E- NList -E- Shorter -E- xs) -> (sxs :E: Split -E- xs) -> MSAcc -E- xs -E- sxs 
        acc :E: Acc -E- NList -E- Shorter -E- Nil
          [fx] -E- [Nil] -E- acc -E- SNil = MSNil
        x :E: Nat acc :E: Acc -E- NList -E- Shorter -E- (Cons -E- x -E- Nil)
          [fx] -E- [Cons -E- x -E- Nil] -E- acc -E- (SOne -E- x) = MSOne -E- x
        y :E: Nat ys :E: NList z :E: Nat zs :E: NList acc :E: (qs :E: NList) -> (_x3 :E: Shorter -E- qs -E- (append -E- (Cons -E- y -E- ys) -E- (Cons -E- z -E- zs))) -> Acc -E- NList -E- Shorter -E- qs
          [fx] -E- [append -E- (Cons -E- y -E- ys) -E- (Cons -E- z -E- zs)] -E- ({MkAcc} -E- [NList] -E- [Shorter] -E- [append -E- (Cons -E- y -E- ys) -E- (Cons -E- z -E- zs)] -E- acc) -E- (SMore -E- y -E- ys -E- z -E- zs) = MSMore -E- y -E- ys -E- z -E- zs -E- (msAcc -E- (Cons -E- y -E- ys) -E- (acc -E- (Cons -E- y -E- ys) -E- (lemmaL -E- y -E- ys -E- z -E- zs))) -E- (msAcc -E- (Cons -E- z -E- zs) -E- (acc -E- (Cons -E- z -E- zs) -E- (lemmaR -E- y -E- ys -E- z -E- zs)))
      in fx -E- xs -E- acc -E- (split -E- xs)))
    msort' :R: (xs :R: NList) -> (acc :E: MSAcc -E- xs -E- (split -E- xs)) -> NList = (\xs :R: NList. (\acc :E: MSAcc -E- xs -E- (split -E- xs). 
      let gx :R: (xs :E: NList) -> (sxs :R: Split -E- xs) -> (acc :E: MSAcc -E- xs -E- sxs) -> NList 
        [gx] -E- [Nil] -R- SNil -E- [MSNil] = Nil
        x :R: Nat
          [gx] -E- [Cons -R- x -R- Nil] -R- (SOne -R- x) -E- [MSOne -E- x] = Cons -R- x -R- Nil
        y :R: Nat ys :R: NList z :R: Nat zs :R: NList accL :E: MSAcc -E- (Cons -E- y -E- ys) -E- (split -E- (Cons -E- y -E- ys)) accR :E: MSAcc -E- (Cons -E- z -E- zs) -E- (split -E- (Cons -E- z -E- zs))
          [gx] -E- [append -E- (Cons -E- y -E- ys) -E- (Cons -R- z -R- zs)] -R- (SMore -R- y -R- ys -R- z -R- zs) -E- ({MSMore} -E- [y] -E- [ys] -E- [z] -E- [zs] -E- accL -E- accR) = merge -R- (msort' -R- (Cons -R- y -R- ys) -E- accL) -R- (msort' -R- (Cons -R- z -R- zs) -E- accR)
      in gx -E- xs -R- (split -R- xs) -E- acc))
    msort :R: (xs :R: NList) -> NList = (\xs :R: NList. msort' -R- xs -E- (msAcc -E- xs -E- (wfShorter -E- xs)))
    main :R: NList = msort -R- someList
  in main

### Final annotation ###

  let
    postulate Nat :E: Type
    postulate Z :R: Nat
    postulate S :R: (n :R: Nat) -> Nat
    postulate Bool :E: Type
    postulate True :R: Bool
    postulate False :R: Bool
    postulate NList :E: Type
    postulate Nil :R: NList
    postulate Cons :R: (x :R: Nat) -> (xs :R: NList) -> NList
    someList :R: NList = Cons -R- 9 -R- (Cons -R- 5 -R- (Cons -R- 1 -R- (Cons -R- 3 -R- (Cons -R- 1 -R- (Cons -R- 5 -R- (Cons -R- 2 -R- Nil))))))
    Rel2 :E: (a :E: Type) -> Type = (\a :E: Type. (x :E: a) -> (y :E: a) -> Type)
    postulate Acc :E: (a :E: Type) -> (lt :E: Rel2 -E- a) -> (x :E: a) -> Type
    postulate MkAcc :E: (a :E: Type) -> (lt :E: Rel2 -E- a) -> (x :E: a) -> (acc :E: (y :E: a) -> (pf :E: lt -E- y -E- x) -> Acc -E- a -E- lt -E- y) -> Acc -E- a -E- lt -E- x
    postulate LE :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Type
    postulate LEZ :E: (n :E: Nat) -> LE -E- Z -E- n
    postulate LES :E: (m :E: Nat) -> (n :E: Nat) -> (_x2 :E: LE -E- m -E- n) -> LE -E- (S -E- m) -E- (S -E- n)
    LT :E: (x :E: Nat) -> (y :E: Nat) -> Type = (\x :E: Nat. (\y :E: Nat. LE -E- (S -E- x) -E- y))
    leRefl :E: (x :E: Nat) -> LE -E- x -E- x 
      [leRefl] -E- Z = LEZ -E- Z
      x :E: Nat
        [leRefl] -E- (S -E- x) = LES -E- x -E- x -E- (leRefl -E- x)
    leTrans :E: (x :E: Nat) -> (y :E: Nat) -> (z :E: Nat) -> (_x3 :E: LE -E- x -E- y) -> (_x4 :E: LE -E- y -E- z) -> LE -E- x -E- z 
      y :E: Nat z :E: Nat pf :E: LE -E- y -E- z
        [leTrans] -E- Z -E- y -E- z -E- ({LEZ} -E- [y]) -E- pf = LEZ -E- z
      x :E: Nat y :E: Nat z :E: Nat xLEy :E: LE -E- x -E- y yLEz :E: LE -E- y -E- z
        [leTrans] -E- (S -E- x) -E- (S -E- y) -E- (S -E- z) -E- ({LES} -E- [x] -E- [y] -E- xLEy) -E- ({LES} -E- [y] -E- [z] -E- yLEz) = LES -E- x -E- z -E- (leTrans -E- x -E- y -E- z -E- xLEy -E- yLEz)
    leS :E: (x :E: Nat) -> (y :E: Nat) -> (_x5 :E: LE -E- x -E- y) -> LE -E- x -E- (S -E- y) 
      y :E: Nat
        [leS] -E- Z -E- y -E- ({LEZ} -E- [y]) = LEZ -E- (S -E- y)
      x :E: Nat y :E: Nat xLEy :E: LE -E- x -E- y
        [leS] -E- (S -E- x) -E- (S -E- y) -E- ({LES} -E- [x] -E- [y] -E- xLEy) = LES -E- x -E- (S -E- y) -E- (leS -E- x -E- y -E- xLEy)
    lemmaLTZ :E: (a :E: Type) -> (n :E: Nat) -> (_x6 :E: LT -E- n -E- Z) -> a 
    wfLT :E: (x :E: Nat) -> Acc -E- Nat -E- LT -E- x = (\x :E: Nat. 
      let f :E: (x :E: Nat) -> (y :E: Nat) -> (_x7 :E: LT -E- y -E- x) -> Acc -E- Nat -E- LT -E- y 
        y :E: Nat pf :E: LT -E- y -E- Z
          [f] -E- Z -E- y -E- pf = lemmaLTZ -E- (Acc -E- Nat -E- LT -E- y) -E- y -E- pf
        x :E: Nat y :E: Nat yLEx :E: LE -E- y -E- x
          [f] -E- (S -E- x) -E- y -E- ({LES} -E- [y] -E- [x] -E- yLEx) = MkAcc -E- Nat -E- LT -E- y -E- (\z :E: Nat. (\zLTy :E: LT -E- z -E- y. f -E- x -E- z -E- (leTrans -E- (S -E- z) -E- y -E- x -E- zLTy -E- yLEx)))
      in MkAcc -E- Nat -E- LT -E- x -E- (f -E- x))
    length :R: (_x8 :R: NList) -> Nat 
      [length] -R- Nil = Z
      x :E: Nat xs :R: NList
        [length] -R- (Cons -R- x -R- xs) = S -R- (length -R- xs)
    Shorter :E: (xs :E: NList) -> (ys :E: NList) -> Type = (\xs :E: NList. (\ys :E: NList. LT -E- (length -E- xs) -E- (length -E- ys)))
    wfShorter :E: (xs :E: NList) -> Acc -E- NList -E- Shorter -E- xs = (\xs :E: NList. 
      let f :E: (xs :E: NList) -> (ys :E: NList) -> (_x9 :E: Shorter -E- ys -E- xs) -> Acc -E- NList -E- Shorter -E- ys 
        ys :E: NList pf :E: Shorter -E- ys -E- Nil
          [f] -E- Nil -E- ys -E- pf = lemmaLTZ -E- (Acc -E- NList -E- Shorter -E- ys) -E- (length -E- ys) -E- pf
        x :E: Nat xs :E: NList ys :E: NList yLEx :E: LE -E- (length -E- ys) -E- (length -E- xs)
          [f] -E- (Cons -E- x -E- xs) -E- ys -E- ({LES} -E- [length -E- ys] -E- [length -E- xs] -E- yLEx) = MkAcc -E- NList -E- Shorter -E- ys -E- (\zs :E: NList. (\zLTy :E: LT -E- (length -E- zs) -E- (length -E- ys). f -E- xs -E- zs -E- (leTrans -E- (S -E- (length -E- zs)) -E- (length -E- ys) -E- (length -E- xs) -E- zLTy -E- yLEx)))
      in MkAcc -E- NList -E- Shorter -E- xs -E- (f -E- xs))
    leq :R: (_x10 :R: Nat) -> (_x11 :R: Nat) -> Bool 
      y :E: Nat
        [leq] -R- Z -R- y = True
      x :E: Nat
        [leq] -R- (S -R- x) -R- Z = False
      x :R: Nat y :R: Nat
        [leq] -R- (S -R- x) -R- (S -R- y) = leq -R- x -R- y
    not :E: (_x12 :E: Bool) -> Bool 
      [not] -E- True = False
      [not] -E- False = True
    qel :E: (y :E: Nat) -> (x :E: Nat) -> Bool = (\y :E: Nat. (\x :E: Nat. leq -E- x -E- y))
    gt :E: (x :E: Nat) -> (y :E: Nat) -> Bool = (\x :E: Nat. (\y :E: Nat. not -E- (leq -E- y -E- x)))
    condCons :E: (_x13 :E: Bool) -> (_x14 :E: Nat) -> (_x15 :E: NList) -> NList 
      [condCons] -E- True = Cons
      [condCons] -E- False = (\x :E: Nat. (\xs :E: NList. xs))
    filter :E: (_x16 :E: (_x17 :E: Nat) -> Bool) -> (_x18 :E: NList) -> NList 
      p :E: (_x19 :E: Nat) -> Bool
        [filter] -E- p -E- Nil = Nil
      p :E: (_x20 :E: Nat) -> Bool x :E: Nat xs :E: NList
        [filter] -E- p -E- (Cons -E- x -E- xs) = condCons -E- (p -E- x) -E- x -E- (filter -E- p -E- xs)
    append :E: (_x21 :E: NList) -> (_x22 :E: NList) -> NList 
      ys :E: NList
        [append] -E- Nil -E- ys = ys
      x :E: Nat xs :E: NList ys :E: NList
        [append] -E- (Cons -E- x -E- xs) -E- ys = Cons -R- x -R- (append -E- xs -E- ys)
    postulate Id :E: (a :E: Type) -> (_x23 :E: a) -> (_x24 :E: a) -> Type
    postulate Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    postulate Split :E: (_x25 :E: NList) -> Type
    postulate SNil :R: Split -E- Nil
    postulate SOne :R: (x :R: Nat) -> Split -E- (Cons -R- x -R- Nil)
    postulate SMore :R: (x :R: Nat) -> (xs :R: NList) -> (y :R: Nat) -> (ys :R: NList) -> Split -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -R- y -R- ys))
    pushL :R: (x :R: Nat) -> (xs :E: NList) -> (_x26 :R: Split -E- xs) -> Split -E- (Cons -R- x -R- xs) 
      x :R: Nat
        [pushL] -R- x -E- [Nil] -R- SNil = SOne -R- x
      x :R: Nat y :R: Nat
        [pushL] -R- x -E- [Cons -R- y -R- Nil] -R- (SOne -R- y) = SMore -R- x -R- Nil -R- y -R- Nil
      x :R: Nat y :R: Nat ys :R: NList z :R: Nat zs :R: NList
        [pushL] -R- x -E- [append -E- (Cons -E- y -E- ys) -E- (Cons -R- z -R- zs)] -R- (SMore -R- y -R- ys -R- z -R- zs) = SMore -R- x -R- (Cons -R- y -R- ys) -R- z -R- zs
    split :R: (xs :R: NList) -> Split -E- xs 
      [split] -R- Nil = SNil
      x :R: Nat
        [split] -R- (Cons -R- x -R- Nil) = SOne -R- x
      x :R: Nat y :R: Nat xs :R: NList
        [split] -R- (Cons -R- x -R- (Cons -R- y -R- xs)) = 
          let step :R: (counter :R: Nat) -> (x :R: Nat) -> (y :R: Nat) -> (xs :R: NList) -> Split -E- (Cons -R- x -R- (Cons -R- y -R- xs)) 
            x :R: Nat y :R: Nat xs :R: NList
              [step] -R- Z -R- x -R- y -R- xs = SMore -R- x -R- Nil -R- y -R- xs
            x :R: Nat y :R: Nat xs :R: NList
              [step] -R- (S -R- Z) -R- x -R- y -R- xs = SMore -R- x -R- Nil -R- y -R- xs
            c :E: Nat x :R: Nat y :R: Nat
              [step] -R- (S -R- (S -R- c)) -R- x -R- y -R- Nil = SMore -R- x -R- Nil -R- y -R- Nil
            c :R: Nat x :R: Nat y :R: Nat z :R: Nat xs :R: NList
              [step] -R- (S -R- (S -R- c)) -R- x -R- y -R- (Cons -R- z -R- xs) = pushL -R- x -E- (Cons -R- y -R- (Cons -R- z -R- xs)) -R- (step -R- c -R- y -R- z -R- xs)
          in step -R- (S -R- (length -R- xs)) -R- x -R- y -R- xs
    merge :R: (_x27 :R: NList) -> (_x28 :R: NList) -> NList 
      ys :R: NList
        [merge] -R- Nil -R- ys = ys
      xs :R: NList
        [merge] -R- xs -R- Nil = xs
      x :R: Nat xs :R: NList y :R: Nat ys :R: NList
        [merge] -R- (Cons -R- x -R- xs) -R- (Cons -R- y -R- ys) = 
          let f :R: (_x29 :R: Bool) -> NList 
            [f] -R- True = Cons -R- x -R- (merge -R- xs -R- (Cons -R- y -R- ys))
            [f] -R- False = Cons -R- y -R- (merge -R- (Cons -R- x -R- xs) -R- ys)
          in f -R- (leq -R- x -R- y)
    postulate MSAcc :E: (xs :E: NList) -> (_x0 :E: Split -E- xs) -> Type
    postulate MSNil :E: MSAcc -E- Nil -E- SNil
    postulate MSOne :E: (x :E: Nat) -> MSAcc -E- (Cons -R- x -R- Nil) -E- (SOne -R- x)
    postulate MSMore :E: (x :E: Nat) -> (xs :E: NList) -> (y :E: Nat) -> (ys :E: NList) -> (_x1 :E: MSAcc -E- (Cons -E- x -E- xs) -E- (split -E- (Cons -E- x -E- xs))) -> (_x2 :E: MSAcc -E- (Cons -E- y -E- ys) -E- (split -E- (Cons -E- y -E- ys))) -> MSAcc -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -R- y -R- ys)) -E- (SMore -R- x -R- xs -R- y -R- ys)
    lemmaL :E: (x :E: Nat) -> (xs :E: NList) -> (y :E: Nat) -> (ys :E: NList) -> Shorter -E- (Cons -E- x -E- xs) -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys)) 
      x :E: Nat y :E: Nat ys :E: NList
        [lemmaL] -E- x -E- Nil -E- y -E- ys = LES -E- 1 -E- (S -E- (length -E- ys)) -E- (LES -E- Z -E- (length -E- ys) -E- (LEZ -E- (length -E- ys)))
      x :E: Nat z :E: Nat xs :E: NList y :E: Nat ys :E: NList
        [lemmaL] -E- x -E- (Cons -E- z -E- xs) -E- y -E- ys = LES -E- (S -E- (length -E- (Cons -E- x -E- xs))) -E- (length -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys))) -E- (lemmaL -E- x -E- xs -E- y -E- ys)
    lemmaR :E: (x :E: Nat) -> (xs :E: NList) -> (y :E: Nat) -> (ys :E: NList) -> Shorter -E- (Cons -E- y -E- ys) -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys)) 
      x :E: Nat y :E: Nat ys :E: NList
        [lemmaR] -E- x -E- Nil -E- y -E- ys = LES -E- (S -E- (length -E- ys)) -E- (S -E- (length -E- ys)) -E- (LES -E- (length -E- ys) -E- (length -E- ys) -E- (leRefl -E- (length -E- ys)))
      x :E: Nat z :E: Nat xs :E: NList y :E: Nat ys :E: NList
        [lemmaR] -E- x -E- (Cons -E- z -E- xs) -E- y -E- ys = leS -E- (S -E- (S -E- (length -E- ys))) -E- (length -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys))) -E- (lemmaR -E- x -E- xs -E- y -E- ys)
    msAcc :E: (xs :E: NList) -> (acc :E: Acc -E- NList -E- Shorter -E- xs) -> MSAcc -E- xs -E- (split -E- xs) = (\xs :E: NList. (\acc :E: Acc -E- NList -E- Shorter -E- xs. 
      let fx :E: (xs :E: NList) -> (acc :E: Acc -E- NList -E- Shorter -E- xs) -> (sxs :E: Split -E- xs) -> MSAcc -E- xs -E- sxs 
        acc :E: Acc -E- NList -E- Shorter -E- Nil
          [fx] -E- [Nil] -E- acc -E- SNil = MSNil
        x :E: Nat acc :E: Acc -E- NList -E- Shorter -E- (Cons -E- x -E- Nil)
          [fx] -E- [Cons -E- x -E- Nil] -E- acc -E- (SOne -E- x) = MSOne -E- x
        y :E: Nat ys :E: NList z :E: Nat zs :E: NList acc :E: (qs :E: NList) -> (_x3 :E: Shorter -E- qs -E- (append -E- (Cons -E- y -E- ys) -E- (Cons -E- z -E- zs))) -> Acc -E- NList -E- Shorter -E- qs
          [fx] -E- [append -E- (Cons -E- y -E- ys) -E- (Cons -E- z -E- zs)] -E- ({MkAcc} -E- [NList] -E- [Shorter] -E- [append -E- (Cons -E- y -E- ys) -E- (Cons -E- z -E- zs)] -E- acc) -E- (SMore -E- y -E- ys -E- z -E- zs) = MSMore -E- y -E- ys -E- z -E- zs -E- (msAcc -E- (Cons -E- y -E- ys) -E- (acc -E- (Cons -E- y -E- ys) -E- (lemmaL -E- y -E- ys -E- z -E- zs))) -E- (msAcc -E- (Cons -E- z -E- zs) -E- (acc -E- (Cons -E- z -E- zs) -E- (lemmaR -E- y -E- ys -E- z -E- zs)))
      in fx -E- xs -E- acc -E- (split -E- xs)))
    msort' :R: (xs :R: NList) -> (acc :E: MSAcc -E- xs -E- (split -E- xs)) -> NList = (\xs :R: NList. (\acc :E: MSAcc -E- xs -E- (split -E- xs). 
      let gx :R: (xs :E: NList) -> (sxs :R: Split -E- xs) -> (acc :E: MSAcc -E- xs -E- sxs) -> NList 
        [gx] -E- [Nil] -R- SNil -E- [MSNil] = Nil
        x :R: Nat
          [gx] -E- [Cons -R- x -R- Nil] -R- (SOne -R- x) -E- [MSOne -E- x] = Cons -R- x -R- Nil
        y :R: Nat ys :R: NList z :R: Nat zs :R: NList accL :E: MSAcc -E- (Cons -E- y -E- ys) -E- (split -E- (Cons -E- y -E- ys)) accR :E: MSAcc -E- (Cons -E- z -E- zs) -E- (split -E- (Cons -E- z -E- zs))
          [gx] -E- [append -E- (Cons -E- y -E- ys) -E- (Cons -R- z -R- zs)] -R- (SMore -R- y -R- ys -R- z -R- zs) -E- ({MSMore} -E- [y] -E- [ys] -E- [z] -E- [zs] -E- accL -E- accR) = merge -R- (msort' -R- (Cons -R- y -R- ys) -E- accL) -R- (msort' -R- (Cons -R- z -R- zs) -E- accR)
      in gx -E- xs -R- (split -R- xs) -E- acc))
    msort :R: (xs :R: NList) -> NList = (\xs :R: NList. msort' -R- xs -E- (msAcc -E- xs -E- (wfShorter -E- xs)))
    main :R: NList = msort -R- someList
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    postulate Z : Nat
    postulate S : (n) -> Nat
    postulate True : Bool
    postulate False : Bool
    postulate Nil : NList
    postulate Cons : (x) -> (xs) -> NList
    someList = Cons 9 (Cons 5 (Cons 1 (Cons 3 (Cons 1 (Cons 5 (Cons 2 Nil))))))
    length 
      [_] Nil = Z
      [_] (Cons _ xs) = S (length xs)
    leq 
      [_] Z _ = True
      [_] (S _) Z = False
      [_] (S x) (S y) = leq x y
    postulate SNil : Split
    postulate SOne : (x) -> Split
    postulate SMore : (x) -> (xs) -> (y) -> (ys) -> Split
    pushL 
      [_] x SNil = SOne x
      [_] x (SOne y) = SMore x Nil y Nil
      [_] x (SMore y ys z zs) = SMore x (Cons y ys) z zs
    split 
      [_] Nil = SNil
      [_] (Cons x Nil) = SOne x
      [_] (Cons x (Cons y xs)) = 
        let step 
          [_] Z x y xs = SMore x Nil y xs
          [_] (S Z) x y xs = SMore x Nil y xs
          [_] (S (S _)) x y Nil = SMore x Nil y Nil
          [_] (S (S c)) x y (Cons z xs) = pushL x (step c y z xs)
        in step (S (length xs)) x y xs
    merge 
      [_] Nil ys = ys
      [_] xs Nil = xs
      [_] (Cons x xs) (Cons y ys) = 
        let f 
          [_] True = Cons x (merge xs (Cons y ys))
          [_] False = Cons y (merge (Cons x xs) ys)
        in f (leq x y)
    msort' = (\xs. 
      let gx 
        [_] SNil = Nil
        [_] (SOne x) = Cons x Nil
        [_] (SMore y ys z zs) = merge (msort' (Cons y ys)) (msort' (Cons z zs))
      in gx (split xs))
    msort = (\xs. msort' xs)
    main = msort someList
  in main

### Normal forms ###

unerased:
  
  let
    postulate Nat : Type
    postulate Z : Nat
    postulate S : (n :R: Nat) -> Nat
    postulate NList : Type
    postulate Nil : NList
    postulate Cons : (x :R: Nat) -> (xs :R: NList) -> NList
  in Cons 1 (Cons 1 (Cons 2 (Cons 3 (Cons 5 (Cons 5 (Cons 9 Nil))))))

erased:
  
  let
    postulate Z : Nat
    postulate S : (n) -> Nat
    postulate Nil : NList
    postulate Cons : (x) -> (xs) -> NList
  in Cons 1 (Cons 1 (Cons 2 (Cons 3 (Cons 5 (Cons 5 (Cons 9 Nil))))))

