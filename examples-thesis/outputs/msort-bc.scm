(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Z `(Z))
    (S (lambda (n)
      `(S ,n)))
    (True `(True))
    (False `(False))
    (Nil `(Nil))
    (Cons (lambda (x)
      (lambda (xs)
        `(Cons ,x ,xs))))
    (someList ((Cons (S (S (S (S (S (S (S (S (S Z)))))))))) ((Cons (S (S (S (S (S Z)))))) ((Cons (S Z)) ((Cons (S (S (S Z)))) ((Cons (S Z)) ((Cons (S (S (S (S (S Z)))))) ((Cons (S (S Z))) Nil))))))))
    (length (lambda (_e0)
      (match (list _e0)
        ((('Nil))
          Z)
        ((('Cons _ xs))
          (S (length xs))))))
    (leq (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((('Z) _)
            True)
          ((('S _) ('Z))
            False)
          ((('S x) ('S y))
            ((leq x) y))))))
    (SNil `(SNil))
    (SOne (lambda (x)
      `(SOne ,x)))
    (SMore (lambda (x)
      (lambda (xs)
        (lambda (y)
          (lambda (ys)
            `(SMore ,x ,xs ,y ,ys))))))
    (pushL (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((x ('SNil))
            (SOne x))
          ((x ('SOne y))
            ((((SMore x) Nil) y) Nil))
          ((x ('SMore y ys z zs))
            ((((SMore x) ((Cons y) ys)) z) zs))))))
    (split (lambda (_e0)
      (match (list _e0)
        ((('Nil))
          SNil)
        ((('Cons x ('Nil)))
          (SOne x))
        ((('Cons x ('Cons y xs)))
          (letrec* ((step (lambda (_e0)
            (lambda (_e1)
              (lambda (_e2)
                (lambda (_e3)
                  (match (list _e0 _e1 _e2 _e3)
                    ((('Z) x y xs)
                      ((((SMore x) Nil) y) xs))
                    ((('S ('Z)) x y xs)
                      ((((SMore x) Nil) y) xs))
                    ((('S ('S _)) x y ('Nil))
                      ((((SMore x) Nil) y) Nil))
                    ((('S ('S c)) x y ('Cons z xs))
                      ((pushL x) ((((step c) y) z) xs))))))))))
            ((((step (S (length xs))) x) y) xs))))))
    (merge (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((('Nil) ys)
            ys)
          ((xs ('Nil))
            xs)
          ((('Cons x xs) ('Cons y ys))
            (letrec* ((f (lambda (_e0)
              (match (list _e0)
                ((('True))
                  ((Cons x) ((merge xs) ((Cons y) ys))))
                ((('False))
                  ((Cons y) ((merge ((Cons x) xs)) ys)))))))
              (f ((leq x) y))))))))
    (msort_ (lambda (xs)
      (letrec* ((gx (lambda (_e0)
        (match (list _e0)
          ((('SNil))
            Nil)
          ((('SOne x))
            ((Cons x) Nil))
          ((('SMore y ys z zs))
            ((merge (msort_ ((Cons y) ys))) (msort_ ((Cons z) zs))))))))
        (gx (split xs)))))
    (msort (lambda (xs)
      (msort_ xs)))
    (main (msort someList))
  )
    main))
