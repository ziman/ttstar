(require-extension matchable)
(define Type '(Type))
(define (number->peano z s i) (if (= i 0) (list z) (list s (number->peano z s (- i 1)))))
(define (rts-arg-peano z s i) (number->peano z s (string->number (list-ref (command-line-arguments) i))))
(define (rts-arg-read i) (read (open-input-string (list-ref (command-line-arguments) i))))
(print
  (letrec* (
    (Z `(Z))
    (S (lambda (n)
      `(S ,n)))
    (True `(True))
    (False `(False))
    (Nil `(Nil))
    (Cons (lambda (x)
      (lambda (xs)
        `(Cons ,x ,xs))))
    (someList ((Cons (S (S (S (S (S (S (S (S (S Z)))))))))) ((Cons (S (S (S (S (S Z)))))) ((Cons (S Z)) ((Cons (S (S (S Z)))) ((Cons (S Z)) ((Cons (S (S (S (S (S Z)))))) ((Cons (S (S Z))) Nil))))))))
    (leq (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((('Z) _)
            True)
          ((('S _) ('Z))
            False)
          ((('S x) ('S y))
            ((leq x) y))))))
    (not_TT (lambda (_e0)
      (match (list _e0)
        ((('True))
          False)
        ((('False))
          True))))
    (qel (lambda (y)
      (lambda (x)
        ((leq x) y))))
    (gt (lambda (x)
      (lambda (y)
        (not_TT ((leq y) x)))))
    (condCons (lambda (_e0)
      (match (list _e0)
        ((('True))
          Cons)
        ((('False))
          (lambda (x)
            (lambda (xs)
              xs))))))
    (filter (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((_ ('Nil))
            Nil)
          ((p ('Cons x xs))
            (((condCons (p x)) x) ((filter p) xs)))))))
    (append_TT (lambda (_e0)
      (lambda (_e1)
        (match (list _e0 _e1)
          ((('Nil) ys)
            ys)
          ((('Cons x xs) ys)
            ((Cons x) ((append_TT xs) ys)))))))
    (qsort_ (lambda (_e0)
      (match (list _e0)
        ((('Nil))
          Nil)
        ((('Cons x xs))
          ((append_TT (qsort_ ((filter (qel x)) xs))) ((Cons x) (qsort_ ((filter (gt x)) xs))))))))
    (qsort (lambda (xs)
      (qsort_ xs)))
    (main (qsort someList))
  )
    main))
