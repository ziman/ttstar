-- vim: ft=ttstar

### Desugared ###

  let
    postulate Nat : Type
    postulate Z : Nat
    postulate S : (n :R: Nat) -> Nat
    postulate Bool : Type
    postulate True : Bool
    postulate False : Bool
    postulate NList : Type
    postulate Nil : NList
    postulate Cons : (x :R: Nat) -> (xs :R: NList) -> NList
    someList : NList = Cons 9 (Cons 5 (Cons 1 (Cons 3 (Cons 1 (Cons 5 (Cons 2 Nil))))))
    Rel2 : (a : Type) -> Type = (\a : Type. (x : a) -> (y : a) -> Type)
    postulate Acc : (a : Type) -> (lt : Rel2 a) -> (x : a) -> Type
    postulate MkAcc : (a : Type) -> (lt : Rel2 a) -> (x : a) -> (acc : (y : a) -> (pf : lt y x) -> Acc a lt y) -> Acc a lt x
    postulate LE : (_x0 : Nat) -> (_x1 : Nat) -> Type
    postulate LEZ : (n : Nat) -> LE Z n
    postulate LES : (m : Nat) -> (n : Nat) -> (_x2 : LE m n) -> LE (S m) (S n)
    LT : (x : Nat) -> (y : Nat) -> Type = (\x : Nat. (\y : Nat. LE (S x) y))
    leRefl : (x : Nat) -> LE x x 
      [leRefl] Z = LEZ Z
      x : Nat
        [leRefl] (S x) = LES x x (leRefl x)
    leTrans : (x : Nat) -> (y : Nat) -> (z : Nat) -> (_x3 : LE x y) -> (_x4 : LE y z) -> LE x z 
      y : Nat z : Nat pf : LE y z
        [leTrans] Z y z ({LEZ} [y]) pf = LEZ z
      x : Nat y : Nat z : Nat xLEy : LE x y yLEz : LE y z
        [leTrans] (S x) (S y) (S z) ({LES} [x] [y] xLEy) ({LES} [y] [z] yLEz) = LES x z (leTrans x y z xLEy yLEz)
    leS : (x : Nat) -> (y : Nat) -> (_x5 : LE x y) -> LE x (S y) 
      y : Nat
        [leS] Z y ({LEZ} [y]) = LEZ (S y)
      x : Nat y : Nat xLEy : LE x y
        [leS] (S x) (S y) ({LES} [x] [y] xLEy) = LES x (S y) (leS x y xLEy)
    lemmaLTZ : (a : Type) -> (n : Nat) -> (_x6 : LT n Z) -> a 
    wfLT : (x : Nat) -> Acc Nat LT x = (\x : Nat. 
      let f : (x : Nat) -> (y : Nat) -> (_x7 : LT y x) -> Acc Nat LT y 
        y : Nat pf : LT y Z
          [f] Z y pf = lemmaLTZ (Acc Nat LT y) y pf
        x : Nat y : Nat yLEx : LE y x
          [f] (S x) y ({LES} [y] [x] yLEx) = MkAcc Nat LT y (\z : Nat. (\zLTy : LT z y. f x z (leTrans (S z) y x zLTy yLEx)))
      in MkAcc Nat LT x (f x))
    length : (_x8 : NList) -> Nat 
      [length] Nil = Z
      x : Nat xs : NList
        [length] (Cons x xs) = S (length xs)
    Shorter : (xs : NList) -> (ys : NList) -> Type = (\xs : NList. (\ys : NList. LT (length xs) (length ys)))
    wfShorter : (xs : NList) -> Acc NList Shorter xs = (\xs : NList. 
      let f : (xs : NList) -> (ys : NList) -> (_x9 : Shorter ys xs) -> Acc NList Shorter ys 
        ys : NList pf : Shorter ys Nil
          [f] Nil ys pf = lemmaLTZ (Acc NList Shorter ys) (length ys) pf
        x : Nat xs : NList ys : NList yLEx : LE (length ys) (length xs)
          [f] (Cons x xs) ys ({LES} [length ys] [length xs] yLEx) = MkAcc NList Shorter ys (\zs : NList. (\zLTy : LT (length zs) (length ys). f xs zs (leTrans (S (length zs)) (length ys) (length xs) zLTy yLEx)))
      in MkAcc NList Shorter xs (f xs))
    leq : (_x10 : Nat) -> (_x11 : Nat) -> Bool 
      y : Nat
        [leq] Z y = True
      x : Nat
        [leq] (S x) Z = False
      x : Nat y : Nat
        [leq] (S x) (S y) = leq x y
    not : (_x12 : Bool) -> Bool 
      [not] True = False
      [not] False = True
    qel : (y : Nat) -> (x : Nat) -> Bool = (\y : Nat. (\x : Nat. leq x y))
    gt : (x : Nat) -> (y : Nat) -> Bool = (\x : Nat. (\y : Nat. not (leq y x)))
    condCons : (_x13 : Bool) -> (_x14 : Nat) -> (_x15 : NList) -> NList 
      [condCons] True = Cons
      [condCons] False = (\x : Nat. (\xs : NList. xs))
    filter : (_x16 : (_x17 : Nat) -> Bool) -> (_x18 : NList) -> NList 
      p : (_x19 : Nat) -> Bool
        [filter] p Nil = Nil
      p : (_x20 : Nat) -> Bool x : Nat xs : NList
        [filter] p (Cons x xs) = condCons (p x) x (filter p xs)
    append : (_x21 : NList) -> (_x22 : NList) -> NList 
      ys : NList
        [append] Nil ys = ys
      x : Nat xs : NList ys : NList
        [append] (Cons x xs) ys = Cons x (append xs ys)
    postulate Id : (a : Type) -> (_x23 : a) -> (_x24 : a) -> Type
    postulate Refl : (a : Type) -> (x : a) -> Id a x x
    postulate Split : (_x25 : NList) -> Type
    postulate SNil : Split Nil
    postulate SOne : (x : Nat) -> Split (Cons x Nil)
    postulate SMore : (x : Nat) -> (xs : NList) -> (y : Nat) -> (ys : NList) -> Split (append (Cons x xs) (Cons y ys))
    pushL : (x : Nat) -> (xs : NList) -> (_x26 : Split xs) -> Split (Cons x xs) 
      x : Nat
        [pushL] x [Nil] SNil = SOne x
      x : Nat y : Nat
        [pushL] x [Cons y Nil] (SOne y) = SMore x Nil y Nil
      x : Nat y : Nat ys : NList z : Nat zs : NList
        [pushL] x [append (Cons y ys) (Cons z zs)] (SMore y ys z zs) = SMore x (Cons y ys) z zs
    split : (xs : NList) -> Split xs 
      [split] Nil = SNil
      x : Nat
        [split] (Cons x Nil) = SOne x
      x : Nat y : Nat xs : NList
        [split] (Cons x (Cons y xs)) = 
          let step : (counter : Nat) -> (x : Nat) -> (y : Nat) -> (xs : NList) -> Split (Cons x (Cons y xs)) 
            x : Nat y : Nat xs : NList
              [step] Z x y xs = SMore x Nil y xs
            x : Nat y : Nat xs : NList
              [step] (S Z) x y xs = SMore x Nil y xs
            c : Nat x : Nat y : Nat
              [step] (S (S c)) x y Nil = SMore x Nil y Nil
            c : Nat x : Nat y : Nat z : Nat xs : NList
              [step] (S (S c)) x y (Cons z xs) = pushL x (Cons y (Cons z xs)) (step c y z xs)
          in step (S (length xs)) x y xs
    merge : (_x27 : NList) -> (_x28 : NList) -> NList 
      ys : NList
        [merge] Nil ys = ys
      xs : NList
        [merge] xs Nil = xs
      x : Nat xs : NList y : Nat ys : NList
        [merge] (Cons x xs) (Cons y ys) = 
          let f : (_x29 : Bool) -> NList 
            [f] True = Cons x (merge xs (Cons y ys))
            [f] False = Cons y (merge (Cons x xs) ys)
          in f (leq x y)
    postulate QSortAcc : (_x0 : NList) -> Type
    postulate QNil : QSortAcc Nil
    postulate QCons : (x : Nat) -> (xs : NList) -> (_x1 : QSortAcc (filter (qel x) xs)) -> (_x2 : QSortAcc (filter (gt x) xs)) -> QSortAcc (Cons x xs)
    flemma : (x : Nat) -> (p : (_x3 : Nat) -> Bool) -> (xs : NList) -> Shorter (filter p xs) (Cons x xs) 
      x : Nat p : (_x4 : Nat) -> Bool
        [flemma] x p Nil = LES Z Z (LEZ Z)
      x : Nat p : (_x5 : Nat) -> Bool y : Nat ys : NList
        [flemma] x p (Cons y ys) = 
          let f : (py : Bool) -> Shorter (condCons py y (filter p ys)) (Cons x (Cons y ys)) 
            [f] True = LES (S (length (filter p ys))) (S (length ys)) (flemma x p ys)
            [f] False = leS (S (length (filter p ys))) (S (length ys)) (flemma x p ys)
          in f (p y)
    qsortAcc : (xs : NList) -> (_x6 : Acc NList Shorter xs) -> QSortAcc xs 
      acc : Acc NList Shorter Nil
        [qsortAcc] Nil acc = QNil
      x : Nat xs : NList acc : (ys : NList) -> (_x7 : Shorter ys (Cons x xs)) -> Acc NList Shorter ys
        [qsortAcc] (Cons x xs) ({MkAcc} [NList] [Shorter] [Cons x xs] acc) = QCons x xs (qsortAcc (filter (qel x) xs) (acc (filter (qel x) xs) (flemma x (qel x) xs))) (qsortAcc (filter (gt x) xs) (acc (filter (gt x) xs) (flemma x (gt x) xs)))
    qsort' : (xs : NList) -> (_x8 : QSortAcc xs) -> NList 
      [qsort'] Nil {QNil} = Nil
      x : Nat xs : NList lo : QSortAcc (filter (qel x) xs) hi : QSortAcc (filter (gt x) xs)
        [qsort'] (Cons x xs) ({QCons} [x] [xs] lo hi) = append (qsort' (filter (qel x) xs) lo) (Cons x (qsort' (filter (gt x) xs) hi))
    qsort : (xs : NList) -> NList = (\xs : NList. qsort' xs (qsortAcc xs (wfShorter xs)))
    main : NList = qsort someList
  in main

### Evarified ###

  let
    postulate Nat :1: Type
    postulate Z :2: Nat
    postulate S :3: (n :R: Nat) -> Nat
    postulate Bool :4: Type
    postulate True :5: Bool
    postulate False :6: Bool
    postulate NList :7: Type
    postulate Nil :8: NList
    postulate Cons :9: (x :R: Nat) -> (xs :R: NList) -> NList
    someList :10: NList = Cons -12- 9 -11- (Cons -23- 5 -22- (Cons -30- 1 -29- (Cons -33- 3 -32- (Cons -38- 1 -37- (Cons -41- 5 -40- (Cons -48- 2 -47- Nil))))))
    Rel2 :51: (a :52: Type) -> Type = (\a :53: Type. (x :54: a) -> (y :55: a) -> Type)
    postulate Acc :56: (a :57: Type) -> (lt :58: Rel2 -59- a) -> (x :60: a) -> Type
    postulate MkAcc :61: (a :62: Type) -> (lt :63: Rel2 -64- a) -> (x :65: a) -> (acc :66: (y :67: a) -> (pf :68: lt -70- y -69- x) -> Acc -73- a -72- lt -71- y) -> Acc -76- a -75- lt -74- x
    postulate LE :77: (_x0 :78: Nat) -> (_x1 :79: Nat) -> Type
    postulate LEZ :80: (n :81: Nat) -> LE -83- Z -82- n
    postulate LES :84: (m :85: Nat) -> (n :86: Nat) -> (_x2 :87: LE -89- m -88- n) -> LE -91- (S -92- m) -90- (S -93- n)
    LT :94: (x :95: Nat) -> (y :96: Nat) -> Type = (\x :97: Nat. (\y :98: Nat. LE -100- (S -101- x) -99- y))
    leRefl :102: (x :103: Nat) -> LE -105- x -104- x 
      [leRefl] -106- Z = LEZ -107- Z
      x :108: Nat
        [leRefl] -109- (S -110- x) = LES -113- x -112- x -111- (leRefl -114- x)
    leTrans :115: (x :116: Nat) -> (y :117: Nat) -> (z :118: Nat) -> (_x3 :119: LE -121- x -120- y) -> (_x4 :122: LE -124- y -123- z) -> LE -126- x -125- z 
      y :127: Nat z :128: Nat pf :129: LE -131- y -130- z
        [leTrans] -136- Z -135- y -134- z -133- ({LEZ} -137- [y]) -132- pf = LEZ -138- z
      x :139: Nat y :140: Nat z :141: Nat xLEy :142: LE -144- x -143- y yLEz :145: LE -147- y -146- z
        [leTrans] -152- (S -153- x) -151- (S -154- y) -150- (S -155- z) -149- ({LES} -158- [x] -157- [y] -156- xLEy) -148- ({LES} -161- [y] -160- [z] -159- yLEz) = LES -164- x -163- z -162- (leTrans -169- x -168- y -167- z -166- xLEy -165- yLEz)
    leS :170: (x :171: Nat) -> (y :172: Nat) -> (_x5 :173: LE -175- x -174- y) -> LE -177- x -176- (S -178- y) 
      y :179: Nat
        [leS] -182- Z -181- y -180- ({LEZ} -183- [y]) = LEZ -184- (S -185- y)
      x :186: Nat y :187: Nat xLEy :188: LE -190- x -189- y
        [leS] -193- (S -194- x) -192- (S -195- y) -191- ({LES} -198- [x] -197- [y] -196- xLEy) = LES -201- x -200- (S -202- y) -199- (leS -205- x -204- y -203- xLEy)
    lemmaLTZ :206: (a :207: Type) -> (n :208: Nat) -> (_x6 :209: LT -211- n -210- Z) -> a 
    wfLT :212: (x :213: Nat) -> Acc -216- Nat -215- LT -214- x = (\x :217: Nat. 
      let f :218: (x :219: Nat) -> (y :220: Nat) -> (_x7 :221: LT -223- y -222- x) -> Acc -226- Nat -225- LT -224- y 
        y :227: Nat pf :228: LT -230- y -229- Z
          [f] -233- Z -232- y -231- pf = lemmaLTZ -236- (Acc -239- Nat -238- LT -237- y) -235- y -234- pf
        x :240: Nat y :241: Nat yLEx :242: LE -244- y -243- x
          [f] -247- (S -248- x) -246- y -245- ({LES} -251- [y] -250- [x] -249- yLEx) = MkAcc -255- Nat -254- LT -253- y -252- (\z :256: Nat. (\zLTy :257: LT -259- z -258- y. f -262- x -261- z -260- (leTrans -267- (S -268- z) -266- y -265- x -264- zLTy -263- yLEx)))
      in MkAcc -272- Nat -271- LT -270- x -269- (f -273- x))
    length :274: (_x8 :275: NList) -> Nat 
      [length] -276- Nil = Z
      x :277: Nat xs :278: NList
        [length] -279- (Cons -281- x -280- xs) = S -282- (length -283- xs)
    Shorter :284: (xs :285: NList) -> (ys :286: NList) -> Type = (\xs :287: NList. (\ys :288: NList. LT -290- (length -291- xs) -289- (length -292- ys)))
    wfShorter :293: (xs :294: NList) -> Acc -297- NList -296- Shorter -295- xs = (\xs :298: NList. 
      let f :299: (xs :300: NList) -> (ys :301: NList) -> (_x9 :302: Shorter -304- ys -303- xs) -> Acc -307- NList -306- Shorter -305- ys 
        ys :308: NList pf :309: Shorter -311- ys -310- Nil
          [f] -314- Nil -313- ys -312- pf = lemmaLTZ -317- (Acc -320- NList -319- Shorter -318- ys) -316- (length -321- ys) -315- pf
        x :322: Nat xs :323: NList ys :324: NList yLEx :325: LE -327- (length -328- ys) -326- (length -329- xs)
          [f] -332- (Cons -334- x -333- xs) -331- ys -330- ({LES} -337- [length -338- ys] -336- [length -339- xs] -335- yLEx) = MkAcc -343- NList -342- Shorter -341- ys -340- (\zs :344: NList. (\zLTy :345: LT -347- (length -348- zs) -346- (length -349- ys). f -352- xs -351- zs -350- (leTrans -357- (S -358- (length -359- zs)) -356- (length -360- ys) -355- (length -361- xs) -354- zLTy -353- yLEx)))
      in MkAcc -365- NList -364- Shorter -363- xs -362- (f -366- xs))
    leq :367: (_x10 :368: Nat) -> (_x11 :369: Nat) -> Bool 
      y :370: Nat
        [leq] -372- Z -371- y = True
      x :373: Nat
        [leq] -375- (S -376- x) -374- Z = False
      x :377: Nat y :378: Nat
        [leq] -380- (S -381- x) -379- (S -382- y) = leq -384- x -383- y
    not :385: (_x12 :386: Bool) -> Bool 
      [not] -387- True = False
      [not] -388- False = True
    qel :389: (y :390: Nat) -> (x :391: Nat) -> Bool = (\y :392: Nat. (\x :393: Nat. leq -395- x -394- y))
    gt :396: (x :397: Nat) -> (y :398: Nat) -> Bool = (\x :399: Nat. (\y :400: Nat. not -401- (leq -403- y -402- x)))
    condCons :404: (_x13 :405: Bool) -> (_x14 :406: Nat) -> (_x15 :407: NList) -> NList 
      [condCons] -408- True = Cons
      [condCons] -409- False = (\x :410: Nat. (\xs :411: NList. xs))
    filter :412: (_x16 :413: (_x17 :414: Nat) -> Bool) -> (_x18 :415: NList) -> NList 
      p :416: (_x19 :417: Nat) -> Bool
        [filter] -419- p -418- Nil = Nil
      p :420: (_x20 :421: Nat) -> Bool x :422: Nat xs :423: NList
        [filter] -425- p -424- (Cons -427- x -426- xs) = condCons -430- (p -431- x) -429- x -428- (filter -433- p -432- xs)
    append :434: (_x21 :435: NList) -> (_x22 :436: NList) -> NList 
      ys :437: NList
        [append] -439- Nil -438- ys = ys
      x :440: Nat xs :441: NList ys :442: NList
        [append] -444- (Cons -446- x -445- xs) -443- ys = Cons -448- x -447- (append -450- xs -449- ys)
    postulate Id :451: (a :452: Type) -> (_x23 :453: a) -> (_x24 :454: a) -> Type
    postulate Refl :455: (a :456: Type) -> (x :457: a) -> Id -460- a -459- x -458- x
    postulate Split :461: (_x25 :462: NList) -> Type
    postulate SNil :463: Split -464- Nil
    postulate SOne :465: (x :466: Nat) -> Split -467- (Cons -469- x -468- Nil)
    postulate SMore :470: (x :471: Nat) -> (xs :472: NList) -> (y :473: Nat) -> (ys :474: NList) -> Split -475- (append -477- (Cons -479- x -478- xs) -476- (Cons -481- y -480- ys))
    pushL :482: (x :483: Nat) -> (xs :484: NList) -> (_x26 :485: Split -486- xs) -> Split -487- (Cons -489- x -488- xs) 
      x :490: Nat
        [pushL] -493- x -492- [Nil] -491- SNil = SOne -494- x
      x :495: Nat y :496: Nat
        [pushL] -499- x -498- [Cons -501- y -500- Nil] -497- (SOne -502- y) = SMore -506- x -505- Nil -504- y -503- Nil
      x :507: Nat y :508: Nat ys :509: NList z :510: Nat zs :511: NList
        [pushL] -514- x -513- [append -516- (Cons -518- y -517- ys) -515- (Cons -520- z -519- zs)] -512- (SMore -524- y -523- ys -522- z -521- zs) = SMore -528- x -527- (Cons -530- y -529- ys) -526- z -525- zs
    split :531: (xs :532: NList) -> Split -533- xs 
      [split] -534- Nil = SNil
      x :535: Nat
        [split] -536- (Cons -538- x -537- Nil) = SOne -539- x
      x :540: Nat y :541: Nat xs :542: NList
        [split] -543- (Cons -545- x -544- (Cons -547- y -546- xs)) = 
          let step :548: (counter :549: Nat) -> (x :550: Nat) -> (y :551: Nat) -> (xs :552: NList) -> Split -553- (Cons -555- x -554- (Cons -557- y -556- xs)) 
            x :558: Nat y :559: Nat xs :560: NList
              [step] -564- Z -563- x -562- y -561- xs = SMore -568- x -567- Nil -566- y -565- xs
            x :569: Nat y :570: Nat xs :571: NList
              [step] -575- (S -576- Z) -574- x -573- y -572- xs = SMore -580- x -579- Nil -578- y -577- xs
            c :581: Nat x :582: Nat y :583: Nat
              [step] -587- (S -588- (S -589- c)) -586- x -585- y -584- Nil = SMore -593- x -592- Nil -591- y -590- Nil
            c :594: Nat x :595: Nat y :596: Nat z :597: Nat xs :598: NList
              [step] -602- (S -603- (S -604- c)) -601- x -600- y -599- (Cons -606- z -605- xs) = pushL -609- x -608- (Cons -611- y -610- (Cons -613- z -612- xs)) -607- (step -617- c -616- y -615- z -614- xs)
          in step -621- (S -622- (length -623- xs)) -620- x -619- y -618- xs
    merge :624: (_x27 :625: NList) -> (_x28 :626: NList) -> NList 
      ys :627: NList
        [merge] -629- Nil -628- ys = ys
      xs :630: NList
        [merge] -632- xs -631- Nil = xs
      x :633: Nat xs :634: NList y :635: Nat ys :636: NList
        [merge] -638- (Cons -640- x -639- xs) -637- (Cons -642- y -641- ys) = 
          let f :643: (_x29 :644: Bool) -> NList 
            [f] -645- True = Cons -647- x -646- (merge -649- xs -648- (Cons -651- y -650- ys))
            [f] -652- False = Cons -654- y -653- (merge -656- (Cons -658- x -657- xs) -655- ys)
          in f -659- (leq -661- x -660- y)
    postulate QSortAcc :662: (_x0 :663: NList) -> Type
    postulate QNil :664: QSortAcc -665- Nil
    postulate QCons :666: (x :667: Nat) -> (xs :668: NList) -> (_x1 :669: QSortAcc -670- (filter -672- (qel -673- x) -671- xs)) -> (_x2 :674: QSortAcc -675- (filter -677- (gt -678- x) -676- xs)) -> QSortAcc -679- (Cons -681- x -680- xs)
    flemma :682: (x :683: Nat) -> (p :684: (_x3 :685: Nat) -> Bool) -> (xs :686: NList) -> Shorter -688- (filter -690- p -689- xs) -687- (Cons -692- x -691- xs) 
      x :693: Nat p :694: (_x4 :695: Nat) -> Bool
        [flemma] -698- x -697- p -696- Nil = LES -701- Z -700- Z -699- (LEZ -702- Z)
      x :703: Nat p :704: (_x5 :705: Nat) -> Bool y :706: Nat ys :707: NList
        [flemma] -710- x -709- p -708- (Cons -712- y -711- ys) = 
          let f :713: (py :714: Bool) -> Shorter -716- (condCons -719- py -718- y -717- (filter -721- p -720- ys)) -715- (Cons -723- x -722- (Cons -725- y -724- ys)) 
            [f] -726- True = LES -729- (S -730- (length -731- (filter -733- p -732- ys))) -728- (S -734- (length -735- ys)) -727- (flemma -738- x -737- p -736- ys)
            [f] -739- False = leS -742- (S -743- (length -744- (filter -746- p -745- ys))) -741- (S -747- (length -748- ys)) -740- (flemma -751- x -750- p -749- ys)
          in f -752- (p -753- y)
    qsortAcc :754: (xs :755: NList) -> (_x6 :756: Acc -759- NList -758- Shorter -757- xs) -> QSortAcc -760- xs 
      acc :761: Acc -764- NList -763- Shorter -762- Nil
        [qsortAcc] -766- Nil -765- acc = QNil
      x :767: Nat xs :768: NList acc :769: (ys :770: NList) -> (_x7 :771: Shorter -773- ys -772- (Cons -775- x -774- xs)) -> Acc -778- NList -777- Shorter -776- ys
        [qsortAcc] -780- (Cons -782- x -781- xs) -779- ({MkAcc} -786- [NList] -785- [Shorter] -784- [Cons -788- x -787- xs] -783- acc) = QCons -792- x -791- xs -790- (qsortAcc -794- (filter -796- (qel -797- x) -795- xs) -793- (acc -799- (filter -801- (qel -802- x) -800- xs) -798- (flemma -805- x -804- (qel -806- x) -803- xs))) -789- (qsortAcc -808- (filter -810- (gt -811- x) -809- xs) -807- (acc -813- (filter -815- (gt -816- x) -814- xs) -812- (flemma -819- x -818- (gt -820- x) -817- xs)))
    qsort' :821: (xs :822: NList) -> (_x8 :823: QSortAcc -824- xs) -> NList 
      [qsort'] -826- Nil -825- {QNil} = Nil
      x :827: Nat xs :828: NList lo :829: QSortAcc -830- (filter -832- (qel -833- x) -831- xs) hi :834: QSortAcc -835- (filter -837- (gt -838- x) -836- xs)
        [qsort'] -840- (Cons -842- x -841- xs) -839- ({QCons} -846- [x] -845- [xs] -844- lo -843- hi) = append -848- (qsort' -850- (filter -852- (qel -853- x) -851- xs) -849- lo) -847- (Cons -855- x -854- (qsort' -857- (filter -859- (gt -860- x) -858- xs) -856- hi))
    qsort :861: (xs :862: NList) -> NList = (\xs :863: NList. qsort' -865- xs -864- (qsortAcc -867- xs -866- (wfShorter -868- xs)))
    main :869: NList = qsort -870- someList
  in main

### Constraints ###

[] -> [2,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,367,368,369,371,372,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,680,681,821,822,826,827,828,840,841,842,847,848,850,851,852,853,854,855,857,858,859,860,861,862,863,865,870,R]
[54,58,66,207,756,823] -> [285]
[54,63,66,756,823] -> [285]
[54,63,756,823] -> [285]
[54,823] -> [285]
[55,58,66,207,756,823] -> [286]
[55,63,66,756,823] -> [286]
[55,63,756,823] -> [286]
[55,823] -> [286]
[57,66,207,756,823] -> [7,320]
[58,66,78,207,756,823] -> [97,100,101]
[58,66,79,207,756,823] -> [98,99]
[58,66,95,207,275,756,823] -> [287,291]
[58,66,95,207,291,756,823] -> [275]
[58,66,95,207,756,823] -> [97,274,275,276,278,279,280,281,282,283,290]
[58,66,96,207,275,756,823] -> [288,292]
[58,66,96,207,292,756,823] -> [275]
[58,66,96,207,756,823] -> [98,274,275,276,278,279,280,281,282,283,289]
[58,66,97,207,756,823] -> [95]
[58,66,98,207,756,823] -> [96]
[58,66,99,207,756,823] -> [79]
[58,66,100,207,756,823] -> [78]
[58,66,207,285,756,823] -> [54,287]
[58,66,207,286,756,823] -> [55,288]
[58,66,207,287,756,823] -> [285]
[58,66,207,288,756,823] -> [286]
[58,66,207,289,756,823] -> [96]
[58,66,207,290,756,823] -> [95]
[58,66,207,756,823] -> [77,94,284,319]
[60,66,207,756,823] -> [308,318]
[62,66,756,823] -> [7,343]
[62,756,823] -> [7,365]
[62,779,823] -> [786]
[63,66,78,756,823] -> [97,100,101]
[63,66,79,756,823] -> [98,99]
[63,66,95,275,756,823] -> [287,291]
[63,66,95,291,756,823] -> [275]
[63,66,95,756,823] -> [97,274,275,276,278,279,280,281,282,283,290]
[63,66,96,275,756,823] -> [288,292]
[63,66,96,292,756,823] -> [275]
[63,66,96,756,823] -> [98,274,275,276,278,279,280,281,282,283,289]
[63,66,97,756,823] -> [95]
[63,66,98,756,823] -> [96]
[63,66,99,756,823] -> [79]
[63,66,100,756,823] -> [78]
[63,66,285,756,823] -> [54,287]
[63,66,286,756,823] -> [55,288]
[63,66,287,756,823] -> [285]
[63,66,288,756,823] -> [286]
[63,66,289,756,823] -> [96]
[63,66,290,756,823] -> [95]
[63,66,756,823] -> [77,94,284,342]
[63,78,756,823] -> [97,100,101]
[63,79,756,823] -> [98,99]
[63,95,275,756,823] -> [287,291]
[63,95,291,756,823] -> [275]
[63,95,756,823] -> [97,274,275,276,278,279,280,281,282,283,290]
[63,96,275,756,823] -> [288,292]
[63,96,292,756,823] -> [275]
[63,96,756,823] -> [98,274,275,276,278,279,280,281,282,283,289]
[63,97,756,823] -> [95]
[63,98,756,823] -> [96]
[63,99,756,823] -> [79]
[63,100,756,823] -> [78]
[63,285,756,823] -> [54,287]
[63,286,756,823] -> [55,288]
[63,287,756,823] -> [285]
[63,288,756,823] -> [286]
[63,289,756,823] -> [96]
[63,290,756,823] -> [95]
[63,756,823] -> [77,94,284,364]
[63,779,823] -> [785]
[65,66,756,823] -> [324,341]
[65,756,823] -> [298,363]
[65,779,823] -> [784]
[66,67,756,823] -> [301,344]
[66,68,756,823] -> [302,345]
[66,71,756,823] -> [305]
[66,72,756,823] -> [306]
[66,73,756,823] -> [307]
[66,74,756,823] -> [305]
[66,75,756,823] -> [306]
[66,76,756,823] -> [307]
[66,81,133,302,756,823] -> [137]
[66,81,302,756,823] -> [128,138]
[66,82,302,756,823] -> [120,125]
[66,83,302,756,823] -> [121,126]
[66,85,148,302,756,823] -> [161]
[66,85,149,302,756,823] -> [158]
[66,85,302,756,823] -> [139,164]
[66,85,330,756,823] -> [337]
[66,86,148,302,756,823] -> [160]
[66,86,149,302,756,823] -> [157]
[66,86,302,756,823] -> [141,163]
[66,86,330,756,823] -> [336]
[66,87,88,302,756,823] -> [125]
[66,87,89,302,756,823] -> [126]
[66,87,119,120,302,756,823] -> [143]
[66,87,119,121,302,756,823] -> [144]
[66,87,119,143,302,756,823] -> [120]
[66,87,119,144,302,756,823] -> [121]
[66,87,119,302,756,823] -> [142,166]
[66,87,122,123,302,756,823] -> [146]
[66,87,122,124,302,756,823] -> [147]
[66,87,122,146,302,756,823] -> [123]
[66,87,122,147,302,756,823] -> [124]
[66,87,122,302,756,823] -> [145,165]
[66,87,125,302,756,823] -> [88]
[66,87,126,302,756,823] -> [89]
[66,87,148,302,756,823] -> [159]
[66,87,149,302,756,823] -> [156]
[66,87,165,302,756,823] -> [122]
[66,87,166,302,756,823] -> [119]
[66,87,302,756,823] -> [139,140,141,162,167,168,169]
[66,87,330,756,823] -> [335]
[66,88,302,756,823] -> [143,146]
[66,88,756,823] -> [326]
[66,89,302,756,823] -> [144,147]
[66,89,756,823] -> [327]
[66,90,302,756,823] -> [120,123,125]
[66,90,756,823] -> [99]
[66,91,302,756,823] -> [121,124,126]
[66,91,756,823] -> [100]
[66,92,756,823] -> [101]
[66,93,756,823] -> [282]
[66,99,119,302,756,823] -> [120]
[66,99,209,756,823] -> [99]
[66,99,302,756,823] -> [125]
[66,99,756,823] -> [90,99]
[66,100,119,302,756,823] -> [121]
[66,100,209,756,823] -> [100]
[66,100,302,756,823] -> [126]
[66,100,756,823] -> [91,100]
[66,101,119,302,756,823] -> [358]
[66,101,209,756,823] -> [101]
[66,101,302,756,823] -> [358]
[66,101,756,823] -> [92,101]
[66,116,275,302,756,823] -> [344,359]
[66,116,302,359,756,823] -> [275]
[66,116,302,756,823] -> [274,275,276,278,279,280,281,282,283,357,358]
[66,117,275,302,756,823] -> [324,360]
[66,117,302,360,756,823] -> [275]
[66,117,302,756,823] -> [274,275,276,278,279,280,281,282,283,356]
[66,118,275,302,756,823] -> [323,361]
[66,118,302,361,756,823] -> [275]
[66,118,302,756,823] -> [274,275,276,278,279,280,281,282,283,355]
[66,119,120,302,756,823] -> [99]
[66,119,121,302,756,823] -> [100]
[66,119,302,348,756,823] -> [359]
[66,119,302,349,756,823] -> [360]
[66,119,302,358,756,823] -> [101]
[66,119,302,359,756,823] -> [348]
[66,119,302,360,756,823] -> [349]
[66,119,302,756,823] -> [133,149,345,354]
[66,120,302,756,823] -> [82,90]
[66,121,302,756,823] -> [83,91]
[66,122,123,302,756,823] -> [326]
[66,122,124,302,756,823] -> [327]
[66,122,302,326,756,823] -> [123]
[66,122,302,327,756,823] -> [124]
[66,122,302,328,756,823] -> [360]
[66,122,302,329,756,823] -> [361]
[66,122,302,360,756,823] -> [328]
[66,122,302,361,756,823] -> [329]
[66,122,302,756,823] -> [132,148,325,353]
[66,123,302,756,823] -> [90,130]
[66,124,302,756,823] -> [91,131]
[66,125,302,756,823] -> [82,90,99]
[66,126,302,756,823] -> [83,91,100]
[66,129,302,756,823] -> [132]
[66,130,302,756,823] -> [123]
[66,131,302,756,823] -> [124]
[66,132,302,756,823] -> [122]
[66,133,137,302,756,823] -> [81]
[66,133,302,756,823] -> [119]
[66,137,302,756,823] -> [127,133]
[66,138,302,756,823] -> [81]
[66,142,302,756,823] -> [156]
[66,143,302,756,823] -> [88]
[66,144,302,756,823] -> [89]
[66,145,302,756,823] -> [159]
[66,146,302,756,823] -> [88]
[66,147,302,756,823] -> [89]
[66,148,159,302,756,823] -> [87]
[66,148,160,302,756,823] -> [86]
[66,148,161,302,756,823] -> [85]
[66,148,302,756,823] -> [122]
[66,149,156,302,756,823] -> [87]
[66,149,157,302,756,823] -> [86]
[66,149,158,302,756,823] -> [85]
[66,149,302,756,823] -> [119]
[66,156,302,756,823] -> [149]
[66,157,302,756,823] -> [140,149]
[66,158,302,756,823] -> [139,149]
[66,159,302,756,823] -> [148]
[66,160,302,756,823] -> [141,148]
[66,161,302,756,823] -> [140,148]
[66,162,302,756,823] -> [87]
[66,163,302,756,823] -> [86]
[66,164,302,756,823] -> [85]
[66,207,318,756,823] -> [60]
[66,207,319,756,823] -> [58]
[66,207,320,756,823] -> [57]
[66,207,756,823] -> [56,317]
[66,208,275,756,823] -> [308,321]
[66,208,321,756,823] -> [275]
[66,208,756,823] -> [274,275,276,278,279,280,281,282,283,316]
[66,209,291,756,823] -> [321]
[66,209,321,756,823] -> [291]
[66,209,756,823] -> [309,315]
[66,275,336,756,823] -> [323,339]
[66,275,337,756,823] -> [324,338]
[66,282,756,823] -> [93]
[66,283,756,823] -> [339]
[66,287,756,823] -> [287]
[66,288,756,823] -> [288]
[66,291,302,756,823] -> [359]
[66,291,756,823] -> [291,338,348]
[66,292,302,756,823] -> [361]
[66,292,756,823] -> [292,349]
[66,300,756,823] -> [298,366]
[66,301,756,823] -> [67,313,331,344,351]
[66,302,353,756,823] -> [122]
[66,302,354,756,823] -> [119]
[66,302,355,756,823] -> [118]
[66,302,356,756,823] -> [117]
[66,302,357,756,823] -> [116]
[66,302,358,756,823] -> [101]
[66,302,359,756,823] -> [291]
[66,302,361,756,823] -> [292]
[66,302,756,823] -> [68,80,84,92,93,115,116,117,118,134,135,136,150,151,152,153,154,155,312,330,350]
[66,305,756,823] -> [71,74,318]
[66,306,756,823] -> [72,75,319]
[66,307,756,823] -> [73,76,320]
[66,308,756,823] -> [313]
[66,309,756,823] -> [312]
[66,312,756,823] -> [302]
[66,313,756,823] -> [301]
[66,315,756,823] -> [209]
[66,316,756,823] -> [208]
[66,317,756,823] -> [207]
[66,318,756,823] -> [305]
[66,319,756,823] -> [306]
[66,320,756,823] -> [307]
[66,324,756,823] -> [331]
[66,325,756,823] -> [335]
[66,326,756,823] -> [88]
[66,327,756,823] -> [89]
[66,328,756,823] -> [338]
[66,329,756,823] -> [339]
[66,330,335,756,823] -> [87]
[66,330,336,756,823] -> [86]
[66,330,337,756,823] -> [85]
[66,330,756,823] -> [302]
[66,331,756,823] -> [301]
[66,335,756,823] -> [330]
[66,336,339,756,823] -> [275]
[66,336,756,823] -> [274,275,276,278,279,280,281,282,283,330]
[66,337,338,756,823] -> [275]
[66,337,756,823] -> [274,275,276,278,279,280,281,282,283,330]
[66,338,756,823] -> [291,328]
[66,339,756,823] -> [283,329]
[66,340,756,823] -> [66]
[66,341,756,823] -> [65]
[66,342,756,823] -> [63]
[66,343,756,823] -> [62]
[66,344,756,823] -> [67]
[66,345,756,823] -> [68]
[66,348,756,823] -> [291]
[66,349,756,823] -> [292]
[66,350,756,823] -> [302]
[66,351,756,823] -> [301]
[66,366,756,823] -> [300]
[66,756,823] -> [206,299,300,314,323,332,333,334,340,352,362]
[66,779,823] -> [783]
[67,823] -> [770]
[68,823] -> [771]
[71,823] -> [776]
[72,823] -> [777]
[73,823] -> [778]
[74,756,823] -> [295]
[74,823] -> [757]
[75,756,823] -> [296]
[75,823] -> [758]
[76,756,823] -> [297]
[76,823] -> [759]
[78,785,823] -> [97,100,101]
[79,785,823] -> [98,99]
[81,87,669,756,771,823] -> [702]
[81,87,674,756,771,823] -> [702]
[81,180,669,756,771,823] -> [183]
[81,180,674,756,771,823] -> [183]
[81,669,756,771,823] -> [179,184]
[81,674,756,771,823] -> [179,184]
[82,87,669,756,771,823] -> [88]
[82,87,674,756,771,823] -> [88]
[82,669,756,771,823] -> [174,176]
[82,674,756,771,823] -> [174,176]
[83,87,669,756,771,823] -> [89]
[83,87,674,756,771,823] -> [89]
[83,669,756,771,823] -> [175,177]
[83,674,756,771,823] -> [175,177]
[85,191,669,756,771,823] -> [198]
[85,191,674,756,771,823] -> [198]
[85,669,756,771,823] -> [186,201,701,705,729]
[85,674,756,771,823] -> [186,201,701,705,729]
[86,191,669,756,771,823] -> [197]
[86,191,674,756,771,823] -> [197]
[86,669,756,771,823] -> [187,200,700,728]
[86,674,756,771,823] -> [187,200,700,728]
[87,88,669,756,771,823] -> [82,99,176]
[87,88,674,756,771,823] -> [82,99,176]
[87,89,669,756,771,823] -> [83,100,177]
[87,89,674,756,771,823] -> [83,100,177]
[87,99,669,756,771,823] -> [88]
[87,99,674,756,771,823] -> [88]
[87,100,669,756,771,823] -> [89]
[87,100,674,756,771,823] -> [89]
[87,173,174,669,756,771,823] -> [189]
[87,173,174,674,756,771,823] -> [189]
[87,173,175,669,756,771,823] -> [190]
[87,173,175,674,756,771,823] -> [190]
[87,173,189,669,756,771,823] -> [174]
[87,173,189,674,756,771,823] -> [174]
[87,173,190,669,756,771,823] -> [175]
[87,173,190,674,756,771,823] -> [175]
[87,173,669,756,771,823] -> [188,203]
[87,173,674,756,771,823] -> [188,203]
[87,176,669,756,771,823] -> [88]
[87,176,674,756,771,823] -> [88]
[87,177,669,756,771,823] -> [89]
[87,177,674,756,771,823] -> [89]
[87,191,669,756,771,823] -> [196]
[87,191,674,756,771,823] -> [196]
[87,203,669,756,771,823] -> [173]
[87,203,674,756,771,823] -> [173]
[87,669,683,756,771,823] -> [703,738]
[87,669,685,756,771,823] -> [705]
[87,669,702,756,771,823] -> [81]
[87,669,705,756,771,823] -> [685]
[87,669,738,756,771,823] -> [683]
[87,669,756,771,823] -> [186,187,199,204,205,689,690,699,727,736,737]
[87,674,683,756,771,823] -> [703,738]
[87,674,685,756,771,823] -> [705]
[87,674,702,756,771,823] -> [81]
[87,674,705,756,771,823] -> [685]
[87,674,738,756,771,823] -> [683]
[87,674,756,771,823] -> [186,187,199,204,205,689,690,699,727,736,737]
[88,669,756,771,823] -> [189]
[88,674,756,771,823] -> [189]
[89,669,756,771,823] -> [190]
[89,674,756,771,823] -> [190]
[90,669,756,771,823] -> [99,174,176]
[90,674,756,771,823] -> [99,174,176]
[91,669,756,771,823] -> [100,175,177]
[91,674,756,771,823] -> [100,175,177]
[95,275,785,823] -> [287,291]
[95,291,785,823] -> [275]
[95,785,823] -> [97,274,275,276,278,279,280,281,282,283,290]
[96,275,785,823] -> [288,292]
[96,292,785,823] -> [275]
[96,785,823] -> [98,274,275,276,278,279,280,281,282,283,289]
[97,785,823] -> [95]
[98,785,823] -> [96]
[99,173,669,756,771,823] -> [174]
[99,173,674,756,771,823] -> [174]
[99,669,756,771,823] -> [90,99,176]
[99,669,756,823] -> [99]
[99,674,756,771,823] -> [90,99,176]
[99,674,756,823] -> [99]
[99,756,823] -> [99]
[99,785,823] -> [79]
[99,823] -> [99]
[100,173,669,756,771,823] -> [175]
[100,173,674,756,771,823] -> [175]
[100,669,756,771,823] -> [91,100,177]
[100,669,756,823] -> [100]
[100,674,756,771,823] -> [91,100,177]
[100,674,756,823] -> [100]
[100,756,823] -> [100]
[100,785,823] -> [78]
[100,823] -> [100]
[101,669,756,771,823] -> [101]
[101,669,756,823] -> [101]
[101,674,756,771,823] -> [101]
[101,674,756,823] -> [101]
[101,756,823] -> [101]
[101,823] -> [101]
[173,174,669,756,771,823] -> [99]
[173,174,674,756,771,823] -> [99]
[173,175,669,756,771,823] -> [100]
[173,175,674,756,771,823] -> [100]
[173,669,683,756,771,823] -> [703,751]
[173,669,685,756,771,823] -> [705]
[173,669,705,756,771,823] -> [685]
[173,669,751,756,771,823] -> [683]
[173,669,756,771,823] -> [180,191,689,690,740,749,750]
[173,674,683,756,771,823] -> [703,751]
[173,674,685,756,771,823] -> [705]
[173,674,705,756,771,823] -> [685]
[173,674,751,756,771,823] -> [683]
[173,674,756,771,823] -> [180,191,689,690,740,749,750]
[174,669,756,771,823] -> [82,90]
[174,674,756,771,823] -> [82,90]
[175,669,756,771,823] -> [83,91]
[175,674,756,771,823] -> [83,91]
[176,669,756,771,823] -> [82,90,99]
[176,674,756,771,823] -> [82,90,99]
[177,669,756,771,823] -> [83,91,100]
[177,674,756,771,823] -> [83,91,100]
[180,183,669,756,771,823] -> [81]
[180,183,674,756,771,823] -> [81]
[180,669,756,771,823] -> [173]
[180,674,756,771,823] -> [173]
[183,669,756,771,823] -> [179,180]
[183,674,756,771,823] -> [179,180]
[184,669,756,771,823] -> [81]
[184,674,756,771,823] -> [81]
[188,669,756,771,823] -> [196]
[188,674,756,771,823] -> [196]
[189,669,756,771,823] -> [88]
[189,674,756,771,823] -> [88]
[190,669,756,771,823] -> [89]
[190,674,756,771,823] -> [89]
[191,196,669,756,771,823] -> [87]
[191,196,674,756,771,823] -> [87]
[191,197,669,756,771,823] -> [86]
[191,197,674,756,771,823] -> [86]
[191,198,669,756,771,823] -> [85]
[191,198,674,756,771,823] -> [85]
[191,669,756,771,823] -> [173]
[191,674,756,771,823] -> [173]
[196,669,756,771,823] -> [191]
[196,674,756,771,823] -> [191]
[197,669,756,771,823] -> [187,191]
[197,674,756,771,823] -> [187,191]
[198,669,756,771,823] -> [186,191]
[198,674,756,771,823] -> [186,191]
[199,669,756,771,823] -> [87]
[199,674,756,771,823] -> [87]
[200,669,756,771,823] -> [86]
[200,674,756,771,823] -> [86]
[201,669,756,771,823] -> [85]
[201,674,756,771,823] -> [85]
[282,669,756,771,823] -> [282]
[282,674,756,771,823] -> [282]
[282,823] -> [282]
[283,669,756,771,823] -> [283]
[283,674,756,771,823] -> [283]
[283,823] -> [283]
[285,785,823] -> [287]
[285,823] -> [54]
[286,785,823] -> [288]
[286,823] -> [55]
[287,669,756,823] -> [287]
[287,674,756,823] -> [287]
[287,756,823] -> [287]
[287,785,823] -> [285]
[287,823] -> [287]
[288,669,756,823] -> [288]
[288,674,756,823] -> [288]
[288,756,823] -> [288]
[288,785,823] -> [286]
[288,823] -> [288]
[289,785,823] -> [96]
[290,785,823] -> [95]
[291,669,756,771,823] -> [291]
[291,669,756,823] -> [291]
[291,674,756,771,823] -> [291]
[291,674,756,823] -> [291]
[291,756,823] -> [291]
[291,823] -> [291]
[292,669,756,823] -> [292]
[292,674,756,823] -> [292]
[292,756,823] -> [292]
[292,823] -> [292]
[294,756,823] -> [298,868]
[295,756,823] -> [74,757]
[296,756,823] -> [75,758]
[297,756,823] -> [76,759]
[298,756,823] -> [294]
[362,756,823] -> [66]
[363,756,823] -> [65]
[364,756,823] -> [63]
[365,756,823] -> [62]
[665] -> [824]
[665,823] -> [760]
[667,823] -> [767,792]
[667,839] -> [846]
[668,823] -> [768,791]
[668,839] -> [845]
[669,670,823] -> [760]
[669,671,823] -> [795]
[669,672,823] -> [796]
[669,683,756,771,823] -> [698,710,767,805]
[669,684,756,771,823] -> [685,767,804,806]
[669,685,756,771,823] -> [695,705]
[669,686,756,771,823] -> [768,803]
[669,689,756,771,823] -> [800]
[669,690,756,771,823] -> [801]
[669,693,756,771,823] -> [698]
[669,695,756,771,823] -> [685]
[669,698,756,771,823] -> [683]
[669,699,756,771,823] -> [87]
[669,700,756,771,823] -> [86]
[669,701,756,771,823] -> [85]
[669,703,756,771,823] -> [710]
[669,705,756,771,823] -> [685,706,753]
[669,710,756,771,823] -> [683]
[669,727,756,771,823] -> [87]
[669,728,756,771,823] -> [86]
[669,729,756,771,823] -> [85]
[669,740,756,771,823] -> [173]
[669,753,756,771,823] -> [705]
[669,756,757,823] -> [776]
[669,756,758,823] -> [777]
[669,756,759,823] -> [778]
[669,756,770,823] -> [767,768,799,800,801,802]
[669,756,771,800,823] -> [689]
[669,756,771,801,823] -> [690]
[669,756,771,803,823] -> [686]
[669,756,771,804,823] -> [684]
[669,756,771,805,823] -> [683]
[669,756,771,823] -> [80,84,92,93,101,170,171,172,178,181,182,185,192,193,194,195,202,274,275,276,278,279,280,281,282,283,291,682,684,686,696,697,704,705,707,708,709,711,712,713,714,717,718,719,720,721,726,730,731,732,733,734,735,739,741,742,743,744,745,746,747,748,752,753,798]
[669,756,776,823] -> [757]
[669,756,777,823] -> [758]
[669,756,778,823] -> [759]
[669,756,795,823] -> [800]
[669,756,796,823] -> [801]
[669,756,798,823] -> [771]
[669,756,799,823] -> [770]
[669,756,800,823] -> [795]
[669,756,801,823] -> [796]
[669,756,823] -> [769,793]
[669,760,823] -> [670]
[669,793,823] -> [756]
[669,795,823] -> [671]
[669,796,823] -> [672]
[669,823] -> [767,768,790,794,795,796,797]
[669,839] -> [844]
[670] -> [830]
[671] -> [831]
[672] -> [832]
[674,675,823] -> [760]
[674,676,823] -> [809]
[674,677,823] -> [810]
[674,683,756,771,823] -> [698,710,767,819]
[674,684,756,771,823] -> [685,767,818,820]
[674,685,756,771,823] -> [695,705]
[674,686,756,771,823] -> [768,817]
[674,689,756,771,823] -> [814]
[674,690,756,771,823] -> [815]
[674,693,756,771,823] -> [698]
[674,695,756,771,823] -> [685]
[674,698,756,771,823] -> [683]
[674,699,756,771,823] -> [87]
[674,700,756,771,823] -> [86]
[674,701,756,771,823] -> [85]
[674,703,756,771,823] -> [710]
[674,705,756,771,823] -> [685,706,753]
[674,710,756,771,823] -> [683]
[674,727,756,771,823] -> [87]
[674,728,756,771,823] -> [86]
[674,729,756,771,823] -> [85]
[674,740,756,771,823] -> [173]
[674,753,756,771,823] -> [705]
[674,756,757,823] -> [776]
[674,756,758,823] -> [777]
[674,756,759,823] -> [778]
[674,756,770,823] -> [767,768,813,814,815,816]
[674,756,771,814,823] -> [689]
[674,756,771,815,823] -> [690]
[674,756,771,817,823] -> [686]
[674,756,771,818,823] -> [684]
[674,756,771,819,823] -> [683]
[674,756,771,823] -> [80,84,92,93,101,170,171,172,178,181,182,185,192,193,194,195,202,274,275,276,278,279,280,281,282,283,291,682,684,686,696,697,704,705,707,708,709,711,712,713,714,717,718,719,720,721,726,730,731,732,733,734,735,739,741,742,743,744,745,746,747,748,752,753,812]
[674,756,776,823] -> [757]
[674,756,777,823] -> [758]
[674,756,778,823] -> [759]
[674,756,809,823] -> [814]
[674,756,810,823] -> [815]
[674,756,812,823] -> [771]
[674,756,813,823] -> [770]
[674,756,814,823] -> [809]
[674,756,815,823] -> [810]
[674,756,823] -> [769,807]
[674,760,823] -> [675]
[674,807,823] -> [756]
[674,809,823] -> [676]
[674,810,823] -> [677]
[674,823] -> [767,768,789,808,809,810,811]
[674,839] -> [843]
[675] -> [835]
[676] -> [836]
[677] -> [837]
[679] -> [824]
[679,823] -> [760]
[755,823] -> [867]
[756,757,823] -> [295]
[756,758,823] -> [296]
[756,759,823] -> [297]
[756,823] -> [61,293,765,779,866]
[756,823,868] -> [294]
[757,823] -> [74,762]
[758,823] -> [75,763]
[759,823] -> [76,764]
[760,823] -> [665,679,824]
[761,823] -> [765]
[762,823] -> [757]
[763,823] -> [758]
[764,823] -> [759]
[765,823] -> [756]
[769,823] -> [783]
[770,823] -> [67]
[771,823] -> [68]
[776,823] -> [71]
[777,823] -> [72]
[778,823] -> [73]
[779,783,823] -> [66]
[779,784,823] -> [65]
[779,785,823] -> [63]
[779,786,823] -> [62]
[779,823] -> [756]
[783,823] -> [779]
[784,823] -> [767,768,779]
[785,823] -> [77,94,284,779]
[786,823] -> [7,779]
[789,823] -> [674]
[790,823] -> [669]
[791,823] -> [668]
[792,823] -> [667]
[823] -> [664,666,754,755,766,780,781,782,787,788,825,829,831,832,834,836,837,839,849,856,864]
[823,824] -> [760,830,835]
[823,830] -> [824]
[823,835] -> [824]
[823,866] -> [756]
[823,867] -> [755]
[824] -> [665,679]
[825] -> [823]
[829] -> [844]
[830] -> [670]
[831] -> [671]
[832] -> [672]
[834] -> [843]
[835] -> [675]
[836] -> [676]
[837] -> [677]
[839] -> [823]
[839,843] -> [674]
[839,844] -> [669]
[839,845] -> [668]
[839,846] -> [667]
[843] -> [839]
[844] -> [839]
[845] -> [839]
[846] -> [839]
[849] -> [823]
[856] -> [823]
[864] -> [823]
[R] -> [869]

### Solution ###

[2,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,367,368,369,371,372,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,680,681,821,822,826,827,828,840,841,842,847,848,850,851,852,853,854,855,857,858,859,860,861,862,863,865,869,870,R]

### Annotated ###

  let
    postulate Nat :E: Type
    postulate Z :R: Nat
    postulate S :R: (n :R: Nat) -> Nat
    postulate Bool :E: Type
    postulate True :R: Bool
    postulate False :R: Bool
    postulate NList :E: Type
    postulate Nil :R: NList
    postulate Cons :R: (x :R: Nat) -> (xs :R: NList) -> NList
    someList :R: NList = Cons -R- 9 -R- (Cons -R- 5 -R- (Cons -R- 1 -R- (Cons -R- 3 -R- (Cons -R- 1 -R- (Cons -R- 5 -R- (Cons -R- 2 -R- Nil))))))
    Rel2 :E: (a :E: Type) -> Type = (\a :E: Type. (x :E: a) -> (y :E: a) -> Type)
    postulate Acc :E: (a :E: Type) -> (lt :E: Rel2 -E- a) -> (x :E: a) -> Type
    postulate MkAcc :E: (a :E: Type) -> (lt :E: Rel2 -E- a) -> (x :E: a) -> (acc :E: (y :E: a) -> (pf :E: lt -E- y -E- x) -> Acc -E- a -E- lt -E- y) -> Acc -E- a -E- lt -E- x
    postulate LE :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Type
    postulate LEZ :E: (n :E: Nat) -> LE -E- Z -E- n
    postulate LES :E: (m :E: Nat) -> (n :E: Nat) -> (_x2 :E: LE -E- m -E- n) -> LE -E- (S -E- m) -E- (S -E- n)
    LT :E: (x :E: Nat) -> (y :E: Nat) -> Type = (\x :E: Nat. (\y :E: Nat. LE -E- (S -E- x) -E- y))
    leRefl :E: (x :E: Nat) -> LE -E- x -E- x 
      [leRefl] -E- Z = LEZ -E- Z
      x :E: Nat
        [leRefl] -E- (S -E- x) = LES -E- x -E- x -E- (leRefl -E- x)
    leTrans :E: (x :E: Nat) -> (y :E: Nat) -> (z :E: Nat) -> (_x3 :E: LE -E- x -E- y) -> (_x4 :E: LE -E- y -E- z) -> LE -E- x -E- z 
      y :E: Nat z :E: Nat pf :E: LE -E- y -E- z
        [leTrans] -E- Z -E- y -E- z -E- ({LEZ} -E- [y]) -E- pf = LEZ -E- z
      x :E: Nat y :E: Nat z :E: Nat xLEy :E: LE -E- x -E- y yLEz :E: LE -E- y -E- z
        [leTrans] -E- (S -E- x) -E- (S -E- y) -E- (S -E- z) -E- ({LES} -E- [x] -E- [y] -E- xLEy) -E- ({LES} -E- [y] -E- [z] -E- yLEz) = LES -E- x -E- z -E- (leTrans -E- x -E- y -E- z -E- xLEy -E- yLEz)
    leS :E: (x :E: Nat) -> (y :E: Nat) -> (_x5 :E: LE -E- x -E- y) -> LE -E- x -E- (S -E- y) 
      y :E: Nat
        [leS] -E- Z -E- y -E- ({LEZ} -E- [y]) = LEZ -E- (S -E- y)
      x :E: Nat y :E: Nat xLEy :E: LE -E- x -E- y
        [leS] -E- (S -E- x) -E- (S -E- y) -E- ({LES} -E- [x] -E- [y] -E- xLEy) = LES -E- x -E- (S -E- y) -E- (leS -E- x -E- y -E- xLEy)
    lemmaLTZ :E: (a :E: Type) -> (n :E: Nat) -> (_x6 :E: LT -E- n -E- Z) -> a 
    wfLT :E: (x :E: Nat) -> Acc -E- Nat -E- LT -E- x = (\x :E: Nat. 
      let f :E: (x :E: Nat) -> (y :E: Nat) -> (_x7 :E: LT -E- y -E- x) -> Acc -E- Nat -E- LT -E- y 
        y :E: Nat pf :E: LT -E- y -E- Z
          [f] -E- Z -E- y -E- pf = lemmaLTZ -E- (Acc -E- Nat -E- LT -E- y) -E- y -E- pf
        x :E: Nat y :E: Nat yLEx :E: LE -E- y -E- x
          [f] -E- (S -E- x) -E- y -E- ({LES} -E- [y] -E- [x] -E- yLEx) = MkAcc -E- Nat -E- LT -E- y -E- (\z :E: Nat. (\zLTy :E: LT -E- z -E- y. f -E- x -E- z -E- (leTrans -E- (S -E- z) -E- y -E- x -E- zLTy -E- yLEx)))
      in MkAcc -E- Nat -E- LT -E- x -E- (f -E- x))
    length :E: (_x8 :E: NList) -> Nat 
      [length] -E- Nil = Z
      x :E: Nat xs :E: NList
        [length] -E- (Cons -E- x -E- xs) = S -E- (length -E- xs)
    Shorter :E: (xs :E: NList) -> (ys :E: NList) -> Type = (\xs :E: NList. (\ys :E: NList. LT -E- (length -E- xs) -E- (length -E- ys)))
    wfShorter :E: (xs :E: NList) -> Acc -E- NList -E- Shorter -E- xs = (\xs :E: NList. 
      let f :E: (xs :E: NList) -> (ys :E: NList) -> (_x9 :E: Shorter -E- ys -E- xs) -> Acc -E- NList -E- Shorter -E- ys 
        ys :E: NList pf :E: Shorter -E- ys -E- Nil
          [f] -E- Nil -E- ys -E- pf = lemmaLTZ -E- (Acc -E- NList -E- Shorter -E- ys) -E- (length -E- ys) -E- pf
        x :E: Nat xs :E: NList ys :E: NList yLEx :E: LE -E- (length -E- ys) -E- (length -E- xs)
          [f] -E- (Cons -E- x -E- xs) -E- ys -E- ({LES} -E- [length -E- ys] -E- [length -E- xs] -E- yLEx) = MkAcc -E- NList -E- Shorter -E- ys -E- (\zs :E: NList. (\zLTy :E: LT -E- (length -E- zs) -E- (length -E- ys). f -E- xs -E- zs -E- (leTrans -E- (S -E- (length -E- zs)) -E- (length -E- ys) -E- (length -E- xs) -E- zLTy -E- yLEx)))
      in MkAcc -E- NList -E- Shorter -E- xs -E- (f -E- xs))
    leq :R: (_x10 :R: Nat) -> (_x11 :R: Nat) -> Bool 
      y :E: Nat
        [leq] -R- Z -R- y = True
      x :E: Nat
        [leq] -R- (S -R- x) -R- Z = False
      x :R: Nat y :R: Nat
        [leq] -R- (S -R- x) -R- (S -R- y) = leq -R- x -R- y
    not :R: (_x12 :R: Bool) -> Bool 
      [not] -R- True = False
      [not] -R- False = True
    qel :R: (y :R: Nat) -> (x :R: Nat) -> Bool = (\y :R: Nat. (\x :R: Nat. leq -R- x -R- y))
    gt :R: (x :R: Nat) -> (y :R: Nat) -> Bool = (\x :R: Nat. (\y :R: Nat. not -R- (leq -R- y -R- x)))
    condCons :R: (_x13 :R: Bool) -> (_x14 :R: Nat) -> (_x15 :R: NList) -> NList 
      [condCons] -R- True = Cons
      [condCons] -R- False = (\x :R: Nat. (\xs :R: NList. xs))
    filter :R: (_x16 :R: (_x17 :R: Nat) -> Bool) -> (_x18 :R: NList) -> NList 
      p :E: (_x19 :R: Nat) -> Bool
        [filter] -R- p -R- Nil = Nil
      p :R: (_x20 :R: Nat) -> Bool x :R: Nat xs :R: NList
        [filter] -R- p -R- (Cons -R- x -R- xs) = condCons -R- (p -R- x) -R- x -R- (filter -R- p -R- xs)
    append :R: (_x21 :R: NList) -> (_x22 :R: NList) -> NList 
      ys :R: NList
        [append] -R- Nil -R- ys = ys
      x :R: Nat xs :R: NList ys :R: NList
        [append] -R- (Cons -R- x -R- xs) -R- ys = Cons -R- x -R- (append -R- xs -R- ys)
    postulate Id :E: (a :E: Type) -> (_x23 :E: a) -> (_x24 :E: a) -> Type
    postulate Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    postulate Split :E: (_x25 :E: NList) -> Type
    postulate SNil :E: Split -E- Nil
    postulate SOne :E: (x :E: Nat) -> Split -E- (Cons -E- x -E- Nil)
    postulate SMore :E: (x :E: Nat) -> (xs :E: NList) -> (y :E: Nat) -> (ys :E: NList) -> Split -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys))
    pushL :E: (x :E: Nat) -> (xs :E: NList) -> (_x26 :E: Split -E- xs) -> Split -E- (Cons -E- x -E- xs) 
      x :E: Nat
        [pushL] -E- x -E- [Nil] -E- SNil = SOne -E- x
      x :E: Nat y :E: Nat
        [pushL] -E- x -E- [Cons -E- y -E- Nil] -E- (SOne -E- y) = SMore -E- x -E- Nil -E- y -E- Nil
      x :E: Nat y :E: Nat ys :E: NList z :E: Nat zs :E: NList
        [pushL] -E- x -E- [append -E- (Cons -E- y -E- ys) -E- (Cons -E- z -E- zs)] -E- (SMore -E- y -E- ys -E- z -E- zs) = SMore -E- x -E- (Cons -E- y -E- ys) -E- z -E- zs
    split :E: (xs :E: NList) -> Split -E- xs 
      [split] -E- Nil = SNil
      x :E: Nat
        [split] -E- (Cons -E- x -E- Nil) = SOne -E- x
      x :E: Nat y :E: Nat xs :E: NList
        [split] -E- (Cons -E- x -E- (Cons -E- y -E- xs)) = 
          let step :E: (counter :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (xs :E: NList) -> Split -E- (Cons -E- x -E- (Cons -E- y -E- xs)) 
            x :E: Nat y :E: Nat xs :E: NList
              [step] -E- Z -E- x -E- y -E- xs = SMore -E- x -E- Nil -E- y -E- xs
            x :E: Nat y :E: Nat xs :E: NList
              [step] -E- (S -E- Z) -E- x -E- y -E- xs = SMore -E- x -E- Nil -E- y -E- xs
            c :E: Nat x :E: Nat y :E: Nat
              [step] -E- (S -E- (S -E- c)) -E- x -E- y -E- Nil = SMore -E- x -E- Nil -E- y -E- Nil
            c :E: Nat x :E: Nat y :E: Nat z :E: Nat xs :E: NList
              [step] -E- (S -E- (S -E- c)) -E- x -E- y -E- (Cons -E- z -E- xs) = pushL -E- x -E- (Cons -E- y -E- (Cons -E- z -E- xs)) -E- (step -E- c -E- y -E- z -E- xs)
          in step -E- (S -E- (length -E- xs)) -E- x -E- y -E- xs
    merge :E: (_x27 :E: NList) -> (_x28 :E: NList) -> NList 
      ys :E: NList
        [merge] -E- Nil -E- ys = ys
      xs :E: NList
        [merge] -E- xs -E- Nil = xs
      x :E: Nat xs :E: NList y :E: Nat ys :E: NList
        [merge] -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys) = 
          let f :E: (_x29 :E: Bool) -> NList 
            [f] -E- True = Cons -E- x -E- (merge -E- xs -E- (Cons -E- y -E- ys))
            [f] -E- False = Cons -E- y -E- (merge -E- (Cons -E- x -E- xs) -E- ys)
          in f -E- (leq -E- x -E- y)
    postulate QSortAcc :E: (_x0 :E: NList) -> Type
    postulate QNil :E: QSortAcc -E- Nil
    postulate QCons :E: (x :E: Nat) -> (xs :E: NList) -> (_x1 :E: QSortAcc -E- (filter -E- (qel -E- x) -E- xs)) -> (_x2 :E: QSortAcc -E- (filter -E- (gt -E- x) -E- xs)) -> QSortAcc -E- (Cons -R- x -R- xs)
    flemma :E: (x :E: Nat) -> (p :E: (_x3 :E: Nat) -> Bool) -> (xs :E: NList) -> Shorter -E- (filter -E- p -E- xs) -E- (Cons -E- x -E- xs) 
      x :E: Nat p :E: (_x4 :E: Nat) -> Bool
        [flemma] -E- x -E- p -E- Nil = LES -E- Z -E- Z -E- (LEZ -E- Z)
      x :E: Nat p :E: (_x5 :E: Nat) -> Bool y :E: Nat ys :E: NList
        [flemma] -E- x -E- p -E- (Cons -E- y -E- ys) = 
          let f :E: (py :E: Bool) -> Shorter -E- (condCons -E- py -E- y -E- (filter -E- p -E- ys)) -E- (Cons -E- x -E- (Cons -E- y -E- ys)) 
            [f] -E- True = LES -E- (S -E- (length -E- (filter -E- p -E- ys))) -E- (S -E- (length -E- ys)) -E- (flemma -E- x -E- p -E- ys)
            [f] -E- False = leS -E- (S -E- (length -E- (filter -E- p -E- ys))) -E- (S -E- (length -E- ys)) -E- (flemma -E- x -E- p -E- ys)
          in f -E- (p -E- y)
    qsortAcc :E: (xs :E: NList) -> (_x6 :E: Acc -E- NList -E- Shorter -E- xs) -> QSortAcc -E- xs 
      acc :E: Acc -E- NList -E- Shorter -E- Nil
        [qsortAcc] -E- Nil -E- acc = QNil
      x :E: Nat xs :E: NList acc :E: (ys :E: NList) -> (_x7 :E: Shorter -E- ys -E- (Cons -E- x -E- xs)) -> Acc -E- NList -E- Shorter -E- ys
        [qsortAcc] -E- (Cons -E- x -E- xs) -E- ({MkAcc} -E- [NList] -E- [Shorter] -E- [Cons -E- x -E- xs] -E- acc) = QCons -E- x -E- xs -E- (qsortAcc -E- (filter -E- (qel -E- x) -E- xs) -E- (acc -E- (filter -E- (qel -E- x) -E- xs) -E- (flemma -E- x -E- (qel -E- x) -E- xs))) -E- (qsortAcc -E- (filter -E- (gt -E- x) -E- xs) -E- (acc -E- (filter -E- (gt -E- x) -E- xs) -E- (flemma -E- x -E- (gt -E- x) -E- xs)))
    qsort' :R: (xs :R: NList) -> (_x8 :E: QSortAcc -E- xs) -> NList 
      [qsort'] -R- Nil -E- {QNil} = Nil
      x :R: Nat xs :R: NList lo :E: QSortAcc -E- (filter -E- (qel -E- x) -E- xs) hi :E: QSortAcc -E- (filter -E- (gt -E- x) -E- xs)
        [qsort'] -R- (Cons -R- x -R- xs) -E- ({QCons} -E- [x] -E- [xs] -E- lo -E- hi) = append -R- (qsort' -R- (filter -R- (qel -R- x) -R- xs) -E- lo) -R- (Cons -R- x -R- (qsort' -R- (filter -R- (gt -R- x) -R- xs) -E- hi))
    qsort :R: (xs :R: NList) -> NList = (\xs :R: NList. qsort' -R- xs -E- (qsortAcc -E- xs -E- (wfShorter -E- xs)))
    main :R: NList = qsort -R- someList
  in main

### Specialised ###

  let
    postulate Nat :E: Type
    postulate Z :R: Nat
    postulate S :R: (n :R: Nat) -> Nat
    postulate Bool :E: Type
    postulate True :R: Bool
    postulate False :R: Bool
    postulate NList :E: Type
    postulate Nil :R: NList
    postulate Cons :R: (x :R: Nat) -> (xs :R: NList) -> NList
    someList :R: NList = Cons -R- 9 -R- (Cons -R- 5 -R- (Cons -R- 1 -R- (Cons -R- 3 -R- (Cons -R- 1 -R- (Cons -R- 5 -R- (Cons -R- 2 -R- Nil))))))
    Rel2 :E: (a :E: Type) -> Type = (\a :E: Type. (x :E: a) -> (y :E: a) -> Type)
    postulate Acc :E: (a :E: Type) -> (lt :E: Rel2 -E- a) -> (x :E: a) -> Type
    postulate MkAcc :E: (a :E: Type) -> (lt :E: Rel2 -E- a) -> (x :E: a) -> (acc :E: (y :E: a) -> (pf :E: lt -E- y -E- x) -> Acc -E- a -E- lt -E- y) -> Acc -E- a -E- lt -E- x
    postulate LE :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Type
    postulate LEZ :E: (n :E: Nat) -> LE -E- Z -E- n
    postulate LES :E: (m :E: Nat) -> (n :E: Nat) -> (_x2 :E: LE -E- m -E- n) -> LE -E- (S -E- m) -E- (S -E- n)
    LT :E: (x :E: Nat) -> (y :E: Nat) -> Type = (\x :E: Nat. (\y :E: Nat. LE -E- (S -E- x) -E- y))
    leRefl :E: (x :E: Nat) -> LE -E- x -E- x 
      [leRefl] -E- Z = LEZ -E- Z
      x :E: Nat
        [leRefl] -E- (S -E- x) = LES -E- x -E- x -E- (leRefl -E- x)
    leTrans :E: (x :E: Nat) -> (y :E: Nat) -> (z :E: Nat) -> (_x3 :E: LE -E- x -E- y) -> (_x4 :E: LE -E- y -E- z) -> LE -E- x -E- z 
      y :E: Nat z :E: Nat pf :E: LE -E- y -E- z
        [leTrans] -E- Z -E- y -E- z -E- ({LEZ} -E- [y]) -E- pf = LEZ -E- z
      x :E: Nat y :E: Nat z :E: Nat xLEy :E: LE -E- x -E- y yLEz :E: LE -E- y -E- z
        [leTrans] -E- (S -E- x) -E- (S -E- y) -E- (S -E- z) -E- ({LES} -E- [x] -E- [y] -E- xLEy) -E- ({LES} -E- [y] -E- [z] -E- yLEz) = LES -E- x -E- z -E- (leTrans -E- x -E- y -E- z -E- xLEy -E- yLEz)
    leS :E: (x :E: Nat) -> (y :E: Nat) -> (_x5 :E: LE -E- x -E- y) -> LE -E- x -E- (S -E- y) 
      y :E: Nat
        [leS] -E- Z -E- y -E- ({LEZ} -E- [y]) = LEZ -E- (S -E- y)
      x :E: Nat y :E: Nat xLEy :E: LE -E- x -E- y
        [leS] -E- (S -E- x) -E- (S -E- y) -E- ({LES} -E- [x] -E- [y] -E- xLEy) = LES -E- x -E- (S -E- y) -E- (leS -E- x -E- y -E- xLEy)
    lemmaLTZ :E: (a :E: Type) -> (n :E: Nat) -> (_x6 :E: LT -E- n -E- Z) -> a 
    wfLT :E: (x :E: Nat) -> Acc -E- Nat -E- LT -E- x = (\x :E: Nat. 
      let f :E: (x :E: Nat) -> (y :E: Nat) -> (_x7 :E: LT -E- y -E- x) -> Acc -E- Nat -E- LT -E- y 
        y :E: Nat pf :E: LT -E- y -E- Z
          [f] -E- Z -E- y -E- pf = lemmaLTZ -E- (Acc -E- Nat -E- LT -E- y) -E- y -E- pf
        x :E: Nat y :E: Nat yLEx :E: LE -E- y -E- x
          [f] -E- (S -E- x) -E- y -E- ({LES} -E- [y] -E- [x] -E- yLEx) = MkAcc -E- Nat -E- LT -E- y -E- (\z :E: Nat. (\zLTy :E: LT -E- z -E- y. f -E- x -E- z -E- (leTrans -E- (S -E- z) -E- y -E- x -E- zLTy -E- yLEx)))
      in MkAcc -E- Nat -E- LT -E- x -E- (f -E- x))
    length :E: (_x8 :E: NList) -> Nat 
      [length] -E- Nil = Z
      x :E: Nat xs :E: NList
        [length] -E- (Cons -E- x -E- xs) = S -E- (length -E- xs)
    Shorter :E: (xs :E: NList) -> (ys :E: NList) -> Type = (\xs :E: NList. (\ys :E: NList. LT -E- (length -E- xs) -E- (length -E- ys)))
    wfShorter :E: (xs :E: NList) -> Acc -E- NList -E- Shorter -E- xs = (\xs :E: NList. 
      let f :E: (xs :E: NList) -> (ys :E: NList) -> (_x9 :E: Shorter -E- ys -E- xs) -> Acc -E- NList -E- Shorter -E- ys 
        ys :E: NList pf :E: Shorter -E- ys -E- Nil
          [f] -E- Nil -E- ys -E- pf = lemmaLTZ -E- (Acc -E- NList -E- Shorter -E- ys) -E- (length -E- ys) -E- pf
        x :E: Nat xs :E: NList ys :E: NList yLEx :E: LE -E- (length -E- ys) -E- (length -E- xs)
          [f] -E- (Cons -E- x -E- xs) -E- ys -E- ({LES} -E- [length -E- ys] -E- [length -E- xs] -E- yLEx) = MkAcc -E- NList -E- Shorter -E- ys -E- (\zs :E: NList. (\zLTy :E: LT -E- (length -E- zs) -E- (length -E- ys). f -E- xs -E- zs -E- (leTrans -E- (S -E- (length -E- zs)) -E- (length -E- ys) -E- (length -E- xs) -E- zLTy -E- yLEx)))
      in MkAcc -E- NList -E- Shorter -E- xs -E- (f -E- xs))
    leq :R: (_x10 :R: Nat) -> (_x11 :R: Nat) -> Bool 
      y :E: Nat
        [leq] -R- Z -R- y = True
      x :E: Nat
        [leq] -R- (S -R- x) -R- Z = False
      x :R: Nat y :R: Nat
        [leq] -R- (S -R- x) -R- (S -R- y) = leq -R- x -R- y
    not :R: (_x12 :R: Bool) -> Bool 
      [not] -R- True = False
      [not] -R- False = True
    qel :R: (y :R: Nat) -> (x :R: Nat) -> Bool = (\y :R: Nat. (\x :R: Nat. leq -R- x -R- y))
    gt :R: (x :R: Nat) -> (y :R: Nat) -> Bool = (\x :R: Nat. (\y :R: Nat. not -R- (leq -R- y -R- x)))
    condCons :R: (_x13 :R: Bool) -> (_x14 :R: Nat) -> (_x15 :R: NList) -> NList 
      [condCons] -R- True = Cons
      [condCons] -R- False = (\x :R: Nat. (\xs :R: NList. xs))
    filter :R: (_x16 :R: (_x17 :R: Nat) -> Bool) -> (_x18 :R: NList) -> NList 
      p :E: (_x19 :R: Nat) -> Bool
        [filter] -R- p -R- Nil = Nil
      p :R: (_x20 :R: Nat) -> Bool x :R: Nat xs :R: NList
        [filter] -R- p -R- (Cons -R- x -R- xs) = condCons -R- (p -R- x) -R- x -R- (filter -R- p -R- xs)
    append :R: (_x21 :R: NList) -> (_x22 :R: NList) -> NList 
      ys :R: NList
        [append] -R- Nil -R- ys = ys
      x :R: Nat xs :R: NList ys :R: NList
        [append] -R- (Cons -R- x -R- xs) -R- ys = Cons -R- x -R- (append -R- xs -R- ys)
    postulate Id :E: (a :E: Type) -> (_x23 :E: a) -> (_x24 :E: a) -> Type
    postulate Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    postulate Split :E: (_x25 :E: NList) -> Type
    postulate SNil :E: Split -E- Nil
    postulate SOne :E: (x :E: Nat) -> Split -E- (Cons -E- x -E- Nil)
    postulate SMore :E: (x :E: Nat) -> (xs :E: NList) -> (y :E: Nat) -> (ys :E: NList) -> Split -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys))
    pushL :E: (x :E: Nat) -> (xs :E: NList) -> (_x26 :E: Split -E- xs) -> Split -E- (Cons -E- x -E- xs) 
      x :E: Nat
        [pushL] -E- x -E- [Nil] -E- SNil = SOne -E- x
      x :E: Nat y :E: Nat
        [pushL] -E- x -E- [Cons -E- y -E- Nil] -E- (SOne -E- y) = SMore -E- x -E- Nil -E- y -E- Nil
      x :E: Nat y :E: Nat ys :E: NList z :E: Nat zs :E: NList
        [pushL] -E- x -E- [append -E- (Cons -E- y -E- ys) -E- (Cons -E- z -E- zs)] -E- (SMore -E- y -E- ys -E- z -E- zs) = SMore -E- x -E- (Cons -E- y -E- ys) -E- z -E- zs
    split :E: (xs :E: NList) -> Split -E- xs 
      [split] -E- Nil = SNil
      x :E: Nat
        [split] -E- (Cons -E- x -E- Nil) = SOne -E- x
      x :E: Nat y :E: Nat xs :E: NList
        [split] -E- (Cons -E- x -E- (Cons -E- y -E- xs)) = 
          let step :E: (counter :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (xs :E: NList) -> Split -E- (Cons -E- x -E- (Cons -E- y -E- xs)) 
            x :E: Nat y :E: Nat xs :E: NList
              [step] -E- Z -E- x -E- y -E- xs = SMore -E- x -E- Nil -E- y -E- xs
            x :E: Nat y :E: Nat xs :E: NList
              [step] -E- (S -E- Z) -E- x -E- y -E- xs = SMore -E- x -E- Nil -E- y -E- xs
            c :E: Nat x :E: Nat y :E: Nat
              [step] -E- (S -E- (S -E- c)) -E- x -E- y -E- Nil = SMore -E- x -E- Nil -E- y -E- Nil
            c :E: Nat x :E: Nat y :E: Nat z :E: Nat xs :E: NList
              [step] -E- (S -E- (S -E- c)) -E- x -E- y -E- (Cons -E- z -E- xs) = pushL -E- x -E- (Cons -E- y -E- (Cons -E- z -E- xs)) -E- (step -E- c -E- y -E- z -E- xs)
          in step -E- (S -E- (length -E- xs)) -E- x -E- y -E- xs
    merge :E: (_x27 :E: NList) -> (_x28 :E: NList) -> NList 
      ys :E: NList
        [merge] -E- Nil -E- ys = ys
      xs :E: NList
        [merge] -E- xs -E- Nil = xs
      x :E: Nat xs :E: NList y :E: Nat ys :E: NList
        [merge] -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys) = 
          let f :E: (_x29 :E: Bool) -> NList 
            [f] -E- True = Cons -E- x -E- (merge -E- xs -E- (Cons -E- y -E- ys))
            [f] -E- False = Cons -E- y -E- (merge -E- (Cons -E- x -E- xs) -E- ys)
          in f -E- (leq -E- x -E- y)
    postulate QSortAcc :E: (_x0 :E: NList) -> Type
    postulate QNil :E: QSortAcc -E- Nil
    postulate QCons :E: (x :E: Nat) -> (xs :E: NList) -> (_x1 :E: QSortAcc -E- (filter -E- (qel -E- x) -E- xs)) -> (_x2 :E: QSortAcc -E- (filter -E- (gt -E- x) -E- xs)) -> QSortAcc -E- (Cons -R- x -R- xs)
    flemma :E: (x :E: Nat) -> (p :E: (_x3 :E: Nat) -> Bool) -> (xs :E: NList) -> Shorter -E- (filter -E- p -E- xs) -E- (Cons -E- x -E- xs) 
      x :E: Nat p :E: (_x4 :E: Nat) -> Bool
        [flemma] -E- x -E- p -E- Nil = LES -E- Z -E- Z -E- (LEZ -E- Z)
      x :E: Nat p :E: (_x5 :E: Nat) -> Bool y :E: Nat ys :E: NList
        [flemma] -E- x -E- p -E- (Cons -E- y -E- ys) = 
          let f :E: (py :E: Bool) -> Shorter -E- (condCons -E- py -E- y -E- (filter -E- p -E- ys)) -E- (Cons -E- x -E- (Cons -E- y -E- ys)) 
            [f] -E- True = LES -E- (S -E- (length -E- (filter -E- p -E- ys))) -E- (S -E- (length -E- ys)) -E- (flemma -E- x -E- p -E- ys)
            [f] -E- False = leS -E- (S -E- (length -E- (filter -E- p -E- ys))) -E- (S -E- (length -E- ys)) -E- (flemma -E- x -E- p -E- ys)
          in f -E- (p -E- y)
    qsortAcc :E: (xs :E: NList) -> (_x6 :E: Acc -E- NList -E- Shorter -E- xs) -> QSortAcc -E- xs 
      acc :E: Acc -E- NList -E- Shorter -E- Nil
        [qsortAcc] -E- Nil -E- acc = QNil
      x :E: Nat xs :E: NList acc :E: (ys :E: NList) -> (_x7 :E: Shorter -E- ys -E- (Cons -E- x -E- xs)) -> Acc -E- NList -E- Shorter -E- ys
        [qsortAcc] -E- (Cons -E- x -E- xs) -E- ({MkAcc} -E- [NList] -E- [Shorter] -E- [Cons -E- x -E- xs] -E- acc) = QCons -E- x -E- xs -E- (qsortAcc -E- (filter -E- (qel -E- x) -E- xs) -E- (acc -E- (filter -E- (qel -E- x) -E- xs) -E- (flemma -E- x -E- (qel -E- x) -E- xs))) -E- (qsortAcc -E- (filter -E- (gt -E- x) -E- xs) -E- (acc -E- (filter -E- (gt -E- x) -E- xs) -E- (flemma -E- x -E- (gt -E- x) -E- xs)))
    qsort' :R: (xs :R: NList) -> (_x8 :E: QSortAcc -E- xs) -> NList 
      [qsort'] -R- Nil -E- {QNil} = Nil
      x :R: Nat xs :R: NList lo :E: QSortAcc -E- (filter -E- (qel -E- x) -E- xs) hi :E: QSortAcc -E- (filter -E- (gt -E- x) -E- xs)
        [qsort'] -R- (Cons -R- x -R- xs) -E- ({QCons} -E- [x] -E- [xs] -E- lo -E- hi) = append -R- (qsort' -R- (filter -R- (qel -R- x) -R- xs) -E- lo) -R- (Cons -R- x -R- (qsort' -R- (filter -R- (gt -R- x) -R- xs) -E- hi))
    qsort :R: (xs :R: NList) -> NList = (\xs :R: NList. qsort' -R- xs -E- (qsortAcc -E- xs -E- (wfShorter -E- xs)))
    main :R: NList = qsort -R- someList
  in main

### Final annotation ###

  let
    postulate Nat :E: Type
    postulate Z :R: Nat
    postulate S :R: (n :R: Nat) -> Nat
    postulate Bool :E: Type
    postulate True :R: Bool
    postulate False :R: Bool
    postulate NList :E: Type
    postulate Nil :R: NList
    postulate Cons :R: (x :R: Nat) -> (xs :R: NList) -> NList
    someList :R: NList = Cons -R- 9 -R- (Cons -R- 5 -R- (Cons -R- 1 -R- (Cons -R- 3 -R- (Cons -R- 1 -R- (Cons -R- 5 -R- (Cons -R- 2 -R- Nil))))))
    Rel2 :E: (a :E: Type) -> Type = (\a :E: Type. (x :E: a) -> (y :E: a) -> Type)
    postulate Acc :E: (a :E: Type) -> (lt :E: Rel2 -E- a) -> (x :E: a) -> Type
    postulate MkAcc :E: (a :E: Type) -> (lt :E: Rel2 -E- a) -> (x :E: a) -> (acc :E: (y :E: a) -> (pf :E: lt -E- y -E- x) -> Acc -E- a -E- lt -E- y) -> Acc -E- a -E- lt -E- x
    postulate LE :E: (_x0 :E: Nat) -> (_x1 :E: Nat) -> Type
    postulate LEZ :E: (n :E: Nat) -> LE -E- Z -E- n
    postulate LES :E: (m :E: Nat) -> (n :E: Nat) -> (_x2 :E: LE -E- m -E- n) -> LE -E- (S -E- m) -E- (S -E- n)
    LT :E: (x :E: Nat) -> (y :E: Nat) -> Type = (\x :E: Nat. (\y :E: Nat. LE -E- (S -E- x) -E- y))
    leRefl :E: (x :E: Nat) -> LE -E- x -E- x 
      [leRefl] -E- Z = LEZ -E- Z
      x :E: Nat
        [leRefl] -E- (S -E- x) = LES -E- x -E- x -E- (leRefl -E- x)
    leTrans :E: (x :E: Nat) -> (y :E: Nat) -> (z :E: Nat) -> (_x3 :E: LE -E- x -E- y) -> (_x4 :E: LE -E- y -E- z) -> LE -E- x -E- z 
      y :E: Nat z :E: Nat pf :E: LE -E- y -E- z
        [leTrans] -E- Z -E- y -E- z -E- ({LEZ} -E- [y]) -E- pf = LEZ -E- z
      x :E: Nat y :E: Nat z :E: Nat xLEy :E: LE -E- x -E- y yLEz :E: LE -E- y -E- z
        [leTrans] -E- (S -E- x) -E- (S -E- y) -E- (S -E- z) -E- ({LES} -E- [x] -E- [y] -E- xLEy) -E- ({LES} -E- [y] -E- [z] -E- yLEz) = LES -E- x -E- z -E- (leTrans -E- x -E- y -E- z -E- xLEy -E- yLEz)
    leS :E: (x :E: Nat) -> (y :E: Nat) -> (_x5 :E: LE -E- x -E- y) -> LE -E- x -E- (S -E- y) 
      y :E: Nat
        [leS] -E- Z -E- y -E- ({LEZ} -E- [y]) = LEZ -E- (S -E- y)
      x :E: Nat y :E: Nat xLEy :E: LE -E- x -E- y
        [leS] -E- (S -E- x) -E- (S -E- y) -E- ({LES} -E- [x] -E- [y] -E- xLEy) = LES -E- x -E- (S -E- y) -E- (leS -E- x -E- y -E- xLEy)
    lemmaLTZ :E: (a :E: Type) -> (n :E: Nat) -> (_x6 :E: LT -E- n -E- Z) -> a 
    wfLT :E: (x :E: Nat) -> Acc -E- Nat -E- LT -E- x = (\x :E: Nat. 
      let f :E: (x :E: Nat) -> (y :E: Nat) -> (_x7 :E: LT -E- y -E- x) -> Acc -E- Nat -E- LT -E- y 
        y :E: Nat pf :E: LT -E- y -E- Z
          [f] -E- Z -E- y -E- pf = lemmaLTZ -E- (Acc -E- Nat -E- LT -E- y) -E- y -E- pf
        x :E: Nat y :E: Nat yLEx :E: LE -E- y -E- x
          [f] -E- (S -E- x) -E- y -E- ({LES} -E- [y] -E- [x] -E- yLEx) = MkAcc -E- Nat -E- LT -E- y -E- (\z :E: Nat. (\zLTy :E: LT -E- z -E- y. f -E- x -E- z -E- (leTrans -E- (S -E- z) -E- y -E- x -E- zLTy -E- yLEx)))
      in MkAcc -E- Nat -E- LT -E- x -E- (f -E- x))
    length :E: (_x8 :E: NList) -> Nat 
      [length] -E- Nil = Z
      x :E: Nat xs :E: NList
        [length] -E- (Cons -E- x -E- xs) = S -E- (length -E- xs)
    Shorter :E: (xs :E: NList) -> (ys :E: NList) -> Type = (\xs :E: NList. (\ys :E: NList. LT -E- (length -E- xs) -E- (length -E- ys)))
    wfShorter :E: (xs :E: NList) -> Acc -E- NList -E- Shorter -E- xs = (\xs :E: NList. 
      let f :E: (xs :E: NList) -> (ys :E: NList) -> (_x9 :E: Shorter -E- ys -E- xs) -> Acc -E- NList -E- Shorter -E- ys 
        ys :E: NList pf :E: Shorter -E- ys -E- Nil
          [f] -E- Nil -E- ys -E- pf = lemmaLTZ -E- (Acc -E- NList -E- Shorter -E- ys) -E- (length -E- ys) -E- pf
        x :E: Nat xs :E: NList ys :E: NList yLEx :E: LE -E- (length -E- ys) -E- (length -E- xs)
          [f] -E- (Cons -E- x -E- xs) -E- ys -E- ({LES} -E- [length -E- ys] -E- [length -E- xs] -E- yLEx) = MkAcc -E- NList -E- Shorter -E- ys -E- (\zs :E: NList. (\zLTy :E: LT -E- (length -E- zs) -E- (length -E- ys). f -E- xs -E- zs -E- (leTrans -E- (S -E- (length -E- zs)) -E- (length -E- ys) -E- (length -E- xs) -E- zLTy -E- yLEx)))
      in MkAcc -E- NList -E- Shorter -E- xs -E- (f -E- xs))
    leq :R: (_x10 :R: Nat) -> (_x11 :R: Nat) -> Bool 
      y :E: Nat
        [leq] -R- Z -R- y = True
      x :E: Nat
        [leq] -R- (S -R- x) -R- Z = False
      x :R: Nat y :R: Nat
        [leq] -R- (S -R- x) -R- (S -R- y) = leq -R- x -R- y
    not :R: (_x12 :R: Bool) -> Bool 
      [not] -R- True = False
      [not] -R- False = True
    qel :R: (y :R: Nat) -> (x :R: Nat) -> Bool = (\y :R: Nat. (\x :R: Nat. leq -R- x -R- y))
    gt :R: (x :R: Nat) -> (y :R: Nat) -> Bool = (\x :R: Nat. (\y :R: Nat. not -R- (leq -R- y -R- x)))
    condCons :R: (_x13 :R: Bool) -> (_x14 :R: Nat) -> (_x15 :R: NList) -> NList 
      [condCons] -R- True = Cons
      [condCons] -R- False = (\x :R: Nat. (\xs :R: NList. xs))
    filter :R: (_x16 :R: (_x17 :R: Nat) -> Bool) -> (_x18 :R: NList) -> NList 
      p :E: (_x19 :R: Nat) -> Bool
        [filter] -R- p -R- Nil = Nil
      p :R: (_x20 :R: Nat) -> Bool x :R: Nat xs :R: NList
        [filter] -R- p -R- (Cons -R- x -R- xs) = condCons -R- (p -R- x) -R- x -R- (filter -R- p -R- xs)
    append :R: (_x21 :R: NList) -> (_x22 :R: NList) -> NList 
      ys :R: NList
        [append] -R- Nil -R- ys = ys
      x :R: Nat xs :R: NList ys :R: NList
        [append] -R- (Cons -R- x -R- xs) -R- ys = Cons -R- x -R- (append -R- xs -R- ys)
    postulate Id :E: (a :E: Type) -> (_x23 :E: a) -> (_x24 :E: a) -> Type
    postulate Refl :E: (a :E: Type) -> (x :E: a) -> Id -E- a -E- x -E- x
    postulate Split :E: (_x25 :E: NList) -> Type
    postulate SNil :E: Split -E- Nil
    postulate SOne :E: (x :E: Nat) -> Split -E- (Cons -E- x -E- Nil)
    postulate SMore :E: (x :E: Nat) -> (xs :E: NList) -> (y :E: Nat) -> (ys :E: NList) -> Split -E- (append -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys))
    pushL :E: (x :E: Nat) -> (xs :E: NList) -> (_x26 :E: Split -E- xs) -> Split -E- (Cons -E- x -E- xs) 
      x :E: Nat
        [pushL] -E- x -E- [Nil] -E- SNil = SOne -E- x
      x :E: Nat y :E: Nat
        [pushL] -E- x -E- [Cons -E- y -E- Nil] -E- (SOne -E- y) = SMore -E- x -E- Nil -E- y -E- Nil
      x :E: Nat y :E: Nat ys :E: NList z :E: Nat zs :E: NList
        [pushL] -E- x -E- [append -E- (Cons -E- y -E- ys) -E- (Cons -E- z -E- zs)] -E- (SMore -E- y -E- ys -E- z -E- zs) = SMore -E- x -E- (Cons -E- y -E- ys) -E- z -E- zs
    split :E: (xs :E: NList) -> Split -E- xs 
      [split] -E- Nil = SNil
      x :E: Nat
        [split] -E- (Cons -E- x -E- Nil) = SOne -E- x
      x :E: Nat y :E: Nat xs :E: NList
        [split] -E- (Cons -E- x -E- (Cons -E- y -E- xs)) = 
          let step :E: (counter :E: Nat) -> (x :E: Nat) -> (y :E: Nat) -> (xs :E: NList) -> Split -E- (Cons -E- x -E- (Cons -E- y -E- xs)) 
            x :E: Nat y :E: Nat xs :E: NList
              [step] -E- Z -E- x -E- y -E- xs = SMore -E- x -E- Nil -E- y -E- xs
            x :E: Nat y :E: Nat xs :E: NList
              [step] -E- (S -E- Z) -E- x -E- y -E- xs = SMore -E- x -E- Nil -E- y -E- xs
            c :E: Nat x :E: Nat y :E: Nat
              [step] -E- (S -E- (S -E- c)) -E- x -E- y -E- Nil = SMore -E- x -E- Nil -E- y -E- Nil
            c :E: Nat x :E: Nat y :E: Nat z :E: Nat xs :E: NList
              [step] -E- (S -E- (S -E- c)) -E- x -E- y -E- (Cons -E- z -E- xs) = pushL -E- x -E- (Cons -E- y -E- (Cons -E- z -E- xs)) -E- (step -E- c -E- y -E- z -E- xs)
          in step -E- (S -E- (length -E- xs)) -E- x -E- y -E- xs
    merge :E: (_x27 :E: NList) -> (_x28 :E: NList) -> NList 
      ys :E: NList
        [merge] -E- Nil -E- ys = ys
      xs :E: NList
        [merge] -E- xs -E- Nil = xs
      x :E: Nat xs :E: NList y :E: Nat ys :E: NList
        [merge] -E- (Cons -E- x -E- xs) -E- (Cons -E- y -E- ys) = 
          let f :E: (_x29 :E: Bool) -> NList 
            [f] -E- True = Cons -E- x -E- (merge -E- xs -E- (Cons -E- y -E- ys))
            [f] -E- False = Cons -E- y -E- (merge -E- (Cons -E- x -E- xs) -E- ys)
          in f -E- (leq -E- x -E- y)
    postulate QSortAcc :E: (_x0 :E: NList) -> Type
    postulate QNil :E: QSortAcc -E- Nil
    postulate QCons :E: (x :E: Nat) -> (xs :E: NList) -> (_x1 :E: QSortAcc -E- (filter -E- (qel -E- x) -E- xs)) -> (_x2 :E: QSortAcc -E- (filter -E- (gt -E- x) -E- xs)) -> QSortAcc -E- (Cons -R- x -R- xs)
    flemma :E: (x :E: Nat) -> (p :E: (_x3 :E: Nat) -> Bool) -> (xs :E: NList) -> Shorter -E- (filter -E- p -E- xs) -E- (Cons -E- x -E- xs) 
      x :E: Nat p :E: (_x4 :E: Nat) -> Bool
        [flemma] -E- x -E- p -E- Nil = LES -E- Z -E- Z -E- (LEZ -E- Z)
      x :E: Nat p :E: (_x5 :E: Nat) -> Bool y :E: Nat ys :E: NList
        [flemma] -E- x -E- p -E- (Cons -E- y -E- ys) = 
          let f :E: (py :E: Bool) -> Shorter -E- (condCons -E- py -E- y -E- (filter -E- p -E- ys)) -E- (Cons -E- x -E- (Cons -E- y -E- ys)) 
            [f] -E- True = LES -E- (S -E- (length -E- (filter -E- p -E- ys))) -E- (S -E- (length -E- ys)) -E- (flemma -E- x -E- p -E- ys)
            [f] -E- False = leS -E- (S -E- (length -E- (filter -E- p -E- ys))) -E- (S -E- (length -E- ys)) -E- (flemma -E- x -E- p -E- ys)
          in f -E- (p -E- y)
    qsortAcc :E: (xs :E: NList) -> (_x6 :E: Acc -E- NList -E- Shorter -E- xs) -> QSortAcc -E- xs 
      acc :E: Acc -E- NList -E- Shorter -E- Nil
        [qsortAcc] -E- Nil -E- acc = QNil
      x :E: Nat xs :E: NList acc :E: (ys :E: NList) -> (_x7 :E: Shorter -E- ys -E- (Cons -E- x -E- xs)) -> Acc -E- NList -E- Shorter -E- ys
        [qsortAcc] -E- (Cons -E- x -E- xs) -E- ({MkAcc} -E- [NList] -E- [Shorter] -E- [Cons -E- x -E- xs] -E- acc) = QCons -E- x -E- xs -E- (qsortAcc -E- (filter -E- (qel -E- x) -E- xs) -E- (acc -E- (filter -E- (qel -E- x) -E- xs) -E- (flemma -E- x -E- (qel -E- x) -E- xs))) -E- (qsortAcc -E- (filter -E- (gt -E- x) -E- xs) -E- (acc -E- (filter -E- (gt -E- x) -E- xs) -E- (flemma -E- x -E- (gt -E- x) -E- xs)))
    qsort' :R: (xs :R: NList) -> (_x8 :E: QSortAcc -E- xs) -> NList 
      [qsort'] -R- Nil -E- {QNil} = Nil
      x :R: Nat xs :R: NList lo :E: QSortAcc -E- (filter -E- (qel -E- x) -E- xs) hi :E: QSortAcc -E- (filter -E- (gt -E- x) -E- xs)
        [qsort'] -R- (Cons -R- x -R- xs) -E- ({QCons} -E- [x] -E- [xs] -E- lo -E- hi) = append -R- (qsort' -R- (filter -R- (qel -R- x) -R- xs) -E- lo) -R- (Cons -R- x -R- (qsort' -R- (filter -R- (gt -R- x) -R- xs) -E- hi))
    qsort :R: (xs :R: NList) -> NList = (\xs :R: NList. qsort' -R- xs -E- (qsortAcc -E- xs -E- (wfShorter -E- xs)))
    main :R: NList = qsort -R- someList
  in main

### Verification ###

Verification successful.

### Pruned ###

  let
    postulate Z : Nat
    postulate S : (n) -> Nat
    postulate True : Bool
    postulate False : Bool
    postulate Nil : NList
    postulate Cons : (x) -> (xs) -> NList
    someList = Cons 9 (Cons 5 (Cons 1 (Cons 3 (Cons 1 (Cons 5 (Cons 2 Nil))))))
    leq 
      [_] Z _ = True
      [_] (S _) Z = False
      [_] (S x) (S y) = leq x y
    not 
      [_] True = False
      [_] False = True
    qel = (\y. (\x. leq x y))
    gt = (\x. (\y. not (leq y x)))
    condCons 
      [_] True = Cons
      [_] False = (\x. (\xs. xs))
    filter 
      [_] _ Nil = Nil
      [_] p (Cons x xs) = condCons (p x) x (filter p xs)
    append 
      [_] Nil ys = ys
      [_] (Cons x xs) ys = Cons x (append xs ys)
    qsort' 
      [_] Nil = Nil
      [_] (Cons x xs) = append (qsort' (filter (qel x) xs)) (Cons x (qsort' (filter (gt x) xs)))
    qsort = (\xs. qsort' xs)
    main = qsort someList
  in main

### Normal forms ###

unerased:
  
  let
    postulate Nat : Type
    postulate Z : Nat
    postulate S : (n :R: Nat) -> Nat
    postulate NList : Type
    postulate Nil : NList
    postulate Cons : (x :R: Nat) -> (xs :R: NList) -> NList
  in Cons 1 (Cons 1 (Cons 2 (Cons 3 (Cons 5 (Cons 5 (Cons 9 Nil))))))

erased:
  
  let
    postulate Z : Nat
    postulate S : (n) -> Nat
    postulate Nil : NList
    postulate Cons : (x) -> (xs) -> NList
  in Cons 1 (Cons 1 (Cons 2 (Cons 3 (Cons 5 (Cons 5 (Cons 9 Nil))))))

